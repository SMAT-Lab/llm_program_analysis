{
    "type": "module",
    "label": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import combinations\n\n\ndef combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]\n\n\ndef generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must not be negative\")\n    if n < 0:\n        raise ValueError(\"n must not be negative\")\n\n    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result\n\n\ndef create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:\n    if level == 0:\n        total_list.append(current_list[:])\n        return\n\n    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(generate_all_combinations(n=4, k=2))\n    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n\n    print(\"Benchmark:\")\n    from timeit import timeit\n\n    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")\n",
    "children": [
        {
            "type": "expression_statement",
            "label": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"",
            "children": [
                {
                    "type": "string",
                    "label": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"",
                    "children": [
                        {
                            "type": "string_start",
                            "label": "\"\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "future_import_statement",
            "label": "from __future__ import annotations",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "annotations",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "annotations",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from itertools import combinations",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "itertools",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "itertools",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "combinations",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "combinations",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]",
            "children": [
                {
                    "type": "identifier",
                    "label": "combination_lists",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(n: int, k: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "k: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "k",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "list[list[int]]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "list",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[list[int]]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[int]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[int]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return [list(x) for x in combinations(range(1, n + 1), k)]",
                            "children": [
                                {
                                    "type": "list_comprehension",
                                    "label": "[list(x) for x in combinations(range(1, n + 1), k)]",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "list(x)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(x)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "x",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_in_clause",
                                            "label": "for x in combinations(range(1, n + 1), k)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "x",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "combinations(range(1, n + 1), k)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "combinations",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(range(1, n + 1), k)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "range(1, n + 1)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "range",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(1, n + 1)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "1",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "n + 1",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "n",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "integer",
                                                                                            "label": "1",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "k",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must not be negative\")\n    if n < 0:\n        raise ValueError(\"n must not be negative\")\n\n    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result",
            "children": [
                {
                    "type": "identifier",
                    "label": "generate_all_combinations",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(n: int, k: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "k: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "k",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "list[list[int]]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "list",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[list[int]]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[int]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[int]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must not be negative\")\n    if n < 0:\n        raise ValueError(\"n must not be negative\")\n\n    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if k < 0:\n        raise ValueError(\"k must not be negative\")",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "k < 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "k",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\"k must not be negative\")",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\"k must not be negative\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\"k must not be negative\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"k must not be negative\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"k must not be negative\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "k must not be negative",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if n < 0:\n        raise ValueError(\"n must not be negative\")",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "n < 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "n",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\"n must not be negative\")",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\"n must not be negative\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\"n must not be negative\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"n must not be negative\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"n must not be negative\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "n must not be negative",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "result: list[list[int]] = []",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "result: list[list[int]] = []",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "result",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "list[list[int]]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[list[int]]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[list[int]]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "list[int]",
                                                                    "children": [
                                                                        {
                                                                            "type": "generic_type",
                                                                            "label": "list[int]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "list",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "type_parameter",
                                                                                    "label": "[int]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "int",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "int",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "list",
                                            "label": "[]",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "create_all_state(1, n, k, [], result)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "create_all_state(1, n, k, [], result)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "create_all_state",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(1, n, k, [], result)",
                                            "children": [
                                                {
                                                    "type": "integer",
                                                    "label": "1",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "n",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "k",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "label": "[]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "result",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return result",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "result",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:\n    if level == 0:\n        total_list.append(current_list[:])\n        return\n\n    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
            "children": [
                {
                    "type": "identifier",
                    "label": "create_all_state",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "increment: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "increment",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "total_number: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "total_number",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "level: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "level",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "current_list: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "current_list",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "total_list: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "total_list",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[list[int]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[list[int]]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "list[int]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "list[int]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[int]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "int",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "int",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if level == 0:\n        total_list.append(current_list[:])\n        return\n\n    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if level == 0:\n        total_list.append(current_list[:])\n        return",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "level == 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "level",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "total_list.append(current_list[:])\n        return",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "total_list.append(current_list[:])",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "total_list.append(current_list[:])",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "total_list.append",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "total_list",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(current_list[:])",
                                                            "children": [
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "current_list[:]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "current_list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "slice",
                                                                            "label": ":",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "i",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "range(increment, total_number - level + 2)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(increment, total_number - level + 2)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "increment",
                                                    "children": []
                                                },
                                                {
                                                    "type": "binary_operator",
                                                    "label": "total_number - level + 2",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "total_number - level",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "total_number",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "level",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "2",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "current_list.append(i)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "current_list.append(i)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "current_list.append",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "current_list",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(i)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "i",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "create_all_state(i + 1, total_number, level - 1, current_list, total_list)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "create_all_state(i + 1, total_number, level - 1, current_list, total_list)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "create_all_state",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(i + 1, total_number, level - 1, current_list, total_list)",
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "i + 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "i",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "total_number",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "level - 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "level",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "current_list",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "total_list",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "current_list.pop()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "current_list.pop()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "current_list.pop",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "current_list",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "pop",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(generate_all_combinations(n=4, k=2))\n    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n\n    print(\"Benchmark:\")\n    from timeit import timeit\n\n    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "from doctest import testmod\n\n    testmod()\n    print(generate_all_combinations(n=4, k=2))\n    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n\n    print(\"Benchmark:\")\n    from timeit import timeit\n\n    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                    "children": [
                        {
                            "type": "import_from_statement",
                            "label": "from doctest import testmod",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "dotted_name",
                                    "label": "testmod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "testmod",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "testmod()",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "testmod",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "print(generate_all_combinations(n=4, k=2))",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "print(generate_all_combinations(n=4, k=2))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "print",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(generate_all_combinations(n=4, k=2))",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "generate_all_combinations(n=4, k=2)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "generate_all_combinations",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(n=4, k=2)",
                                                            "children": [
                                                                {
                                                                    "type": "keyword_argument",
                                                                    "label": "n=4",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "n",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "4",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "keyword_argument",
                                                                    "label": "k=2",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "k",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "2",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "tests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "tests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "tests",
                                            "children": []
                                        },
                                        {
                                            "type": "generator_expression",
                                            "label": "((n, k) for n in range(1, 5) for k in range(1, 5))",
                                            "children": [
                                                {
                                                    "type": "tuple",
                                                    "label": "(n, k)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "k",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "for_in_clause",
                                                    "label": "for n in range(1, 5)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "range(1, 5)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "range",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(1, 5)",
                                                                    "children": [
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "5",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "for_in_clause",
                                                    "label": "for k in range(1, 5)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "k",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "range(1, 5)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "range",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(1, 5)",
                                                                    "children": [
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "5",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                            "children": [
                                {
                                    "type": "pattern_list",
                                    "label": "n, k",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "n",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "k",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "identifier",
                                    "label": "tests",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "print",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "n",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "k",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "generate_all_combinations(n, k) == combination_lists(n, k)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "generate_all_combinations(n, k)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "generate_all_combinations",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(n, k)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "n",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "k",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "combination_lists(n, k)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "combination_lists",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(n, k)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "n",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "k",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "print(\"Benchmark:\")",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "print(\"Benchmark:\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "print",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(\"Benchmark:\")",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"Benchmark:\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Benchmark:",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "import_from_statement",
                            "label": "from timeit import timeit",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "timeit",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "timeit",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "dotted_name",
                                    "label": "timeit",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "timeit",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "func",
                                    "children": []
                                },
                                {
                                    "type": "tuple",
                                    "label": "(\"combination_lists\", \"generate_all_combinations\")",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"combination_lists\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "combination_lists",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"generate_all_combinations\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "generate_all_combinations",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "print",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{func:>25}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "func",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "format_specifier",
                                                                                    "label": ":>25",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "(): ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{timeit(f'{func}(n=4, k = 2)', globals=globals())}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "timeit(f'{func}(n=4, k = 2)', globals=globals())",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "timeit",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(f'{func}(n=4, k = 2)', globals=globals())",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "f'{func}(n=4, k = 2)'",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "f'",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{func}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "func",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "(n=4, k = 2)",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "'",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "keyword_argument",
                                                                                                    "label": "globals=globals()",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "globals",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "globals()",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "globals",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "()",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}