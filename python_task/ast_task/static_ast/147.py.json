{
    "type": "module",
    "label": "# -*- coding: utf-8 -*-\n\n\nclass QueryApi(object):\n\n    def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster\n\n    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...\n\n    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results\n\n\nclass Node(object):\n\n    def __init__(self, query, results):\n        self.query = query\n        self.results = results\n\n\nclass LinkedList(object):\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def move_to_front(self, node):\n        ...\n\n    def append_to_front(self, node):\n        ...\n\n    def remove_from_tail(self):\n        ...\n\n\nclass Cache(object):\n\n    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()\n\n    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results\n\n    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node\n",
    "children": [
        {
            "type": "comment",
            "label": "# -*- coding: utf-8 -*-",
            "children": []
        },
        {
            "type": "class_definition",
            "label": "class QueryApi(object):\n\n    def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster\n\n    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...\n\n    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results",
            "children": [
                {
                    "type": "identifier",
                    "label": "QueryApi",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster\n\n    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...\n\n    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, memory_cache, reverse_index_cluster)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "memory_cache",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "reverse_index_cluster",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.memory_cache = memory_cache",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.memory_cache = memory_cache",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.memory_cache",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "memory_cache",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "memory_cache",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.reverse_index_cluster = reverse_index_cluster",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.reverse_index_cluster = reverse_index_cluster",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.reverse_index_cluster",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "reverse_index_cluster",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "reverse_index_cluster",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "parse_query",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, query)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "query",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        ",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "...",
                                            "children": [
                                                {
                                                    "type": "ellipsis",
                                                    "label": "...",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "process_query",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, query)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "query",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "query = self.parse_query(query)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "query = self.parse_query(query)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "query",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "self.parse_query(query)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.parse_query",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "parse_query",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(query)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "query",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "results = self.memory_cache.get(query)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "results = self.memory_cache.get(query)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "results",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "self.memory_cache.get(query)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.memory_cache.get",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.memory_cache",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "memory_cache",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "get",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(query)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "query",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "results is None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "results",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "results = self.reverse_index_cluster.process_search(query)",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "results = self.reverse_index_cluster.process_search(query)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "results",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "self.reverse_index_cluster.process_search(query)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.reverse_index_cluster.process_search",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.reverse_index_cluster",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "reverse_index_cluster",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "process_search",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(query)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "query",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "self.memory_cache.set(query, results)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.memory_cache.set(query, results)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.memory_cache.set",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.memory_cache",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "memory_cache",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "set",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(query, results)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "query",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "results",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return results",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "results",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Node(object):\n\n    def __init__(self, query, results):\n        self.query = query\n        self.results = results",
            "children": [
                {
                    "type": "identifier",
                    "label": "Node",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, query, results):\n        self.query = query\n        self.results = results",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, query, results):\n        self.query = query\n        self.results = results",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, query, results)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "query",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "results",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.query = query\n        self.results = results",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.query = query",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.query = query",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.query",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "query",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "query",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.results = results",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.results = results",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.results",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "results",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "results",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class LinkedList(object):\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def move_to_front(self, node):\n        ...\n\n    def append_to_front(self, node):\n        ...\n\n    def remove_from_tail(self):\n        ...",
            "children": [
                {
                    "type": "identifier",
                    "label": "LinkedList",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def move_to_front(self, node):\n        ...\n\n    def append_to_front(self, node):\n        ...\n\n    def remove_from_tail(self):\n        ...",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self):\n        self.head = None\n        self.tail = None",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.head = None\n        self.tail = None",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.head = None",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.head = None",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.head",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "head",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.tail = None",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.tail = None",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.tail",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "tail",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def move_to_front(self, node):\n        ...",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "move_to_front",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, node)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "node",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "...",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "...",
                                            "children": [
                                                {
                                                    "type": "ellipsis",
                                                    "label": "...",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def append_to_front(self, node):\n        ...",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "append_to_front",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, node)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "node",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "...",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "...",
                                            "children": [
                                                {
                                                    "type": "ellipsis",
                                                    "label": "...",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def remove_from_tail(self):\n        ...",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "remove_from_tail",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "...",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "...",
                                            "children": [
                                                {
                                                    "type": "ellipsis",
                                                    "label": "...",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Cache(object):\n\n    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()\n\n    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results\n\n    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
            "children": [
                {
                    "type": "identifier",
                    "label": "Cache",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()\n\n    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results\n\n    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, MAX_SIZE)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "MAX_SIZE",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.MAX_SIZE = MAX_SIZE",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.MAX_SIZE = MAX_SIZE",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.MAX_SIZE",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "MAX_SIZE",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "MAX_SIZE",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.size = 0",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.size = 0",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.size",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "size",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.lookup = {}",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.lookup = {}",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.lookup",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "lookup",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "dictionary",
                                                            "label": "{}",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.linked_list = LinkedList()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.linked_list = LinkedList()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.linked_list",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "linked_list",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "LinkedList()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "LinkedList",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "get",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, query)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "query",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        ",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "node = self.lookup[query]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "node = self.lookup[query]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "node",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "subscript",
                                                            "label": "self.lookup[query]",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.lookup",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "lookup",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "query",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if node is None:\n            return None",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "node is None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "node",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return None",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return None",
                                                            "children": [
                                                                {
                                                                    "type": "none",
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.linked_list.move_to_front(node)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.linked_list.move_to_front(node)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.linked_list.move_to_front",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.linked_list",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "linked_list",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "move_to_front",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(node)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "node",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return node.results",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "node.results",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "node",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "results",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "set",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, results, query)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "results",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "query",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        ",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "node = self.map[query]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "node = self.map[query]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "node",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "subscript",
                                                            "label": "self.map[query]",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.map",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "map",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "query",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "node is not None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "node",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "comment",
                                                    "label": "# Key exists in cache, update the value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "node.results = results\n            self.linked_list.move_to_front(node)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "node.results = results",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "node.results = results",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "node.results",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "node",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "results",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "results",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "self.linked_list.move_to_front(node)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.linked_list.move_to_front(node)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.linked_list.move_to_front",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.linked_list",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "linked_list",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "move_to_front",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(node)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "node",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "label": "else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "label": "# Key does not exist in cache",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "label": "if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "self.size == self.MAX_SIZE",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.size",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "size",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.MAX_SIZE",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "MAX_SIZE",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "comment",
                                                                            "label": "# Remove the oldest entry from the linked list and lookup",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.lookup.pop(self.linked_list.tail.query, None)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.lookup.pop(self.linked_list.tail.query, None)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.lookup.pop",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.lookup",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "lookup",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "pop",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(self.linked_list.tail.query, None)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.linked_list.tail.query",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "self.linked_list.tail",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "self.linked_list",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "self",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "linked_list",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "tail",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "query",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "none",
                                                                                                            "label": "None",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.linked_list.remove_from_tail()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.linked_list.remove_from_tail()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.linked_list.remove_from_tail",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.linked_list",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "linked_list",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "remove_from_tail",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "()",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "else_clause",
                                                                            "label": "else:\n                self.size += 1",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "self.size += 1",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "label": "self.size += 1",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "augmented_assignment",
                                                                                                    "label": "self.size += 1",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.size",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "size",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "integer",
                                                                                                            "label": "1",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "comment",
                                                                    "label": "# Add the new key and value",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "new_node = Node(query, results)",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "new_node = Node(query, results)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "new_node",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "Node(query, results)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "Node",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(query, results)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "query",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "results",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "self.linked_list.append_to_front(new_node)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "self.linked_list.append_to_front(new_node)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.linked_list.append_to_front",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.linked_list",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "linked_list",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "append_to_front",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(new_node)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "new_node",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "self.lookup[query] = new_node",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "self.lookup[query] = new_node",
                                                                            "children": [
                                                                                {
                                                                                    "type": "subscript",
                                                                                    "label": "self.lookup[query]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.lookup",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "lookup",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "query",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "new_node",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}