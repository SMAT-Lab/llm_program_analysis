{
    "type": "module",
    "label": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum\n\n\nclass State(Enum):\n    unvisited = 0\n    visited = 1\n\n\nclass Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\n\n\nclass Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n\n\nclass LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n\n\nclass PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n\n\nclass UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n",
    "children": [
        {
            "type": "comment",
            "label": "# -*- coding: utf-8 -*-",
            "children": []
        },
        {
            "type": "import_from_statement",
            "label": "from collections import deque",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "collections",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "collections",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "deque",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "deque",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from enum import Enum",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class State(Enum):\n    unvisited = 0\n    visited = 1",
            "children": [
                {
                    "type": "identifier",
                    "label": "State",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Enum)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "unvisited = 0\n    visited = 1",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "unvisited = 0",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "unvisited = 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "unvisited",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "visited = 1",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "visited = 1",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "visited",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "1",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
            "children": [
                {
                    "type": "identifier",
                    "label": "Graph",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "bfs",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, source, dest)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "source",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "dest",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if source is None:\n            return False",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "source is None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "source",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return False",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return False",
                                                            "children": [
                                                                {
                                                                    "type": "false",
                                                                    "label": "False",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "queue = deque()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "queue = deque()",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "queue",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "deque()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "deque",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "queue.append(source)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "queue.append(source)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "queue.append",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "queue",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(source)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "source",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "source.visit_state = State.visited",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "source.visit_state = State.visited",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "source.visit_state",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "source",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "visit_state",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "label": "State.visited",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "State",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "visited",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "while_statement",
                                            "label": "while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "queue",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "node = queue.popleft()",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "node = queue.popleft()",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "node",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "queue.popleft()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "queue.popleft",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "queue",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "popleft",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "print(node)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "print(node)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "print",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(node)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "node",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if dest is node:\n                return True",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "dest is node",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "dest",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "node",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return True",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return True",
                                                                            "children": [
                                                                                {
                                                                                    "type": "true",
                                                                                    "label": "True",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "for_statement",
                                                            "label": "for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "adjacent_node",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "node.adj_nodes.values()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "node.adj_nodes.values",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "node.adj_nodes",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "node",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "adj_nodes",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "values",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "adjacent_node.visit_state == State.unvisited",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "adjacent_node.visit_state",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "adjacent_node",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "visit_state",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "State.unvisited",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "State",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "unvisited",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "label": "queue.append(adjacent_node)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "queue.append(adjacent_node)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "queue.append",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "queue",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "append",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(adjacent_node)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "adjacent_node",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "label": "adjacent_node.visit_state = State.visited",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "assignment",
                                                                                                    "label": "adjacent_node.visit_state = State.visited",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "adjacent_node.visit_state",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "adjacent_node",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "visit_state",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "State.visited",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "State",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "visited",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return False",
                                            "children": [
                                                {
                                                    "type": "false",
                                                    "label": "False",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
            "children": [
                {
                    "type": "identifier",
                    "label": "Person",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, id, name)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "id",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "name",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.id = id\n        self.name = name\n        self.friend_ids = []",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.id = id",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.id = id",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.id",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "id",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "id",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.name = name",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.name = name",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.name",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "name",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "name",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.friend_ids = []",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.friend_ids = []",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.friend_ids",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "friend_ids",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
            "children": [
                {
                    "type": "identifier",
                    "label": "LookupService",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.lookup = {}  # key: person_id, value: person_server",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.lookup = {}",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.lookup = {}",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.lookup",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "lookup",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "dictionary",
                                                            "label": "{}",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# key: person_id, value: person_server",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "get_person",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, person_id)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "person_id",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "person_server = self.lookup[person_id]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "person_server = self.lookup[person_id]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "person_server",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "subscript",
                                                            "label": "self.lookup[person_id]",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.lookup",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "lookup",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "person_id",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return person_server.people[person_id]",
                                            "children": [
                                                {
                                                    "type": "subscript",
                                                    "label": "person_server.people[person_id]",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "person_server.people",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "person_server",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "people",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "person_id",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
            "children": [
                {
                    "type": "identifier",
                    "label": "PersonServer",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self):\n        self.people = {}  # key: person_id, value: person",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.people = {}  # key: person_id, value: person",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.people = {}",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.people = {}",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.people",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "people",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "dictionary",
                                                            "label": "{}",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# key: person_id, value: person",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "get_people",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, ids)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "ids",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "results = []",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "results = []",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "results",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for id in ids:\n            if id in self.people:\n                results.append(self.people[id])",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "id",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "ids",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if id in self.people:\n                results.append(self.people[id])",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if id in self.people:\n                results.append(self.people[id])",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "id in self.people",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "id",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.people",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "people",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "results.append(self.people[id])",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "results.append(self.people[id])",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "results.append(self.people[id])",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "results.append",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "results",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "append",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(self.people[id])",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "subscript",
                                                                                                    "label": "self.people[id]",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.people",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "people",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "id",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return results",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "results",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "UserGraphService",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, person_ids, lookup)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "person_ids",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "lookup",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.lookup = lookup",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.lookup = lookup",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.lookup",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "lookup",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "lookup",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.person_ids = person_ids",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.person_ids = person_ids",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.person_ids",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "person_ids",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "person_ids",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.visited_ids = set()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.visited_ids = set()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.visited_ids",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "visited_ids",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "set()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "set",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "bfs",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, source, dest)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "source",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "dest",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# Use self.visited_ids to track visited nodes",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# Use self.lookup to translate a person_id to a Person",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "pass",
                                    "children": [
                                        {
                                            "type": "pass_statement",
                                            "label": "pass",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}