{
    "type": "module",
    "label": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key\n\n\nclass JSONCryptor:\n    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())\n",
    "children": [
        {
            "type": "import_statement",
            "label": "import json",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "json",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "json",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from typing import Optional",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Optional",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Optional",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from cryptography.fernet import Fernet",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "cryptography.fernet",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "cryptography",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "fernet",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Fernet",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Fernet",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.util.settings import Settings",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.util.settings",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "util",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "settings",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Settings",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Settings",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "ENCRYPTION_KEY = Settings().secrets.encryption_key",
            "children": [
                {
                    "type": "assignment",
                    "label": "ENCRYPTION_KEY = Settings().secrets.encryption_key",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ENCRYPTION_KEY",
                            "children": []
                        },
                        {
                            "type": "attribute",
                            "label": "Settings().secrets.encryption_key",
                            "children": [
                                {
                                    "type": "attribute",
                                    "label": "Settings().secrets",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "Settings()",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Settings",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "()",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "secrets",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "identifier",
                                    "label": "encryption_key",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class JSONCryptor:\n    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
            "children": [
                {
                    "type": "identifier",
                    "label": "JSONCryptor",
                    "children": []
                },
                {
                    "type": "block",
                    "label": "def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, key: Optional[str] = None)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "key: Optional[str] = None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "key",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Optional[str]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Optional[str]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Optional",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[str]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "str",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "str",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "none",
                                                    "label": "None",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# Use provided key or get from environment",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.key = key or ENCRYPTION_KEY",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.key = key or ENCRYPTION_KEY",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.key",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "key",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "key or ENCRYPTION_KEY",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "key",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "ENCRYPTION_KEY",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                                            "children": [
                                                {
                                                    "type": "not_operator",
                                                    "label": "not self.key",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.key",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "key",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "label": "raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "ValueError",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "Encryption key must be provided or set in ENCRYPTION_KEY environment variable",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.fernet",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "fernet",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Fernet",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "conditional_expression",
                                                                            "label": "self.key.encode() if isinstance(self.key, str) else self.key",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "self.key.encode()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.key.encode",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.key",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "self",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "key",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "encode",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "isinstance(self.key, str)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "isinstance",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(self.key, str)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.key",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "self",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "key",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "str",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.key",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "key",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "encrypt",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, data: dict)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "data: dict",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "data",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "dict",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Encrypt dictionary data to string\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Encrypt dictionary data to string\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Encrypt dictionary data to string",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "json_str = json.dumps(data)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "json_str = json.dumps(data)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "json_str",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "json.dumps(data)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "json.dumps",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "json",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "dumps",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(data)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "data",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "encrypted = self.fernet.encrypt(json_str.encode())",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "encrypted = self.fernet.encrypt(json_str.encode())",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "encrypted",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "self.fernet.encrypt(json_str.encode())",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.fernet.encrypt",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.fernet",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "fernet",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "encrypt",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(json_str.encode())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "json_str.encode()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "json_str.encode",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "json_str",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "encode",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return encrypted.decode()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "encrypted.decode()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "encrypted.decode",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "encrypted",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "decode",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "decrypt",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, encrypted_str: str)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "encrypted_str: str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "encrypted_str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "str",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "dict",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "dict",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Decrypt string to dictionary\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Decrypt string to dictionary\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Decrypt string to dictionary",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if not encrypted_str:\n            return {}",
                                            "children": [
                                                {
                                                    "type": "not_operator",
                                                    "label": "not encrypted_str",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "encrypted_str",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return {}",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return {}",
                                                            "children": [
                                                                {
                                                                    "type": "dictionary",
                                                                    "label": "{}",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "decrypted = self.fernet.decrypt(encrypted_str.encode())",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "decrypted = self.fernet.decrypt(encrypted_str.encode())",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "decrypted",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "self.fernet.decrypt(encrypted_str.encode())",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.fernet.decrypt",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.fernet",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "fernet",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "decrypt",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(encrypted_str.encode())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "encrypted_str.encode()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "encrypted_str.encode",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "encrypted_str",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "encode",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return json.loads(decrypted.decode())",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "json.loads(decrypted.decode())",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "json.loads",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "json",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "loads",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(decrypted.decode())",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "decrypted.decode()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "decrypted.decode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "decrypted",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "decode",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}