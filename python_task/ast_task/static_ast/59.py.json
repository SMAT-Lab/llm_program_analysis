{
    "type": "module",
    "label": "import logging\nimport time\nfrom typing import Sequence\n\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\n\nlog = logging.getLogger(__name__)\n\n\nclass SpinTestServer:\n    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )\n\n\nasync def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"\n\n\ndef execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )\n",
    "children": [
        {
            "type": "import_statement",
            "label": "import logging",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "logging",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "logging",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import time",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "time",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "time",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from typing import Sequence",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Sequence",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Sequence",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.data import db",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.data",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "data",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "db",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "db",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.data.block import Block, initialize_blocks",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.data.block",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "data",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "block",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Block",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Block",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "initialize_blocks",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "initialize_blocks",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.data.execution import ExecutionResult, ExecutionStatus",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.data.execution",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "data",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "execution",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ExecutionResult",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ExecutionResult",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ExecutionStatus",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ExecutionStatus",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.data.model import CREDENTIALS_FIELD_NAME",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.data.model",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "data",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "model",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "CREDENTIALS_FIELD_NAME",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "CREDENTIALS_FIELD_NAME",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.data.user import create_default_user",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.data.user",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "data",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "user",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "create_default_user",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "create_default_user",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.executor",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "executor",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "DatabaseManager",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "DatabaseManager",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ExecutionManager",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ExecutionManager",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ExecutionScheduler",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ExecutionScheduler",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.server.rest_api import AgentServer",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.server.rest_api",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "server",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "rest_api",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "AgentServer",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "AgentServer",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.server.utils import get_user_id",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.server.utils",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "server",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "utils",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "get_user_id",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "get_user_id",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "log = logging.getLogger(__name__)",
            "children": [
                {
                    "type": "assignment",
                    "label": "log = logging.getLogger(__name__)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "log",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "logging.getLogger(__name__)",
                            "children": [
                                {
                                    "type": "attribute",
                                    "label": "logging.getLogger",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "logging",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "getLogger",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(__name__)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "__name__",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class SpinTestServer:\n    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
            "children": [
                {
                    "type": "identifier",
                    "label": "SpinTestServer",
                    "children": []
                },
                {
                    "type": "block",
                    "label": "def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.db_api = DatabaseManager()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.db_api = DatabaseManager()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.db_api",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "db_api",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "DatabaseManager()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "DatabaseManager",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.exec_manager = ExecutionManager()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.exec_manager = ExecutionManager()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.exec_manager",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exec_manager",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "ExecutionManager()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "ExecutionManager",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.agent_server = AgentServer()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.agent_server = AgentServer()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.agent_server",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "agent_server",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "AgentServer()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "AgentServer",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.scheduler = ExecutionScheduler()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.scheduler = ExecutionScheduler()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.scheduler",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "scheduler",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "ExecutionScheduler()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "ExecutionScheduler",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@staticmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "staticmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "test_get_user_id",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "()",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "label": "return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "3e53486c-cf57-477e-ba2a-cb02dc828e1a",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__aenter__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.setup_dependency_overrides()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.setup_dependency_overrides()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.setup_dependency_overrides",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "setup_dependency_overrides",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.db_api.__enter__()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.db_api.__enter__()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.db_api.__enter__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.db_api",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "db_api",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__enter__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.agent_server.__enter__()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.agent_server.__enter__()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.agent_server.__enter__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.agent_server",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "agent_server",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__enter__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.exec_manager.__enter__()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.exec_manager.__enter__()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.exec_manager.__enter__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.exec_manager",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "exec_manager",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__enter__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.scheduler.__enter__()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.scheduler.__enter__()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.scheduler.__enter__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.scheduler",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "scheduler",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__enter__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "await db.connect()",
                                            "children": [
                                                {
                                                    "type": "await",
                                                    "label": "await db.connect()",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "db.connect()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "db.connect",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "db",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "connect",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "await initialize_blocks()",
                                            "children": [
                                                {
                                                    "type": "await",
                                                    "label": "await initialize_blocks()",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "initialize_blocks()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "initialize_blocks",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "await create_default_user()",
                                            "children": [
                                                {
                                                    "type": "await",
                                                    "label": "await create_default_user()",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "create_default_user()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "create_default_user",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return self",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__aexit__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, exc_type, exc_val, exc_tb)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "exc_type",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "exc_val",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "exc_tb",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "await db.disconnect()",
                                            "children": [
                                                {
                                                    "type": "await",
                                                    "label": "await db.disconnect()",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "db.disconnect()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "db.disconnect",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "db",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "disconnect",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.scheduler.__exit__(exc_type, exc_val, exc_tb)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.scheduler.__exit__(exc_type, exc_val, exc_tb)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.scheduler.__exit__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.scheduler",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "scheduler",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__exit__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(exc_type, exc_val, exc_tb)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_val",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_tb",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.exec_manager.__exit__(exc_type, exc_val, exc_tb)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.exec_manager.__exit__(exc_type, exc_val, exc_tb)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.exec_manager.__exit__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.exec_manager",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "exec_manager",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__exit__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(exc_type, exc_val, exc_tb)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_val",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_tb",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.agent_server.__exit__(exc_type, exc_val, exc_tb)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.agent_server.__exit__(exc_type, exc_val, exc_tb)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.agent_server.__exit__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.agent_server",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "agent_server",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__exit__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(exc_type, exc_val, exc_tb)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_val",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_tb",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.db_api.__exit__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.db_api",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "db_api",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__exit__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(exc_type, exc_val, exc_tb)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_val",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "exc_tb",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "setup_dependency_overrides",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# Override get_user_id for testing",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.agent_server.set_test_dependency_overrides",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.agent_server",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "agent_server",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "set_test_dependency_overrides",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\n            {get_user_id: self.test_get_user_id}\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "dictionary",
                                                                    "label": "{get_user_id: self.test_get_user_id}",
                                                                    "children": [
                                                                        {
                                                                            "type": "pair",
                                                                            "label": "get_user_id: self.test_get_user_id",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "get_user_id",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.test_get_user_id",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "test_get_user_id",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"",
            "children": [
                {
                    "type": "identifier",
                    "label": "wait_execution",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "user_id: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "user_id",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "graph_id: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "graph_id",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "graph_exec_id: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "graph_exec_id",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_default_parameter",
                            "label": "timeout: int = 20",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "timeout",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "integer",
                                    "label": "20",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "Sequence[ExecutionResult]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "Sequence[ExecutionResult]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "Sequence",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[ExecutionResult]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "ExecutionResult",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "ExecutionResult",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "is_execution_completed",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "()",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "status",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "await",
                                                            "label": "await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "AgentServer().test_get_graph_run_status",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "AgentServer()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "AgentServer",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "test_get_graph_run_status",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(graph_exec_id, user_id)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "graph_exec_id",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "user_id",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "log.info(f\"Execution status: {status}\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "log.info(f\"Execution status: {status}\")",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "log.info",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "log",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "info",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"Execution status: {status}\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"Execution status: {status}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "Execution status: ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{status}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "status",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "status == ExecutionStatus.FAILED",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "status",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "label": "ExecutionStatus.FAILED",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "ExecutionStatus",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "FAILED",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "log.info(\"Execution failed\")",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "log.info(\"Execution failed\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "log.info",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "log",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "info",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\"Execution failed\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "\"Execution failed\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "Execution failed",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "label": "raise Exception(\"Execution failed\")",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "Exception(\"Execution failed\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "Exception",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\"Execution failed\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "\"Execution failed\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "Execution failed",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return status == ExecutionStatus.COMPLETED",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "status == ExecutionStatus.COMPLETED",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "status",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "label": "ExecutionStatus.COMPLETED",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "ExecutionStatus",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "COMPLETED",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# Wait for the executions to complete",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "label": "for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "i",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "range(timeout)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(timeout)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "timeout",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                                            "children": [
                                                {
                                                    "type": "await",
                                                    "label": "await is_execution_completed()",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "is_execution_completed()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "is_execution_completed",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "await",
                                                                    "label": "await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "AgentServer().test_get_graph_run_node_execution_results",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "AgentServer()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "AgentServer",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "()",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "test_get_graph_run_node_execution_results",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(\n                graph_id, graph_exec_id, user_id\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "graph_id",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "graph_exec_id",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "user_id",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "time.sleep(1)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "time.sleep(1)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "time.sleep",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "time",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "sleep",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(1)",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assert_statement",
                            "label": "assert False, \"Execution did not complete in time.\"",
                            "children": [
                                {
                                    "type": "false",
                                    "label": "False",
                                    "children": []
                                },
                                {
                                    "type": "string",
                                    "label": "\"Execution did not complete in time.\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "Execution did not complete in time.",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
            "children": [
                {
                    "type": "identifier",
                    "label": "execute_block_test",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(block: Block)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "block: Block",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "block",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Block",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Block",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "prefix = f\"[Test-{block.name}]\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "prefix = f\"[Test-{block.name}]\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "prefix",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "f\"[Test-{block.name}]\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "f\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "[Test-",
                                                    "children": []
                                                },
                                                {
                                                    "type": "interpolation",
                                                    "label": "{block.name}",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.name",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "name",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "not block.test_input or not block.test_output",
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "label": "not block.test_input",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "block.test_input",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "block",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "test_input",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "not_operator",
                                            "label": "not block.test_output",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "block.test_output",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "block",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "test_output",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "log.info(f\"{prefix} No test data provided\")\n        return",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "log.info(f\"{prefix} No test data provided\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "log.info(f\"{prefix} No test data provided\")",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "log.info",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "log",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "info",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"{prefix} No test data provided\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"{prefix} No test data provided\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{prefix}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "prefix",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": " No test data provided",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]",
                            "children": [
                                {
                                    "type": "not_operator",
                                    "label": "not isinstance(block.test_input, list)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(block.test_input, list)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(block.test_input, list)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.test_input",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_input",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "block.test_input = [block.test_input]",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "block.test_input = [block.test_input]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "block.test_input = [block.test_input]",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.test_input",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_input",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[block.test_input]",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "block.test_input",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "block",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "test_input",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]",
                            "children": [
                                {
                                    "type": "not_operator",
                                    "label": "not isinstance(block.test_output, list)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(block.test_output, list)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(block.test_output, list)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.test_output",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_output",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "block.test_output = [block.test_output]",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "block.test_output = [block.test_output]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "block.test_output = [block.test_output]",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.test_output",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_output",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[block.test_output]",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "block.test_output",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "block",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "test_output",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "output_index = 0",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "output_index = 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "output_index",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "log.info",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "log",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "info",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(f\"{prefix} Executing {len(block.test_input)} tests...\")",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "f\"{prefix} Executing {len(block.test_input)} tests...\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "f\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "interpolation",
                                                            "label": "{prefix}",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "prefix",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": " Executing ",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "interpolation",
                                                            "label": "{len(block.test_input)}",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "len(block.test_input)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(block.test_input)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "block.test_input",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "block",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "test_input",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": " tests...",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "prefix = \" \" * 4 + prefix",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "prefix = \" \" * 4 + prefix",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "prefix",
                                            "children": []
                                        },
                                        {
                                            "type": "binary_operator",
                                            "label": "\" \" * 4 + prefix",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "label": "\" \" * 4",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\" \"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": " ",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "4",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "prefix",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
                            "children": [
                                {
                                    "type": "pattern_list",
                                    "label": "mock_name, mock_obj",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "mock_name",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "mock_obj",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "call",
                                    "label": "(block.test_mock or {}).items()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "(block.test_mock or {}).items",
                                            "children": [
                                                {
                                                    "type": "parenthesized_expression",
                                                    "label": "(block.test_mock or {})",
                                                    "children": [
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "block.test_mock or {}",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "block.test_mock",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "block",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "test_mock",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "dictionary",
                                                                    "label": "{}",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "items",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "log.info(f\"{prefix} mocking {mock_name}...\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "log.info(f\"{prefix} mocking {mock_name}...\")",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "log.info",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "log",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "info",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"{prefix} mocking {mock_name}...\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"{prefix} mocking {mock_name}...\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{prefix}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "prefix",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": " mocking ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{mock_name}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "mock_name",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "...",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "hasattr(block, mock_name)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "hasattr",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(block, mock_name)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "mock_name",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "setattr(block, mock_name, mock_obj)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "setattr(block, mock_name, mock_obj)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "setattr(block, mock_name, mock_obj)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "setattr",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(block, mock_name, mock_obj)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "block",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "mock_name",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "mock_obj",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "label": "else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "label": "log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "log.info",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "log",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "info",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(f\"{prefix} mock {mock_name} not found in block\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "f\"{prefix} mock {mock_name} not found in block\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "f\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{prefix}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "prefix",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": " mock ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{mock_name}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "mock_name",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": " not found in block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "extra_exec_kwargs = {}",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "extra_exec_kwargs = {}",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "extra_exec_kwargs",
                                            "children": []
                                        },
                                        {
                                            "type": "dictionary",
                                            "label": "{}",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "CREDENTIALS_FIELD_NAME in block.input_schema.model_fields",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "CREDENTIALS_FIELD_NAME",
                                            "children": []
                                        },
                                        {
                                            "type": "attribute",
                                            "label": "block.input_schema.model_fields",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "block.input_schema",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "block",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "input_schema",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "model_fields",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                                            "children": [
                                                {
                                                    "type": "not_operator",
                                                    "label": "not block.test_credentials",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.test_credentials",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_credentials",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "label": "raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "ValueError",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "f\"{prefix} requires credentials but has no test_credentials\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "f\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{prefix}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "prefix",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": " requires credentials but has no test_credentials",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                                                    "children": [
                                                        {
                                                            "type": "subscript",
                                                            "label": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "extra_exec_kwargs",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "CREDENTIALS_FIELD_NAME",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.test_credentials",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_credentials",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "input_data",
                                    "children": []
                                },
                                {
                                    "type": "attribute",
                                    "label": "block.test_input",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "block",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "test_input",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "log.info(f\"{prefix} in: {input_data}\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "log.info(f\"{prefix} in: {input_data}\")",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "log.info",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "log",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "info",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"{prefix} in: {input_data}\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"{prefix} in: {input_data}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{prefix}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "prefix",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": " in: ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{input_data}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "input_data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
                                            "children": [
                                                {
                                                    "type": "pattern_list",
                                                    "label": "output_name, output_data",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "output_name",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "output_data",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "block.execute(input_data, **extra_exec_kwargs)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.execute",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "execute",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(input_data, **extra_exec_kwargs)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "input_data",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "dictionary_splat",
                                                                    "label": "**extra_exec_kwargs",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "extra_exec_kwargs",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "output_index >= len(block.test_output)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "output_index",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "len(block.test_output)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "len",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(block.test_output)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "block.test_output",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "test_output",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise ValueError(f\"{prefix} produced output more than expected\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise ValueError(f\"{prefix} produced output more than expected\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "ValueError(f\"{prefix} produced output more than expected\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "ValueError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(f\"{prefix} produced output more than expected\")",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "f\"{prefix} produced output more than expected\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "f\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{prefix}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "prefix",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": " produced output more than expected",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "ex_output_name, ex_output_data = block.test_output[output_index]",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "ex_output_name, ex_output_data = block.test_output[output_index]",
                                                                    "children": [
                                                                        {
                                                                            "type": "pattern_list",
                                                                            "label": "ex_output_name, ex_output_data",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "ex_output_name",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "ex_output_data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "block.test_output[output_index]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "block.test_output",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "block",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "test_output",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "output_index",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "function_definition",
                                                            "label": "def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "compare",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "parameters",
                                                                    "label": "(data, expected_data)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "data",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "expected_data",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "data == expected_data",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "data",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "expected_data",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "is_matching = True",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "label": "is_matching = True",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "assignment",
                                                                                                    "label": "is_matching = True",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "is_matching",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "true",
                                                                                                            "label": "True",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "elif_clause",
                                                                                    "label": "elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "isinstance(expected_data, type)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "isinstance",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(expected_data, type)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "expected_data",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "type",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "block",
                                                                                            "label": "is_matching = isinstance(data, expected_data)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "expression_statement",
                                                                                                    "label": "is_matching = isinstance(data, expected_data)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "assignment",
                                                                                                            "label": "is_matching = isinstance(data, expected_data)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "is_matching",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "isinstance(data, expected_data)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "isinstance",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(data, expected_data)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "data",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "expected_data",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "elif_clause",
                                                                                    "label": "elif callable(expected_data):\n                    is_matching = expected_data(data)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "callable(expected_data)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "callable",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(expected_data)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "expected_data",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "block",
                                                                                            "label": "is_matching = expected_data(data)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "expression_statement",
                                                                                                    "label": "is_matching = expected_data(data)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "assignment",
                                                                                                            "label": "is_matching = expected_data(data)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "is_matching",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "expected_data(data)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "expected_data",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(data)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "data",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "else_clause",
                                                                                    "label": "else:\n                    is_matching = False",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "block",
                                                                                            "label": "is_matching = False",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "expression_statement",
                                                                                                    "label": "is_matching = False",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "assignment",
                                                                                                            "label": "is_matching = False",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "is_matching",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "false",
                                                                                                                    "label": "False",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "mark = \"✅\" if is_matching else \"❌\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "mark = \"✅\" if is_matching else \"❌\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "mark",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "conditional_expression",
                                                                                            "label": "\"✅\" if is_matching else \"❌\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "\"✅\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "✅",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "is_matching",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "\"❌\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "❌",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "log.info",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "log",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "info",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "f\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{prefix}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "prefix",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": " ",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{mark}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "mark",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": " comparing `",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{data}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "data",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "` vs `",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{expected_data}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "expected_data",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "`",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "not_operator",
                                                                                    "label": "not is_matching",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "is_matching",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "label": "raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "ValueError",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "f\"{prefix}: wrong output {data} vs {expected_data}\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "f\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "interpolation",
                                                                                                                            "label": "{prefix}",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "prefix",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": ": wrong output ",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "interpolation",
                                                                                                                            "label": "{data}",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "data",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": " vs ",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "interpolation",
                                                                                                                            "label": "{expected_data}",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "expected_data",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "compare(output_data, ex_output_data)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "compare(output_data, ex_output_data)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "compare",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(output_data, ex_output_data)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "output_data",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "ex_output_data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "compare(output_name, ex_output_name)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "compare(output_name, ex_output_name)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "compare",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(output_name, ex_output_name)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "output_name",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "ex_output_name",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "output_index += 1",
                                                            "children": [
                                                                {
                                                                    "type": "augmented_assignment",
                                                                    "label": "output_index += 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "output_index",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "output_index < len(block.test_output)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "output_index",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(block.test_output)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(block.test_output)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "block.test_output",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_output",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{prefix}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "prefix",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": " produced output less than expected. output_index=",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{output_index}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "output_index",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": ", len(block.test_output)=",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{len(block.test_output)}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "len(block.test_output)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "len",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(block.test_output)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "block.test_output",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "block",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "test_output",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}