{
    "type": "module",
    "label": "import inspect\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom typing import (\n    Any,\n    ClassVar,\n    Generator,\n    Generic,\n    Optional,\n    Type,\n    TypeVar,\n    cast,\n    get_origin,\n)\n\nimport jsonref\nimport jsonschema\nfrom prisma.models import AgentBlock\nfrom pydantic import BaseModel\n\nfrom backend.util import json\nfrom backend.util.settings import Config\n\nfrom .model import (\n    CREDENTIALS_FIELD_NAME,\n    ContributorDetails,\n    Credentials,\n    CredentialsMetaInput,\n)\n\napp_config = Config()\n\nBlockData = tuple[str, Any]  # Input & Output data should be a tuple of (name, data).\nBlockInput = dict[str, Any]  # Input: 1 input pin consumes 1 data.\nBlockOutput = Generator[BlockData, None, None]  # Output: 1 output pin produces n data.\nCompletedBlockOutput = dict[str, list[Any]]  # Completed stream, collected as a dict.\n\n\nclass BlockType(Enum):\n    STANDARD = \"Standard\"\n    INPUT = \"Input\"\n    OUTPUT = \"Output\"\n    NOTE = \"Note\"\n    WEBHOOK = \"Webhook\"\n    WEBHOOK_MANUAL = \"Webhook (manual)\"\n    AGENT = \"Agent\"\n\n\nclass BlockCategory(Enum):\n    AI = \"Block that leverages AI to perform a task.\"\n    SOCIAL = \"Block that interacts with social media platforms.\"\n    TEXT = \"Block that processes text data.\"\n    SEARCH = \"Block that searches or extracts information from the internet.\"\n    BASIC = \"Block that performs basic operations.\"\n    INPUT = \"Block that interacts with input of the graph.\"\n    OUTPUT = \"Block that interacts with output of the graph.\"\n    LOGIC = \"Programming logic to control the flow of your agent\"\n    COMMUNICATION = \"Block that interacts with communication platforms.\"\n    DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"\n    DATA = \"Block that interacts with structured data.\"\n    HARDWARE = \"Block that interacts with hardware.\"\n    AGENT = \"Block that interacts with other agents.\"\n    CRM = \"Block that interacts with CRM services.\"\n\n    def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}\n\n\nclass BlockSchema(BaseModel):\n    cached_jsonschema: ClassVar[dict[str, Any]]\n\n    @classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema\n\n    @classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)\n\n    @classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)\n\n    @classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())\n\n    @classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }\n\n    @classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)\n\n\nBlockSchemaInputType = TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)\nBlockSchemaOutputType = TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)\n\n\nclass EmptySchema(BlockSchema):\n    pass\n\n\n# --8<-- [start:BlockWebhookConfig]\nclass BlockManualWebhookConfig(BaseModel):\n    \"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"\n\n    provider: str\n    \"\"\"The service provider that the webhook connects to\"\"\"\n\n    webhook_type: str\n    \"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n\n    event_filter_input: str = \"\"\n    \"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"\n\n    event_format: str = \"{event}\"\n    \"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"\n\n\nclass BlockWebhookConfig(BlockManualWebhookConfig):\n    \"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"\n\n    resource_format: str\n    \"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n    # --8<-- [end:BlockWebhookConfig]\n\n\nclass Block(ABC, Generic[BlockSchemaInputType, BlockSchemaOutputType]):\n    def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True\n\n    @classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()\n\n    @abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass\n\n    def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")\n\n    def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats\n\n    @property\n    def name(self):\n        return self.__class__.__name__\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }\n\n    def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data\n\n\n# ======================= Block Helper Functions ======================= #\n\n\ndef get_blocks() -> dict[str, Type[Block]]:\n    from backend.blocks import AVAILABLE_BLOCKS  # noqa: E402\n\n    return AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks() -> None:\n    for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )\n\n\ndef get_block(block_id: str) -> Block | None:\n    cls = get_blocks().get(block_id)\n    return cls() if cls else None\n",
    "children": [
        {
            "type": "import_statement",
            "label": "import inspect",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "inspect",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "inspect",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from abc import ABC, abstractmethod",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "abc",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abc",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ABC",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ABC",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "abstractmethod",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abstractmethod",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from enum import Enum",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from typing import (\n    Any,\n    ClassVar,\n    Generator,\n    Generic,\n    Optional,\n    Type,\n    TypeVar,\n    cast,\n    get_origin,\n)",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Any",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Any",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ClassVar",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ClassVar",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Generator",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Generator",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Generic",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Generic",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Optional",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Optional",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Type",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Type",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "TypeVar",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "TypeVar",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "cast",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "cast",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "get_origin",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "get_origin",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import jsonref",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "jsonref",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "jsonref",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import jsonschema",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "jsonschema",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "jsonschema",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from prisma.models import AgentBlock",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "prisma.models",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "prisma",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "models",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "AgentBlock",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "AgentBlock",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from pydantic import BaseModel",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "pydantic",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "pydantic",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "BaseModel",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BaseModel",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.util import json",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.util",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "util",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "json",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "json",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.util.settings import Config",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.util.settings",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "util",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "settings",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Config",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Config",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from .model import (\n    CREDENTIALS_FIELD_NAME,\n    ContributorDetails,\n    Credentials,\n    CredentialsMetaInput,\n)",
            "children": [
                {
                    "type": "relative_import",
                    "label": ".model",
                    "children": [
                        {
                            "type": "import_prefix",
                            "label": ".",
                            "children": []
                        },
                        {
                            "type": "dotted_name",
                            "label": "model",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "model",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "CREDENTIALS_FIELD_NAME",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "CREDENTIALS_FIELD_NAME",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ContributorDetails",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ContributorDetails",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Credentials",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Credentials",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "CredentialsMetaInput",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "CredentialsMetaInput",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "app_config = Config()",
            "children": [
                {
                    "type": "assignment",
                    "label": "app_config = Config()",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "app_config",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "Config()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "Config",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "()",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "BlockData = tuple[str, Any]",
            "children": [
                {
                    "type": "assignment",
                    "label": "BlockData = tuple[str, Any]",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BlockData",
                            "children": []
                        },
                        {
                            "type": "subscript",
                            "label": "tuple[str, Any]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "tuple",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "Any",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# Input & Output data should be a tuple of (name, data).",
            "children": []
        },
        {
            "type": "expression_statement",
            "label": "BlockInput = dict[str, Any]",
            "children": [
                {
                    "type": "assignment",
                    "label": "BlockInput = dict[str, Any]",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BlockInput",
                            "children": []
                        },
                        {
                            "type": "subscript",
                            "label": "dict[str, Any]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "dict",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "Any",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# Input: 1 input pin consumes 1 data.",
            "children": []
        },
        {
            "type": "expression_statement",
            "label": "BlockOutput = Generator[BlockData, None, None]",
            "children": [
                {
                    "type": "assignment",
                    "label": "BlockOutput = Generator[BlockData, None, None]",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BlockOutput",
                            "children": []
                        },
                        {
                            "type": "subscript",
                            "label": "Generator[BlockData, None, None]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "Generator",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "BlockData",
                                    "children": []
                                },
                                {
                                    "type": "none",
                                    "label": "None",
                                    "children": []
                                },
                                {
                                    "type": "none",
                                    "label": "None",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# Output: 1 output pin produces n data.",
            "children": []
        },
        {
            "type": "expression_statement",
            "label": "CompletedBlockOutput = dict[str, list[Any]]",
            "children": [
                {
                    "type": "assignment",
                    "label": "CompletedBlockOutput = dict[str, list[Any]]",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "CompletedBlockOutput",
                            "children": []
                        },
                        {
                            "type": "subscript",
                            "label": "dict[str, list[Any]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "dict",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "subscript",
                                    "label": "list[Any]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# Completed stream, collected as a dict.",
            "children": []
        },
        {
            "type": "class_definition",
            "label": "class BlockType(Enum):\n    STANDARD = \"Standard\"\n    INPUT = \"Input\"\n    OUTPUT = \"Output\"\n    NOTE = \"Note\"\n    WEBHOOK = \"Webhook\"\n    WEBHOOK_MANUAL = \"Webhook (manual)\"\n    AGENT = \"Agent\"",
            "children": [
                {
                    "type": "identifier",
                    "label": "BlockType",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Enum)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "STANDARD = \"Standard\"\n    INPUT = \"Input\"\n    OUTPUT = \"Output\"\n    NOTE = \"Note\"\n    WEBHOOK = \"Webhook\"\n    WEBHOOK_MANUAL = \"Webhook (manual)\"\n    AGENT = \"Agent\"",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "STANDARD = \"Standard\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "STANDARD = \"Standard\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "STANDARD",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Standard\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Standard",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "INPUT = \"Input\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "INPUT = \"Input\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "INPUT",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Input\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Input",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "OUTPUT = \"Output\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "OUTPUT = \"Output\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "OUTPUT",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Output\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Output",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "NOTE = \"Note\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "NOTE = \"Note\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "NOTE",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Note\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Note",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "WEBHOOK = \"Webhook\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "WEBHOOK = \"Webhook\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "WEBHOOK",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Webhook\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Webhook",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "WEBHOOK_MANUAL = \"Webhook (manual)\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "WEBHOOK_MANUAL = \"Webhook (manual)\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "WEBHOOK_MANUAL",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Webhook (manual)\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Webhook (manual)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "AGENT = \"Agent\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "AGENT = \"Agent\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "AGENT",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Agent\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Agent",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class BlockCategory(Enum):\n    AI = \"Block that leverages AI to perform a task.\"\n    SOCIAL = \"Block that interacts with social media platforms.\"\n    TEXT = \"Block that processes text data.\"\n    SEARCH = \"Block that searches or extracts information from the internet.\"\n    BASIC = \"Block that performs basic operations.\"\n    INPUT = \"Block that interacts with input of the graph.\"\n    OUTPUT = \"Block that interacts with output of the graph.\"\n    LOGIC = \"Programming logic to control the flow of your agent\"\n    COMMUNICATION = \"Block that interacts with communication platforms.\"\n    DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"\n    DATA = \"Block that interacts with structured data.\"\n    HARDWARE = \"Block that interacts with hardware.\"\n    AGENT = \"Block that interacts with other agents.\"\n    CRM = \"Block that interacts with CRM services.\"\n\n    def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}",
            "children": [
                {
                    "type": "identifier",
                    "label": "BlockCategory",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Enum)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "AI = \"Block that leverages AI to perform a task.\"\n    SOCIAL = \"Block that interacts with social media platforms.\"\n    TEXT = \"Block that processes text data.\"\n    SEARCH = \"Block that searches or extracts information from the internet.\"\n    BASIC = \"Block that performs basic operations.\"\n    INPUT = \"Block that interacts with input of the graph.\"\n    OUTPUT = \"Block that interacts with output of the graph.\"\n    LOGIC = \"Programming logic to control the flow of your agent\"\n    COMMUNICATION = \"Block that interacts with communication platforms.\"\n    DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"\n    DATA = \"Block that interacts with structured data.\"\n    HARDWARE = \"Block that interacts with hardware.\"\n    AGENT = \"Block that interacts with other agents.\"\n    CRM = \"Block that interacts with CRM services.\"\n\n    def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "AI = \"Block that leverages AI to perform a task.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "AI = \"Block that leverages AI to perform a task.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "AI",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that leverages AI to perform a task.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that leverages AI to perform a task.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "SOCIAL = \"Block that interacts with social media platforms.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "SOCIAL = \"Block that interacts with social media platforms.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "SOCIAL",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with social media platforms.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with social media platforms.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "TEXT = \"Block that processes text data.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "TEXT = \"Block that processes text data.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "TEXT",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that processes text data.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that processes text data.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "SEARCH = \"Block that searches or extracts information from the internet.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "SEARCH = \"Block that searches or extracts information from the internet.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "SEARCH",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that searches or extracts information from the internet.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that searches or extracts information from the internet.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "BASIC = \"Block that performs basic operations.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "BASIC = \"Block that performs basic operations.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "BASIC",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that performs basic operations.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that performs basic operations.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "INPUT = \"Block that interacts with input of the graph.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "INPUT = \"Block that interacts with input of the graph.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "INPUT",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with input of the graph.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with input of the graph.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "OUTPUT = \"Block that interacts with output of the graph.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "OUTPUT = \"Block that interacts with output of the graph.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "OUTPUT",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with output of the graph.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with output of the graph.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "LOGIC = \"Programming logic to control the flow of your agent\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "LOGIC = \"Programming logic to control the flow of your agent\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "LOGIC",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Programming logic to control the flow of your agent\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Programming logic to control the flow of your agent",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "COMMUNICATION = \"Block that interacts with communication platforms.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "COMMUNICATION = \"Block that interacts with communication platforms.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "COMMUNICATION",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with communication platforms.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with communication platforms.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "DEVELOPER_TOOLS",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Developer tools such as GitHub blocks.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Developer tools such as GitHub blocks.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "DATA = \"Block that interacts with structured data.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "DATA = \"Block that interacts with structured data.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "DATA",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with structured data.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with structured data.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "HARDWARE = \"Block that interacts with hardware.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "HARDWARE = \"Block that interacts with hardware.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "HARDWARE",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with hardware.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with hardware.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "AGENT = \"Block that interacts with other agents.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "AGENT = \"Block that interacts with other agents.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "AGENT",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with other agents.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with other agents.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "CRM = \"Block that interacts with CRM services.\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "CRM = \"Block that interacts with CRM services.\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "CRM",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"Block that interacts with CRM services.\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Block that interacts with CRM services.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "dict",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "dict[str, str]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "dict[str, str]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "dict",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[str, str]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "str",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "str",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "str",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "str",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return {\"category\": self.name, \"description\": self.value}",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return {\"category\": self.name, \"description\": self.value}",
                                            "children": [
                                                {
                                                    "type": "dictionary",
                                                    "label": "{\"category\": self.name, \"description\": self.value}",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "label": "\"category\": self.name",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"category\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "category",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.name",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "name",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"description\": self.value",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"description\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "description",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.value",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "value",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class BlockSchema(BaseModel):\n    cached_jsonschema: ClassVar[dict[str, Any]]\n\n    @classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema\n\n    @classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)\n\n    @classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)\n\n    @classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())\n\n    @classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }\n\n    @classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
            "children": [
                {
                    "type": "identifier",
                    "label": "BlockSchema",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(BaseModel)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BaseModel",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "cached_jsonschema: ClassVar[dict[str, Any]]\n\n    @classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema\n\n    @classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)\n\n    @classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)\n\n    @classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())\n\n    @classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }\n\n    @classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "cached_jsonschema: ClassVar[dict[str, Any]]",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "cached_jsonschema: ClassVar[dict[str, Any]]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "cached_jsonschema",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "ClassVar[dict[str, Any]]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "ClassVar[dict[str, Any]]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ClassVar",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[dict[str, Any]]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "dict[str, Any]",
                                                                    "children": [
                                                                        {
                                                                            "type": "generic_type",
                                                                            "label": "dict[str, Any]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "dict",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "type_parameter",
                                                                                    "label": "[str, Any]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "str",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "str",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "Any",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "Any",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "jsonschema",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "dict[str, Any]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "dict[str, Any]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[str, Any]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "str",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "str",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "label": "Any",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "Any",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "label": "if cls.cached_jsonschema:\n            return cls.cached_jsonschema",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "cls.cached_jsonschema",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cls",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cached_jsonschema",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "return cls.cached_jsonschema",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return cls.cached_jsonschema",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "cls.cached_jsonschema",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "cls",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "cached_jsonschema",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "model",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "jsonref.replace_refs(cls.model_json_schema(), merge_props=True)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "jsonref.replace_refs",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "jsonref",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "replace_refs",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(cls.model_json_schema(), merge_props=True)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "cls.model_json_schema()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "cls.model_json_schema",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "cls",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "model_json_schema",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "label": "merge_props=True",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "merge_props",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "true",
                                                                                            "label": "True",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "function_definition",
                                                    "label": "def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ref_to_dict",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "parameters",
                                                            "label": "(obj)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "obj",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "label": "if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "isinstance(obj, dict)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "isinstance",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(obj, dict)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "obj",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "dict",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "comment",
                                                                            "label": "# OpenAPI <3.1 does not support sibling fields that has a $ref key",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "comment",
                                                                            "label": "# So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "keys = {\"allOf\", \"anyOf\", \"oneOf\"}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "label": "keys = {\"allOf\", \"anyOf\", \"oneOf\"}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "keys",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "set",
                                                                                                    "label": "{\"allOf\", \"anyOf\", \"oneOf\"}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "\"allOf\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "allOf",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "\"anyOf\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "anyOf",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "\"oneOf\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "oneOf",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "label": "one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "one_key",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "next((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "next",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "generator_expression",
                                                                                                                    "label": "(k for k in keys if k in obj and len(obj[k]) == 1)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "k",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "for_in_clause",
                                                                                                                            "label": "for k in keys",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "k",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "keys",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "if_clause",
                                                                                                                            "label": "if k in obj and len(obj[k]) == 1",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "boolean_operator",
                                                                                                                                    "label": "k in obj and len(obj[k]) == 1",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "comparison_operator",
                                                                                                                                            "label": "k in obj",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "k",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "obj",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "comparison_operator",
                                                                                                                                            "label": "len(obj[k]) == 1",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "call",
                                                                                                                                                    "label": "len(obj[k])",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "len",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "argument_list",
                                                                                                                                                            "label": "(obj[k])",
                                                                                                                                                            "children": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "subscript",
                                                                                                                                                                    "label": "obj[k]",
                                                                                                                                                                    "children": [
                                                                                                                                                                        {
                                                                                                                                                                            "type": "identifier",
                                                                                                                                                                            "label": "obj",
                                                                                                                                                                            "children": []
                                                                                                                                                                        },
                                                                                                                                                                        {
                                                                                                                                                                            "type": "identifier",
                                                                                                                                                                            "label": "k",
                                                                                                                                                                            "children": []
                                                                                                                                                                        }
                                                                                                                                                                    ]
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "integer",
                                                                                                                                                    "label": "1",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "none",
                                                                                                                    "label": "None",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "if_statement",
                                                                                    "label": "if one_key:\n                    obj.update(obj[one_key][0])",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "one_key",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "block",
                                                                                            "label": "obj.update(obj[one_key][0])",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "expression_statement",
                                                                                                    "label": "obj.update(obj[one_key][0])",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "obj.update(obj[one_key][0])",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "obj.update",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "obj",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "update",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(obj[one_key][0])",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "subscript",
                                                                                                                            "label": "obj[one_key][0]",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "subscript",
                                                                                                                                    "label": "obj[one_key]",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "obj",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "one_key",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "integer",
                                                                                                                                    "label": "0",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "return_statement",
                                                                                    "label": "return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "dictionary_comprehension",
                                                                                            "label": "{\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "pair",
                                                                                                    "label": "key: ref_to_dict(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "key",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "ref_to_dict(value)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "ref_to_dict",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(value)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "value",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "for_in_clause",
                                                                                                    "label": "for key, value in obj.items()",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pattern_list",
                                                                                                            "label": "key, value",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "key",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "value",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "obj.items()",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "obj.items",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "obj",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "items",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "()",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "if_clause",
                                                                                                    "label": "if not key.startswith(\"$\") and key != one_key",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "boolean_operator",
                                                                                                            "label": "not key.startswith(\"$\") and key != one_key",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "not_operator",
                                                                                                                    "label": "not key.startswith(\"$\")",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "call",
                                                                                                                            "label": "key.startswith(\"$\")",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "attribute",
                                                                                                                                    "label": "key.startswith",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "key",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "startswith",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "argument_list",
                                                                                                                                    "label": "(\"$\")",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "string",
                                                                                                                                            "label": "\"$\"",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "string_start",
                                                                                                                                                    "label": "\"",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "string_content",
                                                                                                                                                    "label": "$",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "string_end",
                                                                                                                                                    "label": "\"",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "comparison_operator",
                                                                                                                    "label": "key != one_key",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "key",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "one_key",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "elif_clause",
                                                                            "label": "elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "isinstance(obj, list)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "isinstance",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(obj, list)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "obj",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "list",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "return [ref_to_dict(item) for item in obj]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return [ref_to_dict(item) for item in obj]",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "list_comprehension",
                                                                                                    "label": "[ref_to_dict(item) for item in obj]",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "ref_to_dict(item)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "ref_to_dict",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(item)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "item",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "for_in_clause",
                                                                                                            "label": "for item in obj",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "item",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "obj",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return obj",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "obj",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "cls.cached_jsonschema",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "cls",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "cached_jsonschema",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "cast(dict[str, Any], ref_to_dict(model))",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "cast",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(dict[str, Any], ref_to_dict(model))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "subscript",
                                                                                    "label": "dict[str, Any]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "dict",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "str",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "Any",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "ref_to_dict(model)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "ref_to_dict",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(model)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "model",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "comment",
                                                    "label": "# Set default properties values",
                                                    "children": []
                                                },
                                                {
                                                    "type": "for_statement",
                                                    "label": "for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "field",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "cls.cached_jsonschema.get(\"properties\", {}).values()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "cls.cached_jsonschema.get(\"properties\", {}).values",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "cls.cached_jsonschema.get(\"properties\", {})",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "cls.cached_jsonschema.get",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "cls.cached_jsonschema",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "cls",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "cached_jsonschema",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "get",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(\"properties\", {})",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"properties\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "properties",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "dictionary",
                                                                                            "label": "{}",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "values",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "label": "if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True",
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "label": "isinstance(field, dict) and \"advanced\" not in field",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "isinstance(field, dict)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "isinstance",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(field, dict)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "field",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "dict",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "\"advanced\" not in field",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"advanced\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "advanced",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "field",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "field[\"advanced\"] = True",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "field[\"advanced\"] = True",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "label": "field[\"advanced\"] = True",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "subscript",
                                                                                                    "label": "field[\"advanced\"]",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "field",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "\"advanced\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "advanced",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "true",
                                                                                                    "label": "True",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "label": "return cls.cached_jsonschema",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "cls.cached_jsonschema",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cls",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cached_jsonschema",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "validate_data",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls, data: BlockInput)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "label": "data: BlockInput",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "data",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "BlockInput",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "BlockInput",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "str | None",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "label": "str | None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "json.validate_with_jsonschema",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "json",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "validate_with_jsonschema",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(schema=cls.jsonschema(), data=data)",
                                                                    "children": [
                                                                        {
                                                                            "type": "keyword_argument",
                                                                            "label": "schema=cls.jsonschema()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "schema",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "cls.jsonschema()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "cls.jsonschema",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "cls",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "jsonschema",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "keyword_argument",
                                                                            "label": "data=data",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "data",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "validate_field",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls, field_name: str, data: BlockInput)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "label": "field_name: str",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "field_name",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "str",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "str",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "label": "data: BlockInput",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "data",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "BlockInput",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "BlockInput",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "str | None",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "label": "str | None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "\"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "\"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"\"\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        ",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"\"\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "model_schema = cls.jsonschema().get(\"properties\", {})",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "model_schema = cls.jsonschema().get(\"properties\", {})",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "model_schema",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "cls.jsonschema().get(\"properties\", {})",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "cls.jsonschema().get",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "cls.jsonschema()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "cls.jsonschema",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "cls",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "jsonschema",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "get",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\"properties\", {})",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "\"properties\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "properties",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "dictionary",
                                                                                    "label": "{}",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "label": "if not model_schema:\n            return f\"Invalid model schema {cls}\"",
                                                    "children": [
                                                        {
                                                            "type": "not_operator",
                                                            "label": "not model_schema",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "model_schema",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "return f\"Invalid model schema {cls}\"",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return f\"Invalid model schema {cls}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"Invalid model schema {cls}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "Invalid model schema ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{cls}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "cls",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "property_schema = model_schema.get(field_name)",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "property_schema = model_schema.get(field_name)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "property_schema",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "model_schema.get(field_name)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "model_schema.get",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "model_schema",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "get",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(field_name)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "field_name",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "label": "if not property_schema:\n            return f\"Invalid property name {field_name}\"",
                                                    "children": [
                                                        {
                                                            "type": "not_operator",
                                                            "label": "not property_schema",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "property_schema",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "return f\"Invalid property name {field_name}\"",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return f\"Invalid property name {field_name}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"Invalid property name {field_name}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "Invalid property name ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{field_name}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "field_name",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "try_statement",
                                                    "label": "try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "label": "jsonschema.validate(json.to_dict(data), property_schema)\n            return None",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "jsonschema.validate(json.to_dict(data), property_schema)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "jsonschema.validate(json.to_dict(data), property_schema)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "jsonschema.validate",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "jsonschema",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "validate",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(json.to_dict(data), property_schema)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "json.to_dict(data)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "json.to_dict",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "json",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "to_dict",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(data)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "data",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "property_schema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return None",
                                                                    "children": [
                                                                        {
                                                                            "type": "none",
                                                                            "label": "None",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "except_clause",
                                                            "label": "except jsonschema.ValidationError as e:\n            return str(e)",
                                                            "children": [
                                                                {
                                                                    "type": "as_pattern",
                                                                    "label": "jsonschema.ValidationError as e",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "jsonschema.ValidationError",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "jsonschema",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "ValidationError",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "as_pattern_target",
                                                                            "label": "e",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "e",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return str(e)",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return str(e)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "str(e)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "str",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(e)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "e",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "get_fields",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "set[str]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "set[str]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "set",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[str]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "str",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "str",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return set(cls.model_fields.keys())",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return set(cls.model_fields.keys())",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "set(cls.model_fields.keys())",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "set",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(cls.model_fields.keys())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "cls.model_fields.keys()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "cls.model_fields.keys",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "cls.model_fields",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "cls",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "model_fields",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "keys",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "get_required_fields",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "set[str]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "set[str]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "set",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[str]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "str",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "str",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                                                    "children": [
                                                        {
                                                            "type": "set_comprehension",
                                                            "label": "{\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "field",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "for_in_clause",
                                                                    "label": "for field, field_info in cls.model_fields.items()",
                                                                    "children": [
                                                                        {
                                                                            "type": "pattern_list",
                                                                            "label": "field, field_info",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "field",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "field_info",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "cls.model_fields.items()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "cls.model_fields.items",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "cls.model_fields",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "cls",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "model_fields",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "items",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "if_clause",
                                                                    "label": "if field_info.is_required()",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "field_info.is_required()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "field_info.is_required",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "field_info",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "is_required",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "__pydantic_init_subclass__",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls, **kwargs)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                },
                                                {
                                                    "type": "dictionary_splat_pattern",
                                                    "label": "**kwargs",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "kwargs",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "\"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "\"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"\"\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        ",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"\"\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "super().__pydantic_init_subclass__(**kwargs)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "super().__pydantic_init_subclass__(**kwargs)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "super().__pydantic_init_subclass__",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "super()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "super",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "__pydantic_init_subclass__",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(**kwargs)",
                                                                    "children": [
                                                                        {
                                                                            "type": "dictionary_splat",
                                                                            "label": "**kwargs",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "kwargs",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "comment",
                                                    "label": "# Reset cached JSON schema to prevent inheriting it from parent class",
                                                    "children": []
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "cls.cached_jsonschema = {}",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "cls.cached_jsonschema = {}",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "cls.cached_jsonschema",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "cls",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "cached_jsonschema",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "dictionary",
                                                                    "label": "{}",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "credentials_fields",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "list_comprehension",
                                                                    "label": "[\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "field_name",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "for_in_clause",
                                                                            "label": "for field_name, info in cls.model_fields.items()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "pattern_list",
                                                                                    "label": "field_name, info",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "field_name",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "info",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "cls.model_fields.items()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "cls.model_fields.items",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "cls.model_fields",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "cls",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "model_fields",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "items",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "if_clause",
                                                                            "label": "if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "parenthesized_expression",
                                                                                    "label": "(\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "boolean_operator",
                                                                                            "label": "inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "inspect.isclass(info.annotation)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "inspect.isclass",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "inspect",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "isclass",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(info.annotation)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "info.annotation",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "info",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "annotation",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "issubclass",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "boolean_operator",
                                                                                                                    "label": "get_origin(info.annotation) or info.annotation",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "call",
                                                                                                                            "label": "get_origin(info.annotation)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "get_origin",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "argument_list",
                                                                                                                                    "label": "(info.annotation)",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "attribute",
                                                                                                                                            "label": "info.annotation",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "info",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "annotation",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "info.annotation",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "info",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "annotation",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "CredentialsMetaInput",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "label": "if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "len(credentials_fields) > 1",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "len(credentials_fields)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(credentials_fields)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "credentials_fields",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "raise_statement",
                                                                    "label": "raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "ValueError",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "f\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{cls.__qualname__}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "cls.__qualname__",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "cls",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "__qualname__",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": " can only have one CredentialsMetaInput field",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "parenthesized_expression",
                                                                    "label": "(\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "label": "len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "len(credentials_fields) == 1",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "len(credentials_fields)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "len",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(credentials_fields)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "credentials_fields",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "integer",
                                                                                            "label": "1",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "credentials_fields[0] != CREDENTIALS_FIELD_NAME",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "subscript",
                                                                                            "label": "credentials_fields[0]",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "credentials_fields",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "integer",
                                                                                                    "label": "0",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "CREDENTIALS_FIELD_NAME",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "ValueError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "concatenated_string",
                                                                                                    "label": "f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "f\"CredentialsMetaInput field on {cls.__qualname__} \"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "f\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "CredentialsMetaInput field on ",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "interpolation",
                                                                                                                    "label": "{cls.__qualname__}",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "cls.__qualname__",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "cls",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "__qualname__",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": " ",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "\"must be named 'credentials'\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "must be named 'credentials'",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "parenthesized_expression",
                                                                    "label": "(\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "label": "len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "len(credentials_fields) == 0",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "len(credentials_fields)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "len",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(credentials_fields)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "credentials_fields",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "integer",
                                                                                            "label": "0",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "CREDENTIALS_FIELD_NAME in cls.model_fields.keys()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "CREDENTIALS_FIELD_NAME",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "cls.model_fields.keys()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "cls.model_fields.keys",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "cls.model_fields",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "cls",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "model_fields",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "keys",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "()",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "TypeError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "concatenated_string",
                                                                                                    "label": "f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "f\"Field 'credentials' on {cls.__qualname__} \"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "f\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "Field 'credentials' on ",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "interpolation",
                                                                                                                    "label": "{cls.__qualname__}",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "cls.__qualname__",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "cls",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "__qualname__",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": " ",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "f\"must be of type {CredentialsMetaInput.__name__}\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "f\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "must be of type ",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "interpolation",
                                                                                                                    "label": "{CredentialsMetaInput.__name__}",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "CredentialsMetaInput.__name__",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "CredentialsMetaInput",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "__name__",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "label": "if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                                                    "children": [
                                                        {
                                                            "type": "named_expression",
                                                            "label": "credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "credentials_field",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "cls.model_fields.get(CREDENTIALS_FIELD_NAME)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "cls.model_fields.get",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "cls.model_fields",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "cls",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "model_fields",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "get",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(CREDENTIALS_FIELD_NAME)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "CREDENTIALS_FIELD_NAME",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "credentials_input_type",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "cast",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "CredentialsMetaInput",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "credentials_field.annotation",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "credentials_field",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "annotation",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "credentials_input_type.validate_credentials_field_schema(cls)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "credentials_input_type.validate_credentials_field_schema(cls)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "credentials_input_type.validate_credentials_field_schema",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "credentials_input_type",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "validate_credentials_field_schema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(cls)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "cls",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "BlockSchemaInputType = TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)",
            "children": [
                {
                    "type": "assignment",
                    "label": "BlockSchemaInputType = TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BlockSchemaInputType",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "TypeVar",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(\"BlockSchemaInputType\", bound=BlockSchema)",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"BlockSchemaInputType\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "BlockSchemaInputType",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "label": "bound=BlockSchema",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bound",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "BlockSchema",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "BlockSchemaOutputType = TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)",
            "children": [
                {
                    "type": "assignment",
                    "label": "BlockSchemaOutputType = TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BlockSchemaOutputType",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "TypeVar",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(\"BlockSchemaOutputType\", bound=BlockSchema)",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"BlockSchemaOutputType\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "BlockSchemaOutputType",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "label": "bound=BlockSchema",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bound",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "BlockSchema",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class EmptySchema(BlockSchema):\n    pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "EmptySchema",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(BlockSchema)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BlockSchema",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "pass",
                    "children": [
                        {
                            "type": "pass_statement",
                            "label": "pass",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# --8<-- [start:BlockWebhookConfig]",
            "children": []
        },
        {
            "type": "class_definition",
            "label": "class BlockManualWebhookConfig(BaseModel):\n    \"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"\n\n    provider: str\n    \"\"\"The service provider that the webhook connects to\"\"\"\n\n    webhook_type: str\n    \"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n\n    event_filter_input: str = \"\"\n    \"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"\n\n    event_format: str = \"{event}\"\n    \"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
            "children": [
                {
                    "type": "identifier",
                    "label": "BlockManualWebhookConfig",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(BaseModel)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BaseModel",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"\n\n    provider: str\n    \"\"\"The service provider that the webhook connects to\"\"\"\n\n    webhook_type: str\n    \"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n\n    event_filter_input: str = \"\"\n    \"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"\n\n    event_format: str = \"{event}\"\n    \"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "provider: str",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "provider: str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "provider",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"The service provider that the webhook connects to\"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"The service provider that the webhook connects to\"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "The service provider that the webhook connects to",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "webhook_type: str",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "webhook_type: str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "webhook_type",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "event_filter_input: str = \"\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "event_filter_input: str = \"\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "event_filter_input",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "event_format: str = \"{event}\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "event_format: str = \"{event}\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "event_format",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "string",
                                            "label": "\"{event}\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "{event}",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class BlockWebhookConfig(BlockManualWebhookConfig):\n    \"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"\n\n    resource_format: str\n    \"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n    # --8<-- [end:BlockWebhookConfig]",
            "children": [
                {
                    "type": "identifier",
                    "label": "BlockWebhookConfig",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(BlockManualWebhookConfig)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BlockManualWebhookConfig",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"\n\n    resource_format: str\n    \"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n    # --8<-- [end:BlockWebhookConfig]",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "resource_format: str",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "resource_format: str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "resource_format",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# --8<-- [end:BlockWebhookConfig]",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Block(ABC, Generic[BlockSchemaInputType, BlockSchemaOutputType]):\n    def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True\n\n    @classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()\n\n    @abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass\n\n    def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")\n\n    def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats\n\n    @property\n    def name(self):\n        return self.__class__.__name__\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }\n\n    def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
            "children": [
                {
                    "type": "identifier",
                    "label": "Block",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(ABC, Generic[BlockSchemaInputType, BlockSchemaOutputType])",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ABC",
                            "children": []
                        },
                        {
                            "type": "subscript",
                            "label": "Generic[BlockSchemaInputType, BlockSchemaOutputType]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "Generic",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "BlockSchemaInputType",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "BlockSchemaOutputType",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True\n\n    @classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()\n\n    @abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass\n\n    def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")\n\n    def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats\n\n    @property\n    def name(self):\n        return self.__class__.__name__\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }\n\n    def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    )",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "id: str = \"\"",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "id",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "str",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "string",
                                                    "label": "\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "description: str = \"\"",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "description",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "str",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "string",
                                                    "label": "\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "contributors: list[ContributorDetails] = []",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "contributors",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "list[ContributorDetails]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "list[ContributorDetails]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "list",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[ContributorDetails]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "ContributorDetails",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "ContributorDetails",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "list",
                                                    "label": "[]",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "categories: set[BlockCategory] | None = None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "categories",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "set[BlockCategory] | None",
                                                    "children": [
                                                        {
                                                            "type": "union_type",
                                                            "label": "set[BlockCategory] | None",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "set[BlockCategory]",
                                                                    "children": [
                                                                        {
                                                                            "type": "generic_type",
                                                                            "label": "set[BlockCategory]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "set",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "type_parameter",
                                                                                    "label": "[BlockCategory]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "BlockCategory",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "BlockCategory",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "label": "None",
                                                                    "children": [
                                                                        {
                                                                            "type": "none",
                                                                            "label": "None",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "none",
                                                    "label": "None",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "input_schema: Type[BlockSchemaInputType] = EmptySchema",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "input_schema",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Type[BlockSchemaInputType]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Type[BlockSchemaInputType]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[BlockSchemaInputType]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "BlockSchemaInputType",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BlockSchemaInputType",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "EmptySchema",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "output_schema: Type[BlockSchemaOutputType] = EmptySchema",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "output_schema",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Type[BlockSchemaOutputType]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Type[BlockSchemaOutputType]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[BlockSchemaOutputType]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "BlockSchemaOutputType",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BlockSchemaOutputType",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "EmptySchema",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "test_input: BlockInput | list[BlockInput] | None = None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "test_input",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "BlockInput | list[BlockInput] | None",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "BlockInput | list[BlockInput] | None",
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "BlockInput | list[BlockInput]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "BlockInput",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "list[BlockInput]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "list",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BlockInput",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "none",
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "none",
                                                    "label": "None",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "test_output: BlockData | list[BlockData] | None = None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "test_output",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "BlockData | list[BlockData] | None",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "BlockData | list[BlockData] | None",
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "BlockData | list[BlockData]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "BlockData",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "list[BlockData]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "list",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BlockData",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "none",
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "none",
                                                    "label": "None",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "test_mock: dict[str, Any] | None = None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "test_mock",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "dict[str, Any] | None",
                                                    "children": [
                                                        {
                                                            "type": "union_type",
                                                            "label": "dict[str, Any] | None",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "dict[str, Any]",
                                                                    "children": [
                                                                        {
                                                                            "type": "generic_type",
                                                                            "label": "dict[str, Any]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "dict",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "type_parameter",
                                                                                    "label": "[str, Any]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "str",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "str",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "Any",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "Any",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "label": "None",
                                                                    "children": [
                                                                        {
                                                                            "type": "none",
                                                                            "label": "None",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "none",
                                                    "label": "None",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "test_credentials: Optional[Credentials] = None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "test_credentials",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Optional[Credentials]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Optional[Credentials]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Optional",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[Credentials]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "Credentials",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Credentials",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "none",
                                                    "label": "None",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "disabled: bool = False",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "disabled",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "bool",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "bool",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "false",
                                                    "label": "False",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "static_output: bool = False",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "static_output",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "bool",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "bool",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "false",
                                                    "label": "False",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "block_type: BlockType = BlockType.STANDARD",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "block_type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "BlockType",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "BlockType",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "attribute",
                                                    "label": "BlockType.STANDARD",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "BlockType",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "STANDARD",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "webhook_config",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Optional[BlockWebhookConfig | BlockManualWebhookConfig]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Optional[BlockWebhookConfig | BlockManualWebhookConfig]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Optional",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[BlockWebhookConfig | BlockManualWebhookConfig]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "BlockWebhookConfig | BlockManualWebhookConfig",
                                                                            "children": [
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "BlockWebhookConfig | BlockManualWebhookConfig",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "BlockWebhookConfig",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "BlockManualWebhookConfig",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "none",
                                                    "label": "None",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        ",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.id = id",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.id = id",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.id",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "id",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "id",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.input_schema = input_schema",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.input_schema = input_schema",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.input_schema",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "input_schema",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "input_schema",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.output_schema = output_schema",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.output_schema = output_schema",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.output_schema",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "output_schema",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "output_schema",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.test_input = test_input",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.test_input = test_input",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.test_input",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_input",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "test_input",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.test_output = test_output",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.test_output = test_output",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.test_output",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_output",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "test_output",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.test_mock = test_mock",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.test_mock = test_mock",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.test_mock",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_mock",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "test_mock",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.test_credentials = test_credentials",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.test_credentials = test_credentials",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.test_credentials",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "test_credentials",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "test_credentials",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.description = description",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.description = description",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.description",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "description",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "description",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.categories = categories or set()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.categories = categories or set()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.categories",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "categories",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "categories or set()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "categories",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "set()",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "set",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.contributors = contributors or set()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.contributors = contributors or set()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.contributors",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "contributors",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "contributors or set()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "contributors",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "set()",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "set",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.disabled = disabled",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.disabled = disabled",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.disabled",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "disabled",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "disabled",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.static_output = static_output",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.static_output = static_output",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.static_output",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "static_output",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "static_output",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.block_type = block_type",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.block_type = block_type",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.block_type",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "block_type",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "block_type",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.webhook_config = webhook_config",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.webhook_config = webhook_config",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.webhook_config",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "webhook_config",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "webhook_config",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.execution_stats = {}",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.execution_stats = {}",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.execution_stats",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "execution_stats",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "dictionary",
                                                            "label": "{}",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.webhook_config",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "webhook_config",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "isinstance(self.webhook_config, BlockWebhookConfig)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "isinstance",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(self.webhook_config, BlockWebhookConfig)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.webhook_config",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "webhook_config",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BlockWebhookConfig",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "comment",
                                                                    "label": "# Enforce presence of credentials field on auto-setup webhook blocks",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "CREDENTIALS_FIELD_NAME",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.input_schema.model_fields",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.input_schema",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "self",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "input_schema",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "model_fields",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "label": "raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "TypeError",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"credentials field is required on auto-setup webhook blocks\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "credentials field is required on auto-setup webhook blocks",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "self.block_type = BlockType.WEBHOOK",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "self.block_type = BlockType.WEBHOOK",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.block_type",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "block_type",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "BlockType.WEBHOOK",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "BlockType",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "WEBHOOK",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "else_clause",
                                                                    "label": "else:\n                self.block_type = BlockType.WEBHOOK_MANUAL",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "label": "self.block_type = BlockType.WEBHOOK_MANUAL",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.block_type = BlockType.WEBHOOK_MANUAL",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "label": "self.block_type = BlockType.WEBHOOK_MANUAL",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.block_type",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "self",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "block_type",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "BlockType.WEBHOOK_MANUAL",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "BlockType",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "WEBHOOK_MANUAL",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "comment",
                                                            "label": "# Enforce shape of webhook event filter, if present",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.webhook_config.event_filter_input",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.webhook_config",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "webhook_config",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "event_filter_input",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "event_filter_field",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "subscript",
                                                                                            "label": "self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.input_schema.model_fields",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.input_schema",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "input_schema",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "model_fields",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.webhook_config.event_filter_input",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.webhook_config",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "webhook_config",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "event_filter_input",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "not_operator",
                                                                                    "label": "not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "parenthesized_expression",
                                                                                            "label": "(\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "boolean_operator",
                                                                                                    "label": "isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "boolean_operator",
                                                                                                            "label": "isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "isinstance(event_filter_field.annotation, type)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "isinstance",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(event_filter_field.annotation, type)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "attribute",
                                                                                                                                    "label": "event_filter_field.annotation",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "event_filter_field",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "annotation",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "type",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "issubclass(event_filter_field.annotation, BaseModel)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "issubclass",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(event_filter_field.annotation, BaseModel)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "attribute",
                                                                                                                                    "label": "event_filter_field.annotation",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "event_filter_field",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "annotation",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "BaseModel",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "all",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "generator_expression",
                                                                                                                    "label": "(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "comparison_operator",
                                                                                                                            "label": "field.annotation is bool",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "attribute",
                                                                                                                                    "label": "field.annotation",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "field",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "annotation",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "bool",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "for_in_clause",
                                                                                                                            "label": "for field in event_filter_field.annotation.model_fields.values()",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "field",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "call",
                                                                                                                                    "label": "event_filter_field.annotation.model_fields.values()",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "attribute",
                                                                                                                                            "label": "event_filter_field.annotation.model_fields.values",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "attribute",
                                                                                                                                                    "label": "event_filter_field.annotation.model_fields",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "attribute",
                                                                                                                                                            "label": "event_filter_field.annotation",
                                                                                                                                                            "children": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "identifier",
                                                                                                                                                                    "label": "event_filter_field",
                                                                                                                                                                    "children": []
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    "type": "identifier",
                                                                                                                                                                    "label": "annotation",
                                                                                                                                                                    "children": []
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "model_fields",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "values",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "argument_list",
                                                                                                                                            "label": "()",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "label": "raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "NotImplementedError",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "concatenated_string",
                                                                                                                    "label": "f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string",
                                                                                                                            "label": "f\"{self.name} has an invalid webhook event selector: \"",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "string_start",
                                                                                                                                    "label": "f\"",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "interpolation",
                                                                                                                                    "label": "{self.name}",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "attribute",
                                                                                                                                            "label": "self.name",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "self",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "name",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "string_content",
                                                                                                                                    "label": " has an invalid webhook event selector: ",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "string_end",
                                                                                                                                    "label": "\"",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string",
                                                                                                                            "label": "\"field must be a BaseModel and all its fields must be boolean\"",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "string_start",
                                                                                                                                    "label": "\"",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "string_content",
                                                                                                                                    "label": "field must be a BaseModel and all its fields must be boolean",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "string_end",
                                                                                                                                    "label": "\"",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "comment",
                                                            "label": "# Enforce presence of 'payload' input",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "\"payload\" not in self.input_schema.model_fields",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"payload\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "payload",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.input_schema.model_fields",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.input_schema",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "input_schema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "model_fields",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "TypeError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "f\"{self.name} is webhook-triggered but has no 'payload' input\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "f\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{self.name}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "self.name",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "self",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "name",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": " is webhook-triggered but has no 'payload' input",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "comment",
                                                            "label": "# Disable webhook-triggered block if webhook functionality not available",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if not app_config.platform_base_url:\n                self.disabled = True",
                                                            "children": [
                                                                {
                                                                    "type": "not_operator",
                                                                    "label": "not app_config.platform_base_url",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "app_config.platform_base_url",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "app_config",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "platform_base_url",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "self.disabled = True",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "self.disabled = True",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "self.disabled = True",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.disabled",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "disabled",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "true",
                                                                                            "label": "True",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "create",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls: Type[\"Block\"])",
                                            "children": [
                                                {
                                                    "type": "typed_parameter",
                                                    "label": "cls: Type[\"Block\"]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "cls",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "Type[\"Block\"]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "Type[\"Block\"]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "Type",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[\"Block\"]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "\"Block\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"Block\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "Block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "\"Block\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"Block\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Block",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return cls()",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return cls()",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "cls()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cls",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@abstractmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "abstractmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "run",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self, input_data: BlockSchemaInputType, **kwargs)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "label": "input_data: BlockSchemaInputType",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "input_data",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "BlockSchemaInputType",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "BlockSchemaInputType",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "dictionary_splat_pattern",
                                                    "label": "**kwargs",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "kwargs",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "BlockOutput",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "BlockOutput",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "\"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "\"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"\"\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        ",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"\"\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "pass_statement",
                                                    "label": "pass",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "run_once",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, input_data: BlockSchemaInputType, output: str, **kwargs)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "input_data: BlockSchemaInputType",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "input_data",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "BlockSchemaInputType",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "BlockSchemaInputType",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "output: str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "output",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "str",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "dictionary_splat_pattern",
                                            "label": "**kwargs",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "kwargs",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data",
                                            "children": [
                                                {
                                                    "type": "pattern_list",
                                                    "label": "name, data",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "name",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "data",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "self.run(input_data, **kwargs)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.run",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "run",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(input_data, **kwargs)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "input_data",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "dictionary_splat",
                                                                    "label": "**kwargs",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "kwargs",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if name == output:\n                return data",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if name == output:\n                return data",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "name == output",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "name",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "output",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return data",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return data",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(f\"{self.name} did not produce any output for {output}\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(f\"{self.name} did not produce any output for {output}\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"{self.name} did not produce any output for {output}\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"{self.name} did not produce any output for {output}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{self.name}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.name",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "name",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": " did not produce any output for ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{output}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "output",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "merge_stats",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, stats: dict[str, Any])",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "stats: dict[str, Any]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "stats",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "dict[str, Any]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "dict[str, Any]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "dict",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[str, Any]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "str",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "str",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "type",
                                                                            "label": "Any",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Any",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "dict[str, Any]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "dict[str, Any]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "dict",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[str, Any]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "str",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "str",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "Any",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Any",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value",
                                            "children": [
                                                {
                                                    "type": "pattern_list",
                                                    "label": "key, value",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "key",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "stats.items()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "stats.items",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "stats",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "items",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "isinstance(value, dict)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "isinstance",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(value, dict)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "dict",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "self.execution_stats.setdefault(key, {}).update(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "self.execution_stats.setdefault(key, {}).update(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "self.execution_stats.setdefault(key, {}).update(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.execution_stats.setdefault(key, {}).update",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "self.execution_stats.setdefault(key, {})",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.execution_stats.setdefault",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "self.execution_stats",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "self",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "execution_stats",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "setdefault",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(key, {})",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "key",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "dictionary",
                                                                                                                    "label": "{}",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "update",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "elif_clause",
                                                                    "label": "elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "isinstance(value, (int, float))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "isinstance",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(value, (int, float))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "tuple",
                                                                                            "label": "(int, float)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "int",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "float",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.execution_stats.setdefault(key, 0)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.execution_stats.setdefault(key, 0)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.execution_stats.setdefault",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.execution_stats",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "execution_stats",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "setdefault",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(key, 0)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "key",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "integer",
                                                                                                            "label": "0",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.execution_stats[key] += value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "augmented_assignment",
                                                                                            "label": "self.execution_stats[key] += value",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "subscript",
                                                                                                    "label": "self.execution_stats[key]",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.execution_stats",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "execution_stats",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "key",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "elif_clause",
                                                                    "label": "elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "isinstance(value, list)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "isinstance",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(value, list)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "list",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.execution_stats.setdefault(key, [])",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.execution_stats.setdefault(key, [])",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.execution_stats.setdefault",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.execution_stats",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "execution_stats",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "setdefault",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(key, [])",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "key",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "list",
                                                                                                            "label": "[]",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.execution_stats[key].extend(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.execution_stats[key].extend(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.execution_stats[key].extend",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "subscript",
                                                                                                            "label": "self.execution_stats[key]",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "self.execution_stats",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "self",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "execution_stats",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "key",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "extend",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "else_clause",
                                                                    "label": "else:\n                self.execution_stats[key] = value",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "label": "self.execution_stats[key] = value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "self.execution_stats[key] = value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "label": "self.execution_stats[key] = value",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "subscript",
                                                                                                    "label": "self.execution_stats[key]",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.execution_stats",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "execution_stats",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "key",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return self.execution_stats",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.execution_stats",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "execution_stats",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@property\n    def name(self):\n        return self.__class__.__name__",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@property",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "property",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def name(self):\n        return self.__class__.__name__",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "name",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return self.__class__.__name__",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return self.__class__.__name__",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.__class__.__name__",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.__class__",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "__class__",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__name__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "to_dict",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
                                            "children": [
                                                {
                                                    "type": "dictionary",
                                                    "label": "{\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "label": "\"id\": self.id",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"id\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "id",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.id",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "id",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"name\": self.name",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"name\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "name",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.name",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "name",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"inputSchema\": self.input_schema.jsonschema()",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"inputSchema\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "inputSchema",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.input_schema.jsonschema()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.input_schema.jsonschema",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.input_schema",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "input_schema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "jsonschema",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"outputSchema\": self.output_schema.jsonschema()",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"outputSchema\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "outputSchema",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.output_schema.jsonschema()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.output_schema.jsonschema",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.output_schema",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "output_schema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "jsonschema",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"description\": self.description",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"description\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "description",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.description",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "description",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"categories\": [category.dict() for category in self.categories]",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"categories\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "categories",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "list_comprehension",
                                                                    "label": "[category.dict() for category in self.categories]",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "category.dict()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "category.dict",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "category",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "dict",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "for_in_clause",
                                                                            "label": "for category in self.categories",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "category",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.categories",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "categories",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ]",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"contributors\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "contributors",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "list_comprehension",
                                                                    "label": "[\n                contributor.model_dump() for contributor in self.contributors\n            ]",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "contributor.model_dump()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "contributor.model_dump",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "contributor",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "model_dump",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "for_in_clause",
                                                                            "label": "for contributor in self.contributors",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "contributor",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.contributors",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "contributors",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"staticOutput\": self.static_output",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"staticOutput\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "staticOutput",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.static_output",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "static_output",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "label": "\"uiType\": self.block_type.value",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"uiType\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "uiType",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.block_type.value",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.block_type",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "block_type",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "value",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "execute",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, input_data: BlockInput, **kwargs)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "input_data: BlockInput",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "input_data",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "BlockInput",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "BlockInput",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "dictionary_splat_pattern",
                                            "label": "**kwargs",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "kwargs",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "BlockOutput",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "BlockOutput",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                                            "children": [
                                                {
                                                    "type": "named_expression",
                                                    "label": "error := self.input_schema.validate_data(input_data)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "error",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "self.input_schema.validate_data(input_data)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.input_schema.validate_data",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.input_schema",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "input_schema",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "validate_data",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(input_data)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "input_data",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "label": "raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "ValueError",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "f\"Unable to execute block with invalid input data: {error}\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "f\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "Unable to execute block with invalid input data: ",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{error}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "error",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                                            "children": [
                                                {
                                                    "type": "pattern_list",
                                                    "label": "output_name, output_data",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "output_name",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "output_data",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "self.run(\n            self.input_schema(**input_data), **kwargs\n        )",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.run",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "run",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\n            self.input_schema(**input_data), **kwargs\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.input_schema(**input_data)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.input_schema",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "input_schema",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(**input_data)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "dictionary_splat",
                                                                                    "label": "**input_data",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "input_data",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "dictionary_splat",
                                                                    "label": "**kwargs",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "kwargs",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if output_name == \"error\":\n                raise RuntimeError(output_data)",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "output_name == \"error\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "output_name",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"error\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "error",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise RuntimeError(output_data)",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise RuntimeError(output_data)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "RuntimeError(output_data)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "RuntimeError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(output_data)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "output_data",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "label": "self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "self.block_type == BlockType.STANDARD",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.block_type",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "block_type",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "BlockType.STANDARD",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "BlockType",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "STANDARD",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "parenthesized_expression",
                                                                            "label": "(\n                error := self.output_schema.validate_field(output_name, output_data)\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "named_expression",
                                                                                    "label": "error := self.output_schema.validate_field(output_name, output_data)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "error",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.output_schema.validate_field(output_name, output_data)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.output_schema.validate_field",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.output_schema",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "output_schema",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "validate_field",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(output_name, output_data)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "output_name",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "output_data",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise ValueError(f\"Block produced an invalid output data: {error}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise ValueError(f\"Block produced an invalid output data: {error}\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "ValueError(f\"Block produced an invalid output data: {error}\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "ValueError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(f\"Block produced an invalid output data: {error}\")",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "f\"Block produced an invalid output data: {error}\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "f\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "Block produced an invalid output data: ",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{error}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "error",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "yield output_name, output_data",
                                                            "children": [
                                                                {
                                                                    "type": "yield",
                                                                    "label": "yield output_name, output_data",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_list",
                                                                            "label": "output_name, output_data",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "output_name",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "output_data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# ======================= Block Helper Functions ======================= #",
            "children": []
        },
        {
            "type": "function_definition",
            "label": "def get_blocks() -> dict[str, Type[Block]]:\n    from backend.blocks import AVAILABLE_BLOCKS  # noqa: E402\n\n    return AVAILABLE_BLOCKS",
            "children": [
                {
                    "type": "identifier",
                    "label": "get_blocks",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "()",
                    "children": []
                },
                {
                    "type": "type",
                    "label": "dict[str, Type[Block]]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "dict[str, Type[Block]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "dict",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[str, Type[Block]]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "Type[Block]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "Type[Block]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "Type",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[Block]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "Block",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "Block",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "from backend.blocks import AVAILABLE_BLOCKS  # noqa: E402\n\n    return AVAILABLE_BLOCKS",
                    "children": [
                        {
                            "type": "import_from_statement",
                            "label": "from backend.blocks import AVAILABLE_BLOCKS",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "backend.blocks",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "backend",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "blocks",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "dotted_name",
                                    "label": "AVAILABLE_BLOCKS",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "AVAILABLE_BLOCKS",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# noqa: E402",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "label": "return AVAILABLE_BLOCKS",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "AVAILABLE_BLOCKS",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "async def initialize_blocks() -> None:\n    for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
            "children": [
                {
                    "type": "identifier",
                    "label": "initialize_blocks",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "()",
                    "children": []
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                    "children": [
                        {
                            "type": "for_statement",
                            "label": "for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "cls",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "get_blocks().values()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "get_blocks().values",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "get_blocks()",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "get_blocks",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "values",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "block = cls()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "block = cls()",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "block",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "cls()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cls",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "existing_block",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "await",
                                                            "label": "await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "AgentBlock.prisma().find_first",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "AgentBlock.prisma()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "AgentBlock.prisma",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "AgentBlock",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "prisma",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "find_first",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "label": "where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "where",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "dictionary",
                                                                                            "label": "{\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "pair",
                                                                                                    "label": "\"OR\": [{\"id\": block.id}, {\"name\": block.name}]",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "\"OR\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "OR",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "list",
                                                                                                            "label": "[{\"id\": block.id}, {\"name\": block.name}]",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "dictionary",
                                                                                                                    "label": "{\"id\": block.id}",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "pair",
                                                                                                                            "label": "\"id\": block.id",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "string",
                                                                                                                                    "label": "\"id\"",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "string_start",
                                                                                                                                            "label": "\"",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "string_content",
                                                                                                                                            "label": "id",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "string_end",
                                                                                                                                            "label": "\"",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "attribute",
                                                                                                                                    "label": "block.id",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "block",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "id",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "dictionary",
                                                                                                                    "label": "{\"name\": block.name}",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "pair",
                                                                                                                            "label": "\"name\": block.name",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "string",
                                                                                                                                    "label": "\"name\"",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "string_start",
                                                                                                                                            "label": "\"",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "string_content",
                                                                                                                                            "label": "name",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "string_end",
                                                                                                                                            "label": "\"",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "attribute",
                                                                                                                                    "label": "block.name",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "block",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "name",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue",
                                            "children": [
                                                {
                                                    "type": "not_operator",
                                                    "label": "not existing_block",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "existing_block",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "await",
                                                                    "label": "await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "AgentBlock.prisma().create",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "AgentBlock.prisma()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "AgentBlock.prisma",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "AgentBlock",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "prisma",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "()",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "create",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "keyword_argument",
                                                                                            "label": "data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "data",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "dictionary",
                                                                                                    "label": "{\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"id\": block.id",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"id\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "id",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "block.id",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "block",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "id",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"name\": block.name",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"name\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "name",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "block.name",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "block",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "name",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"inputSchema\": json.dumps(block.input_schema.jsonschema())",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"inputSchema\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "inputSchema",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "json.dumps(block.input_schema.jsonschema())",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "json.dumps",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "json",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "dumps",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(block.input_schema.jsonschema())",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "call",
                                                                                                                                    "label": "block.input_schema.jsonschema()",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "attribute",
                                                                                                                                            "label": "block.input_schema.jsonschema",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "attribute",
                                                                                                                                                    "label": "block.input_schema",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "block",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "input_schema",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "jsonschema",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "argument_list",
                                                                                                                                            "label": "()",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"outputSchema\": json.dumps(block.output_schema.jsonschema())",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"outputSchema\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "outputSchema",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "json.dumps(block.output_schema.jsonschema())",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "json.dumps",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "json",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "dumps",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(block.output_schema.jsonschema())",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "call",
                                                                                                                                    "label": "block.output_schema.jsonschema()",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "attribute",
                                                                                                                                            "label": "block.output_schema.jsonschema",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "attribute",
                                                                                                                                                    "label": "block.output_schema",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "block",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "output_schema",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "jsonschema",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "argument_list",
                                                                                                                                            "label": "()",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "continue_statement",
                                                            "label": "continue",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "input_schema = json.dumps(block.input_schema.jsonschema())",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "input_schema = json.dumps(block.input_schema.jsonschema())",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "input_schema",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "json.dumps(block.input_schema.jsonschema())",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "json.dumps",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "json",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "dumps",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(block.input_schema.jsonschema())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "block.input_schema.jsonschema()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "block.input_schema.jsonschema",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "block.input_schema",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "input_schema",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "jsonschema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "output_schema = json.dumps(block.output_schema.jsonschema())",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "output_schema = json.dumps(block.output_schema.jsonschema())",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "output_schema",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "json.dumps(block.output_schema.jsonschema())",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "json.dumps",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "json",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "dumps",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(block.output_schema.jsonschema())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "block.output_schema.jsonschema()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "block.output_schema.jsonschema",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "block.output_schema",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "output_schema",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "jsonschema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                            "children": [
                                                {
                                                    "type": "parenthesized_expression",
                                                    "label": "(\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        )",
                                                    "children": [
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "label": "block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema",
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "label": "block.id != existing_block.id\n            or block.name != existing_block.name",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "block.id != existing_block.id",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "block.id",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "id",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "existing_block.id",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "existing_block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "id",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "block.name != existing_block.name",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "block.name",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "name",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "existing_block.name",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "existing_block",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "name",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "input_schema != existing_block.inputSchema",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "input_schema",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "existing_block.inputSchema",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "existing_block",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "inputSchema",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "output_schema != existing_block.outputSchema",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "output_schema",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "existing_block.outputSchema",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "existing_block",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "outputSchema",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "await",
                                                                    "label": "await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "AgentBlock.prisma().update",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "AgentBlock.prisma()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "AgentBlock.prisma",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "AgentBlock",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "prisma",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "()",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "update",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "keyword_argument",
                                                                                            "label": "where={\"id\": existing_block.id}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "where",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "dictionary",
                                                                                                    "label": "{\"id\": existing_block.id}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"id\": existing_block.id",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"id\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "id",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "existing_block.id",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "existing_block",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "id",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "keyword_argument",
                                                                                            "label": "data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                }",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "data",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "dictionary",
                                                                                                    "label": "{\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                }",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"id\": block.id",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"id\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "id",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "block.id",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "block",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "id",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"name\": block.name",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"name\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "name",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "block.name",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "block",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "name",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"inputSchema\": input_schema",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"inputSchema\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "inputSchema",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "input_schema",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "\"outputSchema\": output_schema",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "\"outputSchema\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "outputSchema",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "output_schema",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def get_block(block_id: str) -> Block | None:\n    cls = get_blocks().get(block_id)\n    return cls() if cls else None",
            "children": [
                {
                    "type": "identifier",
                    "label": "get_block",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(block_id: str)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "block_id: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "block_id",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "Block | None",
                    "children": [
                        {
                            "type": "binary_operator",
                            "label": "Block | None",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "Block",
                                    "children": []
                                },
                                {
                                    "type": "none",
                                    "label": "None",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "cls = get_blocks().get(block_id)\n    return cls() if cls else None",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "cls = get_blocks().get(block_id)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "cls = get_blocks().get(block_id)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "cls",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "get_blocks().get(block_id)",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "get_blocks().get",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "get_blocks()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "get_blocks",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "get",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(block_id)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "block_id",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return cls() if cls else None",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "label": "cls() if cls else None",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "cls()",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "()",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "cls",
                                            "children": []
                                        },
                                        {
                                            "type": "none",
                                            "label": "None",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}