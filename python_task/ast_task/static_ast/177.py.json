{
    "type": "module",
    "label": "from contextlib import contextmanager\nfrom threading import Lock\nfrom typing import TYPE_CHECKING, Any\n\nfrom expiringdict import ExpiringDict\n\nif TYPE_CHECKING:\n    from redis import Redis\n    from redis.lock import Lock as RedisLock\n\n\nclass RedisKeyedMutex:\n    \"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n\n    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()\n\n    @contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock\n\n    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()\n",
    "children": [
        {
            "type": "import_from_statement",
            "label": "from contextlib import contextmanager",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "contextlib",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "contextlib",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "contextmanager",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "contextmanager",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from threading import Lock",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "threading",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "threading",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Lock",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Lock",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from typing import TYPE_CHECKING, Any",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "TYPE_CHECKING",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "TYPE_CHECKING",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Any",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Any",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from expiringdict import ExpiringDict",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "expiringdict",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "expiringdict",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ExpiringDict",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ExpiringDict",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if TYPE_CHECKING:\n    from redis import Redis\n    from redis.lock import Lock as RedisLock",
            "children": [
                {
                    "type": "identifier",
                    "label": "TYPE_CHECKING",
                    "children": []
                },
                {
                    "type": "block",
                    "label": "from redis import Redis\n    from redis.lock import Lock as RedisLock",
                    "children": [
                        {
                            "type": "import_from_statement",
                            "label": "from redis import Redis",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "redis",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "redis",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "dotted_name",
                                    "label": "Redis",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Redis",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "import_from_statement",
                            "label": "from redis.lock import Lock as RedisLock",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "redis.lock",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "redis",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "lock",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "aliased_import",
                                    "label": "Lock as RedisLock",
                                    "children": [
                                        {
                                            "type": "dotted_name",
                                            "label": "Lock",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Lock",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "RedisLock",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class RedisKeyedMutex:\n    \"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n\n    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()\n\n    @contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock\n\n    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
            "children": [
                {
                    "type": "identifier",
                    "label": "RedisKeyedMutex",
                    "children": []
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n\n    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()\n\n    @contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock\n\n    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, redis: \"Redis\", timeout: int | None = 60)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "redis: \"Redis\"",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "redis",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "\"Redis\"",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"Redis\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "Redis",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "label": "timeout: int | None = 60",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "timeout",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "int | None",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "int | None",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "none",
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "60",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.redis = redis",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.redis = redis",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.redis",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "redis",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "redis",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.timeout = timeout",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.timeout = timeout",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.timeout",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "timeout",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "timeout",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.locks",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "locks",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "dict[Any, \"RedisLock\"]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "dict[Any, \"RedisLock\"]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "dict",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[Any, \"RedisLock\"]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "Any",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "Any",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "\"RedisLock\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"RedisLock\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "RedisLock",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "ExpiringDict",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "keyword_argument",
                                                                            "label": "max_len=6000",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "max_len",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "6000",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "keyword_argument",
                                                                            "label": "max_age_seconds=self.timeout",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "max_age_seconds",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.timeout",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "timeout",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.locks_lock = Lock()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.locks_lock = Lock()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.locks_lock",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "locks_lock",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "Lock()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Lock",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@contextmanager",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "contextmanager",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "locked",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self, key: Any)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "label": "key: Any",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "key",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "Any",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Any",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "lock = self.acquire(key)",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "lock = self.acquire(key)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "lock",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.acquire(key)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.acquire",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "acquire",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(key)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "key",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "try_statement",
                                                    "label": "try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "label": "yield",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "yield",
                                                                    "children": [
                                                                        {
                                                                            "type": "yield",
                                                                            "label": "yield",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "finally_clause",
                                                            "label": "finally:\n            if lock.locked():\n                lock.release()",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "label": "if lock.locked():\n                lock.release()",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if lock.locked():\n                lock.release()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "lock.locked()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "lock.locked",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "lock",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "locked",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "lock.release()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "label": "lock.release()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "lock.release()",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "lock.release",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "lock",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "release",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "()",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "acquire",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, key: Any)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "key: Any",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "key",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Any",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "Any",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "\"RedisLock\"",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"RedisLock\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "RedisLock",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Acquires and returns a lock with the given key\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Acquires and returns a lock with the given key\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Acquires and returns a lock with the given key",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "with_statement",
                                            "label": "with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]",
                                            "children": [
                                                {
                                                    "type": "with_clause",
                                                    "label": "self.locks_lock",
                                                    "children": [
                                                        {
                                                            "type": "with_item",
                                                            "label": "self.locks_lock",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.locks_lock",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "locks_lock",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "key not in self.locks",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "key",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.locks",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "locks",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "subscript",
                                                                                            "label": "self.locks[key]",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.locks",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "self",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "locks",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "key",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.redis.lock",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.redis",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "redis",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "lock",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(\n                    str(key), self.timeout, thread_local=False\n                )",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "str(key)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "str",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(key)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "key",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.timeout",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "timeout",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "keyword_argument",
                                                                                                            "label": "thread_local=False",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "thread_local",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "false",
                                                                                                                    "label": "False",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "lock = self.locks[key]",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "lock = self.locks[key]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "lock",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "self.locks[key]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.locks",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "locks",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "key",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "lock.acquire()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "lock.acquire()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "lock.acquire",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "lock",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "acquire",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return lock",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "lock",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "release",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, key: Any)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "key: Any",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "key",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Any",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "Any",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()",
                                            "children": [
                                                {
                                                    "type": "boolean_operator",
                                                    "label": "(lock := self.locks.get(key)) and lock.locked() and lock.owned()",
                                                    "children": [
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "(lock := self.locks.get(key)) and lock.locked()",
                                                            "children": [
                                                                {
                                                                    "type": "parenthesized_expression",
                                                                    "label": "(lock := self.locks.get(key))",
                                                                    "children": [
                                                                        {
                                                                            "type": "named_expression",
                                                                            "label": "lock := self.locks.get(key)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "lock",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "self.locks.get(key)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.locks.get",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.locks",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "self",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "locks",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "get",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(key)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "key",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "lock.locked()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "lock.locked",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "lock",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "locked",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "lock.owned()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "lock.owned",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "lock",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "owned",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "lock.release()",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "lock.release()",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "lock.release()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "lock.release",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "lock",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "release",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "release_all_locks",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Call this on process termination to ensure all locks are released\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Call this on process termination to ensure all locks are released\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Call this on process termination to ensure all locks are released",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.locks_lock.acquire(blocking=False)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.locks_lock.acquire(blocking=False)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.locks_lock.acquire",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.locks_lock",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "locks_lock",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "acquire",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(blocking=False)",
                                                            "children": [
                                                                {
                                                                    "type": "keyword_argument",
                                                                    "label": "blocking=False",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "blocking",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "false",
                                                                            "label": "False",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "lock",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "self.locks.values()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.locks.values",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.locks",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "locks",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "values",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if lock.locked() and lock.owned():\n                lock.release()",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if lock.locked() and lock.owned():\n                lock.release()",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "label": "lock.locked() and lock.owned()",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "lock.locked()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "lock.locked",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "lock",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "locked",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "lock.owned()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "lock.owned",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "lock",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "owned",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "lock.release()",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "lock.release()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "lock.release()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "lock.release",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "lock",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "release",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}