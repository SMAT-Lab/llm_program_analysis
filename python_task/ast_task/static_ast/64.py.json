{
    "type": "module",
    "label": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\n\ndef generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)\n\n\ndef create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()\n\n\nif __name__ == \"__main__\":\n    seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n\n    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)\n",
    "children": [
        {
            "type": "expression_statement",
            "label": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"",
            "children": [
                {
                    "type": "string",
                    "label": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"",
                    "children": [
                        {
                            "type": "string_start",
                            "label": "\"\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "future_import_statement",
            "label": "from __future__ import annotations",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "annotations",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "annotations",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from typing import Any",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Any",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Any",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)",
            "children": [
                {
                    "type": "identifier",
                    "label": "generate_all_subsequences",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(sequence: list[Any])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "sequence: list[Any]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "sequence",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[Any]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[Any]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[Any]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "Any",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Any",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "create_state_space_tree(sequence, [], 0)",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "create_state_space_tree(sequence, [], 0)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "create_state_space_tree(sequence, [], 0)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "create_state_space_tree",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(sequence, [], 0)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "sequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "label": "[]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()",
            "children": [
                {
                    "type": "identifier",
                    "label": "create_state_space_tree",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "sequence: list[Any]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "sequence",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[Any]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[Any]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[Any]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "Any",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Any",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "current_subsequence: list[Any]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "current_subsequence",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[Any]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[Any]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[Any]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "Any",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Any",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "index: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "index",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if index == len(sequence):\n        print(current_subsequence)\n        return",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "index == len(sequence)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "index",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(sequence)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(sequence)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "sequence",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "print(current_subsequence)\n        return",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "print(current_subsequence)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "print(current_subsequence)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "print",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(current_subsequence)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "current_subsequence",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "create_state_space_tree",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(sequence, current_subsequence, index + 1)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "sequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "current_subsequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "binary_operator",
                                                    "label": "index + 1",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "index",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "current_subsequence.append(sequence[index])",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "current_subsequence.append(sequence[index])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "current_subsequence.append",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "current_subsequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "append",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(sequence[index])",
                                            "children": [
                                                {
                                                    "type": "subscript",
                                                    "label": "sequence[index]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "sequence",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "index",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "create_state_space_tree",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(sequence, current_subsequence, index + 1)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "sequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "current_subsequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "binary_operator",
                                                    "label": "index + 1",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "index",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "current_subsequence.pop()",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "current_subsequence.pop()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "current_subsequence.pop",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "current_subsequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "pop",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n\n    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)",
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n\n    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "seq: list[Any] = [1, 2, 3]",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "seq: list[Any] = [1, 2, 3]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "seq",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "list[Any]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[Any]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[Any]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "Any",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "Any",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "list",
                                            "label": "[1, 2, 3]",
                                            "children": [
                                                {
                                                    "type": "integer",
                                                    "label": "1",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "2",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "3",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "generate_all_subsequences(seq)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "generate_all_subsequences(seq)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "generate_all_subsequences",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(seq)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "seq",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "seq.clear()",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "seq.clear()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "seq.clear",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "seq",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "clear",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "seq.extend([\"A\", \"B\", \"C\"])",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "seq.extend([\"A\", \"B\", \"C\"])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "seq.extend",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "seq",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "extend",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "([\"A\", \"B\", \"C\"])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "label": "[\"A\", \"B\", \"C\"]",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"A\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "A",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "string",
                                                            "label": "\"B\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "B",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "string",
                                                            "label": "\"C\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "C",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "generate_all_subsequences(seq)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "generate_all_subsequences(seq)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "generate_all_subsequences",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(seq)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "seq",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}