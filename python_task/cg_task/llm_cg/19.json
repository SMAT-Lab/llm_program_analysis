{
    "main": [
        "logging.getLogger"
    ],
    "DateTimeEncoder.default": [
        "<builtin>.super",
        "datetime.isoformat",
        "isinstance"
    ],
    "BaseRedisEventBus._serialize_message": [
        "json.dumps"
    ],
    "BaseRedisEventBus._deserialize_message": [
        "BaseRedisEventBus.Model",
        "Exception",
        "json.loads"
    ],
    "BaseRedisEventBus._get_pubsub_channel": [
        "redis.client.PubSub",
        "redis.asyncio.client.PubSub",
        "redis.Redis.pubsub"
    ],
    "RedisEventBus.connection": [
        "backend.data.redis.get_redis"
    ],
    "RedisEventBus.publish_event": [
        "BaseRedisEventBus._serialize_message",
        "redis.Redis.publish",
        "RedisEventBus.connection"
    ],
    "RedisEventBus.listen_events": [
        "BaseRedisEventBus._deserialize_message",
        "isinstance",
        "PubSub.subscribe",
        "BaseRedisEventBus._get_pubsub_channel",
        "PubSub.listen",
        "PubSub.psubscribe"
    ],
    "AsyncRedisEventBus.connection": [
        "backend.data.redis.get_redis_async"
    ],
    "AsyncRedisEventBus.publish_event": [
        "BaseRedisEventBus._serialize_message",
        "AsyncRedisEventBus.connection",
        "redis.Redis.publish"
    ],
    "AsyncRedisEventBus.listen_events": [
        "BaseRedisEventBus._deserialize_message",
        "isinstance",
        "AsyncPubSub.psubscribe",
        "BaseRedisEventBus._get_pubsub_channel",
        "AsyncPubSub.subscribe",
        "AsyncPubSub.listen"
    ],
    "AsyncRedisEventBus.wait_for_event": [
        "AsyncRedisEventBus.listen_events",
        "TimeoutError",
        "asyncio.wait_for",
        "aiter",
        "anext"
    ]
}