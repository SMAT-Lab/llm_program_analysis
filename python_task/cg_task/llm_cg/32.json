{
    "main": [
        "fastapi.testclient.TestClient",
        "import.datetime",
        "fastapi.FastAPI.include_router",
        "fastapi.FastAPI",
        "fastapi.FastAPI.dependency_overrides"
    ],
    "override_auth_middleware": [],
    "override_get_user_id": [],
    "test_get_agents_defaults": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentsResponse",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.StoreAgentsResponse.model_validate",
        "response.json",
        "client.get"
    ],
    "test_get_agents_featured": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentsResponse",
        "backend.server.v2.store.model.StoreAgent",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.StoreAgentsResponse.model_validate",
        "response.json",
        "client.get"
    ],
    "test_get_agents_by_creator": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentsResponse",
        "backend.server.v2.store.model.StoreAgent",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.StoreAgentsResponse.model_validate",
        "response.json",
        "client.get"
    ],
    "test_get_agents_sorted": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentsResponse",
        "backend.server.v2.store.model.StoreAgent",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.StoreAgentsResponse.model_validate",
        "response.json",
        "client.get"
    ],
    "test_get_agents_search": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentsResponse",
        "backend.server.v2.store.model.StoreAgent",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.StoreAgentsResponse.model_validate",
        "response.json",
        "client.get"
    ],
    "test_get_agents_category": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentsResponse",
        "backend.server.v2.store.model.StoreAgent",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.StoreAgentsResponse.model_validate",
        "response.json",
        "client.get"
    ],
    "test_get_agents_pagination": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentsResponse",
        "backend.server.v2.store.model.StoreAgent",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.StoreAgentsResponse.model_validate",
        "response.json",
        "client.get"
    ],
    "test_get_agents_malformed_request": [
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "client.get"
    ],
    "test_get_agent_details": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.StoreAgentDetails.model_validate",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreAgentDetails",
        "response.json",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "datetime.datetime.now",
        "client.get"
    ],
    "test_get_creators_defaults": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "response.status_code",
        "backend.server.v2.store.model.CreatorsResponse",
        "pytest_mock.MockFixture.patch",
        "backend.server.v2.store.model.CreatorsResponse.model_validate",
        "assert",
        "mocker.patch",
        "response.json",
        "client.get"
    ],
    "test_get_creators_pagination": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "response.json",
        "response.status_code",
        "backend.server.v2.store.model.CreatorsResponse",
        "pytest_mock.MockFixture.patch",
        "backend.server.v2.store.model.Creator",
        "assert",
        "mocker.patch",
        "backend.server.v2.store.model.CreatorsResponse.model_validate",
        "client.get"
    ],
    "test_get_creators_malformed_request": [
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "client.get"
    ],
    "test_get_creator_details": [
        "mock_db_call.return_value",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.CreatorDetails",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "backend.server.v2.store.model.CreatorDetails.model_validate",
        "mocker.patch",
        "response.json",
        "client.get"
    ],
    "test_get_submissions_success": [
        "prisma.enums.SubmissionStatus.APPROVED",
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "backend.server.v2.store.model.StoreSubmission",
        "mock_db_call.assert_called_once_with",
        "response.json",
        "backend.server.v2.store.model.StoreSubmissionsResponse.model_validate",
        "backend.server.v2.store.model.StoreSubmissionsResponse",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "datetime.datetime.now",
        "client.get"
    ],
    "test_get_submissions_pagination": [
        "mock_db_call.return_value",
        "backend.server.v2.store.model.Pagination",
        "mock_db_call.assert_called_once_with",
        "backend.server.v2.store.model.StoreSubmissionsResponse.model_validate",
        "backend.server.v2.store.model.StoreSubmissionsResponse",
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "assert",
        "mocker.patch",
        "response.json",
        "client.get"
    ],
    "test_get_submissions_malformed_request": [
        "response.status_code",
        "pytest_mock.MockFixture.patch",
        "client.get"
    ]
}