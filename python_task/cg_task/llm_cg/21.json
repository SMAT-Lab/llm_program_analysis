{
    "main": [],
    "execution_manager_client": [
        "get_service_client"
    ],
    "execution_scheduler_client": [
        "get_service_client"
    ],
    "v1_router.include_router": [
        "backend.server.integrations.router.router",
        "backend.server.routers.analytics.router"
    ],
    "get_or_create_user_route": [
        "get_or_create_user",
        "model_dump"
    ],
    "get_graph_blocks": [
        "backend.data.block.get_blocks",
        "get_block_costs"
    ],
    "execute_graph_block": [
        "backend.data.block.get_block",
        "HTTPException",
        "defaultdict"
    ],
    "get_user_credits": [
        "get_user_id",
        "_user_credit_model.get_or_refill_credit",
        "<builtin>.max"
    ],
    "get_graphs": [
        "get_user_id",
        "graph_db.get_graphs"
    ],
    "get_graph": [
        "get_user_id",
        "graph_db.get_graph",
        "HTTPException"
    ],
    "get_graph_all_versions": [
        "get_user_id",
        "graph_db.get_graph_all_versions",
        "HTTPException"
    ],
    "create_new_graph": [
        "do_create_graph"
    ],
    "do_create_graph": [
        "graph_db.make_graph_model",
        "graph_db.get_graph",
        "HTTPException",
        "graph_db.create_graph",
        "on_graph_activate"
    ],
    "delete_graph": [
        "get_user_id",
        "graph_db.get_graph",
        "on_graph_deactivate",
        "graph_db.delete_graph"
    ],
    "update_graph": [
        "get_user_id",
        "HTTPException",
        "graph_db.get_graph_all_versions",
        "graph_db.make_graph_model",
        "graph_db.create_graph",
        "on_graph_activate",
        "graph_db.set_graph_active_version",
        "on_graph_deactivate"
    ],
    "set_graph_active_version": [
        "get_user_id",
        "graph_db.get_graph",
        "HTTPException",
        "on_graph_activate",
        "graph_db.set_graph_active_version",
        "on_graph_deactivate"
    ],
    "execute_graph": [
        "get_user_id",
        "execution_manager_client.add_execution",
        "HTTPException"
    ],
    "stop_graph_run": [
        "get_user_id",
        "graph_db.get_execution",
        "HTTPException",
        "asyncio.to_thread",
        "execution_manager_client.cancel_execution",
        "execution_db.get_execution_results"
    ],
    "get_executions": [
        "get_user_id",
        "graph_db.get_executions"
    ],
    "get_graph_run_node_execution_results": [
        "get_user_id",
        "graph_db.get_graph",
        "HTTPException",
        "execution_db.get_execution_results"
    ],
    "get_templates": [
        "get_user_id",
        "graph_db.get_graphs"
    ],
    "get_template": [
        "graph_db.get_graph",
        "HTTPException"
    ],
    "create_new_template": [
        "do_create_graph"
    ],
    "create_schedule": [
        "get_user_id",
        "graph_db.get_graph",
        "HTTPException",
        "asyncio.to_thread",
        "execution_scheduler_client.add_execution_schedule"
    ],
    "delete_schedule": [
        "execution_scheduler_client.delete_schedule"
    ],
    "get_execution_schedules": [
        "execution_scheduler_client.get_execution_schedules"
    ],
    "create_api_key": [
        "get_user_id",
        "generate_api_key",
        "APIKeyError",
        "logger.error",
        "HTTPException"
    ],
    "get_api_keys": [
        "get_user_id",
        "list_user_api_keys",
        "APIKeyError",
        "logger.error",
        "HTTPException"
    ],
    "get_api_key": [
        "get_user_id",
        "get_api_key_by_id",
        "HTTPException",
        "APIKeyError",
        "logger.error",
        "HTTPException"
    ],
    "delete_api_key": [
        "get_user_id",
        "revoke_api_key",
        "APIKeyNotFoundError",
        "HTTPException",
        "APIKeyPermissionError",
        "HTTPException",
        "APIKeyError",
        "logger.error",
        "HTTPException"
    ],
    "suspend_key": [
        "get_user_id",
        "suspend_api_key",
        "APIKeyNotFoundError",
        "HTTPException",
        "APIKeyPermissionError",
        "HTTPException",
        "APIKeyError",
        "logger.error",
        "HTTPException"
    ],
    "update_permissions": [
        "get_user_id",
        "update_api_key_permissions",
        "APIKeyNotFoundError",
        "HTTPException",
        "APIKeyPermissionError",
        "HTTPException",
        "APIKeyError",
        "logger.error",
        "HTTPException"
    ]
}