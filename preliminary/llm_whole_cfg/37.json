{
  "source_file": "37.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 1,
        "label": "from datetime import datetime, timedelta",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 3,
        "end_line": 10,
        "label": "from backend.blocks.hubspot._auth import (\n    HubSpotCredentials,\n    HubSpotCredentialsField,\n    HubSpotCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 13,
        "end_line": 31,
        "label": "class HubSpotEngagementBlock(Block):\n    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(\n            description=\"Operation to perform (send_email, track_engagement)\",\n            default=\"send_email\",\n        )\n        email_data: dict = SchemaField(\n            description=\"Email data including recipient, subject, content\",\n            default={},\n        )\n        contact_id: str = SchemaField(\n            description=\"Contact ID for engagement tracking\", default=\"\"\n        )\n        timeframe_days: int = SchemaField(\n            description=\"Number of days to look back for engagement\",\n            default=30,\n            optional=True,\n        )",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 33,
        "end_line": 35,
        "label": "class Output(BlockSchema):\n    result: dict = SchemaField(description=\"Operation result\")\n    status: str = SchemaField(description=\"Operation status\")",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 37,
        "end_line": 44,
        "label": "def __init__(self):\n    super().__init__(\n        id=\"c6524385-7d87-49d6-a470-248bd29ca765\",\n        description=\"Manages HubSpot engagements - sends emails and tracks engagement metrics\",\n        categories={BlockCategory.CRM, BlockCategory.COMMUNICATION},\n        input_schema=HubSpotEngagementBlock.Input,\n        output_schema=HubSpotEngagementBlock.Output,\n    )",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 46,
        "end_line": 53,
        "label": "def run(\n    self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs\n) -> BlockOutput:\n    base_url = \"https://api.hubapi.com\"\n    headers = {\n        \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        \"Content-Type\": \"application/json\",\n    }",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 55,
        "end_line": 73,
        "label": "if input_data.operation == \"send_email\":\n    # Using the email send API\n    email_url = f\"{base_url}/crm/v3/objects/emails\"\n    email_data = {\n        \"properties\": {\n            \"hs_timestamp\": datetime.now().isoformat(),\n            \"hubspot_owner_id\": \"1\",  # This should be configurable\n            \"hs_email_direction\": \"OUTBOUND\",\n            \"hs_email_status\": \"SEND\",\n            \"hs_email_subject\": input_data.email_data.get(\"subject\"),\n            \"hs_email_text\": input_data.email_data.get(\"content\"),\n            \"hs_email_to_email\": input_data.email_data.get(\"recipient\"),\n        }\n    }\n    response = requests.post(email_url, headers=headers, json=email_data)\n    result = response.json()\n    yield \"result\", result\n    yield \"status\", \"email_sent\"",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 75,
        "end_line": 121,
        "label": "elif input_data.operation == \"track_engagement\":\n    # Get engagement events for the contact\n    from_date = datetime.now() - timedelta(days=input_data.timeframe_days)\n    engagement_url = (\n        f\"{base_url}/crm/v3/objects/contacts/{input_data.contact_id}/engagement\"\n    )\n    params = {\"limit\": 100, \"after\": from_date.isoformat()}\n    response = requests.get(engagement_url, headers=headers, params=params)\n    engagements = response.json()\n    # Process engagement metrics\n    metrics = {\n        \"email_opens\": 0,\n        \"email_clicks\": 0,\n        \"email_replies\": 0,\n        \"last_engagement\": None,\n        \"engagement_score\": 0,\n    }\n    for engagement in engagements.get(\"results\", []):\n        eng_type = engagement.get(\"properties\", {}).get(\"hs_engagement_type\")\n        if eng_type == \"EMAIL\":\n            metrics[\"email_opens\"] += 1\n        elif eng_type == \"EMAIL_CLICK\":\n            metrics[\"email_clicks\"] += 1\n        elif eng_type == \"EMAIL_REPLY\":\n            metrics[\"email_replies\"] += 1\n        # Update last engagement time\n        eng_time = engagement.get(\"properties\", {}).get(\"hs_timestamp\")\n        if eng_time and (\n            not metrics[\"last_engagement\"]\n            or eng_time > metrics[\"last_engagement\"]\n        ):\n            metrics[\"last_engagement\"] = eng_time\n    # Calculate simple engagement score\n    metrics[\"engagement_score\"] = (\n        metrics[\"email_opens\"]\n        + metrics[\"email_clicks\"] * 2\n        + metrics[\"email_replies\"] * 3\n    )\n    yield \"result\", metrics\n    yield \"status\", \"engagement_tracked\"",
        "successors": []
      }
    ]
  },
  "code_length": 121
}