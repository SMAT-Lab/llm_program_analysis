{
  "source_file": "10.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 6,
        "label": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 8,
        "end_line": 8,
        "label": "CHECK_INTERVAL = 30",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 11,
        "end_line": 13,
        "label": "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 14,
        "end_line": 15,
        "label": "with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 17,
        "end_line": 18,
        "label": "# Handle both PR and merge group events\n        if \"pull_request\" in event:",
        "successors": [
          6,
          7
        ]
      },
      {
        "id": 6,
        "start_line": 19,
        "end_line": 19,
        "label": "sha = event[\"pull_request\"][\"head\"][\"sha\"]",
        "successors": [
          8
        ]
      },
      {
        "id": 7,
        "start_line": 20,
        "end_line": 21,
        "label": "else:\n            sha = os.environ[\"GITHUB_SHA\"]",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 23,
        "end_line": 29,
        "label": "return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )",
        "successors": []
      },
      {
        "id": 9,
        "start_line": 30,
        "end_line": 32,
        "label": "except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)",
        "successors": []
      },
      {
        "id": 10,
        "start_line": 35,
        "end_line": 36,
        "label": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"",
        "successors": [
          11
        ]
      },
      {
        "id": 11,
        "start_line": 37,
        "end_line": 41,
        "label": "try:\n        print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 42,
        "end_line": 44,
        "label": "except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)",
        "successors": []
      },
      {
        "id": 13,
        "start_line": 47,
        "end_line": 48,
        "label": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"",
        "successors": [
          14
        ]
      },
      {
        "id": 14,
        "start_line": 49,
        "end_line": 50,
        "label": "runs_in_progress = False\n    all_others_passed = True",
        "successors": [
          15
        ]
      },
      {
        "id": 15,
        "start_line": 52,
        "end_line": 53,
        "label": "for run in check_runs:\n        if str(run[\"name\"]) != \"Check PR Status\":",
        "successors": [
          16,
          23
        ]
      },
      {
        "id": 16,
        "start_line": 54,
        "end_line": 55,
        "label": "status = run[\"status\"]\n            conclusion = run[\"conclusion\"]",
        "successors": [
          17
        ]
      },
      {
        "id": 17,
        "start_line": 57,
        "end_line": 58,
        "label": "if status == \"completed\":",
        "successors": [
          18,
          20
        ]
      },
      {
        "id": 18,
        "start_line": 58,
        "end_line": 59,
        "label": "if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n                    all_others_passed = False",
        "successors": [
          19
        ]
      },
      {
        "id": 19,
        "start_line": 60,
        "end_line": 62,
        "label": "print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )",
        "successors": []
      },
      {
        "id": 20,
        "start_line": 63,
        "end_line": 64,
        "label": "else:\n                runs_in_progress = True",
        "successors": [
          21
        ]
      },
      {
        "id": 21,
        "start_line": 65,
        "end_line": 66,
        "label": "print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False",
        "successors": []
      },
      {
        "id": 22,
        "start_line": 67,
        "end_line": 69,
        "label": "else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"",
        "successors": []
      },
      {
        "id": 23,
        "start_line": 72,
        "end_line": 72,
        "label": "return runs_in_progress, all_others_passed",
        "successors": []
      },
      {
        "id": 24,
        "start_line": 75,
        "end_line": 76,
        "label": "def main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()",
        "successors": [
          25
        ]
      },
      {
        "id": 25,
        "start_line": 78,
        "end_line": 81,
        "label": "endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",",
        "successors": [
          26
        ]
      },
      {
        "id": 26,
        "start_line": 82,
        "end_line": 83,
        "label": "if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"",
        "successors": [
          27,
          28
        ]
      },
      {
        "id": 27,
        "start_line": 85,
        "end_line": 85,
        "label": "print(f\"Current run ID: {current_run_id}\")",
        "successors": [
          28
        ]
      },
      {
        "id": 28,
        "start_line": 87,
        "end_line": 88,
        "label": "while True:\n        data = make_api_request(endpoint, headers)",
        "successors": [
          29,
          32
        ]
      },
      {
        "id": 29,
        "start_line": 90,
        "end_line": 90,
        "label": "check_runs = data[\"check_runs\"]",
        "successors": [
          30
        ]
      },
      {
        "id": 30,
        "start_line": 92,
        "end_line": 92,
        "label": "print(\"Processing check runs...\")",
        "successors": [
          31
        ]
      },
      {
        "id": 31,
        "start_line": 94,
        "end_line": 96,
        "label": "print(check_runs)\n\nruns_in_progress, all_others_passed = process_check_runs(check_runs)",
        "successors": [
          32,
          34
        ]
      },
      {
        "id": 32,
        "start_line": 98,
        "end_line": 99,
        "label": "if not runs_in_progress:\n            break",
        "successors": [
          34
        ]
      },
      {
        "id": 33,
        "start_line": 101,
        "end_line": 105,
        "label": "print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)",
        "successors": [
          28
        ]
      },
      {
        "id": 34,
        "start_line": 107,
        "end_line": 109,
        "label": "if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)",
        "successors": []
      },
      {
        "id": 35,
        "start_line": 110,
        "end_line": 112,
        "label": "else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)",
        "successors": []
      },
      {
        "id": 36,
        "start_line": 115,
        "end_line": 116,
        "label": "if __name__ == \"__main__\":\n    main()",
        "successors": [
          24
        ]
      }
    ]
  },
  "code_length": 116
}