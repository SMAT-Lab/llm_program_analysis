{
  "source_file": "172.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 3,
        "label": "docstring",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 5,
        "end_line": 12,
        "label": "imports",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 15,
        "end_line": 19,
        "label": "def get_pid_path()",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 22,
        "end_line": 25,
        "label": "def get_pid() - if not file_path.exists(): ... return None",
        "successors": [
          5,
          7
        ]
      },
      {
        "id": 5,
        "start_line": 27,
        "end_line": 33,
        "label": "def get_pid() - os.makedirs ... return None",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 36,
        "end_line": 40,
        "label": "def write_pid(pid: int)",
        "successors": [
          8
        ]
      },
      {
        "id": 7,
        "start_line": 43,
        "end_line": 45,
        "label": "class MainApp(AppProcess): def run(self):",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 48,
        "end_line": 51,
        "label": "@click.group() def main(): ... pass",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 54,
        "end_line": 74,
        "label": "def start()",
        "successors": [
          10,
          14
        ]
      },
      {
        "id": 10,
        "start_line": 61,
        "end_line": 63,
        "label": "if pid and psutil.pid_exists(pid): ... exit(1)",
        "successors": []
      },
      {
        "id": 11,
        "start_line": 64,
        "end_line": 66,
        "label": "elif pid: ... os.remove(get_pid_path())",
        "successors": [
          14
        ]
      },
      {
        "id": 12,
        "start_line": 78,
        "end_line": 92,
        "label": "def stop()",
        "successors": [
          15
        ]
      },
      {
        "id": 13,
        "start_line": 96,
        "end_line": 104,
        "label": "def gen_encrypt_key()",
        "successors": [
          16
        ]
      },
      {
        "id": 14,
        "start_line": 107,
        "end_line": 111,
        "label": "@click.group() def test(): ... pass",
        "successors": [
          17
        ]
      },
      {
        "id": 15,
        "start_line": 114,
        "end_line": 132,
        "label": "def reddit(server_address: str)",
        "successors": [
          18
        ]
      },
      {
        "id": 16,
        "start_line": 135,
        "end_line": 168,
        "label": "def populate_db(server_address: str)",
        "successors": [
          19
        ]
      },
      {
        "id": 17,
        "start_line": 171,
        "end_line": 195,
        "label": "def graph(server_address: str)",
        "successors": [
          20,
          21
        ]
      },
      {
        "id": 18,
        "start_line": 198,
        "end_line": 210,
        "label": "def execute(graph_id: str, content: dict)",
        "successors": [
          22
        ]
      },
      {
        "id": 19,
        "start_line": 213,
        "end_line": 218,
        "label": "def event()",
        "successors": [
          23
        ]
      },
      {
        "id": 20,
        "start_line": 221,
        "end_line": 250,
        "label": "def websocket(server_address: str, graph_id: str)",
        "successors": [
          24
        ]
      },
      {
        "id": 21,
        "start_line": 254,
        "end_line": 257,
        "label": "main.add_command(test) ... main()",
        "successors": []
      }
    ]
  },
  "code_length": 257
}