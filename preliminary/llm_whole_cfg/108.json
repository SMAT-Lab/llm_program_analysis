{
  "source_file": "108.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 2,
        "label": "from base64 import b64encode\nfrom urllib.parse import urlencode",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 4,
        "end_line": 6,
        "label": "from backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 8,
        "end_line": 8,
        "label": "from .base import BaseOAuthHandler",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 11,
        "end_line": 11,
        "label": "class NotionOAuthHandler(BaseOAuthHandler):",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 12,
        "end_line": 18,
        "label": "\"\"\"\n    Based on the documentation at https://developers.notion.com/docs/authorization\n\n    Notes:\n    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow\n    - Notion doesn't use scopes\n    \"\"\"",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 20,
        "end_line": 20,
        "label": "PROVIDER_NAME = ProviderName.NOTION",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 22,
        "end_line": 27,
        "label": "def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n    self.client_id = client_id\n    self.client_secret = client_secret\n    self.redirect_uri = redirect_uri\n    self.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\"\n    self.token_url = \"https://api.notion.com/v1/oauth/token\"",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 29,
        "end_line": 37,
        "label": "def get_login_url(self, scopes: list[str], state: str) -> str:\n    params = {\n        \"client_id\": self.client_id,\n        \"redirect_uri\": self.redirect_uri,\n        \"response_type\": \"code\",\n        \"owner\": \"user\",\n        \"state\": state,\n    }\n    return f\"{self.auth_base_url}?{urlencode(params)}\"",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 39,
        "end_line": 77,
        "label": "def exchange_code_for_tokens(\n    self, code: str, scopes: list[str]\n) -> OAuth2Credentials:\n    request_body = {\n        \"grant_type\": \"authorization_code\",\n        \"code\": code,\n        \"redirect_uri\": self.redirect_uri,\n    }\n    auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()\n    headers = {\n        \"Authorization\": f\"Basic {auth_str}\",\n        \"Accept\": \"application/json\",\n    }\n    response = requests.post(self.token_url, json=request_body, headers=headers)\n    token_data = response.json()\n    # Email is only available for non-bot users\n    email = (\n        token_data[\"owner\"][\"person\"][\"email\"]\n        if \"person\" in token_data[\"owner\"]\n        and \"email\" in token_data[\"owner\"][\"person\"]\n        else None\n    )\n    return OAuth2Credentials(\n        provider=self.PROVIDER_NAME,\n        title=token_data.get(\"workspace_name\"),\n        username=email,\n        access_token=token_data[\"access_token\"],\n        refresh_token=None,\n        access_token_expires_at=None,  # Notion tokens don't expire\n        refresh_token_expires_at=None,\n        scopes=[],\n        metadata={\n            \"owner\": token_data[\"owner\"],\n            \"bot_id\": token_data[\"bot_id\"],\n            \"workspace_id\": token_data[\"workspace_id\"],\n            \"workspace_name\": token_data.get(\"workspace_name\"),\n            \"workspace_icon\": token_data.get(\"workspace_icon\"),\n        },\n    )",
        "successors": [
          10
        ]
      },
      {
        "id": 10,
        "start_line": 80,
        "end_line": 82,
        "label": "def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n    # Notion doesn't support token revocation\n    return False",
        "successors": [
          11
        ]
      },
      {
        "id": 11,
        "start_line": 84,
        "end_line": 86,
        "label": "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n    # Notion doesn't support token refresh\n    return credentials",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 88,
        "end_line": 90,
        "label": "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n    # Notion access tokens don't expire\n    return False",
        "successors": []
      }
    ]
  },
  "code_length": 90
}