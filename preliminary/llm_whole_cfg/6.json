{
  "source_file": "6.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 1,
        "label": "from urllib.parse import quote",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 3,
        "end_line": 3,
        "label": "import requests",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 5,
        "end_line": 9,
        "label": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 10,
        "end_line": 11,
        "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 14,
        "end_line": 27,
        "label": "class FactCheckerBlock(Block):\n    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 29,
        "end_line": 36,
        "label": "def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 38,
        "end_line": 51,
        "label": "def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 53,
        "end_line": 59,
        "label": "if \"data\" in data:\n        data = data[\"data\"]\n        yield \"factuality\", data[\"factuality\"]\n        yield \"result\", data[\"result\"]\n        yield \"reason\", data[\"reason\"]\n    else:\n        raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
        "successors": []
      }
    ]
  },
  "code_length": 59
}