{
  "source_file": "167.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 2,
        "label": "import json\nfrom typing import Optional",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 4,
        "end_line": 4,
        "label": "from cryptography.fernet import Fernet",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 6,
        "end_line": 6,
        "label": "from backend.util.settings import Settings",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 8,
        "end_line": 8,
        "label": "ENCRYPTION_KEY = Settings().secrets.encryption_key",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 11,
        "end_line": 11,
        "label": "class JSONCryptor:",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 12,
        "end_line": 12,
        "label": "def __init__(self, key: Optional[str] = None):",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 13,
        "end_line": 14,
        "label": "# Use provided key or get from environment\nself.key = key or ENCRYPTION_KEY",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 15,
        "end_line": 15,
        "label": "if not self.key:",
        "successors": [
          9,
          11
        ]
      },
      {
        "id": 9,
        "start_line": 16,
        "end_line": 18,
        "label": "raise ValueError(\n\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\")",
        "successors": [
          11
        ]
      },
      {
        "id": 10,
        "start_line": 19,
        "end_line": 21,
        "label": "self.fernet = Fernet(\nself.key.encode() if isinstance(self.key, str) else self.key)",
        "successors": [
          12
        ]
      },
      {
        "id": 11,
        "start_line": 23,
        "end_line": 23,
        "label": "def encrypt(self, data: dict) -> str:",
        "successors": [
          13
        ]
      },
      {
        "id": 12,
        "start_line": 24,
        "end_line": 27,
        "label": "\"\"\"Encrypt dictionary data to string\"\"\"\njson_str = json.dumps(data)\nencrypted = self.fernet.encrypt(json_str.encode())\nreturn encrypted.decode()",
        "successors": [
          14
        ]
      },
      {
        "id": 13,
        "start_line": 29,
        "end_line": 29,
        "label": "def decrypt(self, encrypted_str: str) -> dict:",
        "successors": [
          15
        ]
      },
      {
        "id": 14,
        "start_line": 30,
        "end_line": 30,
        "label": "\"\"\"Decrypt string to dictionary\"\"\"",
        "successors": [
          16
        ]
      },
      {
        "id": 15,
        "start_line": 31,
        "end_line": 31,
        "label": "if not encrypted_str:",
        "successors": [
          17,
          18
        ]
      },
      {
        "id": 16,
        "start_line": 32,
        "end_line": 32,
        "label": "return {}",
        "successors": [
          19
        ]
      },
      {
        "id": 17,
        "start_line": 33,
        "end_line": 34,
        "label": "decrypted = self.fernet.decrypt(encrypted_str.encode())\nreturn json.loads(decrypted.decode())",
        "successors": [
          19
        ]
      }
    ]
  },
  "code_length": 34
}