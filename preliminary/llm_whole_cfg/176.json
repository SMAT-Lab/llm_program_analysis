{
  "source_file": "176.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 3,
        "label": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 4,
        "end_line": 8,
        "label": "\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 9,
        "end_line": 12,
        "label": "\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 13,
        "end_line": 16,
        "label": "from backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 17,
        "end_line": 19,
        "label": "\nlogger = logging.getLogger(__name__)\nsettings = Settings()",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 20,
        "end_line": 21,
        "label": "\n\n",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 22,
        "end_line": 27,
        "label": "@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n    yield",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 28,
        "end_line": 29,
        "label": "\n\n",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 30,
        "end_line": 32,
        "label": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)\n_connection_manager = None",
        "successors": [
          10
        ]
      },
      {
        "id": 10,
        "start_line": 33,
        "end_line": 41,
        "label": "\n\ndef get_connection_manager():\n    global _connection_manager\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n    return _connection_manager\n",
        "successors": [
          11
        ]
      },
      {
        "id": 11,
        "start_line": 42,
        "end_line": 52,
        "label": "async def event_broadcaster(manager: ConnectionManager):\n    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n    finally:\n        redis.disconnect()",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 53,
        "end_line": 54,
        "label": "\n\n",
        "successors": [
          13
        ]
      },
      {
        "id": 13,
        "start_line": 55,
        "end_line": 73,
        "label": "async def authenticate_websocket(websocket: WebSocket) -> str:\n    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n\n    token = websocket.query_params.get(\"token\")\n    if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"\n\n    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
        "successors": [
          14
        ]
      },
      {
        "id": 14,
        "start_line": 74,
        "end_line": 75,
        "label": "\n\n",
        "successors": [
          15
        ]
      },
      {
        "id": 15,
        "start_line": 76,
        "end_line": 97,
        "label": "async def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
        "successors": [
          16
        ]
      },
      {
        "id": 16,
        "start_line": 98,
        "end_line": 99,
        "label": "\n\n",
        "successors": [
          17
        ]
      },
      {
        "id": 17,
        "start_line": 100,
        "end_line": 121,
        "label": "async def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
        "successors": [
          18
        ]
      },
      {
        "id": 18,
        "start_line": 122,
        "end_line": 123,
        "label": "\n\n",
        "successors": [
          19
        ]
      },
      {
        "id": 19,
        "start_line": 124,
        "end_line": 126,
        "label": "@app.get(\"/\")\nasync def health():\n    return {\"status\": \"healthy\"}",
        "successors": [
          20
        ]
      },
      {
        "id": 20,
        "start_line": 127,
        "end_line": 128,
        "label": "\n\n",
        "successors": [
          21
        ]
      },
      {
        "id": 21,
        "start_line": 129,
        "end_line": 172,
        "label": "@app.websocket(\"/ws\")\nasync def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\n    user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
        "successors": [
          22
        ]
      },
      {
        "id": 22,
        "start_line": 173,
        "end_line": 174,
        "label": "\n\n",
        "successors": [
          23
        ]
      },
      {
        "id": 23,
        "start_line": 175,
        "end_line": 189,
        "label": "class WebsocketServer(AppProcess):\n    def run(self):\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
        "successors": [
          24
        ]
      }
    ]
  },
  "code_length": 189
}