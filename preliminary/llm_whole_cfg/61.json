{
  "source_file": "61.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 2,
        "label": "import json\nfrom typing import Any, Type, TypeVar, overload",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 4,
        "end_line": 5,
        "label": "import jsonschema\nfrom fastapi.encoders import jsonable_encoder",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 7,
        "end_line": 7,
        "label": "from .type import type_match",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 10,
        "end_line": 11,
        "label": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 14,
        "end_line": 15,
        "label": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 18,
        "end_line": 18,
        "label": "T = TypeVar(\"T\")",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 21,
        "end_line": 22,
        "label": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 25,
        "end_line": 26,
        "label": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 29,
        "end_line": 33,
        "label": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n    if target_type:\n        return type_match(parsed, target_type)\n    return parsed",
        "successors": [
          10,
          11
        ]
      },
      {
        "id": 10,
        "start_line": 31,
        "end_line": 32,
        "label": "if target_type:\n    return type_match(parsed, target_type)",
        "successors": [
          11
        ]
      },
      {
        "id": 11,
        "start_line": 33,
        "end_line": 33,
        "label": "return parsed",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 36,
        "end_line": 38,
        "label": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:",
        "successors": [
          13
        ]
      },
      {
        "id": 13,
        "start_line": 39,
        "end_line": 42,
        "label": "\"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"",
        "successors": [
          14
        ]
      },
      {
        "id": 14,
        "start_line": 43,
        "end_line": 45,
        "label": "try:\n    jsonschema.validate(data, schema)\n    return None",
        "successors": [
          15,
          16
        ]
      },
      {
        "id": 15,
        "start_line": 46,
        "end_line": 47,
        "label": "except jsonschema.ValidationError as e:\n    return str(e)",
        "successors": []
      }
    ]
  },
  "code_length": 47
}