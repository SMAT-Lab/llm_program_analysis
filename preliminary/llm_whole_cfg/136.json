{
  "source_file": "136.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 1,
        "label": "import logging",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 3,
        "end_line": 9,
        "label": "import requests\nfrom fastapi import Request\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks._base import BaseWebhooksManager",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 11,
        "end_line": 11,
        "label": "logger = logging.getLogger(__name__)",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 14,
        "end_line": 54,
        "label": "class Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = \"https://www.slant3dapi.com/api\"\n\n    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: str,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n\n        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError(\"API key is required to register a webhook\")\n\n        headers = {\n            \"api-key\": credentials.api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n\n        # Slant3D's API doesn't use events list, just register for all order updates\n        payload = {\"endPoint\": ingress_url}\n\n        response = requests.post(\n            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload\n        )\n\n        if not response.ok:\n            error = response.json().get(\"error\", \"Unknown error\")\n            raise RuntimeError(f\"Failed to register webhook: {error}\")\n\n        webhook_config = {\n            \"endpoint\": ingress_url,\n            \"provider\": self.PROVIDER_NAME,\n            \"events\": [\"order.shipped\"],  # Currently the only supported event\n            \"type\": webhook_type,\n        }",
        "successors": [
          6
        ]
      },
      {
        "id": 5,
        "start_line": 31,
        "end_line": 32,
        "label": "if not isinstance(credentials, APIKeyCredentials):\n    raise ValueError(\"API key is required to register a webhook\")",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 57,
        "end_line": 57,
        "label": "return \"\", webhook_config",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 59,
        "end_line": 72,
        "label": "@classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n\n        payload = await request.json()\n\n        # Validate required fields from Slant3D API spec\n        required_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]\n        missing_fields = [field for field in required_fields if field not in payload]\n\n        if missing_fields:\n            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 75,
        "end_line": 80,
        "label": "# Normalize payload structure\n        normalized_payload = {\n            \"orderId\": payload[\"orderId\"],\n            \"status\": payload[\"status\"],\n            \"trackingNumber\": payload[\"trackingNumber\"],\n            \"carrierCode\": payload[\"carrierCode\"],\n        }",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 86,
        "end_line": 86,
        "label": "return normalized_payload, event_type",
        "successors": [
          10
        ]
      },
      {
        "id": 10,
        "start_line": 88,
        "end_line": 99,
        "label": "async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n        # Log warning since we can't properly deregister\n        logger.warning(\n            f\"Warning: Manual deregistration required for webhook {webhook.id}\"\n        )\n        pass",
        "successors": []
      }
    ]
  },
  "code_length": 99
}