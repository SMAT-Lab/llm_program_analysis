{
  "source_file": "125.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 3,
        "label": "import logging\nimport time\nfrom enum import Enum",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 4,
        "end_line": 6,
        "label": "from typing import Any\nimport httpx",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 8,
        "end_line": 14,
        "label": "from backend.blocks.fal._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    FalCredentials,\n    FalCredentialsField,\n    FalCredentialsInput,\n)",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 15,
        "end_line": 16,
        "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 18,
        "end_line": 18,
        "label": "logger = logging.getLogger(__name__)",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 21,
        "end_line": 23,
        "label": "class FalModel(str, Enum):\n    MOCHI = \"fal-ai/mochi-v1\"\n    LUMA = \"fal-ai/luma-dream-machine\"",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 26,
        "end_line": 65,
        "label": "class AIVideoGeneratorBlock(Block):\n    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"Description of the video to generate.\",\n            placeholder=\"A dog running in a field.\",\n        )\n        model: FalModel = SchemaField(\n            title=\"FAL Model\",\n            default=FalModel.MOCHI,\n            description=\"The FAL model to use for video generation.\",\n        )\n        credentials: FalCredentialsInput = FalCredentialsField()\n\n    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the generated video.\")\n        error: str = SchemaField(\n            description=\"Error message if video generation failed.\"\n        )\n        logs: list[str] = SchemaField(\n            description=\"Generation progress logs.\", optional=True\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"530cf046-2ce0-4854-ae2c-659db17c7a46\",\n            description=\"Generate videos using FAL AI models.\",\n            categories={BlockCategory.AI},\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"prompt\": \"A dog running in a field.\",\n                \"model\": FalModel.MOCHI,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"video_url\", \"https://fal.media/files/example/video.mp4\")],\n            test_mock={\n                \"generate_video\": lambda *args, **kwargs: \"https://fal.media/files/example/video.mp4\"\n            },\n        )",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 67,
        "end_line": 72,
        "label": "def _get_headers(self, api_key: str) -> dict[str, str]:\n    \"\"\"Get headers for FAL API requests.\"\"\"\n    return {\n        \"Authorization\": f\"Key {api_key}\",\n        \"Content-Type\": \"application/json\",\n    }",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 74,
        "end_line": 84,
        "label": "def _submit_request(\n    self, url: str, headers: dict[str, str], data: dict[str, Any]\n) -> dict[str, Any]:\n    \"\"\"Submit a request to the FAL API.\"\"\"\n    try:\n        response = httpx.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        return response.json()\n    except httpx.HTTPError as e:\n        logger.error(f\"FAL API request failed: {str(e)}\")\n        raise RuntimeError(f\"Failed to submit request: {str(e)}\")",
        "successors": [
          10
        ]
      },
      {
        "id": 10,
        "start_line": 86,
        "end_line": 94,
        "label": "def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:\n    \"\"\"Poll the status endpoint until completion or failure.\"\"\"\n    try:\n        response = httpx.get(status_url, headers=headers)\n        response.raise_for_status()\n        return response.json()\n    except httpx.HTTPError as e:\n        logger.error(f\"Failed to get status: {str(e)}\")\n        raise RuntimeError(f\"Failed to get status: {str(e)}\")",
        "successors": [
          11
        ]
      },
      {
        "id": 11,
        "start_line": 96,
        "end_line": 188,
        "label": "def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:\n    \"\"\"Generate video using the specified FAL model.\"\"\"\n    base_url = \"https://queue.fal.run\"\n    api_key = credentials.api_key.get_secret_value()\n    headers = self._get_headers(api_key)\n\n    # Submit generation request\n    submit_url = f\"{base_url}/{input_data.model.value}\"\n    submit_data = {\"prompt\": input_data.prompt}\n\n    seen_logs = set()\n\n    try:\n        # Submit request to queue\n        submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n        submit_response.raise_for_status()\n        request_data = submit_response.json()\n\n        # Get request_id and urls from initial response\n        request_id = request_data.get(\"request_id\")\n        status_url = request_data.get(\"status_url\")\n        result_url = request_data.get(\"response_url\")\n\n        if not all([request_id, status_url, result_url]):\n            raise ValueError(\"Missing required data in submission response\")\n\n        # Poll for status with exponential backoff\n        max_attempts = 30\n        attempt = 0\n        base_wait_time = 5\n\n        while attempt < max_attempts:\n            status_response = httpx.get(f\"{status_url}?logs=1\", headers=headers)\n            status_response.raise_for_status()\n            status_data = status_response.json()\n\n            # Process new logs only\n            logs = status_data.get(\"logs\", [])\n            if logs and isinstance(logs, list):\n                for log in logs:\n                    if isinstance(log, dict):\n                        # Create a unique key for this log entry\n                        log_key = (\n                            f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                        )\n                        if log_key not in seen_logs:\n                            seen_logs.add(log_key)\n                            message = log.get(\"message\", \"\")\n                            if message:\n                                logger.debug(\n                                    f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\"\n                                )\n\n            status = status_data.get(\"status\")\n            if status == \"COMPLETED\":\n                # Get the final result\n                result_response = httpx.get(result_url, headers=headers)\n                result_response.raise_for_status()\n                result_data = result_response.json()\n\n                if \"video\" not in result_data or not isinstance(\n                    result_data[\"video\"], dict\n                ):\n                    raise ValueError(\"Invalid response format - missing video data\")\n\n                video_url = result_data[\"video\"].get(\"url\")\n                if not video_url:\n                    raise ValueError(\"No video URL in response\")\n\n                return video_url\n\n            elif status == \"FAILED\":\n                error_msg = status_data.get(\"error\", \"No error details provided\")\n                raise RuntimeError(f\"Video generation failed: {error_msg}\")\n            elif status == \"IN_QUEUE\":\n                position = status_data.get(\"queue_position\", \"unknown\")\n                logger.debug(\n                    f\"[FAL Generation] Status: In queue, position: {position}\"\n                )\n            elif status == \"IN_PROGRESS\":\n                logger.debug(\n                    \"[FAL Generation] Status: Request is being processed...\"\n                )\n            else:\n                logger.info(f\"[FAL Generation] Status: Unknown status: {status}\")\n\n            wait_time = min(base_wait_time * (2**attempt), 60)  # Cap at 60 seconds\n            time.sleep(wait_time)\n            attempt += 1\n\n        raise RuntimeError(\"Maximum polling attempts reached\")\n\n    except httpx.HTTPError as e:\n        raise RuntimeError(f\"API request failed: {str(e)}\")",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 191,
        "end_line": 199,
        "label": "def run(\n    self, input_data: Input, *, credentials: FalCredentials, **kwargs\n) -> BlockOutput:\n    try:\n        video_url = self.generate_video(input_data, credentials)\n        yield \"video_url\", video_url\n    except Exception as e:\n        error_message = str(e)\n        yield \"error\", error_message",
        "successors": []
      }
    ]
  },
  "code_length": 199
}