{
  "source_file": "100.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 5,
        "label": "from backend.blocks.jina._auth import ( JinaCredentials, JinaCredentialsField, JinaCredentialsInput )",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 6,
        "end_line": 8,
        "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 9,
        "end_line": 10,
        "label": "",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 11,
        "end_line": 11,
        "label": "class JinaChunkingBlock(Block):",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 12,
        "end_line": 21,
        "label": "class Input(BlockSchema): texts: list = SchemaField(description=\"List of texts to chunk\")\n\n         credentials: JinaCredentialsInput = JinaCredentialsField()\n         max_chunk_length: int = SchemaField(description=\"Maximum length of each chunk\", default=1000)\n         return_tokens: bool = SchemaField(description=\"Whether to return token information\", default=False)",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 22,
        "end_line": 27,
        "label": "class Output(BlockSchema): chunks: list = SchemaField(description=\"List of chunked texts\")\n        tokens: list = SchemaField(description=\"List of token information for each chunk\", optional=True)",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 28,
        "end_line": 36,
        "label": "def __init__(self): super().__init__(id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n                                  description=\"Chunks texts using Jina AI's segmentation service\",\n                                  categories={BlockCategory.AI, BlockCategory.TEXT},\n                                  input_schema=JinaChunkingBlock.Input,\n                                  output_schema=JinaChunkingBlock.Output,)",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 37,
        "end_line": 40,
        "label": "def run( self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 41,
        "end_line": 45,
        "label": "url = \"https://segment.jina.ai/\"\n        headers = {\"Content-Type\": \"application/json\",\n                      \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",}",
        "successors": [
          10
        ]
      },
      {
        "id": 10,
        "start_line": 46,
        "end_line": 48,
        "label": "        all_chunks = []\n        all_tokens = []",
        "successors": [
          11
        ]
      },
      {
        "id": 11,
        "start_line": 49,
        "end_line": 56,
        "label": "for text in input_data.texts:\n            data = {\"content\": text,\n                      \"return_tokens\": str(input_data.return_tokens).lower(),\n                      \"return_chunks\": \"true\",\n                      \"max_chunk_length\": str(input_data.max_chunk_length),}",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 57,
        "end_line": 59,
        "label": "response = requests.post(url, headers=headers, json=data)\n            result = response.json()",
        "successors": [
          13
        ]
      },
      {
        "id": 13,
        "start_line": 60,
        "end_line": 61,
        "label": "all_chunks.extend(result.get(\"chunks\", []))",
        "successors": [
          14,
          17
        ]
      },
      {
        "id": 14,
        "start_line": 62,
        "end_line": 63,
        "label": "if input_data.return_tokens:\n                all_tokens.extend(result.get(\"tokens\", []))",
        "successors": [
          17,
          11
        ]
      },
      {
        "id": 15,
        "start_line": 64,
        "end_line": 65,
        "label": "yield \"chunks\", all_chunks",
        "successors": [
          16,
          17
        ]
      },
      {
        "id": 16,
        "start_line": 66,
        "end_line": 67,
        "label": "if input_data.return_tokens:\n            yield \"tokens\", all_tokens",
        "successors": [
          11
        ]
      }
    ]
  },
  "code_length": 67
}