{
  "source_file": "180.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 14,
        "label": "import logging\nfrom typing import Optional, cast\n\nfrom autogpt_libs.auth.models import DEFAULT_USER_ID\nfrom fastapi import HTTPException\nfrom prisma import Json\nfrom prisma.models import User\n\nfrom backend.data.db import prisma\nfrom backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw\nfrom backend.util.encryption import JSONCryptor\n\nlogger = logging.getLogger(__name__)",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 16,
        "end_line": 17,
        "label": "async def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get(\"sub\")",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 18,
        "end_line": 19,
        "label": "if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")",
        "successors": [
          4,
          5
        ]
      },
      {
        "id": 4,
        "start_line": 21,
        "end_line": 22,
        "label": "user_email = user_data.get(\"email\")\nif not user_email:",
        "successors": [
          6,
          7
        ]
      },
      {
        "id": 5,
        "start_line": 20,
        "end_line": 20,
        "label": "",
        "successors": [
          4
        ]
      },
      {
        "id": 6,
        "start_line": 23,
        "end_line": 23,
        "label": "raise HTTPException(status_code=401, detail=\"Email not found in token\")",
        "successors": [
          8
        ]
      },
      {
        "id": 7,
        "start_line": 25,
        "end_line": 26,
        "label": "user = await prisma.user.find_unique(where={\"id\": user_id})\nif not user:",
        "successors": [
          9,
          10
        ]
      },
      {
        "id": 8,
        "start_line": 24,
        "end_line": 24,
        "label": "",
        "successors": [
          7
        ]
      },
      {
        "id": 9,
        "start_line": 27,
        "end_line": 33,
        "label": "user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
        "successors": [
          11
        ]
      },
      {
        "id": 10,
        "start_line": 34,
        "end_line": 34,
        "label": "return User.model_validate(user)",
        "successors": [
          12
        ]
      },
      {
        "id": 11,
        "start_line": 34,
        "end_line": 34,
        "label": "return User.model_validate(user)",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 36,
        "end_line": 39,
        "label": "async def get_user_by_id(user_id: str) -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    return User.model_validate(user) if user else None",
        "successors": [
          13
        ]
      },
      {
        "id": 13,
        "start_line": 42,
        "end_line": 43,
        "label": "async def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})",
        "successors": [
          14
        ]
      },
      {
        "id": 14,
        "start_line": 44,
        "end_line": 44,
        "label": "if not user:",
        "successors": [
          15,
          16
        ]
      },
      {
        "id": 15,
        "start_line": 45,
        "end_line": 51,
        "label": "user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
        "successors": [
          17
        ]
      },
      {
        "id": 16,
        "start_line": 52,
        "end_line": 52,
        "label": "return User.model_validate(user)",
        "successors": [
          18
        ]
      },
      {
        "id": 17,
        "start_line": 52,
        "end_line": 52,
        "label": "return User.model_validate(user)",
        "successors": [
          18
        ]
      },
      {
        "id": 18,
        "start_line": 55,
        "end_line": 57,
        "label": "async def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},",
        "successors": [
          19
        ]
      },
      {
        "id": 19,
        "start_line": 59,
        "end_line": 61,
        "label": "metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)",
        "successors": [
          20
        ]
      },
      {
        "id": 20,
        "start_line": 64,
        "end_line": 67,
        "label": "async def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},",
        "successors": [
          21
        ]
      },
      {
        "id": 21,
        "start_line": 71,
        "end_line": 73,
        "label": "async def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},",
        "successors": [
          22
        ]
      },
      {
        "id": 22,
        "start_line": 75,
        "end_line": 76,
        "label": "encrypted_integrations = user.integrations",
        "successors": [
          23
        ]
      },
      {
        "id": 23,
        "start_line": 77,
        "end_line": 78,
        "label": "if not encrypted_integrations:\n        return UserIntegrations()",
        "successors": [
          24,
          25
        ]
      },
      {
        "id": 24,
        "start_line": 80,
        "end_line": 82,
        "label": "return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
        "successors": [
          26
        ]
      },
      {
        "id": 25,
        "start_line": 84,
        "end_line": 84,
        "label": "",
        "successors": [
          26
        ]
      },
      {
        "id": 26,
        "start_line": 85,
        "end_line": 86,
        "label": "async def update_user_integrations(user_id: str, data: UserIntegrations):\n    encrypted_data = JSONCryptor().encrypt(data.model_dump())",
        "successors": [
          27
        ]
      },
      {
        "id": 27,
        "start_line": 87,
        "end_line": 89,
        "label": "await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},",
        "successors": [
          28
        ]
      },
      {
        "id": 28,
        "start_line": 93,
        "end_line": 94,
        "label": "async def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"",
        "successors": [
          29
        ]
      },
      {
        "id": 29,
        "start_line": 95,
        "end_line": 102,
        "label": "users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )",
        "successors": [
          30
        ]
      },
      {
        "id": 30,
        "start_line": 103,
        "end_line": 103,
        "label": "logger.info(f\"Migrating integration credentials for {len(users)} users\")",
        "successors": [
          31
        ]
      },
      {
        "id": 31,
        "start_line": 105,
        "end_line": 119,
        "label": "for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n\n        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)",
        "successors": [
          32
        ]
      },
      {
        "id": 32,
        "start_line": 121,
        "end_line": 124,
        "label": "raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)",
        "successors": [
          33
        ]
      },
      {
        "id": 33,
        "start_line": 126,
        "end_line": 129,
        "label": "await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},",
        "successors": [
          34
        ]
      }
    ]
  },
  "code_length": 130
}