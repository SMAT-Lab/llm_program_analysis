{
  "source_file": "184.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 7,
        "label": "from typing import Dict, Set\n\nfrom fastapi import WebSocket\n\nfrom backend.data import execution\nfrom backend.server.model import Methods, WsMessage\n\n",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 9,
        "end_line": 9,
        "label": "class ConnectionManager:",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 10,
        "end_line": 12,
        "label": "def __init__(self):\n    self.active_connections: Set[WebSocket] = set()\n    self.subscriptions: Dict[str, Set[WebSocket]] = {}",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 14,
        "end_line": 16,
        "label": "async def connect(self, websocket: WebSocket):\n    await websocket.accept()\n    self.active_connections.add(websocket)",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 18,
        "end_line": 21,
        "label": "def disconnect(self, websocket: WebSocket):\n    self.active_connections.remove(websocket)\n    for subscribers in self.subscriptions.values():\n        subscribers.discard(websocket)",
        "successors": [
          6,
          6
        ]
      },
      {
        "id": 6,
        "start_line": 23,
        "end_line": 26,
        "label": "async def subscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id not in self.subscriptions:\n        self.subscriptions[graph_id] = set()\n    self.subscriptions[graph_id].add(websocket)",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 28,
        "end_line": 32,
        "label": "async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id in self.subscriptions:\n        self.subscriptions[graph_id].discard(websocket)\n        if not self.subscriptions[graph_id]:\n            del self.subscriptions[graph_id]",
        "successors": [
          8,
          8,
          8
        ]
      },
      {
        "id": 8,
        "start_line": 34,
        "end_line": 43,
        "label": "async def send_execution_result(self, result: execution.ExecutionResult):\n    graph_id = result.graph_id\n    if graph_id in self.subscriptions:\n        message = WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=graph_id,\n            data=result.model_dump(),\n        ).model_dump_json()\n        for connection in self.subscriptions[graph_id]:\n            await connection.send_text(message)",
        "successors": [
          8,
          8
        ]
      }
    ]
  },
  "code_length": 43
}