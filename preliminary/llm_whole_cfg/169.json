{
  "source_file": "169.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 1,
        "label": "import re",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 3,
        "end_line": 4,
        "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 7,
        "end_line": 7,
        "label": "class CodeExtractionBlock(Block):",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 8,
        "end_line": 8,
        "label": "class Input(BlockSchema):",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 9,
        "end_line": 12,
        "label": "text: str = SchemaField(description=\"Text containing code blocks to extract (e.g., AI response)\", placeholder=\"Enter text containing code blocks\",)",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 14,
        "end_line": 14,
        "label": "class Output(BlockSchema):",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 15,
        "end_line": 33,
        "label": "html: str = SchemaField(description=\"Extracted HTML code\")\ncss: str = SchemaField(description=\"Extracted CSS code\")\njavascript: str = SchemaField(description=\"Extracted JavaScript code\")\npython: str = SchemaField(description=\"Extracted Python code\")\nsql: str = SchemaField(description=\"Extracted SQL code\")\njava: str = SchemaField(description=\"Extracted Java code\")\ncpp: str = SchemaField(description=\"Extracted C++ code\")\ncsharp: str = SchemaField(description=\"Extracted C# code\")\njson_code: str = SchemaField(description=\"Extracted JSON code\")\nbash: str = SchemaField(description=\"Extracted Bash code\")\nphp: str = SchemaField(description=\"Extracted PHP code\")\nruby: str = SchemaField(description=\"Extracted Ruby code\")\nyaml: str = SchemaField(description=\"Extracted YAML code\")\nmarkdown: str = SchemaField(description=\"Extracted Markdown code\")\ntypescript: str = SchemaField(description=\"Extracted TypeScript code\")\nxml: str = SchemaField(description=\"Extracted XML code\")\nremaining_text: str = SchemaField(description=\"Remaining text after code extraction\")",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 35,
        "end_line": 50,
        "label": "def __init__(self):\n    super().__init__(id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\ndescription=\"Extracts code blocks from text and identifies their programming languages\",\ncategories={BlockCategory.TEXT},\ninput_schema=CodeExtractionBlock.Input,\noutput_schema=CodeExtractionBlock.Output,\ntest_input={\n\"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n},\ntest_output=[\n(\"html\", \"<h1>Title</h1>\"),\n(\"python\", \"print('Hello World')\"),\n(\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\")\n],)",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 52,
        "end_line": 101,
        "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    # List of supported programming languages with mapped aliases\n    language_aliases = {\n        \"html\": [\"html\", \"htm\"],\n        \"css\": [\"css\"],\n        \"javascript\": [\"javascript\", \"js\"],\n        \"python\": [\"python\", \"py\"],\n        \"sql\": [\"sql\"],\n        \"java\": [\"java\"],\n        \"cpp\": [\"cpp\", \"c++\"],\n        \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n        \"json_code\": [\"json\"],\n        \"bash\": [\"bash\", \"shell\", \"sh\"],\n        \"php\": [\"php\"],\n        \"ruby\": [\"ruby\", \"rb\"],\n        \"yaml\": [\"yaml\", \"yml\"],\n        \"markdown\": [\"markdown\", \"md\"],\n        \"typescript\": [\"typescript\", \"ts\"],\n        \"xml\": [\"xml\"],\n    }\n\n    # Extract code for each language\n    for canonical_name, aliases in language_aliases.items():\n        code = \"\"\n        # Try each alias for the language\n        for alias in aliases:\n            code_for_alias = self.extract_code(input_data.text, alias)\n            if code_for_alias:\n                code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n\n        if code:  # Only yield if there's actual code content\n            yield canonical_name, code\n\n    # Remove all code blocks from the text to get remaining text\n    pattern = (\n        r\"```(?:\"\n        + \"|\".join(\n            re.escape(alias)\n            for aliases in language_aliases.values()\n            for alias in aliases\n        )\n        + r\")\\s+[\\s\\S]*?```\"\n    )\n\n    remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n    remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n    if remaining_text:  # Only yield if there's remaining text\n        yield \"remaining_text\", remaining_text",
        "successors": [
          10
        ]
      },
      {
        "id": 10,
        "start_line": 102,
        "end_line": 110,
        "label": "def extract_code(self, text: str, language: str) -> str:\n    # Escape special regex characters in the language string\n    language = re.escape(language)\n    # Extract all code blocks enclosed in ```language``` blocks\n    pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n    matches = pattern.finditer(text)\n    # Combine all code blocks for this language with newlines between them\n    code_blocks = [match.group(1).strip() for match in matches]\n    return \"\\n\\n\".join(code_blocks) if code_blocks else \"\""
      }
    ]
  },
  "code_length": 110
}