{
  "source_file": "24.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 2,
        "label": "from backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 3,
        "end_line": 11,
        "label": "\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\nfrom .base import Slant3DBlockBase",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 13,
        "end_line": 16,
        "label": "class Slant3DSlicerBlock(Slant3DBlockBase):\n    \"\"\"Block for slicing 3D model files\"\"\"\n\n    class Input(BlockSchema):",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 17,
        "end_line": 20,
        "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        file_url: str = SchemaField(\n            description=\"URL of the 3D model file to slice (STL)\"\n        )",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 22,
        "end_line": 25,
        "label": "class Output(BlockSchema):\n        message: str = SchemaField(description=\"Response message\")\n        price: float = SchemaField(description=\"Calculated price for printing\")\n        error: str = SchemaField(description=\"Error message if slicing failed\")",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 27,
        "end_line": 45,
        "label": "def __init__(self):\n        super().__init__(\n            id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\",\n            description=\"Slice a 3D model file and get pricing information\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"file_url\": \"https://example.com/model.stl\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"message\": \"Slicing successful\",\n                    \"data\": {\"price\": 8.23},\n                }\n            },\n        )",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 47,
        "end_line": 49,
        "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 50,
        "end_line": 61,
        "label": "try:\n            result = self._make_request(\n                \"POST\",\n                \"slicer\",\n                credentials.api_key.get_secret_value(),\n                json={\"fileURL\": input_data.file_url},\n            )\n            yield \"message\", result[\"message\"]\n            yield \"price\", result[\"data\"][\"price\"]\n        except Exception as e:\n            yield \"error\", str(e)\n            raise",
        "successors": []
      }
    ]
  },
  "code_length": 61
}