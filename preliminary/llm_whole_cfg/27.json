{
  "source_file": "27.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 2,
        "label": "from typing import cast\\nfrom unittest.mock import AsyncMock",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 3,
        "end_line": 5,
        "label": "\\nimport pytest\\nfrom fastapi import WebSocket, WebSocketDisconnect",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 6,
        "end_line": 7,
        "label": "\\nfrom backend.server.conn_manager import ConnectionManager",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 8,
        "end_line": 14,
        "label": "from backend.server.ws_api import (\\n    Methods,\\n    WsMessage,\\n    handle_subscribe,\\n    handle_unsubscribe,\\n    websocket_router\\n)",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 15,
        "end_line": 16,
        "label": "\\n\\n",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 17,
        "end_line": 19,
        "label": "@pytest.fixture\\ndef mock_websocket() -> AsyncMock:\\n    return AsyncMock(spec=WebSocket)",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 20,
        "end_line": 21,
        "label": "\\n\\n",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 22,
        "end_line": 24,
        "label": "@pytest.fixture\\ndef mock_manager() -> AsyncMock:\\n    return AsyncMock(spec=ConnectionManager)",
        "successors": [
          9
        ]
      },
      {
        "id": 9,
        "start_line": 25,
        "end_line": 26,
        "label": "\\n\\n",
        "successors": [
          10
        ]
      },
      {
        "id": 10,
        "start_line": 27,
        "end_line": 30,
        "label": "@pytest.mark.asyncio\\nasync def test_websocket_router_subscribe(\\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
        "successors": [
          11
        ]
      },
      {
        "id": 11,
        "start_line": 31,
        "end_line": 36,
        "label": "    mock_websocket.receive_text.side_effect = [\\n        WsMessage(\\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\\n        ).model_dump_json(),\\n        WebSocketDisconnect()\\n    ]",
        "successors": [
          12
        ]
      },
      {
        "id": 12,
        "start_line": 37,
        "end_line": 40,
        "label": "\\n    await websocket_router(\\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\\n    )",
        "successors": [
          13
        ]
      },
      {
        "id": 13,
        "start_line": 41,
        "end_line": 47,
        "label": "\\n    mock_manager.connect.assert_called_once_with(mock_websocket)\\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\\n    mock_websocket.send_text.assert_called_once()\\n    assert '\\\"method\\\":\\\"subscribe\\\"' in mock_websocket.send_text.call_args[0][0]\\n    assert '\\\"success\\\":true' in mock_websocket.send_text.call_args[0][0]\\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
        "successors": [
          14
        ]
      },
      {
        "id": 14,
        "start_line": 48,
        "end_line": 49,
        "label": "\\n\\n",
        "successors": [
          15
        ]
      },
      {
        "id": 15,
        "start_line": 50,
        "end_line": 53,
        "label": "@pytest.mark.asyncio\\nasync def test_websocket_router_unsubscribe(\\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
        "successors": [
          16
        ]
      },
      {
        "id": 16,
        "start_line": 54,
        "end_line": 59,
        "label": "    mock_websocket.receive_text.side_effect = [\\n        WsMessage(\\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\\n        ).model_dump_json(),\\n        WebSocketDisconnect()\\n    ]",
        "successors": [
          17
        ]
      },
      {
        "id": 17,
        "start_line": 60,
        "end_line": 65,
        "label": "\\n    await websocket_router(\\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\\n    )\\n\\n    mock_manager.connect.assert_called_once_with(mock_websocket)",
        "successors": [
          18
        ]
      },
      {
        "id": 18,
        "start_line": 66,
        "end_line": 70,
        "label": "    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\\n    mock_websocket.send_text.assert_called_once()\\n    assert '\\\"method\\\":\\\"unsubscribe\\\"' in mock_websocket.send_text.call_args[0][0]\\n    assert '\\\"success\\\":true' in mock_websocket.send_text.call_args[0][0]\\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
        "successors": [
          19
        ]
      },
      {
        "id": 19,
        "start_line": 71,
        "end_line": 72,
        "label": "\\n\\n",
        "successors": [
          20
        ]
      },
      {
        "id": 20,
        "start_line": 73,
        "end_line": 76,
        "label": "@pytest.mark.asyncio\\nasync def test_websocket_router_invalid_method(\\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
        "successors": [
          21
        ]
      },
      {
        "id": 21,
        "start_line": 77,
        "end_line": 80,
        "label": "    mock_websocket.receive_text.side_effect = [\\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\\n        WebSocketDisconnect()\\n    ]",
        "successors": [
          22
        ]
      },
      {
        "id": 22,
        "start_line": 81,
        "end_line": 90,
        "label": "\\n    await websocket_router(\\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\\n    )\\n\\n    mock_manager.connect.assert_called_once_with(mock_websocket)\\n    mock_websocket.send_text.assert_called_once()\\n    assert '\\\"method\\\":\\\"error\\\"' in mock_websocket.send_text.call_args[0][0]\\n    assert '\\\"success\\\":false' in mock_websocket.send_text.call_args[0][0]\\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
        "successors": [
          23
        ]
      },
      {
        "id": 23,
        "start_line": 91,
        "end_line": 92,
        "label": "\\n\\n",
        "successors": [
          24
        ]
      },
      {
        "id": 24,
        "start_line": 93,
        "end_line": 96,
        "label": "@pytest.mark.asyncio\\nasync def test_handle_subscribe_success(\\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
        "successors": [
          25
        ]
      },
      {
        "id": 25,
        "start_line": 97,
        "end_line": 97,
        "label": "    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
        "successors": [
          26
        ]
      },
      {
        "id": 26,
        "start_line": 98,
        "end_line": 101,
        "label": "\\n    await handle_subscribe(\\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\\n    )",
        "successors": [
          27
        ]
      },
      {
        "id": 27,
        "start_line": 102,
        "end_line": 106,
        "label": "\\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\\n    mock_websocket.send_text.assert_called_once()\\n    assert '\\\"method\\\":\\\"subscribe\\\"' in mock_websocket.send_text.call_args[0][0]\\n    assert '\\\"success\\\":true' in mock_websocket.send_text.call_args[0][0]",
        "successors": [
          28
        ]
      },
      {
        "id": 28,
        "start_line": 107,
        "end_line": 108,
        "label": "\\n\\n",
        "successors": [
          29
        ]
      },
      {
        "id": 29,
        "start_line": 109,
        "end_line": 112,
        "label": "@pytest.mark.asyncio\\nasync def test_handle_subscribe_missing_data(\\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
        "successors": [
          30
        ]
      },
      {
        "id": 30,
        "start_line": 113,
        "end_line": 113,
        "label": "    message = WsMessage(method=Methods.SUBSCRIBE)",
        "successors": [
          31
        ]
      },
      {
        "id": 31,
        "start_line": 114,
        "end_line": 117,
        "label": "\\n    await handle_subscribe(\\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\\n    )",
        "successors": [
          32
        ]
      },
      {
        "id": 32,
        "start_line": 118,
        "end_line": 122,
        "label": "\\n    mock_manager.subscribe.assert_not_called()\\n    mock_websocket.send_text.assert_called_once()\\n    assert '\\\"method\\\":\\\"error\\\"' in mock_websocket.send_text.call_args[0][0]\\n    assert '\\\"success\\\":false' in mock_websocket.send_text.call_args[0][0]",
        "successors": [
          33
        ]
      },
      {
        "id": 33,
        "start_line": 123,
        "end_line": 124,
        "label": "\\n\\n",
        "successors": [
          34
        ]
      },
      {
        "id": 34,
        "start_line": 125,
        "end_line": 128,
        "label": "@pytest.mark.asyncio\\nasync def test_handle_unsubscribe_success(\\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
        "successors": [
          35
        ]
      },
      {
        "id": 35,
        "start_line": 129,
        "end_line": 129,
        "label": "    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
        "successors": [
          36
        ]
      },
      {
        "id": 36,
        "start_line": 130,
        "end_line": 133,
        "label": "\\n    await handle_unsubscribe(\\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\\n    )",
        "successors": [
          37
        ]
      },
      {
        "id": 37,
        "start_line": 134,
        "end_line": 138,
        "label": "\\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\\n    mock_websocket.send_text.assert_called_once()\\n    assert '\\\"method\\\":\\\"unsubscribe\\\"' in mock_websocket.send_text.call_args[0][0]\\n    assert '\\\"success\\\":true' in mock_websocket.send_text.call_args[0][0]",
        "successors": [
          38
        ]
      },
      {
        "id": 38,
        "start_line": 139,
        "end_line": 140,
        "label": "\\n\\n",
        "successors": [
          39
        ]
      },
      {
        "id": 39,
        "start_line": 141,
        "end_line": 144,
        "label": "@pytest.mark.asyncio\\nasync def test_handle_unsubscribe_missing_data(\\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
        "successors": [
          40
        ]
      },
      {
        "id": 40,
        "start_line": 145,
        "end_line": 145,
        "label": "    message = WsMessage(method=Methods.UNSUBSCRIBE)",
        "successors": [
          41
        ]
      },
      {
        "id": 41,
        "start_line": 146,
        "end_line": 149,
        "label": "\\n    await handle_unsubscribe(\\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\\n    )",
        "successors": [
          42
        ]
      },
      {
        "id": 42,
        "start_line": 150,
        "end_line": 154,
        "label": "\\n    mock_manager.unsubscribe.assert_not_called()\\n    mock_websocket.send_text.assert_called_once()\\n    assert '\\\"method\\\":\\\"error\\\"' in mock_websocket.send_text.call_args[0][0]\\n    assert '\\\"success\\\":false' in mock_websocket.send_text.call_args[0][0]",
        "successors": []
      }
    ]
  },
  "code_length": 154
}