{
  "source_file": "2.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 8,
        "label": "from backend.blocks.jina._auth import (JinaCredentials, JinaCredentialsField, JinaCredentialsInput)\\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\\nfrom backend.data.model import SchemaField\\nfrom backend.util.request import requests",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 11,
        "end_line": 18,
        "label": "class JinaEmbeddingBlock(Block):\\n    class Input(BlockSchema):\\n        texts: list = SchemaField(description=\"List of texts to embed\")\\n        credentials: JinaCredentialsInput = JinaCredentialsField()\\n        model: str = SchemaField(description=\"Jina embedding model to use\", default=\"jina-embeddings-v2-base-en\",)",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 20,
        "end_line": 21,
        "label": "class Output(BlockSchema):\\n        embeddings: list = SchemaField(description=\"List of embeddings\")",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 23,
        "end_line": 30,
        "label": "def __init__(self):\\n        super().__init__(id=\"7c56b3ab-62e7-43a2-a2dc-4ec4245660b6\", description=\"Generates embeddings using Jina AI\", categories={BlockCategory.AI}, input_schema=JinaEmbeddingBlock.Input, output_schema=JinaEmbeddingBlock.Output,)",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 32,
        "end_line": 43,
        "label": "def run(self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:\\n        url = \"https://api.jina.ai/v1/embeddings\"\\n        headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",}\\n        data = {\"input\": input_data.texts, \"model\": input_data.model}\"\\n        response = requests.post(url, headers=headers, json=data)\\n        embeddings = [e[\"embedding\"] for e in response.json()[\"data\"]]\\n        yield \"embeddings\", embeddings",
        "successors": []
      }
    ]
  },
  "code_length": 43
}