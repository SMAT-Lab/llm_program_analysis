{
  "source_file": "130.py",
  "cfg": {
    "blocks": [
      {
        "id": 1,
        "start_line": 1,
        "end_line": 12,
        "label": "from typing import List, Optional\n\nfrom pydantic import BaseModel\n\nfrom backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
        "successors": [
          2
        ]
      },
      {
        "id": 2,
        "start_line": 15,
        "end_line": 20,
        "label": "class ContentRetrievalSettings(BaseModel):\n    text: Optional[dict] = SchemaField(\n        description=\"Text content settings\",\n        default={\"maxCharacters\": 1000, \"includeHtmlTags\": False},\n        advanced=True,\n    )",
        "successors": [
          3
        ]
      },
      {
        "id": 3,
        "start_line": 21,
        "end_line": 29,
        "label": "highlights: Optional[dict] = SchemaField(\n        description=\"Highlight settings\",\n        default={\n            \"numSentences\": 3,\n            \"highlightsPerUrl\": 3,\n            \"query\": \"\",\n        },\n        advanced=True,\n    )",
        "successors": [
          4
        ]
      },
      {
        "id": 4,
        "start_line": 30,
        "end_line": 34,
        "label": "summary: Optional[dict] = SchemaField(\n        description=\"Summary settings\",\n        default={\"query\": \"\"},\n        advanced=True,\n    )",
        "successors": [
          5
        ]
      },
      {
        "id": 5,
        "start_line": 37,
        "end_line": 47,
        "label": "class ExaContentsBlock(Block):\n    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        ids: List[str] = SchemaField(\n            description=\"Array of document IDs obtained from searches\",\n        )\n        contents: ContentRetrievalSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentRetrievalSettings(),\n            advanced=True,\n        )",
        "successors": [
          6
        ]
      },
      {
        "id": 6,
        "start_line": 49,
        "end_line": 53,
        "label": "class Output(BlockSchema):\n        results: list = SchemaField(\n            description=\"List of document contents\",\n            default=[],\n        )",
        "successors": [
          7
        ]
      },
      {
        "id": 7,
        "start_line": 55,
        "end_line": 62,
        "label": "def __init__(self):\n        super().__init__(\n            id=\"c52be83f-f8cd-4180-b243-af35f986b461\",\n            description=\"Retrieves document contents using Exa's contents API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaContentsBlock.Input,\n            output_schema=ExaContentsBlock.Output,\n        )",
        "successors": [
          8
        ]
      },
      {
        "id": 8,
        "start_line": 64,
        "end_line": 87,
        "label": "def run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\n        url = \"https://api.exa.ai/contents\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n        payload = {\n            \"ids\": input_data.ids,\n            \"text\": input_data.contents.text,\n            \"highlights\": input_data.contents.highlights,\n            \"summary\": input_data.contents.summary,\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []",
        "successors": []
      }
    ]
  },
  "code_length": 87
}