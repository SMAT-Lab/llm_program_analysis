{
  "edge_analysis": {
    "static_total": 15,
    "llm_total": 0,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#0\\nimport logging\\nfrom typing import TYPE_CHECKING, AsyncGenerator, Optional\\nfrom prisma import Json\\nfrom prisma.models import IntegrationWebhook\\nfrom pydantic import Field, computed_field\\nfrom backend.data.includes import INTEGRATION_WEBHOOK_INCLUDE\\nfrom backend.data.queue import AsyncRedisEventBus\\nfrom backend.integrations.providers import ProviderName\\nfrom backend.integrations.webhooks.utils import webhook_ingress_url\\nfrom .db import BaseDbModel\\nif TYPE_CHECKING:",
      "#1\\nfrom .graph import NodeModel",
      "#2\\nlogger = logging.getLogger(__name__)\\n_webhook_event_bus = WebhookEventBus()",
      "#16\\ncreated_webhook = await IntegrationWebhook.prisma().create(data={'id':\\n webhook.id, 'userId': webhook.user_id, 'provider': webhook.provider.\\n value, 'credentialsId': webhook.credentials_id, 'webhookType': webhook.\\n webhook_type, 'resource': webhook.resource, 'events': webhook.events,\\n 'config': Json(webhook.config), 'secret': webhook.secret,\\n 'providerWebhookId': webhook.provider_webhook_id})",
      "#17\\nreturn Webhook.from_db(created_webhook)",
      "#21\\n\"\"\"\n⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\\nwebhook = await IntegrationWebhook.prisma().find_unique_or_raise(where={\\n 'id': webhook_id}, include=INTEGRATION_WEBHOOK_INCLUDE)",
      "#22\\nreturn Webhook.from_db(webhook)",
      "#26\\n\"\"\"\n⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\\nif not credentials_id:",
      "#27\\nraise ValueError('credentials_id must not be empty')",
      "#28\\nwebhooks = await IntegrationWebhook.prisma().find_many(where={\\n 'credentialsId': credentials_id}, include=INTEGRATION_WEBHOOK_INCLUDE)",
      "#30\\nreturn [Webhook.from_db(webhook) for webhook in webhooks]",
      "#34\\n\"\"\"\n⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\\nwebhook = await IntegrationWebhook.prisma().find_first(where={\\n 'credentialsId': credentials_id, 'webhookType': webhook_type,\\n 'resource': resource, 'events': {'has_every': events}}, include=\\n INTEGRATION_WEBHOOK_INCLUDE)",
      "#35\\nreturn Webhook.from_db(webhook) if webhook else None",
      "#39\\n\"\"\"\n⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\\nwebhook = await IntegrationWebhook.prisma().find_first(where={'provider':\\n provider, 'webhookType': webhook_type, 'events': {'has_every': events},\\n 'AgentNodes': {'some': {'agentGraphId': graph_id}}}, include=\\n INTEGRATION_WEBHOOK_INCLUDE)",
      "#40\\nreturn Webhook.from_db(webhook) if webhook else None",
      "#44\\n\"\"\"\n⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\\n_updated_webhook = await IntegrationWebhook.prisma().update(where={'id':\\n webhook_id}, data={'config': Json(updated_config)}, include=\\n INTEGRATION_WEBHOOK_INCLUDE)",
      "#45\\nif _updated_webhook is None:",
      "#46\\nraise ValueError(f'Webhook #{webhook_id} not found')",
      "#47\\nreturn Webhook.from_db(_updated_webhook)",
      "#52\\n\"\"\"\n⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\\ndeleted = await IntegrationWebhook.prisma().delete(where={'id': webhook_id})",
      "#53\\nif not deleted:",
      "#54\\nraise ValueError(f'Webhook #{webhook_id} not found')",
      "#73\\nasync for event in _webhook_event_bus.listen_events(\\n f\"{webhook_id}/{event_type or '*'}\"):\\n yield event",
      "#74\\nyield event"
    ],
    "extra_blocks": []
  }
}