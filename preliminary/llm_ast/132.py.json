{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "function_definition",
            "code": "def get_1s_count(number: int) -> int:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\nCount the number of set bits in a 32 bit integer using Brian Kernighan's way.\nRef - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n>>> get_1s_count(25)\n3\n>>> get_1s_count(37)\n3\n>>> get_1s_count(21)\n3\n>>> get_1s_count(58)\n4\n>>> get_1s_count(0)\n0\n>>> get_1s_count(256)\n1\n>>> get_1s_count(-1)\nTraceback (most recent call last):\n    ...\nValueError: Input must be a non-negative integer\n>>> get_1s_count(0.8)\nTraceback (most recent call last):\n    ...\nValueError: Input must be a non-negative integer\n>>> get_1s_count(\"25\")\nTraceback (most recent call last):\n    ...\nValueError: Input must be a non-negative integer\n\"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if not isinstance(number, int) or number < 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(\"Input must be a non-negative integer\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "count = 0",
                    "children": []
                },
                {
                    "type": "while_statement",
                    "code": "while number:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "number &= number - 1",
                            "children": []
                        },
                        {
                            "type": "augmented_assignment",
                            "code": "count += 1",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return count",
                    "children": []
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "doctest.testmod()",
                    "children": []
                }
            ]
        }
    ]
}