{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "aliased_import",
            "code": "import io",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import logging",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from enum import Enum",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import replicate",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import replicate.exceptions",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import requests",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from replicate.helpers import FileOutput",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from backend.data.graph import Graph",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from backend.util.settings import Settings",
            "children": []
        },
        {
            "type": "expression_statement",
            "code": "logger = logging.getLogger(__name__)",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class ImageSize(str, Enum):",
            "children": [
                {
                    "type": "attribute",
                    "code": "LANDSCAPE = '1024x768'",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class ImageStyle(str, Enum):",
            "children": [
                {
                    "type": "attribute",
                    "code": "DIGITAL_ART = 'digital art'",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def generate_agent_image(agent: Graph) -> io.BytesIO:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "'''Generate an image for an agent using Flux model via Replicate API. Args: agent (Graph): The agent to generate an image for Returns: io.BytesIO: The generated image as bytes'''",
                            "children": []
                        },
                        {
                            "type": "try",
                            "code": "try:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "settings = Settings()",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if not settings.secrets.replicate_api_key:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "code": "raise ValueError('Missing Replicate API key in settings')",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "input_data = { 'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True }",
                                            "children": []
                                        },
                                        {
                                            "type": "try",
                                            "code": "try:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "code": "output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if isinstance(output, list) and output:",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "code": "if isinstance(output[0], FileOutput):",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "code": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "code": "image_bytes = output[0].read()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "else_clause",
                                                                            "code": "else:",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "code": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "code": "result_url = output[0]",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "code": "response = requests.get(result_url)",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "code": "response.raise_for_status()",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "code": "image_bytes = response.content",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif",
                                                            "code": "elif isinstance(output, FileOutput):",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "code": "image_bytes = output.read()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif",
                                                            "code": "elif isinstance(output, str):",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "code": "response = requests.get(output)",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "code": "response.raise_for_status()",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "code": "image_bytes = response.content",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "code": "else:",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "code": "raise RuntimeError('Unexpected output format from the model.')",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "code": "return io.BytesIO(image_bytes)",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "except",
                                            "code": "except replicate.exceptions.ReplicateError as e:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if e.status == 401:",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "code": "raise RuntimeError('Invalid Replicate API token') from e",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "code": "raise RuntimeError(f'Replicate API error: {str(e)}') from e",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "except",
                            "code": "except Exception as e:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "logger.exception('Failed to generate agent image')",
                                            "children": []
                                        },
                                        {
                                            "type": "raise_statement",
                                            "code": "raise RuntimeError(f'Image generation failed: {str(e)}')",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}