{
    "type": "module",
    "code": "from enum import Enum\nfrom typing import Any, Optional\nfrom pydantic import BaseModel\nfrom backend.data.block import BlockInput\n\nclass BlockCostType(str, Enum):\n    RUN = \"run\"  # cost X credits per run\n    BYTE = \"byte\"  # cost X credits per byte\n    SECOND = \"second\"  # cost X credits per second\n    DOLLAR = \"dollar\"  # cost X dollars per run\n\nclass BlockCost(BaseModel):\n    cost_amount: int\n    cost_filter: BlockInput\n    cost_type: BlockCostType\n\n    def __init__(\n        self,\n        cost_amount: int,\n        cost_type: BlockCostType = BlockCostType.RUN,\n        cost_filter: Optional[BlockInput] = None,\n        **data: Any,\n    ) -> None:\n        super().__init__(\n            cost_amount=cost_amount,\n            cost_filter=cost_filter or {},\n            cost_type=cost_type,\n            **data,\n        )",
    "children": [
        {
            "type": "import_from_statement",
            "code": "from enum import Enum",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from typing import Any, Optional",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from pydantic import BaseModel",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import BlockInput",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class BlockCostType(str, Enum):",
            "children": [
                {
                    "type": "assignment",
                    "code": "RUN = \"run\"",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "# cost X credits per run",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "BYTE = \"byte\"",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "# cost X credits per byte",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "SECOND = \"second\"",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "# cost X credits per second",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "DOLLAR = \"dollar\"",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "# cost X dollars per run",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class BlockCost(BaseModel):",
            "children": [
                {
                    "type": "attribute",
                    "code": "cost_amount: int",
                    "children": []
                },
                {
                    "type": "attribute",
                    "code": "cost_filter: BlockInput",
                    "children": []
                },
                {
                    "type": "attribute",
                    "code": "cost_type: BlockCostType",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self, cost_amount: int, cost_type: BlockCostType = BlockCostType.RUN, cost_filter: Optional[BlockInput] = None, **data: Any) -> None:",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(cost_amount=cost_amount, cost_filter=cost_filter or {}, cost_type=cost_type, **data)",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}