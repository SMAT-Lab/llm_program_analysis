{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "aliased_import",
            "code": "from timeit import timeit",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"...\"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if number < 0:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(\"the value of input must not be negative\")",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "result = 0",
                    "children": []
                },
                {
                    "type": "while_statement",
                    "code": "while number:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "augmented_assignment",
                                    "code": "number &= number - 1",
                                    "children": []
                                },
                                {
                                    "type": "augmented_assignment",
                                    "code": "result += 1",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return result",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def get_set_bits_count_using_modulo_operator(number: int) -> int:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"...\"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if number < 0:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(\"the value of input must not be negative\")",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "result = 0",
                    "children": []
                },
                {
                    "type": "while_statement",
                    "code": "while number:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if number % 2 == 1:",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "augmented_assignment",
                                                    "code": "result += 1",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "augmented_assignment",
                                    "code": "number >>= 1",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return result",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def benchmark() -> None:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"Benchmark code...\"\"\"",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "code": "def do_benchmark(number: int) -> None:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "setup = \"import __main__ as z\"",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "print(f\"Benchmark when {number = }:\")",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "timing = timeit(f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup)",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "print(f\"timeit() runs in {timing} seconds\")",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "timing = timeit(f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\", setup=setup)",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "print(f\"timeit() runs in {timing} seconds\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "for_statement",
                    "code": "for number in (25, 37, 58, 0):",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "do_benchmark(number)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "print()",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "aliased_import",
                            "code": "import doctest",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "doctest.testmod()",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "benchmark()",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}