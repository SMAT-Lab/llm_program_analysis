{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "aliased_import",
            "code": "import io",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import unittest.mock",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import fastapi",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import pytest",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import starlette.datastructures",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import backend.server.v2.store.exceptions",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import backend.server.v2.store.media",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.util.settings import Settings",
            "children": []
        },
        {
            "type": "decorator",
            "code": "@pytest.fixture",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def mock_settings(monkeypatch):",
            "children": [
                {
                    "type": "assignment",
                    "code": "settings = Settings()",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "settings.config.media_gcs_bucket_name = \"test-bucket\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "settings.config.google_application_credentials = \"test-credentials\"",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "code": "return settings",
                    "children": []
                }
            ]
        },
        {
            "type": "decorator",
            "code": "@pytest.fixture",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def mock_storage_client(mocker):",
            "children": [
                {
                    "type": "assignment",
                    "code": "mock_client = unittest.mock.MagicMock()",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_bucket = unittest.mock.MagicMock()",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_blob = unittest.mock.MagicMock()",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_client.bucket.return_value = mock_bucket",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_bucket.blob.return_value = mock_blob",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_blob.public_url = \"http://test-url/media/laptop.jpeg\"",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "mocker.patch(\"google.cloud.storage.Client\", return_value=mock_client)",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "code": "return mock_client",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_success(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_data = b\"\\xFF\\xD8\\xFF\" + b\"test data\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"laptop.jpeg\", file=io.BytesIO(test_data), headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "assert result == \"http://test-url/media/laptop.jpeg\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_bucket = mock_storage_client.bucket.return_value",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_blob = mock_bucket.blob.return_value",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "mock_blob.upload_from_string.assert_called_once()",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_invalid_type(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.txt\", file=io.BytesIO(b\"test data\"), headers=starlette.datastructures.Headers({\"content-type\": \"text/plain\"}))",
                    "children": []
                },
                {
                    "type": "with_statement",
                    "code": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
                    "children": [
                        {
                            "type": "await",
                            "code": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "mock_bucket = mock_storage_client.bucket.return_value",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_blob = mock_bucket.blob.return_value",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "mock_blob.upload_from_string.assert_not_called()",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_missing_credentials(monkeypatch):",
            "children": [
                {
                    "type": "assignment",
                    "code": "settings = Settings()",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "settings.config.media_gcs_bucket_name = \"\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "settings.config.google_application_credentials = \"\"",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"laptop.jpeg\", file=io.BytesIO(b\"\\xFF\\xD8\\xFF\" + b\"test data\"), headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}))",
                    "children": []
                },
                {
                    "type": "with_statement",
                    "code": "with pytest.raises(backend.server.v2.store.exceptions.StorageConfigError):",
                    "children": [
                        {
                            "type": "await",
                            "code": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_video_type(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.mp4\", file=io.BytesIO(b\"\\x00\\x00\\x00\\x18ftypmp42\"), headers=starlette.datastructures.Headers({\"content-type\": \"video/mp4\"}))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "assert result == \"http://test-url/media/laptop.jpeg\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_bucket = mock_storage_client.bucket.return_value",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "mock_blob = mock_bucket.blob.return_value",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "mock_blob.upload_from_string.assert_called_once()",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_file_too_large(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "large_data = b\"\\xFF\\xD8\\xFF\" + b\"x\" * (50 * 1024 * 1024 + 1)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"laptop.jpeg\", file=io.BytesIO(large_data), headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}))",
                    "children": []
                },
                {
                    "type": "with_statement",
                    "code": "with pytest.raises(backend.server.v2.store.exceptions.FileSizeTooLargeError):",
                    "children": [
                        {
                            "type": "await",
                            "code": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_file_read_error(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"laptop.jpeg\", file=io.BytesIO(b\"\"), headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "test_file.read = unittest.mock.AsyncMock(side_effect=Exception(\"Read error\"))",
                    "children": []
                },
                {
                    "type": "with_statement",
                    "code": "with pytest.raises(backend.server.v2.store.exceptions.FileReadError):",
                    "children": [
                        {
                            "type": "await",
                            "code": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_png_success(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.png\", file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"), headers=starlette.datastructures.Headers({\"content-type\": \"image/png\"}))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "assert result == \"http://test-url/media/laptop.jpeg\"",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_gif_success(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.gif\", file=io.BytesIO(b\"GIF89a\"), headers=starlette.datastructures.Headers({\"content-type\": \"image/gif\"}))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "assert result == \"http://test-url/media/laptop.jpeg\"",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_webp_success(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.webp\", file=io.BytesIO(b\"RIFF\\x00\\x00\\x00\\x00WEBP\"), headers=starlette.datastructures.Headers({\"content-type\": \"image/webp\"}))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "assert result == \"http://test-url/media/laptop.jpeg\"",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_webm_success(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.webm\", file=io.BytesIO(b\"\\x1a\\x45\\xdf\\xa3\"), headers=starlette.datastructures.Headers({\"content-type\": \"video/webm\"}))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "assert result == \"http://test-url/media/laptop.jpeg\"",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_mismatched_signature(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.jpeg\", file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"), headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}))",
                    "children": []
                },
                {
                    "type": "with_statement",
                    "code": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
                    "children": [
                        {
                            "type": "await",
                            "code": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "async def test_upload_media_invalid_signature(mock_settings, mock_storage_client):",
            "children": [
                {
                    "type": "assignment",
                    "code": "test_file = fastapi.UploadFile(filename=\"test.jpeg\", file=io.BytesIO(b\"invalid signature\"), headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}))",
                    "children": []
                },
                {
                    "type": "with_statement",
                    "code": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
                    "children": [
                        {
                            "type": "await",
                            "code": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}