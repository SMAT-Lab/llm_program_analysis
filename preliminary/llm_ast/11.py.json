{
    "type": "module",
    "code": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\nfrom pydantic import BaseModel\nclass TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float\n\ndef _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]\ndef _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\nlogger = logging.getLogger(__name__)\ndef time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result\n    return wrapper\ndef error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__}\" with arguments {args} {kwargs}: {e}\"\n            )\n    return wrapper",
    "children": [
        {
            "type": "import_statement",
            "code": "import functools"
        },
        {
            "type": "import_statement",
            "code": "import logging"
        },
        {
            "type": "import_statement",
            "code": "import os"
        },
        {
            "type": "import_statement",
            "code": "import time"
        },
        {
            "type": "import_from_statement",
            "code": "from typing import Callable, ParamSpec, Tuple, TypeVar"
        },
        {
            "type": "import_from_statement",
            "code": "from pydantic import BaseModel"
        },
        {
            "type": "class_definition",
            "code": "class TimingInfo(BaseModel):",
            "children": [
                {
                    "type": "attribute",
                    "code": "cpu_time: float"
                },
                {
                    "type": "attribute",
                    "code": "wall_time: float"
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def _start_measurement() -> Tuple[float, float]:",
            "children": [
                {
                    "type": "return_statement",
                    "code": "return time.time(), os.times()[0] + os.times()[1]"
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def _end_measurement(start_wall_time: float, start_cpu_time: float) -> Tuple[float, float]:",
            "children": [
                {
                    "type": "assignment",
                    "code": "end_wall_time = time.time()"
                },
                {
                    "type": "assignment",
                    "code": "end_cpu_time = os.times()[0] + os.times()[1]"
                },
                {
                    "type": "return_statement",
                    "code": "return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time"
                }
            ]
        },
        {
            "type": "assignment",
            "code": "P = ParamSpec(\"P\")"
        },
        {
            "type": "assignment",
            "code": "T = TypeVar(\"T\")"
        },
        {
            "type": "assignment",
            "code": "logger = logging.getLogger(__name__)"
        },
        {
            "type": "function_definition",
            "code": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:",
            "children": [
                {
                    "type": "decorator",
                    "code": "@functools.wraps(func)"
                },
                {
                    "type": "function_definition",
                    "code": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "start_wall_time, start_cpu_time = _start_measurement()"
                        },
                        {
                            "type": "block",
                            "code": "try:\n    result = func(*args, **kwargs)\nfinally:\n    wall_duration, cpu_duration = _end_measurement(start_wall_time, start_cpu_time)\n    timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                            "children": [
                                {
                                    "type": "try_statement",
                                    "code": "try:",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "result = func(*args, **kwargs)"
                                        }
                                    ]
                                },
                                {
                                    "type": "finally_clause",
                                    "code": "finally:",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "wall_duration, cpu_duration = _end_measurement(start_wall_time, start_cpu_time)"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return timing_info, result"
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return wrapper"
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:",
            "children": [
                {
                    "type": "decorator",
                    "code": "@functools.wraps(func)"
                },
                {
                    "type": "function_definition",
                    "code": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:",
                    "children": [
                        {
                            "type": "block",
                            "code": "try:\n    return func(*args, **kwargs)\nexcept Exception as e:\n    logger.exception(f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\")",
                            "children": [
                                {
                                    "type": "try_statement",
                                    "code": "try:",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return func(*args, **kwargs)"
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "code": "except Exception as e:",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "logger.exception(f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\")"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return wrapper"
                }
            ]
        }
    ]
}