{
    "type": "module",
    "code": "import json\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\nclass HttpMethod(Enum):\n    GET = \"GET\"\n    POST = \"POST\"\n    PUT = \"PUT\"\n    DELETE = \"DELETE\"\n    PATCH = \"PATCH\"\n    OPTIONS = \"OPTIONS\"\n    HEAD = \"HEAD\"\n\nclass SendWebRequestBlock(Block):\n    class Input(BlockSchema):\n        url: str = SchemaField(\n            description=\"The URL to send the request to\",\n            placeholder=\"https://api.example.com\",\n        )\n        method: HttpMethod = SchemaField(\n            description=\"The HTTP method to use for the request\",\n            default=HttpMethod.POST,\n        )\n        headers: dict[str, str] = SchemaField(\n            description=\"The headers to include in the request\",\n            default={},\n        )\n        json_format: bool = SchemaField(\n            title=\"JSON format\",\n            description=\"Whether to send and receive body as JSON\",\n            default=True,\n        )\n        body: Any = SchemaField(\n            description=\"The body of the request\",\n            default=None,\n        )\n\n    class Output(BlockSchema):\n        response: object = SchemaField(description=\"The response from the server\")\n        client_error: object = SchemaField(description=\"The error on 4xx status codes\")\n        server_error: object = SchemaField(description=\"The error on 5xx status codes\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"6595ae1f-b924-42cb-9a41-551a0611c4b4\",\n            description=\"This block makes an HTTP request to the given URL.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendWebRequestBlock.Input,\n            output_schema=SendWebRequestBlock.Output,\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if isinstance(input_data.body, str):\n            input_data.body = json.loads(input_data.body)\n\n        response = requests.request(\n            input_data.method.value,\n            input_data.url,\n            headers=input_data.headers,\n            json=input_data.body if input_data.json_format else None,\n            data=input_data.body if not input_data.json_format else None,\n        )\n        result = response.json() if input_data.json_format else response.text\n\n        if response.status_code // 100 == 2:\n            yield \"response\", result\n        elif response.status_code // 100 == 4:\n            yield \"client_error\", result\n        elif response.status_code // 100 == 5:\n            yield \"server_error\", result\n        else:\n            raise ValueError(f\"Unexpected status code: {response.status_code}\")",
    "children": [
        {
            "type": "aliased_import",
            "code": "import json"
        },
        {
            "type": "aliased_import",
            "code": "from enum import Enum"
        },
        {
            "type": "aliased_import",
            "code": "from typing import Any"
        },
        {
            "type": "aliased_import",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
        },
        {
            "type": "aliased_import",
            "code": "from backend.data.model import SchemaField"
        },
        {
            "type": "aliased_import",
            "code": "from backend.util.request import requests"
        },
        {
            "type": "class_definition",
            "code": "class HttpMethod(Enum):",
            "children": [
                {
                    "type": "block",
                    "code": "GET = \"GET\"\nPOST = \"POST\"\nPUT = \"PUT\"\nDELETE = \"DELETE\"\nPATCH = \"PATCH\"\nOPTIONS = \"OPTIONS\"\nHEAD = \"HEAD\""
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class SendWebRequestBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "block",
                            "code": "url: str = SchemaField(\n    description=\"The URL to send the request to\",\n    placeholder=\"https://api.example.com\",\n)\nmethod: HttpMethod = SchemaField(\n    description=\"The HTTP method to use for the request\",\n    default=HttpMethod.POST,\n)\nheaders: dict[str, str] = SchemaField(\n    description=\"The headers to include in the request\",\n    default={},\n)\njson_format: bool = SchemaField(\n    title=\"JSON format\",\n    description=\"Whether to send and receive body as JSON\",\n    default=True,\n)\nbody: Any = SchemaField(\n    description=\"The body of the request\",\n    default=None,\n)\n"
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "block",
                            "code": "response: object = SchemaField(description=\"The response from the server\")\nclient_error: object = SchemaField(description=\"The error on 4xx status codes\")\nserver_error: object = SchemaField(description=\"The error on 5xx status codes\")"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "super().__init__(\n    id=\"6595ae1f-b924-42cb-9a41-551a0611c4b4\",\n    description=\"This block makes an HTTP request to the given URL.\",\n    categories={BlockCategory.OUTPUT},\n    input_schema=SendWebRequestBlock.Input,\n    output_schema=SendWebRequestBlock.Output,\n)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "block",
                            "code": "if isinstance(input_data.body, str):\n    input_data.body = json.loads(input_data.body)\n\nresponse = requests.request(\n    input_data.method.value,\n    input_data.url,\n    headers=input_data.headers,\n    json=input_data.body if input_data.json_format else None,\n    data=input_data.body if not input_data.json_format else None,\n)\nresult = response.json() if input_data.json_format else response.text\n\nif response.status_code // 100 == 2:\n    yield \"response\", result\nelif response.status_code // 100 == 4:\n    yield \"client_error\", result\nelif response.status_code // 100 == 5:\n    yield \"server_error\", result\nelse:\n    raise ValueError(f\"Unexpected status code: {response.status_code}\")"
                        }
                    ]
                }
            ]
        }
    ]
}