{
    "type": "ErrorNode",
    "code": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n\nclass JinaEmbeddingBlock(Block):\n    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to embed\")\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n        model: str = SchemaField(\n            description=\"Jina embedding model to use\",\n            default=\"jina-embeddings-v2-base-en\",\n        )\n\n    class Output(BlockSchema):\n        embeddings: list = SchemaField(description=\"List of embeddings\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"7c56b3ab-62e7-43a2-a2dc-4ec4245660b6\",\n            description=\"Generates embeddings using Jina AI\",\n            categories={BlockCategory.AI},\n            input_schema=JinaEmbeddingBlock.Input,\n            output_schema=JinaEmbeddingBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.jina.ai/v1/embeddings\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n        data = {\"input\": input_data.texts, \"model\": input_data.model}\n        response = requests.post(url, headers=headers, json=data)\n        embeddings = [e[\"embedding\"] for e in response.json()[\"data\"]]\n        yield \"embeddings\", embeddings\n",
    "children": []
}