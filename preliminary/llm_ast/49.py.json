{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "aliased_import",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
        },
        {
            "type": "aliased_import",
            "code": "from backend.data.model import ContributorDetails, SchemaField"
        },
        {
            "type": "class_definition",
            "code": "class ReadCsvBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "contents: str = SchemaField(description=\"The contents of the CSV file to read\", placeholder=\"a, b, c\\n1,2,3\\n4,5,6\")"
                        },
                        {
                            "type": "assignment",
                            "code": "delimiter: str = SchemaField(description=\"The delimiter used in the CSV file\", default=\",\")"
                        },
                        {
                            "type": "assignment",
                            "code": "quotechar: str = SchemaField(description=\"The character used to quote fields\", default='\"')"
                        },
                        {
                            "type": "assignment",
                            "code": "escapechar: str = SchemaField(description=\"The character used to escape the delimiter\", default=\"\\\\\")"
                        },
                        {
                            "type": "assignment",
                            "code": "has_header: bool = SchemaField(description=\"Whether the CSV file has a header row\", default=True)"
                        },
                        {
                            "type": "assignment",
                            "code": "skip_rows: int = SchemaField(description=\"The number of rows to skip from the start of the file\", default=0)"
                        },
                        {
                            "type": "assignment",
                            "code": "strip: bool = SchemaField(description=\"Whether to strip whitespace from the values\", default=True)"
                        },
                        {
                            "type": "assignment",
                            "code": "skip_columns: list[str] = SchemaField(description=\"The columns to skip from the start of the row\", default=[])"
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "row: dict[str, str] = SchemaField(description=\"The data produced from each row in the CSV file\")"
                        },
                        {
                            "type": "assignment",
                            "code": "all_data: list[dict[str, str]] = SchemaField(description=\"All the data in the CSV file as a list of rows\")"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "augmented_assignment",
                            "code": "super().__init__(id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\", input_schema=ReadCsvBlock.Input, output_schema=ReadCsvBlock.Output, description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\", contributors=[ContributorDetails(name=\"Nicholas Tindle\")], categories={BlockCategory.TEXT, BlockCategory.DATA}, test_input={\"contents\": \"a, b, c\\n1,2,3\\n4,5,6\"}, test_output=[(\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}), (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}), (\"all_data\", [{\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}, {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}])])"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "aliased_import",
                            "code": "import csv"
                        },
                        {
                            "type": "aliased_import",
                            "code": "from io import StringIO"
                        },
                        {
                            "type": "assignment",
                            "code": "csv_file = StringIO(input_data.contents)"
                        },
                        {
                            "type": "assignment",
                            "code": "reader = csv.reader(csv_file, delimiter=input_data.delimiter, quotechar=input_data.quotechar, escapechar=input_data.escapechar)"
                        },
                        {
                            "type": "assignment",
                            "code": "header = None"
                        },
                        {
                            "type": "if_statement",
                            "code": "if input_data.has_header:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "header = next(reader)"
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if input_data.strip:",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "header = [h.strip() for h in header]"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "code": "for _ in range(input_data.skip_rows):",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "next(reader)"
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def process_row(row):",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "data = {}"
                                },
                                {
                                    "type": "for_statement",
                                    "code": "for i, value in enumerate(row):",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "code": "if i not in input_data.skip_columns:",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "code": "if input_data.has_header and header:",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "data[header[i]] = value.strip() if input_data.strip else value"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "code": "else:",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "data[str(i)] = value.strip() if input_data.strip else value"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return data"
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "all_data = []"
                        },
                        {
                            "type": "for_statement",
                            "code": "for row in reader:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "processed_row = process_row(row)"
                                },
                                {
                                    "type": "call",
                                    "code": "all_data.append(processed_row)"
                                },
                                {
                                    "type": "yield",
                                    "code": "yield \"row\", processed_row"
                                }
                            ]
                        },
                        {
                            "type": "yield",
                            "code": "yield \"all_data\", all_data"
                        }
                    ]
                }
            ]
        }
    ]
}