{
    "type": "module",
    "code": "root module",
    "children": [
        {
            "type": "import_statement",
            "code": "import statements",
            "children": [
                {
                    "type": "import_statement",
                    "code": "from typing import Literal"
                },
                {
                    "type": "import_statement",
                    "code": "import googlemaps"
                },
                {
                    "type": "import_from_statement",
                    "code": "from pydantic import BaseModel, SecretStr"
                },
                {
                    "type": "import_from_statement",
                    "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
                },
                {
                    "type": "import_from_statement",
                    "code": "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField"
                },
                {
                    "type": "import_from_statement",
                    "code": "from backend.integrations.providers import ProviderName"
                }
            ]
        },
        {
            "type": "assignment",
            "code": "TEST_CREDENTIALS = ...",
            "children": [
                {
                    "type": "call",
                    "code": "APIKeyCredentials(...)"
                }
            ]
        },
        {
            "type": "assignment",
            "code": "TEST_CREDENTIALS_INPUT = {...}",
            "children": [
                {
                    "type": "dictionary",
                    "code": "{...}",
                    "children": [
                        {
                            "type": "pair",
                            "code": "'provider': TEST_CREDENTIALS.provider"
                        },
                        {
                            "type": "pair",
                            "code": "'id': TEST_CREDENTIALS.id"
                        },
                        {
                            "type": "pair",
                            "code": "'type': TEST_CREDENTIALS.type"
                        },
                        {
                            "type": "pair",
                            "code": "'title': TEST_CREDENTIALS.type"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Place(BaseModel):",
            "children": [
                {
                    "type": "attribute",
                    "code": "name: str"
                },
                {
                    "type": "attribute",
                    "code": "address: str"
                },
                {
                    "type": "attribute",
                    "code": "phone: str"
                },
                {
                    "type": "attribute",
                    "code": "rating: float"
                },
                {
                    "type": "attribute",
                    "code": "reviews: int"
                },
                {
                    "type": "attribute",
                    "code": "website: str"
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class GoogleMapsSearchBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "credentials: CredentialsMetaInput[...] = CredentialsField(...)",
                            "children": [
                                {
                                    "type": "generic_type",
                                    "code": "CredentialsMetaInput[...]"
                                },
                                {
                                    "type": "call",
                                    "code": "CredentialsField(...)"
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "query: str = SchemaField(...)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "SchemaField(...)"
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "radius: int = SchemaField(...)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "SchemaField(...)"
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "max_results: int = SchemaField(...)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "SchemaField(...)"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "place: Place = SchemaField(...)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "SchemaField(...)"
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "error: str = SchemaField(...)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "SchemaField(...)"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(...)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "for_statement",
                            "code": "for place in places:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "yield 'place', place"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def search_places(self, api_key: SecretStr, query, radius, max_results):",
                    "children": [
                        {
                            "type": "call",
                            "code": "client = googlemaps.Client(...)"
                        },
                        {
                            "type": "return_statement",
                            "code": "return self._search_places(...)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def _search_places(self, client, query, radius, max_results):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "results = []"
                        },
                        {
                            "type": "assignment",
                            "code": "next_page_token = None"
                        },
                        {
                            "type": "while_statement",
                            "code": "while len(results) < max_results:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "response = client.places(...)"
                                },
                                {
                                    "type": "for_statement",
                                    "code": "for place in response['results']:",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "code": "if len(results) >= max_results:",
                                            "children": [
                                                {
                                                    "type": "break_statement",
                                                    "code": "break"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "place_details = client.place(...)['result']"
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "results.append(...)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "Place(...)"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "next_page_token = response.get(...)"
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if not next_page_token:",
                                    "children": [
                                        {
                                            "type": "break_statement",
                                            "code": "break"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return results"
                        }
                    ]
                }
            ]
        }
    ]
}