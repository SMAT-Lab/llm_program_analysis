{
    "type": "module",
    "code": null,
    "children": [
        {
            "type": "function_definition",
            "code": "def is_valid(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> bool:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\nCheck if a word can be placed at the given position.\n\n>>> puzzle = [\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', '']\n... ]\n>>> is_valid(puzzle, 'word', 0, 0, True)\nTrue\n>>> puzzle = [\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', '']\n... ]\n>>> is_valid(puzzle, 'word', 0, 0, False)\nTrue\n\"\"\"",
                    "children": []
                },
                {
                    "type": "for_in_clause",
                    "code": "for i in range(len(word))",
                    "children": [
                        {
                            "type": "conditional_expression",
                            "code": "if vertical:",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "code": "if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return False",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "conditional_expression",
                            "code": "elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return False",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return True",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def place_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\nPlace a word at the given position.\n\n>>> puzzle = [\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', '']\n... ]\n>>> place_word(puzzle, 'word', 0, 0, True)\n>>> puzzle\n[['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n\"\"\"",
                    "children": []
                },
                {
                    "type": "for_in_clause",
                    "code": "for i, char in enumerate(word):",
                    "children": [
                        {
                            "type": "conditional_expression",
                            "code": "if vertical:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "puzzle[row + i][col] = char",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "else_clause",
                            "code": "else:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "puzzle[row][col + i] = char",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def remove_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\nRemove a word from the given position.\n\n>>> puzzle = [\n...     ['w', '', '', ''],\n...     ['o', '', '', ''],\n...     ['r', '', '', ''],\n...     ['d', '', '', '']\n... ]\n>>> remove_word(puzzle, 'word', 0, 0, True)\n>>> puzzle\n[['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n\"\"\"",
                    "children": []
                },
                {
                    "type": "for_in_clause",
                    "code": "for i in range(len(word)):",
                    "children": [
                        {
                            "type": "conditional_expression",
                            "code": "if vertical:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "puzzle[row + i][col] = \"\"",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "else_clause",
                            "code": "else:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "puzzle[row][col + i] = \"\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\nSolve the crossword puzzle using backtracking.\n\n>>> puzzle = [\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', '']\n... ]\n\n>>> words = ['word', 'four', 'more', 'last']\n>>> solve_crossword(puzzle, words)\nTrue\n>>> puzzle = [\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', ''],\n...     ['', '', '', '']\n... ]\n>>> words = ['word', 'four', 'more', 'paragraphs']\n>>> solve_crossword(puzzle, words)\nFalse\n\"\"\"",
                    "children": []
                },
                {
                    "type": "for_in_clause",
                    "code": "for row in range(len(puzzle)):",
                    "children": [
                        {
                            "type": "for_in_clause",
                            "code": "for col in range(len(puzzle[0])):",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "code": "if puzzle[row][col] == \"\":",
                                    "children": [
                                        {
                                            "type": "for_in_clause",
                                            "code": "for word in words:",
                                            "children": [
                                                {
                                                    "type": "for_in_clause",
                                                    "code": "for vertical in [True, False]:",
                                                    "children": [
                                                        {
                                                            "type": "conditional_expression",
                                                            "code": "if is_valid(puzzle, word, row, col, vertical):",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "code": "place_word(puzzle, word, row, col, vertical)",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "code": "words.remove(word)",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "conditional_expression",
                                                                    "code": "if solve_crossword(puzzle, words):",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "code": "return True",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "code": "words.append(word)",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "code": "remove_word(puzzle, word, row, col, vertical)",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return False",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return True",
                    "children": []
                }
            ]
        },
        {
            "type": "conditional_expression",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "assignment",
                    "code": "PUZZLE = [[\"\"] * 3 for _ in range(3)]",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "WORDS = [\"cat\", \"dog\", \"car\"]",
                    "children": []
                },
                {
                    "type": "conditional_expression",
                    "code": "if solve_crossword(PUZZLE, WORDS):",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "print(\"Solution found:\")",
                            "children": []
                        },
                        {
                            "type": "for_in_clause",
                            "code": "for row in PUZZLE:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "print(\" \".join(row))",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "else_clause",
                    "code": "else:",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "print(\"No solution found:\")",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}