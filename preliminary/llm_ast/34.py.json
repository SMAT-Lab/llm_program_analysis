{
    "type": "ErrorNode",
    "code": "from functools import wraps\nfrom typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\n\nfrom backend.data.credit import get_user_credit_model\nfrom backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\nfrom backend.data.graph import get_graph, get_node\nfrom backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\nfrom backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nconfig = Config()\n\n\nclass DatabaseManager(AppService):\n    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n\n    @expose\n    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n\n    @staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper\n\n    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n\n    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n\n    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n\n    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)\n",
    "children": []
}