{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import BlockOutput, BlockSchema"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.model import APIKeyCredentials, SchemaField"
        },
        {
            "type": "import_from_statement",
            "code": "from ._api import (TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, Slant3DCredentialsField, Slant3DCredentialsInput)"
        },
        {
            "type": "import_from_statement",
            "code": "from .base import Slant3DBlockBase"
        },
        {
            "type": "class_definition",
            "code": "class Slant3DSlicerBlock(Slant3DBlockBase):",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"Block for slicing 3D model files\"\"\""
                },
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()"
                        },
                        {
                            "type": "assignment",
                            "code": "file_url: str = SchemaField(description=\"URL of the 3D model file to slice (STL)\")"
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "message: str = SchemaField(description=\"Response message\")"
                        },
                        {
                            "type": "assignment",
                            "code": "price: float = SchemaField(description=\"Calculated price for printing\")"
                        },
                        {
                            "type": "assignment",
                            "code": "error: str = SchemaField(description=\"Error message if slicing failed\")"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\", description=\"Slice a 3D model file and get pricing information\",input_schema=self.Input, output_schema=self.Output,test_input={\"credentials\": TEST_CREDENTIALS_INPUT, \"file_url\": \"https://example.com/model.stl\"}, test_credentials=TEST_CREDENTIALS,test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],test_mock={\"_make_request\": lambda *args, **kwargs: {\"message\": \"Slicing successful\", \"data\": {\"price\": 8.23}}}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "try_statement",
                            "code": "try:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "result = self._make_request(\"POST\", \"slicer\", credentials.api_key.get_secret_value(),json={\"fileURL\": input_data.file_url})"
                                },
                                {
                                    "type": "yield",
                                    "code": "yield \"message\", result[\"message\"]"
                                },
                                {
                                    "type": "yield",
                                    "code": "yield \"price\", result[\"data\"][\"price\"]"
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except Exception as e:",
                            "children": [
                                {
                                    "type": "yield",
                                    "code": "yield \"error\", str(e)"
                                },
                                {
                                    "type": "raise_statement",
                                    "code": "raise"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}