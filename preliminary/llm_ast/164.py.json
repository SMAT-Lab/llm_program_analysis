{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "function_definition",
            "code": "def get_highest_set_bit_position(number: int) -> int:",
            "children": [
                {
                    "type": "parameters",
                    "code": "(number: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "code": "number: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "number",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "code": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "code": "-> int",
                    "children": [
                        {
                            "type": "type",
                            "code": "int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if not isinstance(number, int):",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "if not isinstance(number, int):",
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "code": "not",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "isinstance(number, int)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "code": "isinstance",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "code": "(number, int)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "number",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise TypeError(\"Input value must be an 'int' type\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "TypeError(\"Input value must be an 'int' type\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "code": "TypeError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "code": "(\"Input value must be an 'int' type\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "code": "\"Input value must be an 'int' type\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "position = 0",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "position",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "0",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "while_statement",
                            "code": "while number:",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "number",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "augmented_assignment",
                                            "code": "position += 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "position",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "code": "1",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "augmented_assignment",
                                            "code": "number >>= 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "code": "1",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return position",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "position",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "comparison_operator",
                    "code": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "code": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "code": "\"__main__\"",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "import_statement",
                            "code": "import doctest",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "doctest",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "code": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "code": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "doctest",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "code": "testmod",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "code": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}