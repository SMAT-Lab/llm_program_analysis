{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_statement",
            "code": "import operator",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "from enum import Enum",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "from typing import Any",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.model import SchemaField",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class Operation(Enum):",
            "children": [
                {
                    "type": "assignment",
                    "code": "ADD = 'Add'",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "SUBTRACT = 'Subtract'",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "MULTIPLY = 'Multiply'",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "DIVIDE = 'Divide'",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "POWER = 'Power'",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class CalculatorBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "operation: Operation = SchemaField(\n    description=\"Choose the math operation you want to perform\",\n    placeholder=\"Select an operation\",\n)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "a: float = SchemaField(\n    description=\"Enter the first number (A)\",\n    placeholder=\"For example: 10\"\n)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "b: float = SchemaField(\n    description=\"Enter the second number (B)\",\n    placeholder=\"For example: 5\"\n)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "round_result: bool = SchemaField(\n    description=\"Do you want to round the result to a whole number?\",\n    default=False,\n)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "result: float = SchemaField(description=\"The result of your calculation\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(\n    id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n    input_schema=CalculatorBlock.Input,\n    output_schema=CalculatorBlock.Output,\n    description=\"Performs a mathematical operation on two numbers.\",\n    categories={BlockCategory.LOGIC},\n    test_input={\n        \"operation\": Operation.ADD.value,\n        \"a\": 10.0,\n        \"b\": 5.0,\n        \"round_result\": False,\n    },\n    test_output=[\n        (\"result\", 15.0),\n    ],\n)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "super().__init__(",
                                    "children": [
                                        {
                                            "type": "keyword_argument",
                                            "code": "id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\"",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "input_schema=CalculatorBlock.Input",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "output_schema=CalculatorBlock.Output",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "description=\"Performs a mathematical operation on two numbers.\"",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "categories={BlockCategory.LOGIC}",
                                            "children": [
                                                {
                                                    "type": "set",
                                                    "code": "{BlockCategory.LOGIC}",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "test_input={\"operation\": Operation.ADD.value, \"a\": 10.0, \"b\": 5.0, \"round_result\": False}",
                                            "children": [
                                                {
                                                    "type": "dictionary",
                                                    "code": "{\"operation\": Operation.ADD.value, \"a\": 10.0, \"b\": 5.0, \"round_result\": False}",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "code": "\"operation\": Operation.ADD.value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "code": "\"a\": 10.0",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "code": "\"b\": 5.0",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "code": "\"round_result\": False",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "test_output=[(\"result\", 15.0)]",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "code": "[(\"result\", 15.0)]",
                                                    "children": [
                                                        {
                                                            "type": "tuple",
                                                            "code": "(\"result\", 15.0)",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "operation = input_data.operation",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "a = input_data.a",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "b = input_data.b",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "operations = {\n    Operation.ADD: operator.add,\n    Operation.SUBTRACT: operator.sub,\n    Operation.MULTIPLY: operator.mul,\n    Operation.DIVIDE: operator.truediv,\n    Operation.POWER: operator.pow,\n}",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "op_func = operations[operation]",
                            "children": []
                        },
                        {
                            "type": "try_statement",
                            "code": "try:",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if operation == Operation.DIVIDE and b == 0:",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise ZeroDivisionError(\"Cannot divide by zero\")",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "result = op_func(a, b)",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if input_data.round_result:",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "result = round(result)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "yield",
                                    "code": "yield \"result\", result",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except ZeroDivisionError:",
                            "children": [
                                {
                                    "type": "yield",
                                    "code": "yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except Exception:",
                            "children": [
                                {
                                    "type": "yield",
                                    "code": "yield \"result\", float(\"nan\")  # Return NaN for other errors",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class CountItemsBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "collection: Any = SchemaField(\n    description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n    placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\n)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "count: int = SchemaField(description=\"The number of items in the collection\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(\n    id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n    input_schema=CountItemsBlock.Input,\n    output_schema=CountItemsBlock.Output,\n    description=\"Counts the number of items in a collection.\",\n    categories={BlockCategory.LOGIC},\n    test_input={\"collection\": [1, 2, 3, 4, 5]},\n    test_output=[\n        (\"count\", 5),\n    ],\n)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "super().__init__(",
                                    "children": [
                                        {
                                            "type": "keyword_argument",
                                            "code": "id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\"",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "input_schema=CountItemsBlock.Input",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "output_schema=CountItemsBlock.Output",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "description=\"Counts the number of items in a collection.\"",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "categories={BlockCategory.LOGIC}",
                                            "children": [
                                                {
                                                    "type": "set",
                                                    "code": "{BlockCategory.LOGIC}",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "test_input={\"collection\": [1, 2, 3, 4, 5]}",
                                            "children": [
                                                {
                                                    "type": "dictionary",
                                                    "code": "{\"collection\": [1, 2, 3, 4, 5]}",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "code": "\"collection\": [1, 2, 3, 4, 5]",
                                                            "children": [
                                                                {
                                                                    "type": "list",
                                                                    "code": "[1, 2, 3, 4, 5]",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "test_output=[(\"count\", 5)]",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "code": "[(\"count\", 5)]",
                                                    "children": [
                                                        {
                                                            "type": "tuple",
                                                            "code": "(\"count\", 5)",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "collection = input_data.collection",
                            "children": []
                        },
                        {
                            "type": "try_statement",
                            "code": "try:",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if isinstance(collection, (str, list, tuple, set, dict)):",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "count = len(collection)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "code": "elif hasattr(collection, \"__iter__\"):",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "count = sum(1 for _ in collection)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "code": "else:",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise ValueError(\"Input is not a countable collection\")",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "yield",
                                    "code": "yield \"count\", count",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except Exception:",
                            "children": [
                                {
                                    "type": "yield",
                                    "code": "yield \"count\", -1  # Return -1 to indicate an error",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}