{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "Graph Coloring also called \"m coloring problem\" consists of coloring a given graph with at most m colors such that no adjacent vertices are assigned the same color",
            "children": []
        },
        {
            "type": "comment",
            "code": "Wikipedia: https://en.wikipedia.org/wiki/Graph_coloring",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def valid_coloring(neighbours: list[int], colored_vertices: list[int], color: int) -> bool:",
            "children": [
                {
                    "type": "comment",
                    "code": "For each neighbour check if the coloring constraint is satisfied If any of the neighbours fail the constraint return False If all neighbours validate the constraint return True",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color) True",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color) False",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "code": "return not any(neighbour == 1 and colored_vertices[i] == color for i, neighbour in enumerate(neighbours))",
                    "children": [
                        {
                            "type": "not_operator",
                            "code": "not",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "any(neighbour == 1 and colored_vertices[i] == color for i, neighbour in enumerate(neighbours))",
                                    "children": [
                                        {
                                            "type": "lambda",
                                            "code": "neighbour == 1 and colored_vertices[i] == color for i, neighbour in enumerate(neighbours)",
                                            "children": [
                                                {
                                                    "type": "boolean_operator",
                                                    "code": "neighbour == 1 and colored_vertices[i] == color",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "code": "neighbour == 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "neighbour",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "code": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "code": "colored_vertices[i] == color",
                                                            "children": [
                                                                {
                                                                    "type": "subscript",
                                                                    "code": "colored_vertices[i]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "colored_vertices",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "i",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "color",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "for_in_clause",
                                                    "code": "for i, neighbour in enumerate(neighbours)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "code": "i",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "code": "neighbour",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "code": "enumerate(neighbours)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "enumerate",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "code": "(neighbours)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "neighbours",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def util_color(graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int) -> bool:",
            "children": [
                {
                    "type": "comment",
                    "code": "Pseudo-Code",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "Base Case: 1. Check if coloring is complete 1.1 If complete return True (meaning that we successfully colored the graph)",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "Recursive Step: 2. Iterates over each color: Check if the current coloring is valid: 2.1. Color given vertex 2.2. Do recursive call, check if this coloring leads to a solution 2.4. if current coloring leads to a solution return 2.5. Uncolor given vertex",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> graph = [[0, 1, 0, 0, 0],\n... [1, 0, 1, 0, 1],\n... [0, 1, 0, 1, 0],\n... [0, 1, 1, 0, 0],\n... [0, 1, 0, 0, 0]]",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> max_colors = 3\n    >>> colored_vertices = [0, 1, 0, 0, 0]\n    >>> index = 3",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> util_color(graph, max_colors, colored_vertices, index)\n    True",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> max_colors = 2\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    False",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if index == len(graph):",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return True",
                                    "children": [
                                        {
                                            "type": "true",
                                            "code": "True",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "for_statement",
                    "code": "for i in range(max_colors):",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if valid_coloring(graph[index], colored_vertices, i):",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "colored_vertices[index] = i",
                                                    "children": [
                                                        {
                                                            "type": "subscript",
                                                            "code": "colored_vertices[index]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "colored_vertices",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "index",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "code": "i",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "code": "if util_color(graph, max_colors, colored_vertices, index + 1):",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "code": "",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "code": "return True",
                                                                    "children": [
                                                                        {
                                                                            "type": "true",
                                                                            "code": "True",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "code": "colored_vertices[index] = -1",
                                                    "children": [
                                                        {
                                                            "type": "subscript",
                                                            "code": "colored_vertices[index]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "colored_vertices",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "index",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "unary_operator",
                                                            "code": "-1",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "code": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return False",
                    "children": [
                        {
                            "type": "false",
                            "code": "False",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def color(graph: list[list[int]], max_colors: int) -> list[int]:",
            "children": [
                {
                    "type": "comment",
                    "code": "Wrapper function to call subroutine called util_color which will either return True or False. If True is returned colored_vertices list is filled with correct colorings",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> graph = [[0, 1, 0, 0, 0],\n... [1, 0, 1, 0, 1],\n... [0, 1, 0, 1, 0],\n... [0, 1, 1, 0, 0],\n... [0, 1, 0, 0,0]]",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> max_colors = 2\n    >>> color(graph, max_colors)\n    []",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "colored_vertices = [-1] * len(graph)",
                    "children": [
                        {
                            "type": "identifier",
                            "code": "colored_vertices",
                            "children": []
                        },
                        {
                            "type": "binary_operator",
                            "code": "[-1] * len(graph)",
                            "children": [
                                {
                                    "type": "list",
                                    "code": "[-1]",
                                    "children": [
                                        {
                                            "type": "unary_operator",
                                            "code": "-1",
                                            "children": [
                                                {
                                                    "type": "integer",
                                                    "code": "1",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "call",
                                    "code": "len(graph)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "len",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "code": "(graph)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "graph",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if util_color(graph, max_colors, colored_vertices, 0):",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return colored_vertices",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "colored_vertices",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return []",
                    "children": [
                        {
                            "type": "list",
                            "code": "[]",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}