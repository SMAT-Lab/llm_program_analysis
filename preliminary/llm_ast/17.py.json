{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "Author  : Alexander Pantyukhin",
            "children": []
        },
        {
            "type": "comment",
            "code": "Date    : November 24, 2022",
            "children": []
        },
        {
            "type": "comment",
            "code": "Task:",
            "children": []
        },
        {
            "type": "comment",
            "code": "Given an m x n grid of characters board and a string word,",
            "children": []
        },
        {
            "type": "comment",
            "code": "return true if word exists in the grid.",
            "children": []
        },
        {
            "type": "comment",
            "code": "The word can be constructed from letters of sequentially adjacent cells,",
            "children": []
        },
        {
            "type": "comment",
            "code": "where adjacent cells are horizontally or vertically neighboring.",
            "children": []
        },
        {
            "type": "comment",
            "code": "The same letter cell may not be used more than once.",
            "children": []
        },
        {
            "type": "comment",
            "code": "Example:",
            "children": []
        },
        {
            "type": "comment",
            "code": "Matrix:",
            "children": []
        },
        {
            "type": "comment",
            "code": "---------",
            "children": []
        },
        {
            "type": "comment",
            "code": "|A|B|C|E|",
            "children": []
        },
        {
            "type": "comment",
            "code": "|S|F|C|S|",
            "children": []
        },
        {
            "type": "comment",
            "code": "|A|D|E|E|",
            "children": []
        },
        {
            "type": "comment",
            "code": "---------",
            "children": []
        },
        {
            "type": "comment",
            "code": "Word:",
            "children": []
        },
        {
            "type": "comment",
            "code": "\"ABCCED\"",
            "children": []
        },
        {
            "type": "comment",
            "code": "Result:",
            "children": []
        },
        {
            "type": "comment",
            "code": "True",
            "children": []
        },
        {
            "type": "comment",
            "code": "Implementation notes: Use backtracking approach.",
            "children": []
        },
        {
            "type": "comment",
            "code": "At each point, check all neighbors to try to find the next letter of the word.",
            "children": []
        },
        {
            "type": "comment",
            "code": "leetcode: https://leetcode.com/problems/word-search/",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def get_point_key(len_board: int, len_board_column: int, row: int, column: int) -> int:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\" Returns the hash key of matrix indexes. \"\"\"",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "code": "return len_board * len_board_column * row + column",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def exits_word(board: list[list[str]], word: str, row: int, column: int, word_index: int, visited_points_set: set[int]) -> bool:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\" Return True if it's possible to search the word suffix starting from the word_index. \"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if board[row][column] != word[word_index]:",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return False",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if word_index == len(word) - 1:",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return True",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "len_board = len(board)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "len_board_column = len(board[0])",
                    "children": []
                },
                {
                    "type": "for_statement",
                    "code": "for direction in traverts_directions:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "next_i = row + direction[0]",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "next_j = column + direction[1]",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):",
                            "children": [
                                {
                                    "type": "continue_statement",
                                    "code": "continue",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "key = get_point_key(len_board, len_board_column, next_i, next_j)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if key in visited_points_set:",
                            "children": [
                                {
                                    "type": "continue_statement",
                                    "code": "continue",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "code": "visited_points_set.add(key)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return True",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "code": "visited_points_set.remove(key)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return False",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def word_exists(board: list[list[str]], word: str) -> bool:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\" \"\"\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "board_error_message = (\"The board should be a non empty matrix of single chars strings.\")",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "len_board = len(board)",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if not isinstance(board, list) or len(board) == 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(board_error_message)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "for_statement",
                    "code": "for row in board:",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "if not isinstance(row, list) or len(row) == 0:",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(board_error_message)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "code": "for item in row:",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if not isinstance(item, str) or len(item) != 1:",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise ValueError(board_error_message)",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if not isinstance(word, str) or len(word) == 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(\"The word parameter should be a string of length greater than 0.\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "len_board_column = len(board[0])",
                    "children": []
                },
                {
                    "type": "for_statement",
                    "code": "for i in range(len_board):",
                    "children": [
                        {
                            "type": "for_statement",
                            "code": "for j in range(len_board_column):",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if exits_word(board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}):",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return True",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return False",
                    "children": []
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "doctest.testmod()",
                    "children": []
                }
            ]
        }
    ]
}