{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_statement",
            "code": "from datetime import datetime",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "import prisma.errors",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "import prisma.models",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "import pytest",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from prisma import Prisma",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "import backend.server.v2.store.db as db",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.server.v2.store.model import Profile",
            "children": []
        },
        {
            "type": "decorator",
            "code": "@pytest.fixture(autouse=True)",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "async def setup_prisma():",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "try_statement",
                            "code": "",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "Prisma()",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "code": "except prisma.errors.ClientAlreadyRegisteredError:",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "pass_statement",
                                                    "code": "pass",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "code": "yield",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorator",
            "code": "@pytest.mark.asyncio",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "async def test_get_store_agents(mocker):",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "# Mock data",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_agents = [prisma.models.StoreAgent(...)]",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Mock prisma calls",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Call function",
                            "children": []
                        },
                        {
                            "type": "await",
                            "code": "result = await db.get_store_agents()",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify results",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert len(result.agents) == 1",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.agents[0].slug == 'test-agent'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.pagination.total_items == 1",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify mocks called correctly",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_store_agent.return_value.find_many.assert_called_once()",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_store_agent.return_value.count.assert_called_once()",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorator",
            "code": "@pytest.mark.asyncio",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "async def test_get_store_agent_details(mocker):",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "# Mock data",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_agent = prisma.models.StoreAgent(...)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Mock prisma call",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Call function",
                            "children": []
                        },
                        {
                            "type": "await",
                            "code": "result = await db.get_store_agent_details('creator', 'test-agent')",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify results",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.slug == 'test-agent'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.agent_name == 'Test Agent'",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify mock called correctly",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_store_agent.return_value.find_first.assert_called_once_with(where={'creator_username': 'creator', 'slug': 'test-agent'})",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorator",
            "code": "@pytest.mark.asyncio",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "async def test_get_store_creator_details(mocker):",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "# Mock data",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_creator_data = prisma.models.Creator(...)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Mock prisma call",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_creator = mocker.patch('prisma.models.Creator.prisma')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_creator.return_value.find_unique = mocker.AsyncMock()",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Configure the mock to return values that will pass validation",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_creator.return_value.find_unique.return_value = mock_creator_data",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Call function",
                            "children": []
                        },
                        {
                            "type": "await",
                            "code": "result = await db.get_store_creator_details('creator')",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify results",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.username == 'creator'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.name == 'Test Creator'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.description == 'Test description'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.avatar_url == 'avatar.jpg'",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify mock called correctly",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_creator.return_value.find_unique.assert_called_once_with(where={'username': 'creator'})",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorator",
            "code": "@pytest.mark.asyncio",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "async def test_create_store_submission(mocker):",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "# Mock data",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_agent = prisma.models.AgentGraph(...)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_listing = prisma.models.StoreListing(...)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Mock prisma calls",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_agent_graph = mocker.patch('prisma.models.AgentGraph.prisma')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_listing = mocker.patch('prisma.models.StoreListing.prisma')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Call function",
                            "children": []
                        },
                        {
                            "type": "await",
                            "code": "result = await db.create_store_submission('user-id', 'agent-id', 1, 'test-agent', 'Test Agent', 'Test description')",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify results",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.name == 'Test Agent'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.description == 'Test description'",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify mocks called correctly",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_agent_graph.return_value.find_first.assert_called_once()",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_store_listing.return_value.find_first.assert_called_once()",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_store_listing.return_value.create.assert_called_once()",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorator",
            "code": "@pytest.mark.asyncio",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "async def test_update_profile(mocker):",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "# Mock data",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_profile = prisma.models.Profile(...)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Mock prisma calls",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_profile_db = mocker.patch('prisma.models.Profile.prisma')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_profile_db.return_value.find_first = mocker.AsyncMock(return_value=mock_profile)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Test data",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "profile = Profile(...)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Call function",
                            "children": []
                        },
                        {
                            "type": "await",
                            "code": "result = await db.update_or_create_profile('user-id', profile)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify results",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.username == 'creator'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.name == 'Test Creator'",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify mocks called correctly",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_profile_db.return_value.find_first.assert_called_once()",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "mock_profile_db.return_value.update.assert_called_once()",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorator",
            "code": "@pytest.mark.asyncio",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "async def test_get_user_profile(mocker):",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "# Mock data",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_profile = prisma.models.Profile(...)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Mock prisma calls",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_profile_db = mocker.patch('prisma.models.Profile.prisma')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "mock_profile_db.return_value.find_unique = mocker.AsyncMock(return_value=mock_profile)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Call function",
                            "children": []
                        },
                        {
                            "type": "await",
                            "code": "result = await db.get_user_profile('user-id')",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "# Verify results",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.name == 'No Profile Data'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.username == 'No Profile Data'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.description == 'No Profile Data'",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.links == []",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert result.avatar_url == ''",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}