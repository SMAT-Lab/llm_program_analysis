{
    "type": "module",
    "code": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key\n\n\nclass JSONCryptor:\n    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
    "children": [
        {
            "type": "import_statement",
            "code": "import json",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from typing import Optional",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from cryptography.fernet import Fernet",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.util.settings import Settings",
            "children": []
        },
        {
            "type": "assignment",
            "code": "ENCRYPTION_KEY = Settings().secrets.encryption_key",
            "children": [
                {
                    "type": "attribute",
                    "code": "Settings().secrets.encryption_key",
                    "children": [
                        {
                            "type": "call",
                            "code": "Settings()",
                            "children": []
                        },
                        {
                            "type": "attribute",
                            "code": "secrets",
                            "children": []
                        },
                        {
                            "type": "attribute",
                            "code": "encryption_key",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class JSONCryptor:",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, key: Optional[str] = None):",
                    "children": [
                        {
                            "type": "block",
                            "code": "# Use provided key or get from environment\nself.key = key or ENCRYPTION_KEY\nif not self.key:\n    raise ValueError(\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\")\nself.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)",
                            "children": [
                                {
                                    "type": "comment",
                                    "code": "# Use provided key or get from environment",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "self.key = key or ENCRYPTION_KEY",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if not self.key:",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "raise ValueError(\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\")",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "code": "raise ValueError(\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\")",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "Fernet(self.key.encode() if isinstance(self.key, str) else self.key)",
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "code": "self.key.encode() if isinstance(self.key, str) else self.key",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "isinstance(self.key, str)",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "code": "self.key.encode()",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "code": "self.key",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def encrypt(self, data: dict) -> str:",
                    "children": [
                        {
                            "type": "block",
                            "code": "json_str = json.dumps(data)\nencrypted = self.fernet.encrypt(json_str.encode())\nreturn encrypted.decode()",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "json_str = json.dumps(data)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "json.dumps(data)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "encrypted = self.fernet.encrypt(json_str.encode())",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "self.fernet.encrypt(json_str.encode())",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "code": "json_str.encode()",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return encrypted.decode()",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "encrypted.decode()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def decrypt(self, encrypted_str: str) -> dict:",
                    "children": [
                        {
                            "type": "block",
                            "code": "if not encrypted_str:\n    return {}\ndecrypted = self.fernet.decrypt(encrypted_str.encode())\nreturn json.loads(decrypted.decode())",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if not encrypted_str:",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "return {}",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "code": "return {}",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "decrypted = self.fernet.decrypt(encrypted_str.encode())",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "self.fernet.decrypt(encrypted_str.encode())",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "code": "encrypted_str.encode()",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return json.loads(decrypted.decode())",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "json.loads(decrypted.decode())",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "decrypted.decode()",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}