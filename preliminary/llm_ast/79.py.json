{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def binary_and(a: int, b: int) -> str:",
            "children": [
                {
                    "type": "parameters",
                    "code": "(a: int, b: int)",
                    "children": [
                        {
                            "type": "default_parameter",
                            "code": "a: int",
                            "children": []
                        },
                        {
                            "type": "default_parameter",
                            "code": "b: int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "-> str",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if a < 0 or b < 0:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise ValueError(\"the value of both inputs must be positive\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "ValueError(\"the value of both inputs must be positive\")",
                                                    "children": [
                                                        {
                                                            "type": "argument_list",
                                                            "code": "(\"the value of both inputs must be positive\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "code": "\"the value of both inputs must be positive\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "a_binary = format(a, \"b\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "a_binary",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "format(a, \"b\")",
                                    "children": [
                                        {
                                            "type": "argument_list",
                                            "code": "(a, \"b\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "a",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string",
                                                    "code": "\"b\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "b_binary = format(b, \"b\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "b_binary",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "format(b, \"b\")",
                                    "children": [
                                        {
                                            "type": "argument_list",
                                            "code": "(b, \"b\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "b",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string",
                                                    "code": "\"b\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "max_len = max(len(a_binary), len(b_binary))",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "max_len",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "max(len(a_binary), len(b_binary))",
                                    "children": [
                                        {
                                            "type": "argument_list",
                                            "code": "(len(a_binary), len(b_binary))",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "len(a_binary)",
                                                    "children": [
                                                        {
                                                            "type": "argument_list",
                                                            "code": "(a_binary)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "a_binary",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "call",
                                                    "code": "len(b_binary)",
                                                    "children": [
                                                        {
                                                            "type": "argument_list",
                                                            "code": "(b_binary)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "b_binary",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return \"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "\"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
                                    "children": [
                                        {
                                            "type": "string",
                                            "code": "\"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "code": "\"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
                                            "children": [
                                                {
                                                    "type": "generator_expression",
                                                    "code": "str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "str(int(char_a == \"1\" and char_b == \"1\"))",
                                                            "children": [
                                                                {
                                                                    "type": "argument_list",
                                                                    "code": "(int(char_a == \"1\" and char_b == \"1\"))",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "code": "int(char_a == \"1\" and char_b == \"1\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "code": "(char_a == \"1\" and char_b == \"1\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "binary_operator",
                                                                                            "code": "char_a == \"1\" and char_b == \"1\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "comparison_operator",
                                                                                                    "code": "char_a == \"1\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "code": "char_a",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "code": "\"1\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "comparison_operator",
                                                                                                    "code": "char_b == \"1\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "code": "char_b",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "code": "\"1\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "for_in_clause",
                                                            "code": "for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                                            "children": [
                                                                {
                                                                    "type": "expression_list",
                                                                    "code": "char_a, char_b",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "char_a",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "char_b",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "code": "zip(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                                                    "children": [
                                                                        {
                                                                            "type": "argument_list",
                                                                            "code": "(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "code": "a_binary.zfill(max_len)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "code": "(max_len)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "code": "max_len",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "code": "b_binary.zfill(max_len)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "code": "(max_len)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "code": "max_len",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "import_statement",
                            "code": "import doctest",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "doctest",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "code": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "argument_list",
                                            "code": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}