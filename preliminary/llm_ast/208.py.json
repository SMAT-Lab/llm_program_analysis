{
    "type": "module",
    "code": "import asyncio\n\nimport pytest\n\nfrom backend.util.retry import conn_retry\n\n\ndef test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"\n\n\n@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"\n",
    "children": [
        {
            "type": "import_statement",
            "code": "import asyncio"
        },
        {
            "type": "import_statement",
            "code": "import pytest"
        },
        {
            "type": "import_statement",
            "code": "from backend.util.retry import conn_retry"
        },
        {
            "type": "function_definition",
            "code": "def test_conn_retry_sync_function():",
            "children": [
                {
                    "type": "block",
                    "code": "retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "retry_count = 0"
                        },
                        {
                            "type": "decorated_definition",
                            "code": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():",
                            "children": [
                                {
                                    "type": "decorator",
                                    "code": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)"
                                },
                                {
                                    "type": "function_definition",
                                    "code": "def test_function():",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"",
                                            "children": [
                                                {
                                                    "type": "global_statement",
                                                    "code": "nonlocal retry_count"
                                                },
                                                {
                                                    "type": "augmented_assignment",
                                                    "code": "retry_count -= 1"
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "code": "if retry_count > 0:",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "code": "raise ValueError(\"Test error\")",
                                                            "children": [
                                                                {
                                                                    "type": "raise_statement",
                                                                    "code": "raise ValueError(\"Test error\")"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "code": "return \"Success\""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "retry_count = 2"
                        },
                        {
                            "type": "expression_statement",
                            "code": "res = test_function()"
                        },
                        {
                            "type": "assert_statement",
                            "code": "assert res == \"Success\""
                        },
                        {
                            "type": "assignment",
                            "code": "retry_count = 100"
                        },
                        {
                            "type": "with_statement",
                            "code": "with pytest.raises(ValueError) as e:",
                            "children": [
                                {
                                    "type": "with_clause",
                                    "code": "pytest.raises(ValueError) as e",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "test_function()\n        assert str(e.value) == \"Test error\"",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "code": "test_function()"
                                                },
                                                {
                                                    "type": "assert_statement",
                                                    "code": "assert str(e.value) == \"Test error\""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "code": "@pytest.mark.asyncio\nasync def test_conn_retry_async_function():",
            "children": [
                {
                    "type": "decorator",
                    "code": "@pytest.mark.asyncio"
                },
                {
                    "type": "function_definition",
                    "code": "async def test_conn_retry_async_function():",
                    "children": [
                        {
                            "type": "block",
                            "code": "retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "retry_count = 0"
                                },
                                {
                                    "type": "decorated_definition",
                                    "code": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():",
                                    "children": [
                                        {
                                            "type": "decorator",
                                            "code": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)"
                                        },
                                        {
                                            "type": "function_definition",
                                            "code": "async def test_function():",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"",
                                                    "children": [
                                                        {
                                                            "type": "global_statement",
                                                            "code": "nonlocal retry_count"
                                                        },
                                                        {
                                                            "type": "await",
                                                            "code": "await asyncio.sleep(1)"
                                                        },
                                                        {
                                                            "type": "augmented_assignment",
                                                            "code": "retry_count -= 1"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if retry_count > 0:",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "raise ValueError(\"Test error\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "code": "raise ValueError(\"Test error\")"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "code": "return \"Success\""
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "retry_count = 2"
                                },
                                {
                                    "type": "await",
                                    "code": "res = await test_function()"
                                },
                                {
                                    "type": "assert_statement",
                                    "code": "assert res == \"Success\""
                                },
                                {
                                    "type": "assignment",
                                    "code": "retry_count = 100"
                                },
                                {
                                    "type": "with_statement",
                                    "code": "with pytest.raises(ValueError) as e:",
                                    "children": [
                                        {
                                            "type": "with_clause",
                                            "code": "pytest.raises(ValueError) as e",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "await test_function()\n        assert str(e.value) == \"Test error\"",
                                                    "children": [
                                                        {
                                                            "type": "await",
                                                            "code": "await test_function()"
                                                        },
                                                        {
                                                            "type": "assert_statement",
                                                            "code": "assert str(e.value) == \"Test error\""
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}