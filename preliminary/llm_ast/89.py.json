{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def twos_complement(number: int) -> str:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if number > 0:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(\"input must be a negative integer\")",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "binary_number_length = len(bin(number)[3:])",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "code": "return \"0b\" + twos_complement_number",
                    "children": []
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "import_statement",
                            "code": "import doctest",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "doctest.testmod()",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}