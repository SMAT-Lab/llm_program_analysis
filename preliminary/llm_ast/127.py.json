{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "future_import_statement",
            "code": "from __future__ import annotations",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def solve_maze(maze: list[list[int]], source_row: int, source_column: int, destination_row: int, destination_column: int) -> list[list[int]]:",
            "children": [
                {
                    "type": "parameters",
                    "code": "maze: list[list[int]], source_row: int, source_column: int, destination_row: int, destination_column: int",
                    "children": [
                        {
                            "type": "parameter",
                            "code": "maze: list[list[int]]"
                        },
                        {
                            "type": "parameter",
                            "code": "source_row: int"
                        },
                        {
                            "type": "parameter",
                            "code": "source_column: int"
                        },
                        {
                            "type": "parameter",
                            "code": "destination_row: int"
                        },
                        {
                            "type": "parameter",
                            "code": "destination_column: int"
                        }
                    ]
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "comment",
                            "code": "\"\"\"\nThis method solves the \"rat in maze\" problem.\nParameters :\n    - maze: A two dimensional matrix of zeros and ones.\n    ...\nNote:\n    In the output maze, the zeros (0s) represent one of the possible\n    paths from the source to the destination.\n\"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "size = len(maze)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if not (0 <= source_row <= size - 1 and 0 <= source_column <= size - 1) or (not (0 <= destination_row <= size - 1 and 0 <= destination_column <= size - 1)):",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(\"Invalid source or destination coordinates\")",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "solutions = [[1 for _ in range(size)] for _ in range(size)]",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "solved = run_maze(maze, source_row, source_column, destination_row, destination_column, solutions)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if solved:",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return solutions",
                                    "children": []
                                },
                                {
                                    "type": "else_clause",
                                    "code": "else:",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise ValueError(\"No solution exists!\")",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def run_maze(maze: list[list[int]], i: int, j: int, destination_row: int, destination_column: int, solutions: list[list[int]]) -> bool:",
            "children": [
                {
                    "type": "parameters",
                    "code": "maze: list[list[int]], i: int, j: int, destination_row: int, destination_column: int, solutions: list[list[int]]",
                    "children": [
                        {
                            "type": "parameter",
                            "code": "maze: list[list[int]]"
                        },
                        {
                            "type": "parameter",
                            "code": "i: int"
                        },
                        {
                            "type": "parameter",
                            "code": "j: int"
                        },
                        {
                            "type": "parameter",
                            "code": "destination_row: int"
                        },
                        {
                            "type": "parameter",
                            "code": "destination_column: int"
                        },
                        {
                            "type": "parameter",
                            "code": "solutions: list[list[int]]"
                        }
                    ]
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "size = len(maze)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if i == destination_row and j == destination_column and maze[i][j] == 0:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "solutions[i][j] = 0",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return True",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "lower_flag = (not i < 0) and (not j < 0)  # Check lower bounds",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "upper_flag = (i < size) and (j < size)  # Check upper bounds",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if lower_flag and upper_flag:",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "block_flag = (solutions[i][j]) and (not maze[i][j])",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if block_flag:",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "solutions[i][j] = 0",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if (run_maze(maze, i + 1, j, destination_row, destination_column, solutions) or run_maze(maze, i, j + 1, destination_row, destination_column, solutions) or run_maze(maze, i - 1, j, destination_row, destination_column, solutions) or run_maze(maze, i, j - 1, destination_row, destination_column, solutions)):",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "code": "return True",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "solutions[i][j] = 1",
                                            "children": []
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return False",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return False",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE)",
                    "children": []
                }
            ]
        }
    ]
}