{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "# Information on binary shifts:",
            "children": []
        },
        {
            "type": "comment",
            "code": "# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types",
            "children": []
        },
        {
            "type": "comment",
            "code": "# https://www.interviewcake.com/concept/java/bit-shift",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def logical_left_shift(number: int, shift_amount: int) -> str:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"",
                    "children": [
                        {
                            "type": "string_content",
                            "code": "Take in 2 positive integers.\n'number' is the integer to be logically left shifted 'shift_amount' times.\ni.e. (number << shift_amount)\nReturn the shifted binary representation.\n\n>>> logical_left_shift(0, 1)\n'0b00'\n>>> logical_left_shift(1, 1)\n'0b10'\n>>> logical_left_shift(1, 5)\n'0b100000'\n>>> logical_left_shift(17, 2)\n'0b1000100'\n>>> logical_left_shift(1983, 4)\n'0b111101111110000'\n>>> logical_left_shift(1, -1)\nTraceback (most recent call last):\n    ...\nValueError: both inputs must be positive integers",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if number < 0 or shift_amount < 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(\"both inputs must be positive integers\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "binary_number = str(bin(number))",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "binary_number += \"0\" * shift_amount",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "code": "return binary_number",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def logical_right_shift(number: int, shift_amount: int) -> str:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"",
                    "children": [
                        {
                            "type": "string_content",
                            "code": "Take in positive 2 integers.\n'number' is the integer to be logically right shifted 'shift_amount' times.\ni.e. (number >>> shift_amount)\nReturn the shifted binary representation.\n\n>>> logical_right_shift(0, 1)\n'0b0'\n>>> logical_right_shift(1, 1)\n'0b0'\n>>> logical_right_shift(1, 5)\n'0b0'\n>>> logical_right_shift(17, 2)\n'0b100'\n>>> logical_right_shift(1983, 4)\n'0b1111011'\n>>> logical_right_shift(1, -1)\nTraceback (most recent call last):\n    ...\nValueError: both inputs must be positive integers",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if number < 0 or shift_amount < 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(\"both inputs must be positive integers\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "binary_number = str(bin(number))[2:]",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if shift_amount >= len(binary_number):",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return \"0b0\"",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "shifted_binary_number = binary_number[: len(binary_number) - shift_amount]",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "code": "return \"0b\" + shifted_binary_number",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"",
                    "children": [
                        {
                            "type": "string_content",
                            "code": "Take in 2 integers.\n'number' is the integer to be arithmetically right shifted 'shift_amount' times.\ni.e. (number >> shift_amount)\nReturn the shifted binary representation.\n\n>>> arithmetic_right_shift(0, 1)\n'0b00'\n>>> arithmetic_right_shift(1, 1)\n'0b00'\n>>> arithmetic_right_shift(-1, 1)\n'0b11'\n>>> arithmetic_right_shift(17, 2)\n'0b000100'\n>>> arithmetic_right_shift(-17, 2)\n'0b111011'\n>>> arithmetic_right_shift(-1983, 4)\n'0b111110000100'",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if number >= 0:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "else_clause",
                    "code": "else:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "binary_number_length = len(bin(number)[3:])",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "binary_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "binary_number = \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if shift_amount >= len(binary_number):",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return \"0b\" + binary_number[0] * len(binary_number)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return \"0b\" + binary_number[0] * shift_amount + binary_number[: len(binary_number) - shift_amount]",
                    "children": []
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "doctest.testmod()",
                    "children": []
                }
            ]
        }
    ]
}