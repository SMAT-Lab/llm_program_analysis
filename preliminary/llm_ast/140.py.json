{
    "type": "ErrorNode",
    "code": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\n\n\nclass ConversionError(ValueError):\n    pass\n\n\ndef __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]\n\n\ndef __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}\n\n\ndef __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)\n\n\ndef __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}\n\n\ndef __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)\n\n\nNUM = TypeVar(\"NUM\", int, float)\n\n\ndef __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion\n\n\ndef __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)\n\n\ndef _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value\n\n\nT = TypeVar(\"T\")\n\n\ndef type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\n\n\ndef convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e\n",
    "children": []
}