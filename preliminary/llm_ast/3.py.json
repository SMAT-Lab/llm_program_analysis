{
    "type": "module",
    "children": [
        {
            "type": "import_statement",
            "code": "from typing import Type"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.ai_music_generator import AIMusicGeneratorBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.ai_shortform_video_block import AIShortformVideoCreatorBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.ideogram import IdeogramModelBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.jina.embeddings import JinaEmbeddingBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.jina.search import ExtractWebsiteContentBlock, SearchTheWebBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.llm import (MODEL_METADATA, AIConversationBlock, AIListGeneratorBlock, AIStructuredResponseGeneratorBlock, AITextGeneratorBlock, AITextSummarizerBlock, LlmModel)"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.replicate_flux_advanced import ReplicateFluxAdvancedModelBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.talking_head import CreateTalkingAvatarVideoBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.text_to_speech_block import UnrealTextToSpeechBlock"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import Block"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.cost import BlockCost, BlockCostType"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.integrations.credentials_store import (anthropic_credentials, did_credentials, groq_credentials, ideogram_credentials, jina_credentials, open_router_credentials, openai_credentials, replicate_credentials, revid_credentials, unreal_credentials)"
        },
        {
            "type": "assignment",
            "code": "MODEL_COST =",
            "children": [
                {
                    "type": "dictionary",
                    "children": [
                        {
                            "type": "pair",
                            "code": "LlmModel.O1_PREVIEW: 16"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.O1_MINI: 4"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GPT4O_MINI: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GPT4O: 3"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GPT4_TURBO: 10"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GPT3_5_TURBO: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.CLAUDE_3_5_SONNET: 4"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.CLAUDE_3_HAIKU: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.LLAMA3_8B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.LLAMA3_70B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.MIXTRAL_8X7B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GEMMA_7B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GEMMA2_9B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.LLAMA3_1_405B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.LLAMA3_1_70B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.LLAMA3_1_8B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.OLLAMA_LLAMA3_8B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.OLLAMA_LLAMA3_405B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.OLLAMA_DOLPHIN: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GEMINI_FLASH_1_5_8B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GROK_BETA: 5"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.MISTRAL_NEMO: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.COHERE_COMMAND_R_08_2024: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.COHERE_COMMAND_R_PLUS_08_2024: 3"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.EVA_QWEN_2_5_32B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.DEEPSEEK_CHAT: 2"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.QWEN_QWQ_32B_PREVIEW: 2"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.AMAZON_NOVA_LITE_V1: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.AMAZON_NOVA_MICRO_V1: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.AMAZON_NOVA_PRO_V1: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.MICROSOFT_WIZARDLM_2_8X22B: 1"
                        },
                        {
                            "type": "pair",
                            "code": "LlmModel.GRYPHE_MYTHOMAX_L2_13B: 1"
                        }
                    ]
                }
            ]
        },
        {
            "type": "for_statement",
            "code": "for model in LlmModel:",
            "children": [
                {
                    "type": "if_statement",
                    "code": "if model not in MODEL_COST:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(f\"Missing MODEL_COST for model: {model}\")"
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "code": "LLM_COST =",
            "children": [
                {
                    "type": "block",
                    "children": [
                        {
                            "type": "list",
                            "code": "Anthropic Models",
                            "children": [
                                {
                                    "type": "dictionary_comprehension",
                                    "code": "BlockCost(cost_type=BlockCostType.RUN, cost_filter={\"model\": model, \"credentials\": {\"id\": anthropic_credentials.id, \"provider\": anthropic_credentials.provider, \"type\": anthropic_credentials.type}}, cost_amount=cost)",
                                    "children": [
                                        {
                                            "type": "for_in_clause",
                                            "code": "for model, cost in MODEL_COST.items()",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "code": "if MODEL_METADATA[model].provider == \"anthropic\""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "list",
                            "code": "OpenAI Models",
                            "children": [
                                {
                                    "type": "dictionary_comprehension",
                                    "code": "BlockCost(cost_type=BlockCostType.RUN, cost_filter={\"model\": model, \"credentials\": {\"id\": openai_credentials.id, \"provider\": openai_credentials.provider, \"type\": openai_credentials.type}}, cost_amount=cost)",
                                    "children": [
                                        {
                                            "type": "for_in_clause",
                                            "code": "for model, cost in MODEL_COST.items()",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "code": "if MODEL_METADATA[model].provider == \"openai\""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "list",
                            "code": "Groq Models",
                            "children": [
                                {
                                    "type": "dictionary_comprehension",
                                    "code": "BlockCost(cost_type=BlockCostType.RUN, cost_filter={\"model\": model, \"credentials\": {\"id\": groq_credentials.id}}, cost_amount=cost)",
                                    "children": [
                                        {
                                            "type": "for_in_clause",
                                            "code": "for model, cost in MODEL_COST.items()",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "code": "if MODEL_METADATA[model].provider == \"groq\""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "list",
                            "code": "Open Router Models",
                            "children": [
                                {
                                    "type": "dictionary_comprehension",
                                    "code": "BlockCost(cost_type=BlockCostType.RUN, cost_filter={\"model\": model, \"credentials\": {\"id\": open_router_credentials.id, \"provider\": open_router_credentials.provider, \"type\": open_router_credentials.type}}, cost_amount=cost)",
                                    "children": [
                                        {
                                            "type": "for_in_clause",
                                            "code": "for model, cost in MODEL_COST.items()",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "code": "if MODEL_METADATA[model].provider == \"open_router\""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "code": "BLOCK_COSTS =",
            "children": [
                {
                    "type": "dictionary",
                    "children": [
                        {
                            "type": "pair",
                            "code": "AIConversationBlock: LLM_COST"
                        },
                        {
                            "type": "pair",
                            "code": "AITextGeneratorBlock: LLM_COST"
                        },
                        {
                            "type": "pair",
                            "code": "AIStructuredResponseGeneratorBlock: LLM_COST"
                        },
                        {
                            "type": "pair",
                            "code": "AITextSummarizerBlock: LLM_COST"
                        },
                        {
                            "type": "pair",
                            "code": "AIListGeneratorBlock: LLM_COST"
                        },
                        {
                            "type": "pair",
                            "code": "CreateTalkingAvatarVideoBlock: [BlockCost(cost_amount=15, cost_filter={\"credentials\": {\"id\": did_credentials.id, \"provider\": did_credentials.provider, \"type\": did_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "SearchTheWebBlock: [BlockCost(cost_amount=1, cost_filter={\"credentials\": {\"id\": jina_credentials.id, \"provider\": jina_credentials.provider, \"type\": jina_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "ExtractWebsiteContentBlock: [BlockCost(cost_amount=1, cost_filter={\"raw_content\": False, \"credentials\": {\"id\": jina_credentials.id, \"provider\": jina_credentials.provider, \"type\": jina_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "IdeogramModelBlock: [BlockCost(cost_amount=16, cost_filter={\"credentials\": {\"id\": ideogram_credentials.id, \"provider\": ideogram_credentials.provider, \"type\": ideogram_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "AIShortformVideoCreatorBlock: [BlockCost(cost_amount=50, cost_filter={\"credentials\": {\"id\": revid_credentials.id, \"provider\": revid_credentials.provider, \"type\": revid_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "ReplicateFluxAdvancedModelBlock: [BlockCost(cost_amount=10, cost_filter={\"credentials\": {\"id\": replicate_credentials.id, \"provider\": replicate_credentials.provider, \"type\": replicate_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "AIMusicGeneratorBlock: [BlockCost(cost_amount=11, cost_filter={\"credentials\": {\"id\": replicate_credentials.id, \"provider\": replicate_credentials.provider, \"type\": replicate_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "JinaEmbeddingBlock: [BlockCost(cost_amount=12, cost_filter={\"credentials\": {\"id\": jina_credentials.id, \"provider\": jina_credentials.provider, \"type\": jina_credentials.type}})]"
                        },
                        {
                            "type": "pair",
                            "code": "UnrealTextToSpeechBlock: [BlockCost(cost_amount=5, cost_filter={\"credentials\": {\"id\": unreal_credentials.id, \"provider\": unreal_credentials.provider, \"type\": unreal_credentials.type}})]"
                        }
                    ]
                }
            ]
        }
    ]
}