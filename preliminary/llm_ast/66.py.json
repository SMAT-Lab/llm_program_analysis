{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "aliased_import",
            "code": "import logging",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import os",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import signal",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import sys",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from abc import ABC, abstractmethod",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from multiprocessing import Process, set_start_method",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from typing import Optional",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from backend.util.logging import configure_logging",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from backend.util.metrics import sentry_init",
            "children": []
        },
        {
            "type": "block",
            "code": "",
            "children": [
                {
                    "type": "assignment",
                    "code": "logger = logging.getLogger(__name__)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "_SERVICE_NAME = \"MainProcess\"",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "code": "def get_service_name()",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return _SERVICE_NAME",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def set_service_name(name: str)",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "global _SERVICE_NAME",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "_SERVICE_NAME = name",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class AppProcess(ABC)",
                    "children": [
                        {
                            "type": "docstring",
                            "code": "\"\"\"\nA class to represent an object that can be executed in a background process.\n\"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "process: Optional[Process] = None",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "set_start_method(\"spawn\", force=True)",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "configure_logging()",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "sentry_init()",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "code": "def run(self)",
                            "children": [
                                {
                                    "type": "docstring",
                                    "code": "\"\"\"\nThe method that will be executed in the process.\n\"\"\"",
                                    "children": []
                                },
                                {
                                    "type": "pass_statement",
                                    "code": "pass",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "class_definition",
                            "code": "@classmethod\n@property\ndef service_name(cls) -> str",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return cls.__name__",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def cleanup(self)",
                            "children": [
                                {
                                    "type": "docstring",
                                    "code": "\"\"\"\nImplement this method on a subclass to do post-execution cleanup,\ne.g. disconnecting from a database or terminating child processes.\n\"\"\"",
                                    "children": []
                                },
                                {
                                    "type": "pass_statement",
                                    "code": "pass",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def health_check(self)",
                            "children": [
                                {
                                    "type": "docstring",
                                    "code": "\"\"\"\nA method to check the health of the process.\n\"\"\"",
                                    "children": []
                                },
                                {
                                    "type": "pass_statement",
                                    "code": "pass",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def execute_run_command(self, silent)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "signal.signal(signal.SIGTERM, self._self_terminate)",
                                    "children": []
                                },
                                {
                                    "type": "try_statement",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "code": "if silent",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "code": "",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "code": "sys.stdout = open(os.devnull, \"w\")",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "code": "sys.stderr = open(os.devnull, \"w\")",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "call",
                                                    "code": "set_service_name(self.service_name)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "code": "logger.info(f\"[{self.service_name}] Starting...\")",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "code": "self.run()",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "except_clause",
                                            "code": "except (KeyboardInterrupt, SystemExit) as e",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def _self_terminate(self, signum: int, frame)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "self.cleanup()",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "sys.exit(0)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def __enter__(self)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "self.start(background=True)",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return self",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def __exit__(self, *args, **kwargs)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "self.stop()",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def start(self, background: bool = False, silent: bool = False, **proc_args) -> int",
                            "children": [
                                {
                                    "type": "docstring",
                                    "code": "\"\"\"\nStart the background process.\nArgs:\nbackground: Whether to run the process in the background.\nsilent: Whether to disable stdout and stderr.\nproc_args: Additional arguments to pass to the process.\nReturns:\nthe process id or 0 if the process is not running in the background.\n\"\"\"",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if not background",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "self.execute_run_command(silent)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "code": "return 0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "self.process = Process(name=self.__class__.__name__, target=self.execute_run_command, args=(silent,), **proc_args)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "self.process.start()",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "self.health_check()",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return self.process.pid or 0",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def stop(self)",
                            "children": [
                                {
                                    "type": "docstring",
                                    "code": "\"\"\"\nStop the background process.\n\"\"\"",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if not self.process",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "call",
                                    "code": "self.process.terminate()",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "self.process.join()",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "self.process = None",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}