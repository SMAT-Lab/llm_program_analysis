{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def binary_or(a: int, b: int) -> str:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\nTake in 2 integers, convert them to binary, and return a binary number that is the\nresult of a binary or operation on the integers provided.\n\n>>> binary_or(25, 32)\n'0b111001'\n>>> binary_or(37, 50)\n'0b110111'\n>>> binary_or(21, 30)\n'0b11111'\n>>> binary_or(58, 73)\n'0b1111011'\n>>> binary_or(0, 255)\n'0b11111111'\n>>> binary_or(0, 256)\n'0b100000000'\n>>> binary_or(0, -1)\nTraceback (most recent call last):\n    ...\nValueError: the value of both inputs must be positive\n>>> binary_or(0, 1.1)\nTraceback (most recent call last):\n    ...\nTypeError: 'float' object cannot be interpreted as an integer\n>>> binary_or(\"0\", \"1\")\nTraceback (most recent call last):\n    ...\nTypeError: '<' not supported between instances of 'str' and 'int'\n\"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if a < 0 or b < 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(\"the value of both inputs must be positive\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "a_binary = str(bin(a))[2:]",
                    "children": [
                        {
                            "type": "call",
                            "code": "str(bin(a))",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "bin(a)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "a",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "b_binary = str(bin(b))[2:]",
                    "children": [
                        {
                            "type": "call",
                            "code": "str(bin(b))",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "bin(b)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "b",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "max_len = max(len(a_binary), len(b_binary))",
                    "children": [
                        {
                            "type": "call",
                            "code": "max(len(a_binary), len(b_binary))",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "len(a_binary)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "a_binary",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "call",
                                    "code": "len(b_binary)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "b_binary",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return \"0b\" + \"\".join(str(int(\"1\" in (char_a, char_b))) for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len)))",
                    "children": [
                        {
                            "type": "concatenated_string",
                            "code": "\"0b\" + \"\".join(str(int(\"1\" in (char_a, char_b))) for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len)))",
                            "children": [
                                {
                                    "type": "string",
                                    "code": "\"0b\"",
                                    "children": []
                                },
                                {
                                    "type": "generator_expression",
                                    "code": "\"\".join(str(int(\"1\" in (char_a, char_b))) for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len)))",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "\"\".join()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "str(int(\"1\" in (char_a, char_b)))",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "str(int())",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "code": "int(\"1\" in (char_a, char_b))",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "code": "\"1\" in (char_a, char_b)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "code": "\"1\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "tuple",
                                                                                    "code": "(char_a, char_b)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "code": "char_a",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "code": "char_b",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_in_clause",
                                            "code": "for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "char_a",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "code": "char_b",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "code": "zip(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "a_binary.zfill(max_len)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "a_binary",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "code": "zfill(max_len)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "max_len",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "code": "b_binary.zfill(max_len)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "code": "b_binary",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "code": "zfill(max_len)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "max_len",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "call",
                    "code": "doctest.testmod()",
                    "children": [
                        {
                            "type": "dotted_name",
                            "code": "doctest.testmod",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "doctest",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "code": "testmod",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}