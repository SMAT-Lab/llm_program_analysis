{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "function_definition",
            "code": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:",
            "children": [
                {
                    "type": "comment",
                    "code": "\"\"\"\nA recursive function that searches for possible combinations. Backtracks in case\nof a bigger current combination value than the target value.\n\nParameters\n----------\nprevious_index: Last index from the previous search\ntarget: The value we need to obtain by summing our integers in the path list.\nanswer: A list of possible combinations\npath: Current combination\ncandidates: A list of integers we can use.\n\"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "if target == 0:",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "answer.append(path.copy())",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "code": "else:",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "for_statement",
                                                    "code": "for index in range(previous_index, len(candidates)):",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "code": "",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "code": "if target >= candidates[index]:",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "code": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "code": "path.append(candidates[index])",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "code": "backtrack(candidates, path, answer, target - candidates[index], index)",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "code": "path.pop(len(path) - 1)",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def combination_sum(candidates: list, target: int) -> list:",
            "children": [
                {
                    "type": "comment",
                    "code": "\"\"\"\n>>> combination_sum([2, 3, 5], 8)\n[[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n>>> combination_sum([2, 3, 6, 7], 7)\n[[2, 2, 3], [7]]\n>>> combination_sum([-8, 2.3, 0], 1)\nTraceback (most recent call last):\n    ...\nRecursionError: maximum recursion depth exceeded\n\"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "path = []",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "answer = []",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "backtrack(candidates, path, answer, target, 0)",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "code": "return answer",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def main() -> None:",
            "children": [
                {
                    "type": "call",
                    "code": "print(combination_sum([-8, 2.3, 0], 1))",
                    "children": []
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "call",
                    "code": "doctest.testmod()",
                    "children": []
                },
                {
                    "type": "call",
                    "code": "main()",
                    "children": []
                }
            ]
        }
    ]
}