{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "future_import_statement",
            "code": "from __future__ import annotations"
        },
        {
            "type": "import_from_statement",
            "code": "from abc import abstractmethod"
        },
        {
            "type": "import_from_statement",
            "code": "from math import pi"
        },
        {
            "type": "import_from_statement",
            "code": "from typing import Protocol"
        },
        {
            "type": "import_statement",
            "code": "import matplotlib.pyplot as plt"
        },
        {
            "type": "import_statement",
            "code": "import numpy as np"
        },
        {
            "type": "class_definition",
            "code": "class FilterType(Protocol):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def process(self, sample: float) -> float",
                    "children": [
                        {
                            "type": "decorator",
                            "code": "@abstractmethod"
                        },
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "\"\"\"\nCalculate y[n]\n\n>>> issubclass(FilterType, Protocol)\nTrue\n\"\"\""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def get_bounds(fft_results: np.ndarray, samplerate: int) -> tuple[int | float, int | float]:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "\"\"\"\nGet bounds for printing fft results\n\n>>> import numpy\n>>> array = numpy.linspace(-20.0, 20.0, 1000)\n>>> get_bounds(array, 1000)\n(-20, 20)\n\"\"\""
                        },
                        {
                            "type": "assignment",
                            "code": "lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])"
                        },
                        {
                            "type": "assignment",
                            "code": "highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])"
                        },
                        {
                            "type": "return_statement",
                            "code": "return lowest, highest"
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def show_frequency_response(filter_type: FilterType, samplerate: int) -> None:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "\"\"\"\nShow frequency response of a filter\n\n>>> from audio_filters.iir_filter import IIRFilter\n>>> filt = IIRFilter(4)\n>>> show_frequency_response(filt, 48000)\n\"\"\""
                        },
                        {
                            "type": "assignment",
                            "code": "size = 512"
                        },
                        {
                            "type": "assignment",
                            "code": "inputs = [1] + [0] * (size - 1)"
                        },
                        {
                            "type": "assignment",
                            "code": "outputs = [filter_type.process(item) for item in inputs]"
                        },
                        {
                            "type": "assignment",
                            "code": "filler = [0] * (samplerate - size)  # zero-padding"
                        },
                        {
                            "type": "augmented_assignment",
                            "code": "outputs += filler"
                        },
                        {
                            "type": "assignment",
                            "code": "fft_out = np.abs(np.fft.fft(outputs))"
                        },
                        {
                            "type": "assignment",
                            "code": "fft_db = 20 * np.log10(fft_out)"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.xlim(24, samplerate / 2 - 1)"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.xlabel(\"Frequency (Hz)\")"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.xscale(\"log\")"
                        },
                        {
                            "type": "assignment",
                            "code": "bounds = get_bounds(fft_db, samplerate)"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.ylabel(\"Gain (dB)\")"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.plot(fft_db)"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.show()"
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def show_phase_response(filter_type: FilterType, samplerate: int) -> None:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "\"\"\"\nShow phase response of a filter\n\n>>> from audio_filters.iir_filter import IIRFilter\n>>> filt = IIRFilter(4)\n>>> show_phase_response(filt, 48000)\n\"\"\""
                        },
                        {
                            "type": "assignment",
                            "code": "size = 512"
                        },
                        {
                            "type": "assignment",
                            "code": "inputs = [1] + [0] * (size - 1)"
                        },
                        {
                            "type": "assignment",
                            "code": "outputs = [filter_type.process(item) for item in inputs]"
                        },
                        {
                            "type": "assignment",
                            "code": "filler = [0] * (samplerate - size)  # zero-padding"
                        },
                        {
                            "type": "augmented_assignment",
                            "code": "outputs += filler"
                        },
                        {
                            "type": "assignment",
                            "code": "fft_out = np.angle(np.fft.fft(outputs))"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.xlim(24, samplerate / 2 - 1)"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.xlabel(\"Frequency (Hz)\")"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.xscale(\"log\")"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.ylim(-2 * pi, 2 * pi)"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.ylabel(\"Phase shift (Radians)\")"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.plot(np.unwrap(fft_out, -2 * pi))"
                        },
                        {
                            "type": "expression_statement",
                            "code": "plt.show()"
                        }
                    ]
                }
            ]
        }
    ]
}