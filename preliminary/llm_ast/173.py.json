{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "# -*- coding: utf-8 -*-",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "from mrjob.job import MRJob",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class SalesRanker(MRJob):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def within_past_week(self, timestamp):",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"",
                            "children": []
                        },
                        {
                            "type": "block",
                            "code": "...",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def mapper(self, _, line):",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"Parse each log line, extract and transform relevant lines.\n\nEmit key value pairs of the form:\n\n(foo, p1), 2\n(bar, p1), 2\n(bar, p1), 1\n(foo, p2), 3\n(bar, p3), 10\n(foo, p4), 1\n\"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "timestamp, product_id, category, quantity = line.split('\\t')",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if self.within_past_week(timestamp):",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "yield (category, product_id), quantity",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def reducer(self, key, values):",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"Sum values for each key.\n\n(foo, p1), 2\n(bar, p1), 3\n(foo, p2), 3\n(bar, p3), 10\n(foo, p4), 1\n\"\"\"",
                            "children": []
                        },
                        {
                            "type": "block",
                            "code": "yield key, sum(values)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def mapper_sort(self, key, value):",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"Construct key to ensure proper sorting.\n\nTransform key and value to the form:\n\n(foo, 2), p1\n(bar, 3), p1\n(foo, 3), p2\n(bar, 10), p3\n(foo, 1), p4\n\nThe shuffle/sort step of MapReduce will then do a\ndistributed sort on the keys, resulting in:\n\n(category1, 1), product4\n(category1, 2), product1\n(category1, 3), product2\n(category2, 3), product1\n(category2, 7), product3\n\"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "category, product_id = key",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "quantity = value",
                            "children": []
                        },
                        {
                            "type": "block",
                            "code": "yield (category, quantity), product_id",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def reducer_identity(self, key, value):",
                    "children": [
                        {
                            "type": "block",
                            "code": "yield key, value",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def steps(self):",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"Run the map and reduce steps.\"\"\"",
                            "children": []
                        },
                        {
                            "type": "block",
                            "code": "return [\nself.mr(mapper=self.mapper,\nreducer=self.reducer),\nself.mr(mapper=self.mapper_sort,\nreducer=self.reducer_identity),\n]",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == '__main__':",
            "children": [
                {
                    "type": "block",
                    "code": "SalesRanker.run()",
                    "children": []
                }
            ]
        }
    ]
}