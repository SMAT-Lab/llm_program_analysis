{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_statement",
            "code": "from typing import Literal",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "from urllib.parse import quote",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "from pydantic import SecretStr",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.blocks.helpers.http import GetRequest",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.model import (APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField)",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.integrations.providers import ProviderName",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class GetWikipediaSummaryBlock(Block, GetRequest):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "topic: str = SchemaField(description=\"The topic to fetch the summary for\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "summary: str = SchemaField(description=\"The summary of the given topic\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "error: str = SchemaField(description=\"Error message if the summary cannot be retrieved\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\", description=\"This block fetches the summary of a given topic from Wikipedia.\", categories={BlockCategory.SEARCH}, input_schema=GetWikipediaSummaryBlock.Input, output_schema=GetWikipediaSummaryBlock.Output, test_input={\"topic\": \"Artificial Intelligence\"}, test_output=(\"summary\", \"summary content\"), test_mock={\"get_request\": lambda url, json: {\"extract\": \"summary content\"}})",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "topic = input_data.topic",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "url = f\"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "response = self.get_request(url, json=True)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if \"extract\" not in response:",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise RuntimeError(f\"Unable to parse Wikipedia response: {response}\")",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "yield",
                            "code": "yield \"summary\", response[\"extract\"]",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(id=\"01234567-89ab-cdef-0123-456789abcdef\", provider=\"openweathermap\", api_key=SecretStr(\"mock-openweathermap-api-key\"), title=\"Mock OpenWeatherMap API key\", expires_at=None)",
            "children": []
        },
        {
            "type": "assignment",
            "code": "TEST_CREDENTIALS_INPUT = {\"provider\": TEST_CREDENTIALS.provider, \"id\": TEST_CREDENTIALS.id, \"type\": TEST_CREDENTIALS.type, \"title\": TEST_CREDENTIALS.type}",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class GetWeatherInformationBlock(Block, GetRequest):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "location: str = SchemaField(description=\"Location to get weather information for\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "credentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal[\"api_key\"]] = CredentialsField(description=\"The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "use_celsius: bool = SchemaField(default=True, description=\"Whether to use Celsius or Fahrenheit for temperature\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "temperature: str = SchemaField(description=\"Temperature in the specified location\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "humidity: str = SchemaField(description=\"Humidity in the specified location\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "condition: str = SchemaField(description=\"Weather condition in the specified location\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "error: str = SchemaField(description=\"Error message if the weather information cannot be retrieved\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\", input_schema=GetWeatherInformationBlock.Input, output_schema=GetWeatherInformationBlock.Output, description=\"Retrieves weather information for a specified location using OpenWeatherMap API.\", test_input={\"location\": \"New York\", \"use_celsius\": True, \"credentials\": TEST_CREDENTIALS_INPUT}, test_output=[(\"temperature\", \"21.66\"), (\"humidity\", \"32\"), (\"condition\", \"overcast clouds\")], test_mock={\"get_request\": lambda url, json: {\"main\": {\"temp\": 21.66, \"humidity\": 32}, \"weather\": [{\"description\": \"overcast clouds\"}]}}, test_credentials=TEST_CREDENTIALS)",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "units = \"metric\" if input_data.use_celsius else \"imperial\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "api_key = credentials.api_key",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "location = input_data.location",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "url = f\"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "weather_data = self.get_request(url, json=True)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if \"main\" in weather_data and \"weather\" in weather_data:",
                            "children": [
                                {
                                    "type": "yield",
                                    "code": "yield \"temperature\", str(weather_data[\"main\"][\"temp\"])",
                                    "children": []
                                },
                                {
                                    "type": "yield",
                                    "code": "yield \"humidity\", str(weather_data[\"main\"][\"humidity\"])",
                                    "children": []
                                },
                                {
                                    "type": "yield",
                                    "code": "yield \"condition\", weather_data[\"weather\"][0][\"description\"]",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "else_clause",
                            "code": "else:",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}