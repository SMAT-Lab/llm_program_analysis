{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_from_statement",
            "code": "from typing import List"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import BlockOutput, BlockSchema"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.model import APIKeyCredentials, SchemaField"
        },
        {
            "type": "import_from_statement",
            "code": "from ._api import (TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, Filament, Slant3DCredentialsField, Slant3DCredentialsInput)"
        },
        {
            "type": "import_from_statement",
            "code": "from .base import Slant3DBlockBase"
        },
        {
            "type": "class_definition",
            "code": "class Slant3DFilamentBlock(Slant3DBlockBase):",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"Block for retrieving available filaments\"\"\""
                },
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()"
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "filaments: List[Filament] = SchemaField(description=\"List of available filaments\")"
                        },
                        {
                            "type": "assignment",
                            "code": "error: str = SchemaField(description=\"Error message if request failed\")"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "\"id=7cc416f4-f305-4606-9b3b-452b8a81031c\", description=\"Get list of available filaments\", input_schema=self.Input, output_schema=self.Output, test_input={\"credentials\": TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[(\"filaments\", [{\"filament\": \"PLA BLACK\", \"hexColor\": \"000000\", \"colorTag\": \"black\", \"profile\": \"PLA\"}, {\"filament\": \"PLA WHITE\", \"hexColor\": \"ffffff\", \"colorTag\": \"white\", \"profile\": \"PLA\"}])], test_mock={\"_make_request\": lambda *args, **kwargs: {\"filaments\": [{\"filament\": \"PLA BLACK\", \"hexColor\": \"000000\", \"colorTag\": \"black\", \"profile\": \"PLA\"}, {\"filament\": \"PLA WHITE\", \"hexColor\": \"ffffff\", \"colorTag\": \"white\", \"profile\": \"PLA\"}]}})"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "try_statement",
                            "code": "",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "result = self._make_request(\"GET\", \"filament\", credentials.api_key.get_secret_value())"
                                        },
                                        {
                                            "type": "yield",
                                            "code": "yield \"filaments\", result[\"filaments\"]"
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "code": "except Exception as e:",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "yield",
                                                    "code": "yield \"error\", str(e)"
                                                },
                                                {
                                                    "type": "raise_statement",
                                                    "code": "raise"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}