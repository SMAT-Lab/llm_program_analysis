{
    "type": "module",
    "code": "# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection\n\n\nclass FakeResponse():\n    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text\n\n\nclass TestValidateLinks(unittest.TestCase):\n\n    def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com'\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com'\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n    def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n\n    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n\n    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n\n    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n\n    def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n        with self.assertRaises(TypeError):\n            get_host_from_link()\n\n    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)\n\n    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
    "children": [
        {
            "type": "comment",
            "code": "# -*- coding: utf-8 -*-"
        },
        {
            "type": "import_statement",
            "code": "import unittest"
        },
        {
            "type": "import_from_statement",
            "code": "from validate.links import find_links_in_text"
        },
        {
            "type": "import_from_statement",
            "code": "from validate.links import check_duplicate_links"
        },
        {
            "type": "import_from_statement",
            "code": "from validate.links import fake_user_agent"
        },
        {
            "type": "import_from_statement",
            "code": "from validate.links import get_host_from_link"
        },
        {
            "type": "import_from_statement",
            "code": "from validate.links import has_cloudflare_protection"
        },
        {
            "type": "class_definition",
            "code": "class FakeResponse():",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, code: int, headers: dict, text: str) -> None:",
                    "children": [
                        {
                            "type": "block",
                            "code": "self.status_code = code\nself.headers = headers\nself.text = text"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class TestValidateLinks(unittest.TestCase):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def setUp(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "self.duplicate_links = [\n'https://www.example.com',\n'https://www.example.com',\n'https://www.example.com',\n'https://www.anotherexample.com'\n]\nself.no_duplicate_links = [\n'https://www.firstexample.com',\n'https://www.secondexample.com',\n'https://www.anotherexample.com'\n]\n\nself.code_200 = 200\nself.code_403 = 403\nself.code_503 = 503\n\nself.cloudflare_headers = {'Server': 'cloudflare'}\nself.no_cloudflare_headers = {'Server': 'google'}\n\nself.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\nself.text_without_cloudflare_flags = 'Lorem Ipsum'"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def test_find_link_in_text(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "text = \"\"\"\n# this is valid\n\nhttp://example.com?param1=1&param2=2#anchor\nhttps://www.example.com?param1=1&param2=2#anchor\nhttps://www.example.com.br\nhttps://www.example.com.gov.br\n[Example](https://www.example.com?param1=1&param2=2#anchor)\nlorem ipsum https://www.example.com?param1=1&param2=2#anchor\nhttps://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n# this not is valid\n\nexample.com\nhttps:example.com\nhttps:/example.com\nhttps//example.com\nhttps//.com\n\"\"\"\n\nlinks = find_links_in_text(text)\n\nself.assertIsInstance(links, list)\nself.assertEqual(len(links), 7)\n\nfor link in links:\nwith self.subTest():\nself.assertIsInstance(link, str)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def test_find_link_in_text_with_invalid_argument(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "with self.assertRaises(TypeError):\nfind_links_in_text()\nfind_links_in_text(1)\nfind_links_in_text(True)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def test_if_check_duplicate_links_has_the_correct_return(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "result_1 = check_duplicate_links(self.duplicate_links)\nresult_2 = check_duplicate_links(self.no_duplicate_links)\n\nself.assertIsInstance(result_1, tuple)\nself.assertIsInstance(result_2, tuple)\n\nhas_duplicate_links, links = result_1\nno_duplicate_links, no_links = result_2\n\nself.assertTrue(has_duplicate_links)\nself.assertFalse(no_duplicate_links)\n\nself.assertIsInstance(links, list)\nself.assertIsInstance(no_links, list)\n\nself.assertEqual(len(links), 2)\nself.assertEqual(len(no_links), 0)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def test_if_fake_user_agent_has_a_str_as_return(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "user_agent = fake_user_agent()\nself.assertIsInstance(user_agent, str)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def test_get_host_from_link(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "links = [\n'example.com',\n'https://example.com',\n'https://www.example.com',\n'https://www.example.com.br',\n'https://www.example.com/route',\n'https://www.example.com?p=1&q=2',\n'https://www.example.com#anchor'\n]\n\nfor link in links:\nhost = get_host_from_link(link)\n\nwith self.subTest():\nself.assertIsInstance(host, str)\n\nself.assertNotIn('://', host)\nself.assertNotIn('/', host)\nself.assertNotIn('?', host)\nself.assertNotIn('#', host)\n\nwith self.assertRaises(TypeError):\nget_host_from_link()"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "resp_with_cloudflare_protection_code_403 = FakeResponse(\ncode=self.code_403,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n)\n\nresp_with_cloudflare_protection_code_503 = FakeResponse(\ncode=self.code_503,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n)\n\nresult1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\nresult2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\nself.assertTrue(result1)\nself.assertTrue(result2)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def test_has_cloudflare_protection_when_there_is_no_protection(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "resp_without_cloudflare_protection1 = FakeResponse(\ncode=self.code_200,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresp_without_cloudflare_protection2 = FakeResponse(\ncode=self.code_403,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresp_without_cloudflare_protection3 = FakeResponse(\ncode=self.code_503,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresult1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\nresult2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\nresult3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\nself.assertFalse(result1)\nself.assertFalse(result2)\nself.assertFalse(result3)"
                        }
                    ]
                }
            ]
        }
    ]
}