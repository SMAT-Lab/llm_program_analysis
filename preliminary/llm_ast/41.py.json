{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "#!/usr/bin/env python\n# coding: utf-8\n",
            "children": []
        },
        {
            "type": "string",
            "code": "\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"\n",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def sort_blocks():\n",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "comment",
                            "code": "# First, we load the current README into memory\n",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "with open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.read()\n",
                            "children": [
                                {
                                    "type": "with_clause",
                                    "code": "with open('README.md', 'r') as read_me_file:\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "read_me = read_me_file.read()\n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "code": "# Separating the 'table of contents' from the contents (blocks)\n",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "table_of_contents = ''.join(read_me.split('- - -')[0])\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')\n",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "code": "for i in range(len(blocks)):\n",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "code": "if i == 0:\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "blocks[i] = blocks[i] + '\\n'\n",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "code": "else:\n",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "code": "",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "code": "blocks[i] = '# ' + blocks[i] + '\\n'\n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "code": "# Sorting the libraries\n",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "inner_blocks = sorted(blocks[0].split('##'))\n",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "code": "for i in range(1, len(inner_blocks)):\n",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "code": "if inner_blocks[i][0] != '#':\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "inner_blocks[i] = '##' + inner_blocks[i]\n",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "inner_blocks = ''.join(inner_blocks)\n",
                            "children": []
                        },
                        {
                            "type": "comment",
                            "code": "# Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\n",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "blocks[0] = inner_blocks\nfinal_README = table_of_contents + '- - -' + ''.join(blocks)\n",
                            "children": []
                        },
                        {
                            "type": "with_clause",
                            "code": "with open('README.md', 'w+') as sorted_file:\n",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "sorted_file.write(final_README)\n",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "code": "sorted_file.write",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "code": "(final_README)\n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def main():\n",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "comment",
                            "code": "# First, we load the current README into memory as an array of lines\n",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "with open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.readlines()\n",
                            "children": [
                                {
                                    "type": "with_clause",
                                    "code": "with open('README.md', 'r') as read_me_file:\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "read_me = read_me_file.readlines()\n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "code": "# Then we cluster the lines together as blocks\n# Each block represents a collection of lines that should be sorted\n# This was done by assuming only links ([...](...)) are meant to be sorted\n# Clustering is done by indentation\n",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "blocks = []\nlast_indent = None\n",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "code": "for line in read_me:\n",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "s_line = line.lstrip()\nindent = len(line) - len(s_line)\n",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if any([s_line.startswith(s) for s in ['* [', '- [']]):\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if indent == last_indent:\n",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "code": "blocks[-1].append(line)\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "code": "blocks[-1].append",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "code": "(line)\n",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "else_clause",
                                                                    "code": "else:\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "code": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "code": "blocks.append([line])\n",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "code": "blocks.append",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "code": "([line])\n",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "code": "last_indent = indent\n",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "code": "else:\n",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "code": "",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "code": "blocks.append([line])\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "code": "blocks.append",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "code": "([line])\n",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "code": "last_indent = None\n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "with_clause",
                            "code": "with open('README.md', 'w+') as sorted_file:\n",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\n",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "code": "sorted_file.write(''.join(blocks))\n",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "code": "sorted_file.write",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "code": "(''.join(blocks))\n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "code": "# Then we call the sorting method\n",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "sort_blocks()\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "sort_blocks",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "code": "()\n",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":\n",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "call",
                            "code": "main()\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "main",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "code": "()\n",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}