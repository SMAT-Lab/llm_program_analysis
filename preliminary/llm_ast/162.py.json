{
    "type": "module",
    "code": "<module>",
    "children": [
        {
            "type": "import_statement",
            "code": "from abc import ABCMeta, abstractmethod"
        },
        {
            "type": "import_statement",
            "code": "from collections import deque"
        },
        {
            "type": "import_statement",
            "code": "from enum import Enum"
        },
        {
            "type": "class_definition",
            "code": "class Rank(Enum):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "OPERATOR = 0"
                        },
                        {
                            "type": "assignment",
                            "code": "SUPERVISOR = 1"
                        },
                        {
                            "type": "assignment",
                            "code": "DIRECTOR = 2"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Employee(metaclass=ABCMeta):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "function_definition",
                            "code": "def __init__(self, employee_id, name, rank, call_center):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, employee_id, name, rank, call_center)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "self.employee_id = employee_id"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.name = name"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.rank = rank"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.call = None"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.call_center = call_center"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def take_call(self, call):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, call)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "comment",
                                            "code": "\"\"\"Assume the employee will always successfully take the call.\"\"\""
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.call = call"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.call.employee = self"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.call.state = CallState.IN_PROGRESS"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def complete_call(self):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "self.call.state = CallState.COMPLETE"
                                        },
                                        {
                                            "type": "call",
                                            "code": "self.call_center.notify_call_completed(self.call)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "@abstractmethod\ndef escalate_call(self):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "pass_statement",
                                            "code": "pass"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def _escalate_call(self):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "self.call.state = CallState.READY"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "call = self.call"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.call = None"
                                        },
                                        {
                                            "type": "call",
                                            "code": "self.call_center.notify_call_escalated(call)"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Operator(Employee):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "function_definition",
                            "code": "def __init__(self, employee_id, name):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, employee_id, name)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def escalate_call(self):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "self.call.level = Rank.SUPERVISOR"
                                        },
                                        {
                                            "type": "call",
                                            "code": "self._escalate_call()"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Supervisor(Employee):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "function_definition",
                            "code": "def __init__(self, employee_id, name):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, employee_id, name)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def escalate_call(self):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "self.call.level = Rank.DIRECTOR"
                                        },
                                        {
                                            "type": "call",
                                            "code": "self._escalate_call()"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Director(Employee):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "function_definition",
                            "code": "def __init__(self, employee_id, name):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, employee_id, name)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def escalate_call(self):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise NotImplementedError('Directors must be able to handle any call')"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class CallState(Enum):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "READY = 0"
                        },
                        {
                            "type": "assignment",
                            "code": "IN_PROGRESS = 1"
                        },
                        {
                            "type": "assignment",
                            "code": "COMPLETE = 2"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Call(object):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "function_definition",
                            "code": "def __init__(self, rank):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, rank)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "self.state = CallState.READY"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.rank = rank"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.employee = None"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class CallCenter(object):",
            "children": [
                {
                    "type": "block",
                    "code": "<block>",
                    "children": [
                        {
                            "type": "function_definition",
                            "code": "def __init__(self, operators, supervisors, directors):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, operators, supervisors, directors)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "self.operators = operators"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.supervisors = supervisors"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.directors = directors"
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "self.queued_calls = deque()"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def dispatch_call(self, call):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, call)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "code": "if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "<block>",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "code": "raise ValueError('Invalid call rank: {}'.format(call.rank))"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "employee = None"
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if call.rank == Rank.OPERATOR:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "<block>",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "employee = self._dispatch_call(call, self.operators)"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if call.rank == Rank.SUPERVISOR or employee is None:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "<block>",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "employee = self._dispatch_call(call, self.supervisors)"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if call.rank == Rank.DIRECTOR or employee is None:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "<block>",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "employee = self._dispatch_call(call, self.directors)"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if employee is None:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "<block>",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "self.queued_calls.append(call)"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def _dispatch_call(self, call, employees):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, call, employees)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "code": "for employee in employees:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "<block>",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if employee.call is None:",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "<block>",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "code": "employee.take_call(call)"
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "code": "return employee"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return None"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def notify_call_escalated(self, call):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, call)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def notify_call_completed(self, call):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, call)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def dispatch_queued_call_to_newly_freed_employee(self, call, employee):",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "(self, call, employee)"
                                },
                                {
                                    "type": "block",
                                    "code": "<block>",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}