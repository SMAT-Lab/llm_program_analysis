{
    "type": "module",
    "code": "def find_previous_power_of_two(number: int) -> int:...",
    "children": [
        {
            "type": "function_definition",
            "code": "def find_previous_power_of_two(number: int) -> int",
            "children": [
                {
                    "type": "parameters",
                    "code": "number: int",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "code": "number: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "number",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "code": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "-> int",
                    "children": [
                        {
                            "type": "type",
                            "code": "int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "code": "\"\"\"\n    Find the largest power of two that is less than...\n    doctest.testmod()\n    \"\"\"\n    if not isinstance...",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if not isinstance(number, int) or number < 0:",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "code": "not isinstance(number, int)",
                                    "children": [
                                        {
                                            "type": "unary_operator",
                                            "code": "not",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "code": "isinstance(number, int)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "code": "number, int",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "code": "number",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "code": "int",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "boolean_operator",
                                    "code": "or",
                                    "children": []
                                },
                                {
                                    "type": "comparison_operator",
                                    "code": "number < 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "number",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "code": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(\"Input must be a non-negative integer\")",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "ValueError(\"Input must be a non-negative integer\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "ValueError",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "code": "\"Input must be a non-negative integer\"",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "code": "\"Input must be a non-negative integer\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "code": "if number == 0:",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "code": "number == 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "number",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "code": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return 0",
                                    "children": [
                                        {
                                            "type": "integer",
                                            "code": "0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "power = 1",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "power",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "1",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "while_statement",
                            "code": "while power <= number:",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "code": "power <= number",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "code": "power",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "code": "number",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "code": "power <<= 1",
                                    "children": [
                                        {
                                            "type": "augmented_assignment",
                                            "code": "power <<= 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "power",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "code": "1",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return power >> 1 if number > 1 else 1",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "code": "power >> 1 if number > 1 else 1",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "code": "number > 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "code": "1",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "binary_operator",
                                            "code": "power >> 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "power",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "code": "1",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "integer",
                                            "code": "1",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "comparison_operator",
                    "code": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "code": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "code": "\"__main__\"",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "code": "import doctest\ndoctest.testmod()",
                    "children": [
                        {
                            "type": "import_statement",
                            "code": "import doctest",
                            "children": [
                                {
                                    "type": "identifier",
                                    "code": "doctest",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "code": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "code": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "code": "doctest",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "code": "testmod",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}