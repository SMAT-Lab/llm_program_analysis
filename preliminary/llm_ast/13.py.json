{
    "type": "module",
    "code": "from typing import Any, Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(id=\"01234567-89ab-cdef-0123-456789abcdef\", provider=\"unreal_speech\", api_key=SecretStr(\"mock-unreal-speech-api-key\"), title=\"Mock Unreal Speech API key\", expires_at=None)\nTEST_CREDENTIALS_INPUT = {\"provider\": TEST_CREDENTIALS.provider, \"id\": TEST_CREDENTIALS.id, \"type\": TEST_CREDENTIALS.type, \"title\": TEST_CREDENTIALS.type}\n\nclass UnrealTextToSpeechBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(description=\"The text to be converted to speech\", placeholder=\"Enter the text you want to convert to speech\")\n        voice_id: str = SchemaField(description=\"The voice ID to use for text-to-speech conversion\", placeholder=\"Scarlett\", default=\"Scarlett\")\n        credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]] = CredentialsField(description=\"The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.\")\n\n    class Output(BlockSchema):\n        mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")\n        error: str = SchemaField(description=\"Error message if the API call failed\")\n\n    def __init__(self):\n        super().__init__(id=\"4ff1ff6d-cc40-4caa-ae69-011daa20c378\", description=\"Converts text to speech using the Unreal Speech API\", categories={BlockCategory.AI, BlockCategory.TEXT}, input_schema=UnrealTextToSpeechBlock.Input, output_schema=UnrealTextToSpeechBlock.Output, test_input={\"text\": \"This is a test of the text to speech API.\", \"voice_id\": \"Scarlett\", \"credentials\": TEST_CREDENTIALS_INPUT}, test_output=[(\"mp3_url\", \"https://example.com/test.mp3\")], test_mock={\"call_unreal_speech_api\": lambda *args, **kwargs: {\"OutputUri\": \"https://example.com/test.mp3\"}}, test_credentials=TEST_CREDENTIALS)\n\n    @staticmethod\n    def call_unreal_speech_api(api_key: SecretStr, text: str, voice_id: str) -> dict[str, Any]:\n        url = \"https://api.v7.unrealspeech.com/speech\"\n        headers = {\"Authorization\": f\"Bearer {api_key.get_secret_value()}\", \"Content-Type\": \"application/json\"}\n        data = {\"Text\": text, \"VoiceId\": voice_id, \"Bitrate\": \"192k\", \"Speed\": \"0\", \"Pitch\": \"1\", \"TimestampType\": \"sentence\"}\n        response = requests.post(url, headers=headers, json=data)\n        return response.json()\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)\n        yield \"mp3_url\", api_response[\"OutputUri\"]\n",
    "children": [
        {
            "type": "import_from_statement",
            "code": "from typing import Any, Literal"
        },
        {
            "type": "import_from_statement",
            "code": "from pydantic import SecretStr"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.integrations.providers import ProviderName"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.util.request import requests"
        },
        {
            "type": "assignment",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(id=\"01234567-89ab-cdef-0123-456789abcdef\", provider=\"unreal_speech\", api_key=SecretStr(\"mock-unreal-speech-api-key\"), title=\"Mock Unreal Speech API key\", expires_at=None)"
        },
        {
            "type": "assignment",
            "code": "TEST_CREDENTIALS_INPUT = { \"provider\": TEST_CREDENTIALS.provider, \"id\": TEST_CREDENTIALS.id, \"type\": TEST_CREDENTIALS.type, \"title\": TEST_CREDENTIALS.type}"
        },
        {
            "type": "class_definition",
            "code": "class UnrealTextToSpeechBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "text: str = SchemaField(description=\"The text to be converted to speech\", placeholder=\"Enter the text you want to convert to speech\")"
                        },
                        {
                            "type": "assignment",
                            "code": "voice_id: str = SchemaField(description=\"The voice ID to use for text-to-speech conversion\", placeholder=\"Scarlett\", default=\"Scarlett\")"
                        },
                        {
                            "type": "assignment",
                            "code": "credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]] = CredentialsField(description=\"The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.\")"
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")"
                        },
                        {
                            "type": "assignment",
                            "code": "error: str = SchemaField(description=\"Error message if the API call failed\")"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(id=\"4ff1ff6d-cc40-4caa-ae69-011daa20c378\", description=\"Converts text to speech using the Unreal Speech API\", categories={BlockCategory.AI, BlockCategory.TEXT}, input_schema=UnrealTextToSpeechBlock.Input, output_schema=UnrealTextToSpeechBlock.Output, test_input={\"text\": \"This is a test of the text to speech API.\", \"voice_id\": \"Scarlett\", \"credentials\": TEST_CREDENTIALS_INPUT}, test_output=[(\"mp3_url\", \"https://example.com/test.mp3\")], test_mock={\"call_unreal_speech_api\": lambda *args, **kwargs: {\"OutputUri\": \"https://example.com/test.mp3\"}}, test_credentials=TEST_CREDENTIALS)"
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "code": "@staticmethod\ndef call_unreal_speech_api(api_key: SecretStr, text: str, voice_id: str) -> dict[str, Any]:",
                    "children": [
                        {
                            "type": "block",
                            "code": "url = \"https://api.v7.unrealspeech.com/speech\"\nheaders = {\"Authorization\": f\"Bearer {api_key.get_secret_value()}\", \"Content-Type\": \"application/json\"}\ndata = {\"Text\": text, \"VoiceId\": voice_id, \"Bitrate\": \"192k\", \"Speed\": \"0\", \"Pitch\": \"1\", \"TimestampType\": \"sentence\"}\nresponse = requests.post(url, headers=headers, json=data)\nreturn response.json()"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "block",
                            "code": "api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)\nyield \"mp3_url\", api_response[\"OutputUri\"]"
                        }
                    ]
                }
            ]
        }
    ]
}