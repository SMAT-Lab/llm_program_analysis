{
    "type": "module",
    "code": "file",
    "children": [
        {
            "type": "comment",
            "code": "# Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def get_index_of_rightmost_set_bit(number: int) -> int:",
            "children": [
                {
                    "type": "comment",
                    "code": "\"\"\" Take in a positive integer 'number'. Returns the zero-based index of first set bit in that 'number' from right. Returns -1, If no set bit found. >>> get_index_of_rightmost_set_bit(0) -1 >>> get_index_of_rightmost_set_bit(5) 0 >>> get_index_of_rightmost_set_bit(36) 2 >>> get_index_of_rightmost_set_bit(8) 3 >>> get_index_of_rightmost_set_bit(-18) Traceback (most recent call last): ... ValueError: Input must be a non-negative integer >>> get_index_of_rightmost_set_bit('test') Traceback (most recent call last): ... ValueError: Input must be a non-negative integer >>> get_index_of_rightmost_set_bit(1.25) Traceback (most recent call last): ... ValueError: Input must be a non-negative integer \"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if not isinstance(number, int) or number < 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(\"Input must be a non-negative integer\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "intermediate = number & ~(number - 1)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "index = 0",
                    "children": []
                },
                {
                    "type": "while_statement",
                    "code": "while intermediate:",
                    "children": [
                        {
                            "type": "augmented_assignment",
                            "code": "intermediate >>= 1",
                            "children": []
                        },
                        {
                            "type": "augmented_assignment",
                            "code": "index += 1",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return index - 1",
                    "children": []
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "comment",
                    "code": "\"\"\" Finding the index of rightmost set bit has some very peculiar use-cases, especially in finding missing or/and repeating numbers in a list of positive integers. \"\"\"",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "doctest.testmod(verbose=True)",
                    "children": []
                }
            ]
        }
    ]
}