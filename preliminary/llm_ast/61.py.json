{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_statement",
            "code": "import json",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from typing import Any, Type, TypeVar, overload",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "import jsonschema",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from fastapi.encoders import jsonable_encoder",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from .type import type_match",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def to_dict(data) -> dict:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return jsonable_encoder(data)",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def dumps(data) -> str:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return json.dumps(jsonable_encoder(data))",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "type",
            "code": "T = TypeVar('T')",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def loads(data: str, *args, target_type: Type[T] = None, **kwargs) -> Any:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "parsed = json.loads(data, *args, **kwargs)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if target_type:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return type_match(parsed, target_type)",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return parsed",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def validate_with_jsonschema(schema: dict[str, Any], data: dict[str, Any]) -> str | None:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "comment",
                            "code": "\"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "try_statement",
                            "code": "try:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "jsonschema.validate(data, schema)",
                                            "children": []
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return None",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except jsonschema.ValidationError as e:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return str(e)",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}