{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_statement",
            "code": "from abc import ABCMeta, abstractmethod"
        },
        {
            "type": "import_statement",
            "code": "from enum import Enum"
        },
        {
            "type": "class_definition",
            "code": "class VehicleSize(Enum):",
            "children": [
                {
                    "type": "assignment",
                    "code": "MOTORCYCLE = 0"
                },
                {
                    "type": "assignment",
                    "code": "COMPACT = 1"
                },
                {
                    "type": "assignment",
                    "code": "LARGE = 2"
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Vehicle(metaclass=ABCMeta):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, vehicle_size, license_plate, spot_size):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "self.vehicle_size = vehicle_size"
                        },
                        {
                            "type": "assignment",
                            "code": "self.license_plate = license_plate"
                        },
                        {
                            "type": "expression_statement",
                            "code": "self.spot_size"
                        },
                        {
                            "type": "assignment",
                            "code": "self.spots_taken = []"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def clear_spots(self):",
                    "children": [
                        {
                            "type": "for_statement",
                            "code": "for spot in self.spots_taken:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "spot.remove_vehicle(self)"
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "self.spots_taken = []"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def take_spot(self, spot):",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "self.spots_taken.append(spot)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "decorators": [
                        {
                            "type": "decorator",
                            "code": "@abstractmethod"
                        }
                    ],
                    "code": "def can_fit_in_spot(self, spot):",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Motorcycle(Vehicle):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, license_plate):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def can_fit_in_spot(self, spot):",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return True"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Car(Vehicle):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, license_plate):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def can_fit_in_spot(self, spot):",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Bus(Vehicle):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, license_plate):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def can_fit_in_spot(self, spot):",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return spot.size == VehicleSize.LARGE"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class ParkingLot(object):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, num_levels):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "self.num_levels = num_levels"
                        },
                        {
                            "type": "assignment",
                            "code": "self.levels = []"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def park_vehicle(self, vehicle):",
                    "children": [
                        {
                            "type": "for_statement",
                            "code": "for level in self.levels:",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if level.park_vehicle(vehicle):",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return True"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return False"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class Level(object):",
            "children": [
                {
                    "type": "assignment",
                    "code": "SPOTS_PER_ROW = 10"
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self, floor, total_spots):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "self.floor = floor"
                        },
                        {
                            "type": "assignment",
                            "code": "self.num_spots = total_spots"
                        },
                        {
                            "type": "assignment",
                            "code": "self.available_spots = 0"
                        },
                        {
                            "type": "assignment",
                            "code": "self.spots = []"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def spot_freed(self):",
                    "children": [
                        {
                            "type": "augmented_assignment",
                            "code": "self.available_spots += 1"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def park_vehicle(self, vehicle):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "spot = self._find_available_spot(vehicle)"
                        },
                        {
                            "type": "if_statement",
                            "code": "if spot is None:",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return None"
                                }
                            ]
                        },
                        {
                            "type": "else_clause",
                            "code": "else:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "spot.park_vehicle(vehicle)"
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return spot"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def _find_available_spot(self, vehicle):",
                    "children": [
                        {
                            "type": "comment",
                            "code": "\"\"\"Find an available spot where vehicle can fit, or return None\"\"\""
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def _park_starting_at_spot(self, spot, vehicle):",
                    "children": [
                        {
                            "type": "comment",
                            "code": "\"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\""
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class ParkingSpot(object):",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, level, row, spot_number, spot_size, vehicle_size):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "self.level = level"
                        },
                        {
                            "type": "assignment",
                            "code": "self.row = row"
                        },
                        {
                            "type": "assignment",
                            "code": "self.spot_number = spot_number"
                        },
                        {
                            "type": "assignment",
                            "code": "self.spot_size = spot_size"
                        },
                        {
                            "type": "assignment",
                            "code": "self.vehicle_size = vehicle_size"
                        },
                        {
                            "type": "assignment",
                            "code": "self.vehicle = None"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def is_available(self):",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "return True if self.vehicle is None else False"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def can_fit_vehicle(self, vehicle):",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "if self.vehicle is not None:",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return False"
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return vehicle.can_fit_in_spot(self)"
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def park_vehicle(self, vehicle):",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "code": "def remove_vehicle(self):",
                    "children": []
                }
            ]
        }
    ]
}