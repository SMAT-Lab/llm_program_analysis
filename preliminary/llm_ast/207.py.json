{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "Word Ladder is a classic problem in computer science. The problem is to transform a start word into an end word by changing one letter at a time. Each intermediate word must be a valid word from a given list of words. The goal is to find a transformation sequence from the start word to the end word. Wikipedia: https://en.wikipedia.org/wiki/Word_ladder",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "import string",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def backtrack(current_word: str, path: list[str], end_word: str, word_set: set[str]) -> list[str]:",
            "children": [
                {
                    "type": "comment",
                    "code": "Helper function to perform backtracking to find the transformation from the current_word to the end_word.",
                    "children": []
                },
                {
                    "type": "parameters",
                    "code": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "code": "current_word: str",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "code": "path: list[str]",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "code": "end_word: str",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "code": "word_set: set[str]",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "-> list[str]",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "comment",
                            "code": "Base case: If the current word is the end word, return the path",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if current_word == end_word:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return path",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "code": "Try all possible single-letter transformations",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "code": "for i in range(len(current_word)):",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "code": "for c in string.ascii_lowercase:  # Try changing each letter",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "transformed_word = current_word[:i] + c + current_word[i + 1:]",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if transformed_word in word_set:",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "code": "word_set.remove(transformed_word)",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "comment",
                                                                            "code": "Recur with the new word added to the path",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "code": "result = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "code": "if result:  # valid transformation found",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "code": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "code": "return result",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "code": "word_set.add(transformed_word)  # backtrack",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return []  # No valid transformation found",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def word_ladder(begin_word: str, end_word: str, word_set: set[str]) -> list[str]:",
            "children": [
                {
                    "type": "comment",
                    "code": "Solve the Word Ladder problem using Backtracking and return the list of transformations from begin_word to end_word.",
                    "children": []
                },
                {
                    "type": "parameters",
                    "code": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "code": "begin_word: str",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "code": "end_word: str",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "code": "word_set: set[str]",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "-> list[str]",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "if end_word not in word_set:  # no valid transformation possible",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return []",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "code": "Perform backtracking starting from the begin_word",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "code": "return backtrack(begin_word, [begin_word], end_word, word_set)",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}