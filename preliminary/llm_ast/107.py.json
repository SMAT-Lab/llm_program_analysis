{
    "type": "ErrorNode",
    "code": "from typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.json import json\n\n\nclass StepThroughItemsBlock(Block):\n    class Input(BlockSchema):\n        items: list = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default=[],\n        )\n        items_object: dict = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default={},\n        )\n        items_str: str = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default=\"\",\n        )\n\n    class Output(BlockSchema):\n        item: Any = SchemaField(description=\"The current item in the iteration\")\n        key: Any = SchemaField(\n            description=\"The key or index of the current item in the iteration\",\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f66a3543-28d3-4ab5-8945-9b336371e2ce\",\n            input_schema=StepThroughItemsBlock.Input,\n            output_schema=StepThroughItemsBlock.Output,\n            categories={BlockCategory.LOGIC},\n            description=\"Iterates over a list or dictionary and outputs each item.\",\n            test_input={\"items\": [1, 2, 3, {\"key1\": \"value1\", \"key2\": \"value2\"}]},\n            test_output=[\n                (\"item\", 1),\n                (\"key\", 0),\n                (\"item\", 2),\n                (\"key\", 1),\n                (\"item\", 3),\n                (\"key\", 2),\n                (\"item\", {\"key1\": \"value1\", \"key2\": \"value2\"}),\n                (\"key\", 3),\n            ],\n            test_mock={},\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        for data in [input_data.items, input_data.items_object, input_data.items_str]:\n            if not data:\n                continue\n            if isinstance(data, str):\n                items = json.loads(data)\n            else:\n                items = data\n            if isinstance(items, dict):\n                # If items is a dictionary, iterate over its values\n                for item in items.values():\n                    yield \"item\", item\n                    yield \"key\", item\n            else:\n                # If items is a list, iterate over the list\n                for index, item in enumerate(items):\n                    yield \"item\", item\n                    yield \"key\", index\n",
    "children": []
}