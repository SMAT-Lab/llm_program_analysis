{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "\"\"\"\nA Hamiltonian cycle (Hamiltonian circuit) is a graph cycle\nthrough a graph that visits each node exactly once.\nDetermining whether such paths and cycles exist in graphs\nis the 'Hamiltonian path problem', which is NP-complete.\n\nWikipedia: https://en.wikipedia.org/wiki/Hamiltonian_path\n\"\"\"",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def valid_connection(graph: list[list[int]], next_ver: int, curr_ind: int, path: list[int]) -> bool:",
            "children": [
                {
                    "type": "comment",
                    "code": "\"\"\"\nChecks whether it is possible to add next into path by validating 2 statements\n1. There should be path between current and next vertex\n2. Next vertex should not be in path\nIf both validations succeed we return True, saying that it is possible to connect\nthis vertices, otherwise we return False\n\nCase 1:Use exact graph as in main function, with initialized values\n>>> graph = [[0, 1, 0, 1, 0],\n...          [1, 0, 1, 1, 1],\n...          [0, 1, 0, 0, 1],\n...          [1, 1, 0, 0, 1],\n...          [0, 1, 1, 1, 0]]\n>>> path = [0, -1, -1, -1, -1, 0]\n>>> curr_ind = 1\n>>> next_ver = 1\n>>> valid_connection(graph, next_ver, curr_ind, path)\nTrue\n\nCase 2: Same graph, but trying to connect to node that is already in path\n>>> path = [0, 1, 2, 4, -1, 0]\n>>> curr_ind = 4\n>>> next_ver = 1\n>>> valid_connection(graph, next_ver, curr_ind, path)\nFalse\n\"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_list",
                            "code": "if graph[path[curr_ind - 1]][next_ver] == 0:",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return False",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return not any(vertex == next_ver for vertex in path)",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def util_hamilton_cycle(graph: list[list[int]], path: list[int], curr_ind: int) -> bool:",
            "children": [
                {
                    "type": "comment",
                    "code": "\"\"\"\nPseudo-Code\nBase Case:\n1. Check if we visited all of vertices\n    1.1 If last visited vertex has path to starting vertex return True either\n        return False\nRecursive Step:\n2. Iterate over each vertex\n    Check if next vertex is valid for transiting from current vertex\n        2.1 Remember next vertex as next transition\n        2.2 Do recursive call and check if going to this vertex solves problem\n        2.3 If next vertex leads to solution return True\n        2.4 Else backtrack, delete remembered vertex\n\nCase 1: Use exact graph as in main function, with initialized values\n>>> graph = [[0, 1, 0, 1, 0],\n...          [1, 0, 1, 1, 1],\n...          [0, 1, 0, 0, 1],\n...          [1, 1, 0, 0, 1],\n...          [0, 1, 1, 1, 0]]\n>>> path = [0, -1, -1, -1, -1, 0]\n>>> curr_ind = 1\n>>> util_hamilton_cycle(graph, path, curr_ind)\nTrue\n>>> path\n[0, 1, 2, 4, 3, 0]\n\nCase 2: Use exact graph as in previous case, but in the properties taken from\n    middle of calculation\n>>> graph = [[0, 1, 0, 1, 0],\n...          [1, 0, 1, 1, 1],\n...          [0, 1, 0, 0, 1],\n...          [1, 1, 0, 0, 1],\n...          [0, 1, 1, 1, 0]]\n>>> path = [0, 1, 2, -1, -1, 0]\n>>> curr_ind = 3\n>>> util_hamilton_cycle(graph, path, curr_ind)\nTrue\n>>> path\n[0, 1, 2, 4, 3, 0]\n\"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "if curr_ind == len(graph):",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return graph[path[curr_ind - 1]][path[0]] == 1",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "code": "for next_ver in range(len(graph)):",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if valid_connection(graph, next_ver, curr_ind, path):",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "path[curr_ind] = next_ver",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if util_hamilton_cycle(graph, path, curr_ind + 1):",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "code": "return True",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "path[curr_ind] = -1",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return False",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def hamilton_cycle(graph: list[list[int]], start_index: int = 0) -> list[int]:",
            "children": [
                {
                    "type": "comment",
                    "code": "\"\"\"\nWrapper function to call subroutine called util_hamilton_cycle,\nwhich will either return array of vertices indicating hamiltonian cycle\nor an empty list indicating that hamiltonian cycle was not found.\nCase 1:\nFollowing graph consists of 5 edges.\nIf we look closely, we can see that there are multiple Hamiltonian cycles.\nFor example one result is when we iterate like:\n(0)->(1)->(2)->(4)->(3)->(0)\n\n(0)---(1)---(2)\n |   /   \\   |\n |  /     \\  |\n | /       \\ |\n |/         \\|\n(3)---------(4)\n>>> graph = [[0, 1, 0, 1, 0],\n...          [1, 0, 1, 1, 1],\n...          [0, 1, 0, 0, 1],\n...          [1, 1, 0, 0, 1],\n...          [0, 1, 1, 1, 0]]\n>>> hamilton_cycle(graph)\n[0, 1, 2, 4, 3, 0]\n\nCase 2:\nSame Graph as it was in Case 1, changed starting index from default to 3\n\n(0)---(1)---(2)\n |   /   \\   |\n |  /     \\  |\n | /       \\ |\n |/         \\|\n(3)---------(4)\n>>> graph = [[0, 1, 0, 1, 0],\n...          [1, 0, 1, 1, 1],\n...          [0, 1, 0, 0, 1],\n...          [1, 1, 0, 0, 1],\n...          [0, 1, 1, 1, 0]]\n>>> hamilton_cycle(graph, 3)\n[3, 0, 1, 2, 4, 3]\n\nCase 3:\nFollowing Graph is exactly what it was before, but edge 3-4 is removed.\nResult is that there is no Hamiltonian Cycle anymore.\n\n(0)---(1)---(2)\n |   /   \\   |\n |  /     \\  |\n | /       \\ |\n |/         \\|\n(3)         (4)\n>>> graph = [[0, 1, 0, 1, 0],\n...          [1, 0, 1, 1, 1],\n...          [0, 1, 0, 0, 1],\n...          [1, 1, 0, 0, 0],\n...          [0, 1, 1, 0, 0]]\n>>> hamilton_cycle(graph,4)\n[]\n\"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "expression_statement",
                            "code": "path = [-1] * (len(graph) + 1)",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "path[0] = path[-1] = start_index",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "code": "return path if util_hamilton_cycle(graph, path, 1) else []",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}