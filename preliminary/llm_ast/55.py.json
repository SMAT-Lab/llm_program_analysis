{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_statement",
            "code": "import time"
        },
        {
            "type": "import_from_statement",
            "code": "from datetime import datetime, timedelta, timezone",
            "children": [
                {
                    "type": "identifier",
                    "code": "datetime"
                },
                {
                    "type": "identifier",
                    "code": "timedelta"
                },
                {
                    "type": "identifier",
                    "code": "timezone"
                }
            ]
        },
        {
            "type": "import_from_statement",
            "code": "from typing import Any",
            "children": [
                {
                    "type": "identifier",
                    "code": "Any"
                }
            ]
        },
        {
            "type": "import_statement",
            "code": "import feedparser"
        },
        {
            "type": "import_statement",
            "code": "import pydantic"
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": [
                {
                    "type": "identifier",
                    "code": "Block"
                },
                {
                    "type": "identifier",
                    "code": "BlockCategory"
                },
                {
                    "type": "identifier",
                    "code": "BlockOutput"
                },
                {
                    "type": "identifier",
                    "code": "BlockSchema"
                }
            ]
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.model import SchemaField",
            "children": [
                {
                    "type": "identifier",
                    "code": "SchemaField"
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class RSSEntry(pydantic.BaseModel):",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "title: str"
                        },
                        {
                            "type": "assignment",
                            "code": "link: str"
                        },
                        {
                            "type": "assignment",
                            "code": "description: str"
                        },
                        {
                            "type": "assignment",
                            "code": "pub_date: datetime"
                        },
                        {
                            "type": "assignment",
                            "code": "author: str"
                        },
                        {
                            "type": "assignment",
                            "code": "categories: list[str]"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class ReadRSSFeedBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "rss_url: str = SchemaField(description=\"The URL of the RSS feed to read\", placeholder=\"https://example.com/rss\")"
                                },
                                {
                                    "type": "assignment",
                                    "code": "time_period: int = SchemaField(description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\", placeholder=\"1440\", default=1440)"
                                },
                                {
                                    "type": "assignment",
                                    "code": "polling_rate: int = SchemaField(description=\"The number of seconds to wait between polling attempts.\", placeholder=\"300\")"
                                },
                                {
                                    "type": "assignment",
                                    "code": "run_continuously: bool = SchemaField(description=\"Whether to run the block continuously or just once.\", default=True)"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "entry: RSSEntry = SchemaField(description=\"The RSS item\")"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "super().__init__(id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\", input_schema=ReadRSSFeedBlock.Input, output_schema=ReadRSSFeedBlock.Output, description=\"Reads RSS feed entries from a given URL.\", categories={BlockCategory.INPUT}, test_input={\"rss_url\": \"https://example.com/rss\", \"time_period\": 10000000, \"polling_rate\": 1, \"run_continuously\": False}, test_output=[(\"entry\", RSSEntry(title=\"Example RSS Item\", link=\"https://example.com/article\", description=\"This is an example RSS item description.\", pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc), author=\"John Doe\", categories=[\"Technology\", \"News\"]))], test_mock={\"parse_feed\": lambda *args, **kwargs: {\"entries\": [{\"title\": \"Example RSS Item\", \"link\": \"https://example.com/article\", \"summary\": \"This is an example RSS item description.\", \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0), \"author\": \"John Doe\", \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}]}]}})"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def parse_feed(url: str) -> dict[str, Any]:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return feedparser.parse(url)"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "keep_going = True"
                                },
                                {
                                    "type": "assignment",
                                    "code": "start_time = datetime.now(timezone.utc) - timedelta(minutes=input_data.time_period)"
                                },
                                {
                                    "type": "while_statement",
                                    "code": "while keep_going:",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "keep_going = input_data.run_continuously"
                                                },
                                                {
                                                    "type": "assignment",
                                                    "code": "feed = self.parse_feed(input_data.rss_url)"
                                                },
                                                {
                                                    "type": "for_statement",
                                                    "code": "for entry in feed[\"entries\"]:",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "code": "",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "code": "pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)"
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "code": "if pub_date > start_time:",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "code": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "yield",
                                                                                    "code": "yield (\"entry\", RSSEntry(title=entry[\"title\"], link=entry[\"link\"], description=entry.get(\"summary\", \"\"), pub_date=pub_date, author=entry.get(\"author\", \"\"), categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])]))"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "code": "time.sleep(input_data.polling_rate)"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}