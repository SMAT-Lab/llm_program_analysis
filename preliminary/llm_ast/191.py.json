{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "future_import_statement",
            "code": "from __future__ import annotations"
        },
        {
            "type": "function_definition",
            "code": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"\nFind all the valid positions a knight can move to from the current position.\n\n>>> get_valid_pos((1, 3), 4)\n[(2, 1), (0, 1), (3, 2)]\n\"\"\""
                        },
                        {
                            "type": "assignment",
                            "code": "y, x = position"
                        },
                        {
                            "type": "assignment",
                            "code": "positions = [(y + 1, x + 2), (y - 1, x + 2), (y + 1, x - 2), (y - 1, x - 2), (y + 2, x + 1), (y + 2, x - 1), (y - 2, x + 1), (y - 2, x - 1)]"
                        },
                        {
                            "type": "assignment",
                            "code": "permissible_positions = []"
                        },
                        {
                            "type": "for_statement",
                            "code": "for inner_position in positions:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "y_test, x_test = inner_position"
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if 0 <= y_test < n and 0 <= x_test < n:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "code": "permissible_positions.append(inner_position)"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return permissible_positions"
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def is_complete(board: list[list[int]]) -> bool:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"\nCheck if the board (matrix) has been completely filled with non-zero values.\n\n>>> is_complete([[1]])\nTrue\n\n>>> is_complete([[1, 2], [3, 0]])\nFalse\n\"\"\""
                        },
                        {
                            "type": "return_statement",
                            "code": "return not any(elem == 0 for row in board for elem in row)"
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def open_knight_tour_helper(board: list[list[int]], pos: tuple[int, int], curr: int) -> bool:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "if is_complete(board):",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "code": "return True"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "code": "for position in get_valid_pos(pos, len(board)):",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "y, x = position"
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if board[y][x] == 0:",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "board[y][x] = curr + 1"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if open_knight_tour_helper(board, position, curr + 1):",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "code": "return True"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "code": "board[y][x] = 0"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return False"
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def open_knight_tour(n: int) -> list[list[int]]:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"\nFind the solution for the knight tour problem for a board of size n. Raises\nValueError if the tour cannot be performed for the given size.\n\n>>> open_knight_tour(1)\n[[1]]\n\n>>> open_knight_tour(2)\nTraceback (most recent call last):\n    ...\nValueError: Open Knight Tour cannot be performed on a board of size 2\n\"\"\""
                        },
                        {
                            "type": "assignment",
                            "code": "board = [[0 for i in range(n)] for j in range(n)]"
                        },
                        {
                            "type": "for_statement",
                            "code": "for i in range(n):",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "code": "for j in range(n):",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "board[i][j] = 1"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if open_knight_tour_helper(board, (i, j), 1):",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "code": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "code": "return board"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "code": "board[i][j] = 0"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "msg = f\"Open Knight Tour cannot be performed on a board of size {n}\""
                        },
                        {
                            "type": "raise_statement",
                            "code": "raise ValueError(msg)"
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "import_statement",
                            "code": "import doctest"
                        },
                        {
                            "type": "expression_statement",
                            "code": "doctest.testmod()"
                        }
                    ]
                }
            ]
        }
    ]
}