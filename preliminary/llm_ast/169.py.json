{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "import_statement",
            "code": "import re",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from backend.data.model import SchemaField",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class CodeExtractionBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "text: str = SchemaField(description=\"Text containing code blocks to extract (e.g., AI response)\", placeholder=\"Enter text containing code blocks\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "html: str = SchemaField(description=\"Extracted HTML code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "css: str = SchemaField(description=\"Extracted CSS code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "javascript: str = SchemaField(description=\"Extracted JavaScript code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "python: str = SchemaField(description=\"Extracted Python code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "sql: str = SchemaField(description=\"Extracted SQL code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "java: str = SchemaField(description=\"Extracted Java code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "cpp: str = SchemaField(description=\"Extracted C++ code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "csharp: str = SchemaField(description=\"Extracted C# code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "json_code: str = SchemaField(description=\"Extracted JSON code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "bash: str = SchemaField(description=\"Extracted Bash code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "php: str = SchemaField(description=\"Extracted PHP code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "ruby: str = SchemaField(description=\"Extracted Ruby code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "yaml: str = SchemaField(description=\"Extracted YAML code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "markdown: str = SchemaField(description=\"Extracted Markdown code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "typescript: str = SchemaField(description=\"Extracted TypeScript code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "xml: str = SchemaField(description=\"Extracted XML code\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "remaining_text: str = SchemaField(description=\"Remaining text after code extraction\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\ndescription=\"Extracts code blocks from text and identifies their programming languages\",\ncategories={BlockCategory.TEXT},\ninput_schema=CodeExtractionBlock.Input,\noutput_schema=CodeExtractionBlock.Output,\ntest_input={\"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"},\ntest_output=[\n(\"html\", \"<h1>Title</h1>\"),\n(\"python\", \"print('Hello World')\"),\n(\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n]",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "language_aliases = {\"html\": [\"html\", \"htm\"], \"css\": [\"css\"], \"javascript\": [\"javascript\", \"js\"], \"python\": [\"python\", \"py\"], \"sql\": [\"sql\"], \"java\": [\"java\"], \"cpp\": [\"cpp\", \"c++\"], \"csharp\": [\"csharp\", \"c#\", \"cs\"], \"json_code\": [\"json\"], \"bash\": [\"bash\", \"shell\", \"sh\"], \"php\": [\"php\"], \"ruby\": [\"ruby\", \"rb\"], \"yaml\": [\"yaml\", \"yml\"], \"markdown\": [\"markdown\", \"md\"], \"typescript\": [\"typescript\", \"ts\"], \"xml\": [\"xml\"]}",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "code": "for canonical_name, aliases in language_aliases.items():",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "code = \"\"",
                                    "children": []
                                },
                                {
                                    "type": "for_statement",
                                    "code": "for alias in aliases:",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "code": "code_for_alias = self.extract_code(input_data.text, alias)",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if code_for_alias:",
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "code": "code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if code:",
                                    "children": [
                                        {
                                            "type": "yield",
                                            "code": "yield canonical_name, code",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "pattern = r\"```(?:\" + \"|\".join(re.escape(alias) for aliases in language_aliases.values() for alias in aliases) + r\")\\s+[\\s\\S]*?```\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "remaining_text = re.sub(pattern, \"\", input_data.text).strip()",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if remaining_text:",
                            "children": [
                                {
                                    "type": "yield",
                                    "code": "yield \"remaining_text\", remaining_text",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def extract_code(self, text: str, language: str) -> str:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "language = re.escape(language)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "matches = pattern.finditer(text)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "code_blocks = [match.group(1).strip() for match in matches]",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "code": "return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}