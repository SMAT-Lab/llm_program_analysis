{
    "type": "module",
    "code": "import hashlib\nimport secrets\nfrom typing import NamedTuple\n\n\nclass APIKeyContainer(NamedTuple):\n    \"\"\"Container for API key parts.\"\"\"\n\n    raw: str\n    prefix: str\n    postfix: str\n    hash: str\n\n\nclass APIKeyManager:\n    PREFIX: str = \"agpt_\"\n    PREFIX_LENGTH: int = 8\n    POSTFIX_LENGTH: int = 8\n\n    def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )\n\n    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):\n            return False\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
    "children": [
        {
            "type": "import_statement",
            "code": "import hashlib"
        },
        {
            "type": "import_statement",
            "code": "import secrets"
        },
        {
            "type": "import_from_statement",
            "code": "from typing import NamedTuple"
        },
        {
            "type": "class_definition",
            "code": "class APIKeyContainer(NamedTuple):",
            "children": [
                {
                    "type": "block",
                    "code": "\"\"\"Container for API key parts.\"\"\"\n\n    raw: str\n    prefix: str\n    postfix: str\n    hash: str",
                    "children": [
                        {
                            "type": "string",
                            "code": "\"\"\"Container for API key parts.\"\"\""
                        },
                        {
                            "type": "assignment",
                            "code": "raw: str"
                        },
                        {
                            "type": "assignment",
                            "code": "prefix: str"
                        },
                        {
                            "type": "assignment",
                            "code": "postfix: str"
                        },
                        {
                            "type": "assignment",
                            "code": "hash: str"
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class APIKeyManager:",
            "children": [
                {
                    "type": "block",
                    "code": "PREFIX: str = \"agpt_\"\nPREFIX_LENGTH: int = 8\nPOSTFIX_LENGTH: int = 8\n\n    def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )\n\n    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):\n            return False\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "PREFIX: str = \"agpt_\""
                        },
                        {
                            "type": "assignment",
                            "code": "PREFIX_LENGTH: int = 8"
                        },
                        {
                            "type": "assignment",
                            "code": "POSTFIX_LENGTH: int = 8"
                        },
                        {
                            "type": "function_definition",
                            "code": "def generate_api_key(self) -> APIKeyContainer:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "\"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )",
                                    "children": [
                                        {
                                            "type": "string",
                                            "code": "\"\"\"Generate a new API key with all its parts.\"\"\""
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\""
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )",
                                            "children": [
                                                {
                                                    "type": "argument_list",
                                                    "code": "raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "\"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):\n            return False\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
                                    "children": [
                                        {
                                            "type": "string",
                                            "code": "\"\"\"Verify if a provided API key matches the stored hash.\"\"\""
                                        },
                                        {
                                            "type": "conditional_expression",
                                            "code": "if not provided_key.startswith(self.PREFIX):\n            return False",
                                            "children": [
                                                {
                                                    "type": "boolean_operator",
                                                    "code": "not provided_key.startswith(self.PREFIX)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "provided_key.startswith(self.PREFIX)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "code": "provided_key.startswith",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "code": "provided_key"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "code": "self.PREFIX"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "code": "return False"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "code": "hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "hashlib.sha256(provided_key.encode()).hexdigest()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "code": "hashlib.sha256().hexdigest",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "code": "hashlib.sha256(provided_key.encode())",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "code": "hashlib.sha256",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "code": "hashlib"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "code": "provided_key.encode()"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "code": "stored_hash"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}