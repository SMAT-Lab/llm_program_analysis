{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "Problem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2 + 3^2. Constraints: 1<=X<=1000, 2<=N<=10.",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def backtrack(needed_sum: int, power: int, current_number: int, current_sum: int, solutions_count: int) -> tuple[int, int]:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "'''",
                            "children": []
                        },
                        {
                            "type": "concatenated_string",
                            "code": "'''",
                            "children": [
                                {
                                    "type": "string_content",
                                    "code": ">>> backtrack(13, 2, 1, 0, 0)\n(0, 1)\n>>> backtrack(10, 2, 1, 0, 0)\n(0, 1)\n>>> backtrack(10, 3, 1, 0, 0)\n(0, 0)\n>>> backtrack(20, 2, 1, 0, 0)\n(0, 1)\n>>> backtrack(15, 10, 1, 0, 0)\n(0, 0)\n>>> backtrack(16, 2, 1, 0, 0)\n(0, 1)\n>>> backtrack(20, 1, 1, 0, 0)\n(0, 64)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "string",
                            "code": "'''",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if current_sum == needed_sum:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "solutions_count += 1",
                                            "children": []
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return current_sum, solutions_count",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "code": "i_to_n = current_number ** power",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if current_sum + i_to_n <= needed_sum:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "current_sum += i_to_n",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "current_sum, solutions_count = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "code": "current_sum -= i_to_n",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "code": "if i_to_n < needed_sum:",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "code": "current_sum, solutions_count = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return current_sum, solutions_count",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def solve(needed_sum: int, power: int) -> int:",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "'''",
                            "children": []
                        },
                        {
                            "type": "concatenated_string",
                            "code": "'''",
                            "children": [
                                {
                                    "type": "string_content",
                                    "code": ">>> solve(13, 2)\n1\n>>> solve(10, 2)\n1\n>>> solve(10, 3)\n0\n>>> solve(20, 2)\n1\n>>> solve(15, 10)\n0\n>>> solve(16, 2)\n1\n>>> solve(20, 1)\nTraceback (most recent call last):\n    ...\nValueError: Invalid input\nneeded_sum must be between 1 and 1000, power between 2 and 10.\n>>> solve(-10, 5)\nTraceback (most recent call last):\n    ...\nValueError: Invalid input\nneeded_sum must be between 1 and 1000, power between 2 and 10.",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "string",
                            "code": "'''",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "code": "if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise ValueError(\n    \"Invalid input\\nneeded_sum must be between 1 and 1000, power between 2 and 10.\")",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "code": "return backtrack(needed_sum, power, 1, 0, 0)[1]",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "import_statement",
                            "code": "import doctest",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "doctest.testmod()",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}