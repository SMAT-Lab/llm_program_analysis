{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "aliased_import",
            "code": "import logging",
            "children": []
        },
        {
            "type": "import_from_statement",
            "code": "from colorama import Fore, Style",
            "children": [
                {
                    "type": "import_prefix",
                    "code": "from colorama",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "code": "import Fore",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "code": "import Style",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "code": "from google.cloud.logging_v2.handlers import CloudLoggingFilter, StructuredLogHandler",
            "children": [
                {
                    "type": "import_prefix",
                    "code": "from google.cloud.logging_v2.handlers",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "code": "import CloudLoggingFilter",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "code": "import StructuredLogHandler",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "code": "from .utils import remove_color_codes",
            "children": [
                {
                    "type": "import_prefix",
                    "code": "from .utils",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "code": "import remove_color_codes",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class FancyConsoleFormatter(logging.Formatter)",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "string",
                            "code": "    \"\"\"\n    A custom logging formatter designed for console output.\n\n    This formatter enhances the standard logging output with color coding. The color\n    coding is based on the level of the log message, making it easier to distinguish\n    between different types of messages in the console output.\n\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "    LEVEL_COLOR_MAP = { logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT }",
                            "children": [
                                {
                                    "type": "dictionary",
                                    "code": "{ logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT }",
                                    "children": [
                                        {
                                            "type": "pair",
                                            "code": "logging.DEBUG: Fore.LIGHTBLACK_EX",
                                            "children": []
                                        },
                                        {
                                            "type": "pair",
                                            "code": "logging.INFO: Fore.BLUE",
                                            "children": []
                                        },
                                        {
                                            "type": "pair",
                                            "code": "logging.WARNING: Fore.YELLOW",
                                            "children": []
                                        },
                                        {
                                            "type": "pair",
                                            "code": "logging.ERROR: Fore.RED",
                                            "children": []
                                        },
                                        {
                                            "type": "pair",
                                            "code": "logging.CRITICAL: Fore.RED + Style.BRIGHT",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "code": "def format(self, record: logging.LogRecord) -> str",
                            "children": [
                                {
                                    "type": "block",
                                    "code": "",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "code": "if not hasattr(record, \"msg\")",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "record.msg = \"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "elif_clause",
                                            "code": "elif type(record.msg) is not str",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "record.msg = str(record.msg)",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "level_color = \"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if record.levelno in self.LEVEL_COLOR_MAP",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "level_color = self.LEVEL_COLOR_MAP[record.levelno]",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "code": "record.levelname = f\"{level_color}{record.levelname}{Style.RESET_ALL}\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "color = getattr(record, \"color\", level_color)",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "color_is_specified = hasattr(record, \"color\")",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if color and (record.levelno != logging.INFO or color_is_specified)",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "code": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "code": "record.msg = f\"{color}{record.msg}{Style.RESET_ALL}\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "code": "return super().format(record)",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class AGPTFormatter(FancyConsoleFormatter)",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self, *args, no_color: bool = False, **kwargs)",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "super().__init__(*args, **kwargs)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "self.no_color = no_color",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def format(self, record: logging.LogRecord) -> str",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if not hasattr(record, \"msg\")",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "record.msg = \"\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "code": "elif type(record.msg) is not str",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "record.msg = str(record.msg)",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if record.msg and not getattr(record, \"preserve_color\", False)",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "record.msg = remove_color_codes(record.msg)",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "title = getattr(record, \"title\", \"\")",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "title_color = getattr(record, \"title_color\", \"\") or self.LEVEL_COLOR_MAP.get(record.levelno, \"\")",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if title and title_color",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "title = f\"{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "record.title = f\"{title} \" if title else \"\"",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if self.no_color",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "code": "return remove_color_codes(super().format(record))",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "code": "else",
                                    "children": [
                                        {
                                            "type": "block",
                                            "code": "",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "code": "return super().format(record)",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class StructuredLoggingFormatter(StructuredLogHandler, logging.Formatter)",
            "children": [
                {
                    "type": "function_definition",
                    "code": "def __init__(self)",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "self.cloud_logging_filter = CloudLoggingFilter()",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "super().__init__()",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def format(self, record: logging.LogRecord) -> str",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "self.cloud_logging_filter.filter(record)",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return super().format(record)",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}