{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "function_definition",
            "code": "def binary_count_setbits(a: int) -> int:",
            "children": [
                {
                    "type": "string",
                    "code": "    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\""
                },
                {
                    "type": "if_statement",
                    "code": "    if a < 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "        raise ValueError(\"Input value must be a positive integer\")"
                        }
                    ]
                },
                {
                    "type": "elif_clause",
                    "code": "    elif isinstance(a, float):",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "        raise TypeError(\"Input value must be a 'int' type\")"
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "    return bin(a).count(\"1\")"
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "aliased_import",
                    "code": "    import doctest"
                },
                {
                    "type": "expression_statement",
                    "code": "    doctest.testmod()"
                }
            ]
        }
    ]
}