{
    "type": "module",
    "code": "import fastapi\n\n\nfrom .config import Settings\nfrom .middleware import auth_middleware\nfrom .models import DEFAULT_USER_ID, User\n\n\ndef requires_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)\n\n\ndef requires_admin_user(\n    payload: dict = fastapi.Depends(auth_middleware),\n) -> User:\n    return verify_user(payload, admin_only=True)\n\n\ndef verify_user(payload: dict | None, admin_only: bool) -> User:\n    if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )\n        # This handles the case when authentication is disabled\n        payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}\n\n    user_id = payload.get(\"sub\")\n\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n\n    if admin_only and payload[\"role\"] != \"admin\":\n        raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")\n\n    return User.from_payload(payload)\n\n\ndef get_user_id(payload: dict = fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get(\"sub\")\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n    return user_id\n",
    "children": [
        {
            "type": "import_statement",
            "code": "import fastapi"
        },
        {
            "type": "import_from_statement",
            "code": "from .config import Settings"
        },
        {
            "type": "import_from_statement",
            "code": "from .middleware import auth_middleware"
        },
        {
            "type": "import_from_statement",
            "code": "from .models import DEFAULT_USER_ID, User"
        },
        {
            "type": "function_definition",
            "code": "def requires_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)\n",
            "children": [
                {
                    "type": "parameters",
                    "code": "payload: dict = fastapi.Depends(auth_middleware)"
                },
                {
                    "type": "return_statement",
                    "code": "return verify_user(payload, admin_only=False)"
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def requires_admin_user(\n    payload: dict = fastapi.Depends(auth_middleware),\n) -> User:\n    return verify_user(payload, admin_only=True)\n",
            "children": [
                {
                    "type": "parameters",
                    "code": "payload: dict = fastapi.Depends(auth_middleware)"
                },
                {
                    "type": "return_statement",
                    "code": "return verify_user(payload, admin_only=True)"
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def verify_user(payload: dict | None, admin_only: bool) -> User:\n    if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )\n        # This handles the case when authentication is disabled\n        payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}\n\n    user_id = payload.get(\"sub\")\n\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n\n    if admin_only and payload[\"role\"] != \"admin\":\n        raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")\n\n    return User.from_payload(payload)\n",
            "children": [
                {
                    "type": "parameters",
                    "code": "payload: dict | None, admin_only: bool"
                },
                {
                    "type": "block",
                    "code": "if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )\n        # This handles the case when authentication is disabled\n        payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "if not payload:",
                            "children": [
                                {
                                    "type": "if_statement",
                                    "code": "if Settings.ENABLE_AUTH:"
                                },
                                {
                                    "type": "raise_statement",
                                    "code": "raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )"
                                },
                                {
                                    "type": "comment",
                                    "code": "# This handles the case when authentication is disabled"
                                },
                                {
                                    "type": "assignment",
                                    "code": "payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "user_id = payload.get(\"sub\")"
                },
                {
                    "type": "if_statement",
                    "code": "if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )"
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if admin_only and payload[\"role\"] != \"admin\":\n        raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")"
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return User.from_payload(payload)"
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def get_user_id(payload: dict = fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get(\"sub\")\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n    return user_id\n",
            "children": [
                {
                    "type": "parameters",
                    "code": "payload: dict = fastapi.Depends(auth_middleware)"
                },
                {
                    "type": "assignment",
                    "code": "user_id = payload.get(\"sub\")"
                },
                {
                    "type": "if_statement",
                    "code": "if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )"
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return user_id"
                }
            ]
        }
    ]
}