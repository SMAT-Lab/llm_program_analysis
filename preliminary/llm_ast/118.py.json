{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "comment",
            "code": "author: Aayush Soni",
            "children": []
        },
        {
            "type": "comment",
            "code": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
            "children": []
        },
        {
            "type": "comment",
            "code": "Input: n = 2",
            "children": []
        },
        {
            "type": "comment",
            "code": "Output: [\"(())\",\"()()\"]",
            "children": []
        },
        {
            "type": "comment",
            "code": "Leetcode link: https://leetcode.com/problems/generate-parentheses/description/",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def backtrack(partial: str, open_count: int, close_count: int, n: int, result: list[str]) -> None:",
            "children": [
                {
                    "type": "comment",
                    "code": "Generate valid combinations of balanced parentheses using recursion.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":param partial: A string representing the current combination.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":param open_count: An integer representing the count of open parentheses.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":param close_count: An integer representing the count of close parentheses.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":param n: An integer representing the total number of pairs.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":param result: A list to store valid combinations.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":return: None",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "This function uses recursion to explore all possible combinations, ensuring that at each step, the parentheses remain balanced.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "Example:",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> result = []",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> backtrack(\"\", 0, 0, 2, result)",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> result",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "[\"(())\", \"()()\"]",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "if_statement",
                            "code": "if len(partial) == 2 * n:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "result.append(partial)",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "code": "if open_count < n:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "backtrack(partial + \"(\", open_count + 1, close_count, n, result)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "code": "if close_count < open_count:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "code": "backtrack(partial + \")\", open_count, close_count + 1, n, result)",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def generate_parenthesis(n: int) -> list[str]:",
            "children": [
                {
                    "type": "comment",
                    "code": "Generate valid combinations of balanced parentheses for a given n.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":param n: An integer representing the number of pairs of parentheses.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ":return: A list of strings with valid combinations.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "This function uses a recursive approach to generate the combinations.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "Space Complexity: O(n) - where 'n' is the number of pairs.",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "Example 1:",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> generate_parenthesis(3)",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "[\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "Example 2:",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": ">>> generate_parenthesis(1)",
                    "children": []
                },
                {
                    "type": "comment",
                    "code": "[\"()\"]",
                    "children": []
                },
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "result: list[str] = []",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "backtrack(\"\", 0, 0, n, result)",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "code": "return result",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "import_statement",
                    "code": "import doctest",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "doctest.testmod()",
                    "children": []
                }
            ]
        }
    ]
}