{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "function_definition",
            "code": "def gray_code(bit_count: int) -> list:",
            "children": [
                {
                    "type": "string",
                    "code": "    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "    if bit_count < 0:",
                    "children": [
                        {
                            "type": "raise_statement",
                            "code": "        raise ValueError(\"The given input must be positive\")",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "ValueError(\"The given input must be positive\")",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "    sequence = gray_code_sequence_string(bit_count)",
                    "children": [
                        {
                            "type": "call",
                            "code": "gray_code_sequence_string(bit_count)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "for_statement",
                    "code": "    for i in range(len(sequence)):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "        sequence[i] = int(sequence[i], 2)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "int(sequence[i], 2)",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "    return sequence",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def gray_code_sequence_string(bit_count: int) -> list:",
            "children": [
                {
                    "type": "string",
                    "code": "    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "    if bit_count == 0:",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "        return [\"0\"]",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "    if bit_count == 1:",
                    "children": [
                        {
                            "type": "return_statement",
                            "code": "        return [\"0\", \"1\"]",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "    seq_len = 1 << bit_count",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "    smaller_sequence = gray_code_sequence_string(bit_count - 1)",
                    "children": [
                        {
                            "type": "call",
                            "code": "gray_code_sequence_string(bit_count - 1)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "    sequence = []",
                    "children": []
                },
                {
                    "type": "for_statement",
                    "code": "    for i in range(seq_len // 2):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "        generated_no = \"0\" + smaller_sequence[i]",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "        sequence.append(generated_no)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "sequence.append(generated_no)",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "for_statement",
                    "code": "    for i in reversed(range(seq_len // 2)):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "        generated_no = \"1\" + smaller_sequence[i]",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "        sequence.append(generated_no)",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "sequence.append(generated_no)",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "    return sequence",
                    "children": []
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "aliased_import",
                    "code": "    import doctest",
                    "children": []
                },
                {
                    "type": "expression_statement",
                    "code": "    doctest.testmod()",
                    "children": [
                        {
                            "type": "call",
                            "code": "doctest.testmod()",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}