{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "aliased_import",
            "code": "import logging",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import time",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from enum import Enum",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from typing import Any",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "import httpx",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from backend.blocks.fal._auth import ( TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, FalCredentials, FalCredentialsField, FalCredentialsInput )",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": []
        },
        {
            "type": "aliased_import",
            "code": "from backend.data.model import SchemaField",
            "children": []
        },
        {
            "type": "assignment",
            "code": "logger = logging.getLogger(__name__)",
            "children": []
        },
        {
            "type": "class_definition",
            "code": "class FalModel(str, Enum):",
            "children": [
                {
                    "type": "assignment",
                    "code": "MOCHI = 'fal-ai/mochi-v1'",
                    "children": []
                },
                {
                    "type": "assignment",
                    "code": "LUMA = 'fal-ai/luma-dream-machine'",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "code": "class AIVideoGeneratorBlock(Block):",
            "children": [
                {
                    "type": "class_definition",
                    "code": "class Input(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "prompt: str = SchemaField(description='Description of the video to generate.', placeholder='A dog running in a field.')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "model: FalModel = SchemaField(title='FAL Model', default=FalModel.MOCHI, description='The FAL model to use for video generation.')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "credentials: FalCredentialsInput = FalCredentialsField()",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "code": "class Output(BlockSchema):",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "video_url: str = SchemaField(description='The URL of the generated video.')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "error: str = SchemaField(description='Error message if video generation failed.')",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "logs: list[str] = SchemaField(description='Generation progress logs.', optional=True)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def __init__(self):",
                    "children": [
                        {
                            "type": "call",
                            "code": "super().__init__(...)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "id='530cf046-2ce0-4854-ae2c-659db17c7a46'",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "description='Generate videos using FAL AI models.'",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "categories={BlockCategory.AI}",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "input_schema=self.Input",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "output_schema=self.Output",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "test_input={ 'prompt': 'A dog running in a field.', 'model': FalModel.MOCHI, 'credentials': TEST_CREDENTIALS_INPUT }",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "test_credentials=TEST_CREDENTIALS",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "test_output=[('video_url', 'https://fal.media/files/example/video.mp4')]",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "test_mock={ 'generate_video': lambda *args, **kwargs: 'https://fal.media/files/example/video.mp4' }",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def _get_headers(self, api_key: str) -> dict[str, str]:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "return { 'Authorization': f'Key {api_key}', 'Content-Type': 'application/json' }",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def _submit_request(self, url: str, headers: dict[str, str], data: dict[str, Any]) -> dict[str, Any]:",
                    "children": [
                        {
                            "type": "try_statement",
                            "code": "try: ...",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "response = httpx.post(url, headers=headers, json=data)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "response.raise_for_status()",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return response.json()",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except httpx.HTTPError as e: ...",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "logger.error(f'FAL API request failed: {str(e)}')",
                                    "children": []
                                },
                                {
                                    "type": "raise_statement",
                                    "code": "raise RuntimeError(f'Failed to submit request: {str(e)}')",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:",
                    "children": [
                        {
                            "type": "try_statement",
                            "code": "try: ...",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "response = httpx.get(status_url, headers=headers)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "response.raise_for_status()",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "code": "return response.json()",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except httpx.HTTPError as e: ...",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "logger.error(f'Failed to get status: {str(e)}')",
                                    "children": []
                                },
                                {
                                    "type": "raise_statement",
                                    "code": "raise RuntimeError(f'Failed to get status: {str(e)}')",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:",
                    "children": [
                        {
                            "type": "assignment",
                            "code": "base_url = 'https://queue.fal.run'",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "api_key = credentials.api_key.get_secret_value()",
                            "children": []
                        },
                        {
                            "type": "call",
                            "code": "headers = self._get_headers(api_key)",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "submit_url = f'{base_url}/{input_data.model.value}'",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "submit_data = { 'prompt': input_data.prompt }",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "code": "seen_logs = set()",
                            "children": []
                        },
                        {
                            "type": "try_statement",
                            "code": "try: ...",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "submit_response = httpx.post(submit_url, headers=headers, json=submit_data)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "code": "submit_response.raise_for_status()",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "request_data = submit_response.json()",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "request_id = request_data.get('request_id')",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "status_url = request_data.get('status_url')",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "result_url = request_data.get('response_url')",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "code": "if not all([request_id, status_url, result_url]): ...",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "code": "raise ValueError('Missing required data in submission response')",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "code": "max_attempts = 30",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "attempt = 0",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "code": "base_wait_time = 5",
                                    "children": []
                                },
                                {
                                    "type": "while_statement",
                                    "code": "while attempt < max_attempts: ...",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "status_response = httpx.get(f'{status_url}?logs=1', headers=headers)",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "code": "status_response.raise_for_status()",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "status_data = status_response.json()",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "logs = status_data.get('logs', [])",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if logs and isinstance(logs, list): ...",
                                            "children": [
                                                {
                                                    "type": "for_statement",
                                                    "code": "for log in logs: ...",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "code": "if isinstance(log, dict): ...",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "code": "log_key = f'{log.get('timestamp', '')}-{log.get('message', '')}'",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "code": "if log_key not in seen_logs: ...",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "code": "seen_logs.add(log_key)",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "code": "message = log.get('message', '')",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "code": "if message: ...",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "code": "logger.debug(f'[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}')",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "status = status_data.get('status')",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "code": "if status == 'COMPLETED': ...",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "result_response = httpx.get(result_url, headers=headers)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "code": "result_response.raise_for_status()",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "code": "result_data = result_response.json()",
                                                    "children": []
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "code": "if 'video' not in result_data or not isinstance(result_data['video'], dict): ...",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "code": "raise ValueError('Invalid response format - missing video data')",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "code": "video_url = result_data['video'].get('url')",
                                                    "children": []
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "code": "if not video_url: ...",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "code": "raise ValueError('No video URL in response')",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "code": "return video_url",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "elif_clause",
                                            "code": "elif status == 'FAILED': ...",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "error_msg = status_data.get('error', 'No error details provided')",
                                                    "children": []
                                                },
                                                {
                                                    "type": "raise_statement",
                                                    "code": "raise RuntimeError(f'Video generation failed: {error_msg}')",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "elif_clause",
                                            "code": "elif status == 'IN_QUEUE': ...",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "code": "position = status_data.get('queue_position', 'unknown')",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "code": "logger.debug(f'[FAL Generation] Status: In queue, position: {position}')",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "elif_clause",
                                            "code": "elif status == 'IN_PROGRESS': ...",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "logger.debug('[FAL Generation] Status: Request is being processed...')",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "else_clause",
                                            "code": "else: ...",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "code": "logger.info(f'[FAL Generation] Status: Unknown status: {status}')",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "code": "wait_time = min(base_wait_time * (2**attempt), 60)",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "code": "time.sleep(wait_time)",
                                            "children": []
                                        },
                                        {
                                            "type": "augmented_assignment",
                                            "code": "attempt += 1",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "raise_statement",
                                    "code": "raise RuntimeError('Maximum polling attempts reached')",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except httpx.HTTPError as e: ...",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise RuntimeError(f'API request failed: {str(e)}')",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "code": "def run(self, input_data: Input, *, credentials: FalCredentials, **kwargs) -> BlockOutput:",
                    "children": [
                        {
                            "type": "try_statement",
                            "code": "try: ...",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "video_url = self.generate_video(input_data, credentials)",
                                    "children": []
                                },
                                {
                                    "type": "yield",
                                    "code": "yield 'video_url', video_url",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "code": "except Exception as e: ...",
                            "children": [
                                {
                                    "type": "assignment",
                                    "code": "error_message = str(e)",
                                    "children": []
                                },
                                {
                                    "type": "yield",
                                    "code": "yield 'error', error_message",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}