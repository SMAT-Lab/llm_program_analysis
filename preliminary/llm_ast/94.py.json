{
    "type": "module",
    "code": "",
    "children": [
        {
            "type": "future_import_statement",
            "code": "from __future__ import annotations",
            "children": []
        },
        {
            "type": "import_statement",
            "code": "import math",
            "children": []
        },
        {
            "type": "function_definition",
            "code": "def minimax(depth: int, node_index: int, is_max: bool, scores: list[int], height: float) -> int:",
            "children": [
                {
                    "type": "string",
                    "code": "\"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "code": "if depth < 0:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(\"Depth cannot be less than 0\")",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if len(scores) == 0:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "code": "raise ValueError(\"Scores cannot be empty\")",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if depth == height:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return scores[node_index]",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "code": "if is_max:",
                    "children": [
                        {
                            "type": "block",
                            "code": "",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "code": "return max(\n    minimax(depth + 1, node_index * 2, False, scores, height),\n    minimax(depth + 1, node_index * 2 + 1, False, scores, height)\n)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "max(...)",
                                            "children": [
                                                {
                                                    "type": "argument_list",
                                                    "code": "minimax(depth + 1, node_index * 2, False, scores, height), minimax(depth + 1, node_index * 2 + 1, False, scores, height)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "code": "minimax(depth + 1, node_index * 2, False, scores, height)",
                                                            "children": [
                                                                {
                                                                    "type": "argument_list",
                                                                    "code": "depth + 1, node_index * 2, False, scores, height",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "code": "minimax(depth + 1, node_index * 2 + 1, False, scores, height)",
                                                            "children": [
                                                                {
                                                                    "type": "argument_list",
                                                                    "code": "depth + 1, node_index * 2 + 1, False, scores, height",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "code": "return min(\n    minimax(depth + 1, node_index * 2, True, scores, height),\n    minimax(depth + 1, node_index * 2 + 1, True, scores, height)\n)",
                    "children": [
                        {
                            "type": "call",
                            "code": "min(...)",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "minimax(depth + 1, node_index * 2, True, scores, height), minimax(depth + 1, node_index * 2 + 1, True, scores, height)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "minimax(depth + 1, node_index * 2, True, scores, height)",
                                            "children": [
                                                {
                                                    "type": "argument_list",
                                                    "code": "depth + 1, node_index * 2, True, scores, height",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "call",
                                            "code": "minimax(depth + 1, node_index * 2 + 1, True, scores, height)",
                                            "children": [
                                                {
                                                    "type": "argument_list",
                                                    "code": "depth + 1, node_index * 2 + 1, True, scores, height",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "code": "def main() -> None:",
            "children": [
                {
                    "type": "assignment",
                    "code": "scores = [90, 23, 6, 33, 21, 65, 123, 34423]",
                    "children": [
                        {
                            "type": "list",
                            "code": "[90, 23, 6, 33, 21, 65, 123, 34423]",
                            "children": [
                                {
                                    "type": "integer",
                                    "code": "90",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "23",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "6",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "33",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "21",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "65",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "123",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "code": "34423",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "code": "height = math.log(len(scores), 2)",
                    "children": [
                        {
                            "type": "call",
                            "code": "math.log(len(scores), 2)",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "len(scores), 2",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "len(scores)",
                                            "children": [
                                                {
                                                    "type": "argument_list",
                                                    "code": "scores",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "integer",
                                            "code": "2",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "expression_statement",
                    "code": "print(\"Optimal value : \", end=\"\")",
                    "children": [
                        {
                            "type": "call",
                            "code": "print(\"Optimal value : \", end=\"\")",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "\"Optimal value : \", end=\"\"",
                                    "children": [
                                        {
                                            "type": "string",
                                            "code": "\"Optimal value : \"",
                                            "children": []
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "code": "end=\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "code": "\"\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "expression_statement",
                    "code": "print(minimax(0, 0, True, scores, height))",
                    "children": [
                        {
                            "type": "call",
                            "code": "print(minimax(0, 0, True, scores, height))",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "code": "minimax(0, 0, True, scores, height)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "code": "minimax(0, 0, True, scores, height)",
                                            "children": [
                                                {
                                                    "type": "argument_list",
                                                    "code": "0, 0, True, scores, height",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "code": "if __name__ == \"__main__\":",
            "children": [
                {
                    "type": "block",
                    "code": "",
                    "children": [
                        {
                            "type": "import_statement",
                            "code": "import doctest",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "code": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "argument_list",
                                            "code": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "code": "main()",
                            "children": [
                                {
                                    "type": "call",
                                    "code": "main()",
                                    "children": [
                                        {
                                            "type": "argument_list",
                                            "code": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}