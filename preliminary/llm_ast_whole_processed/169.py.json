{
    "type": "module",
    "start_token": 0,
    "end_token": 730,
    "label": "import re\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass CodeExtractionBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n\n    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        # List of supported programming languages with mapped aliases\n        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n\n        # Extract code for each language\n        for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n\n            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n\n        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text\n\n    def extract_code(self, text: str, language: str) -> str:\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"\n",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import re",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 1,
            "end_token": 1,
            "label": "re",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 4,
            "end_token": 17,
            "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 4,
                    "end_token": 9,
                    "label": "from backend.data.block",
                    "children": []
                },
                {
                    "type": "alias_import",
                    "start_token": 10,
                    "end_token": 17,
                    "label": "import Block, BlockCategory, BlockOutput, BlockSchema",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 11,
                            "end_token": 11,
                            "label": "Block",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 13,
                            "end_token": 13,
                            "label": "BlockCategory",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 15,
                            "end_token": 15,
                            "label": "BlockOutput",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 17,
                            "end_token": 17,
                            "label": "BlockSchema",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 19,
            "end_token": 26,
            "label": "from backend.data.model import SchemaField",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 19,
                    "end_token": 24,
                    "label": "from backend.data.model",
                    "children": []
                },
                {
                    "type": "alias_import",
                    "start_token": 25,
                    "end_token": 26,
                    "label": "import SchemaField",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 26,
                            "end_token": 26,
                            "label": "SchemaField",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 30,
            "end_token": 306,
            "label": "class CodeExtractionBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n\n    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 31,
                    "end_token": 31,
                    "label": "CodeExtractionBlock",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "start_token": 32,
                    "end_token": 34,
                    "label": "(Block)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 33,
                            "end_token": 33,
                            "label": "Block",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 35,
                    "end_token": 306,
                    "label": ":\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n\n    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,",
                    "children": [
                        {
                            "type": "class_definition",
                            "start_token": 37,
                            "end_token": 62,
                            "label": "class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 38,
                                    "end_token": 38,
                                    "label": "Input",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 39,
                                    "end_token": 41,
                                    "label": "(BlockSchema)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 40,
                                            "end_token": 40,
                                            "label": "BlockSchema",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 42,
                                    "end_token": 62,
                                    "label": ":\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 44,
                                            "end_token": 61,
                                            "label": "text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 44,
                                                    "end_token": 44,
                                                    "label": "text",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 46,
                                                    "end_token": 46,
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 48,
                                                    "end_token": 61,
                                                    "label": "SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 48,
                                                            "end_token": 48,
                                                            "label": "SchemaField",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 49,
                                                            "end_token": 61,
                                                            "label": "(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 51,
                                                                    "end_token": 54,
                                                                    "label": "description=\"Text containing code blocks to extract (e.g., AI response)\",",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 51,
                                                                            "end_token": 51,
                                                                            "label": "description",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 53,
                                                                            "end_token": 53,
                                                                            "label": "\"Text containing code blocks to extract (e.g., AI response)\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 56,
                                                                    "end_token": 59,
                                                                    "label": "placeholder=\"Enter text containing code blocks\",",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 56,
                                                                            "end_token": 56,
                                                                            "label": "placeholder",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 58,
                                                                            "end_token": 58,
                                                                            "label": "\"Enter text containing code blocks\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "class_definition",
                            "start_token": 64,
                            "end_token": 258,
                            "label": "class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 65,
                                    "end_token": 65,
                                    "label": "Output",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 66,
                                    "end_token": 68,
                                    "label": "(BlockSchema)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 67,
                                            "end_token": 67,
                                            "label": "BlockSchema",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 69,
                                    "end_token": 258,
                                    "label": ":\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 71,
                                            "end_token": 80,
                                            "label": "html: str = SchemaField(description=\"Extracted HTML code\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 71,
                                                    "end_token": 71,
                                                    "label": "html",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 73,
                                                    "end_token": 73,
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 75,
                                                    "end_token": 80,
                                                    "label": "SchemaField(description=\"Extracted HTML code\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 75,
                                                            "end_token": 75,
                                                            "label": "SchemaField",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 76,
                                                            "end_token": 80,
                                                            "label": "(description=\"Extracted HTML code\")",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 78,
                                                                    "end_token": 79,
                                                                    "label": "=\"Extracted HTML code\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 78,
                                                                            "end_token": 78,
                                                                            "label": "=",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 79,
                                                                            "end_token": 79,
                                                                            "label": "\"Extracted HTML code\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 82,
                                            "end_token": 91,
                                            "label": "css: str = SchemaField(description=\"Extracted CSS code\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 82,
                                                    "end_token": 82,
                                                    "label": "css",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 84,
                                                    "end_token": 84,
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 86,
                                                    "end_token": 91,
                                                    "label": "SchemaField(description=\"Extracted CSS code\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 86,
                                                            "end_token": 86,
                                                            "label": "SchemaField",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 87,
                                                            "end_token": 91,
                                                            "label": "(description=\"Extracted CSS code\")",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 89,
                                                                    "end_token": 90,
                                                                    "label": "=\"Extracted CSS code\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 89,
                                                                            "end_token": 89,
                                                                            "label": "=",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 90,
                                                                            "end_token": 90,
                                                                            "label": "\"Extracted CSS code\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 93,
                                            "end_token": 102,
                                            "label": "javascript: str = SchemaField(description=\"Extracted JavaScript code\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 93,
                                                    "end_token": 93,
                                                    "label": "javascript",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 95,
                                                    "end_token": 95,
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 97,
                                                    "end_token": 102,
                                                    "label": "SchemaField(description=\"Extracted JavaScript code\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 97,
                                                            "end_token": 97,
                                                            "label": "SchemaField",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 98,
                                                            "end_token": 102,
                                                            "label": "(description=\"Extracted JavaScript code\")",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 100,
                                                                    "end_token": 101,
                                                                    "label": "=\"Extracted JavaScript code\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 100,
                                                                            "end_token": 100,
                                                                            "label": "=",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 101,
                                                                            "end_token": 101,
                                                                            "label": "\"Extracted JavaScript code\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 104,
                                            "end_token": 113,
                                            "label": "python: str = SchemaField(description=\"Extracted Python code\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 104,
                                                    "end_token": 104,
                                                    "label": "python",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 106,
                                                    "end_token": 106,
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 108,
                                                    "end_token": 113,
                                                    "label": "SchemaField(description=\"Extracted Python code\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 108,
                                                            "end_token": 108,
                                                            "label": "SchemaField",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 109,
                                                            "end_token": 113,
                                                            "label": "(description=\"Extracted Python code\")",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 111,
                                                                    "end_token": 112,
                                                                    "label": "=\"Extracted Python code\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 111,
                                                                            "end_token": 111,
                                                                            "label": "=",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 112,
                                                                            "end_token": 112,
                                                                            "label": "\"Extracted Python code\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 115,
                                            "end_token": 124,
                                            "label": "sql: str = SchemaField(description=\"Extracted SQL code\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 115,
                                                    "end_token": 115,
                                                    "label": "sql",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 117,
                                                    "end_token": 117,
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 119,
                                                    "end_token": 124,
                                                    "label": "SchemaField(description=\"Extracted SQL code\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 119,
                                                            "end_token": 119,
                                                            "label": "SchemaField",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 120,
                                                            "end_token": 124,
                                                            "label": "(description=\"Extracted SQL code\")",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 122,
                                                                    "end_token": 123,
                                                                    "label": "=\"Extracted SQL code\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 122,
                                                                            "end_token": 122,
                                                                            "label": "=",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 123,
                                                                            "end_token": 123,
                                                                            "label": "\"Extracted SQL code\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 261,
                            "end_token": 347,
                            "label": "def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 262,
                                    "end_token": 262,
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 263,
                                    "end_token": 265,
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 264,
                                            "end_token": 264,
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 266,
                                    "end_token": 347,
                                    "label": ":\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "start_token": 268,
                                            "end_token": 347,
                                            "label": "super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 350,
                            "end_token": 729,
                            "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        # List of supported programming languages with mapped aliases\n        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n\n        # Extract code for each language\n        for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n\n            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n\n        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text\n\n    def extract_code(self, text: str, language: str) -> str:\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 351,
                                    "end_token": 351,
                                    "label": "run",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 352,
                                    "end_token": 362,
                                    "label": "(self, input_data: Input, **kwargs)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 353,
                                            "end_token": 353,
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 355,
                                            "end_token": 357,
                                            "label": "input_data: Input",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 363,
                                    "end_token": 729,
                                    "label": "-> BlockOutput:\n        # List of supported programming languages with mapped aliases\n        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n\n        # Extract code for each language\n        for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n\n            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n\n        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text\n\n    def extract_code(self, text: str, language: str) -> str:\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
                                    "children": [
                                        {
                                            "type": "comment",
                                            "start_token": 368,
                                            "end_token": 368,
                                            "label": "#",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 378,
                                            "end_token": 518,
                                            "label": "language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 379,
                                                    "end_token": 379,
                                                    "label": "=",
                                                    "children": []
                                                },
                                                {
                                                    "type": "dictionary",
                                                    "start_token": 380,
                                                    "end_token": 518,
                                                    "label": "{\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "start_token": 382,
                                                            "end_token": 389,
                                                            "label": "\"html\": [\"html\", \"htm\"],",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 382,
                                                                    "end_token": 382,
                                                                    "label": "\"html\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 385,
                                                                    "end_token": 385,
                                                                    "label": "\"html\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 391,
                                                            "end_token": 395,
                                                            "label": "\"css\": [\"css\"]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 391,
                                                                    "end_token": 391,
                                                                    "label": "\"css\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 394,
                                                                    "end_token": 394,
                                                                    "label": "\"css\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 399,
                                                            "end_token": 404,
                                                            "label": ": [\"javascript\", \"js\"]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 399,
                                                                    "end_token": 399,
                                                                    "label": ":",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 403,
                                                                    "end_token": 403,
                                                                    "label": "\"js\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "start_token": 528,
                                            "end_token": 571,
                                            "label": "for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 529,
                                                    "end_token": 533,
                                                    "label": "canonical_name, aliases in language_aliases",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 534,
                                                    "end_token": 571,
                                                    "label": ".items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 538,
                                                    "end_token": 571,
                                                    "label": ":\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 540,
                                                            "end_token": 562,
                                                            "label": "code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 540,
                                                                    "end_token": 553,
                                                                    "label": "code = \"\"\n            # Try each alias for the language\n            for alias",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 559,
                                                                    "end_token": 562,
                                                                    "label": "= self.extract_code",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 588,
                                            "end_token": 597,
                                            "label": "if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n\n        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n        if remaining_text:  # Only yield if there's",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 589,
                                                    "end_token": 589,
                                                    "label": "code",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 590,
                                                    "end_token": 597,
                                                    "label": ":  # Only yield if there's actual code content\n                yield canonical_name, code\n\n        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n        if remaining_text:  # Only yield if there's",
                                                    "children": [
                                                        {
                                                            "type": "yield",
                                                            "start_token": 601,
                                                            "end_token": 604,
                                                            "label": "yield \"remaining_text\", remaining_text",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 607,
                            "end_token": 729,
                            "label": "def extract_code(self, text: str, language: str) -> str:\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 608,
                                    "end_token": 608,
                                    "label": "extract_code",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 609,
                                    "end_token": 619,
                                    "label": "(self, text: str, language: str)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 610,
                                            "end_token": 616,
                                            "label": "self, text: str, language",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 617,
                                            "end_token": 619,
                                            "label": ": str)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 620,
                                    "end_token": 729,
                                    "label": "-> str:\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"",
                                    "children": [
                                        {
                                            "type": "comment",
                                            "start_token": 625,
                                            "end_token": 625,
                                            "label": "#",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 635,
                                            "end_token": 640,
                                            "label": "language = re.escape(",
                                            "children": []
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 644,
                                            "end_token": 644,
                                            "label": "#",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}