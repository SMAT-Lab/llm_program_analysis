{
    "type": "module",
    "start_token": 0,
    "end_token": 487,
    "label": "import io\nimport logging\nfrom enum import Enum\n\nimport replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.graph import Graph\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\n\nclass ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"\n\n\nclass ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"\n\n\nasync def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import io",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 4,
            "label": "import logging",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 6,
            "end_token": 9,
            "label": "from enum import Enum",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 12,
            "end_token": 13,
            "label": "import replicate",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 15,
            "end_token": 18,
            "label": "import replicate.exceptions",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 20,
            "end_token": 21,
            "label": "import requests",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 23,
            "end_token": 28,
            "label": "from replicate.helpers import FileOutput",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 31,
            "end_token": 38,
            "label": "from backend.data.graph import Graph",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 40,
            "end_token": 47,
            "label": "from backend.util.settings import Settings",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 50,
            "end_token": 57,
            "label": "logger = logging.getLogger(__name__)",
            "children": [
                {
                    "type": "attribute",
                    "start_token": 52,
                    "end_token": 54,
                    "label": "logging.getLogger",
                    "children": []
                },
                {
                    "type": "call",
                    "start_token": 54,
                    "end_token": 57,
                    "label": "getLogger(__name__)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 56,
                            "end_token": 56,
                            "label": "__name__",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 61,
            "end_token": 73,
            "label": "class ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"\n",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 63,
                    "end_token": 67,
                    "label": "(str, Enum)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 64,
                            "end_token": 64,
                            "label": "str",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 66,
                            "end_token": 66,
                            "label": "Enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "start_token": 70,
                    "end_token": 72,
                    "label": "LANDSCAPE = \"1024x768\"",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 72,
                            "end_token": 72,
                            "label": "\"1024x768\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 76,
            "end_token": 88,
            "label": "class ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"\n",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 78,
                    "end_token": 82,
                    "label": "(str, Enum)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 79,
                            "end_token": 79,
                            "label": "str",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 81,
                            "end_token": 81,
                            "label": "Enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "start_token": 85,
                    "end_token": 87,
                    "label": "DIGITAL_ART = \"digital art\"",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 87,
                            "end_token": 87,
                            "label": "\"digital art\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 91,
            "end_token": 487,
            "label": "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 93,
                    "end_token": 98,
                    "label": "generate_agent_image(agent: Graph)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 95,
                            "end_token": 97,
                            "label": "agent: Graph",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 95,
                                    "end_token": 95,
                                    "label": "agent",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 97,
                                    "end_token": 97,
                                    "label": "Graph",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 100,
                    "end_token": 103,
                    "label": "> io.BytesIO",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 104,
                    "end_token": 487,
                    "label": ":\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 106,
                            "end_token": 108,
                            "label": "\"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "try_statement",
                            "start_token": 110,
                            "end_token": 488,
                            "label": "try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")\n",
                            "children": [
                                {
                                    "type": "block",
                                    "start_token": 112,
                                    "end_token": 421,
                                    "label": "\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 113,
                                            "end_token": 117,
                                            "label": "settings = Settings()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 115,
                                                    "end_token": 117,
                                                    "label": "Settings()",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 120,
                                            "end_token": 133,
                                            "label": "if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")",
                                            "children": [
                                                {
                                                    "type": "boolean_operator",
                                                    "start_token": 121,
                                                    "end_token": 126,
                                                    "label": "not settings.secrets.replicate_api_key",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 128,
                                                    "end_token": 133,
                                                    "label": "\n            raise ValueError(\"Missing Replicate API key in settings\")",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 129,
                                                            "end_token": 133,
                                                            "label": "raise ValueError(\"Missing Replicate API key in settings\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 132,
                                                                    "end_token": 132,
                                                                    "label": "\"Missing Replicate API key in settings\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 143,
                                            "end_token": 146,
                                            "label": "prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
                                            "children": [
                                                {
                                                    "type": "f_string",
                                                    "start_token": 146,
                                                    "end_token": 146,
                                                    "label": "\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 155,
                                            "end_token": 168,
                                            "label": "client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 157,
                                                    "end_token": 168,
                                                    "label": "replicate.Client(api_token=settings.secrets.replicate_api_key)",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "start_token": 161,
                                                            "end_token": 167,
                                                            "label": "api_token=settings.secrets.replicate_api_key",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 163,
                                                                    "end_token": 167,
                                                                    "label": "settings.secrets.replicate_api_key",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 175,
                                            "end_token": 231,
                                            "label": "input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }",
                                            "children": [
                                                {
                                                    "type": "dictionary",
                                                    "start_token": 177,
                                                    "end_token": 231,
                                                    "label": "{\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "start_token": 179,
                                                            "end_token": 181,
                                                            "label": "\"prompt\": prompt",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 179,
                                                                    "end_token": 179,
                                                                    "label": "\"prompt\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 181,
                                                                    "end_token": 181,
                                                                    "label": "prompt",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 184,
                                                            "end_token": 186,
                                                            "label": "\"width\": 1024",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 189,
                                                            "end_token": 191,
                                                            "label": "\"height\": 768",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 194,
                                                            "end_token": 196,
                                                            "label": "\"aspect_ratio\": \"4:3\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 199,
                                                            "end_token": 201,
                                                            "label": "\"output_format\": \"jpg\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 204,
                                                            "end_token": 206,
                                                            "label": "\"output_quality\": 90",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 209,
                                                            "end_token": 211,
                                                            "label": "\"num_inference_steps\": 30",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 214,
                                                            "end_token": 219,
                                                            "label": "\"guidance\": 3.5,",
                                                            "children": [
                                                                {
                                                                    "type": "float",
                                                                    "start_token": 217,
                                                                    "end_token": 219,
                                                                    "label": ".5,",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 221,
                                                            "end_token": 223,
                                                            "label": "\"negative_prompt\": \"blurry, low quality, distorted, deformed\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 226,
                                                            "end_token": 228,
                                                            "label": "\"disable_safety_checker\": True",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "try_statement",
                                            "start_token": 234,
                                            "end_token": 429,
                                            "label": "try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 236,
                                                    "end_token": 421,
                                                    "label": "\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 241,
                                                            "end_token": 252,
                                                            "label": "output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 243,
                                                                    "end_token": 252,
                                                                    "label": "client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 281,
                                                            "end_token": 314,
                                                            "label": "if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "start_token": 282,
                                                                    "end_token": 290,
                                                                    "label": "isinstance(output, list) and output:",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 292,
                                                                    "end_token": 314,
                                                                    "label": "if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "start_token": 292,
                                                                            "end_token": 314,
                                                                            "label": "if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 293,
                                                                                    "end_token": 301,
                                                                                    "label": "isinstance(output[0], FileOutput)",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "start_token": 303,
                                                                                    "end_token": 314,
                                                                                    "label": "\n                    image_bytes = output[0].read()\n",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "start_token": 304,
                                                                                            "end_token": 312,
                                                                                            "label": "image_bytes = output[0].read(",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "start_token": 310,
                                                                                                    "end_token": 312,
                                                                                                    "label": ".read(",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 315,
                                                            "end_token": 359,
                                                            "label": "else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "start_token": 317,
                                                                    "end_token": 326,
                                                                    "label": "\n                    # If it's a URL string,",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 318,
                                                                    "end_token": 359,
                                                                    "label": "# If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 339,
                                                                            "end_token": 345,
                                                                            "label": "response = requests.get(result_url",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 339,
                                                                                    "end_token": 345,
                                                                                    "label": "response = requests.get(result_url",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 348,
                                                                            "end_token": 352,
                                                                            "label": "response.raise_for_status()",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 354,
                                                                            "end_token": 358,
                                                                            "label": "image_bytes = response.content",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 356,
                                                                                    "end_token": 358,
                                                                                    "label": "response.content",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 360,
                                                            "end_token": 411,
                                                            "label": "elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "start_token": 361,
                                                                    "end_token": 368,
                                                                    "label": "isinstance(output, FileOutput):\n",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 369,
                                                                    "end_token": 411,
                                                                    "label": "image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 369,
                                                                            "end_token": 375,
                                                                            "label": "image_bytes = output.read()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 373,
                                                                                    "end_token": 375,
                                                                                    "label": "read()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 377,
                                                            "end_token": 411,
                                                            "label": "elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "start_token": 378,
                                                                    "end_token": 382,
                                                                    "label": "isinstance(output, str",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 383,
                                                                    "end_token": 411,
                                                                    "label": "):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 392,
                                                                            "end_token": 398,
                                                                            "label": "response = requests.get(output",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 396,
                                                                                    "end_token": 398,
                                                                                    "label": "get(output",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 401,
                                                                            "end_token": 405,
                                                                            "label": "response.raise_for_status()",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 407,
                                                                            "end_token": 411,
                                                                            "label": "image_bytes = response.content",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 409,
                                                                                    "end_token": 411,
                                                                                    "label": "response.content",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 413,
                                                            "end_token": 420,
                                                            "label": "else:\n                raise RuntimeError(\"Unexpected output format from the model.\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 419,
                                                                    "end_token": 419,
                                                                    "label": "\"Unexpected output format from the model.\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "start_token": 423,
                                                    "end_token": 429,
                                                    "label": "return io.BytesIO(image_bytes)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 425,
                                                            "end_token": 429,
                                                            "label": ".BytesIO(image_bytes)",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 432,
                                    "end_token": 466,
                                    "label": "except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                                    "children": [
                                        {
                                            "type": "as_pattern",
                                            "start_token": 438,
                                            "end_token": 439,
                                            "label": "as e",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 439,
                                                    "end_token": 439,
                                                    "label": "e",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 442,
                                            "end_token": 457,
                                            "label": "if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 444,
                                                    "end_token": 448,
                                                    "label": ".status == 401",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 450,
                                                    "end_token": 457,
                                                    "label": "\n                raise RuntimeError(\"Invalid Replicate API token\") from e",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 451,
                                                            "end_token": 457,
                                                            "label": "raise RuntimeError(\"Invalid Replicate API token\") from e",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 454,
                                                                    "end_token": 454,
                                                                    "label": "\"Invalid Replicate API token\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "as_pattern_target",
                                                                    "start_token": 456,
                                                                    "end_token": 456,
                                                                    "label": "from",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "raise_statement",
                                            "start_token": 459,
                                            "end_token": 466,
                                            "label": "raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                                            "children": [
                                                {
                                                    "type": "f_string",
                                                    "start_token": 462,
                                                    "end_token": 462,
                                                    "label": "f",
                                                    "children": []
                                                },
                                                {
                                                    "type": "as_pattern_target",
                                                    "start_token": 465,
                                                    "end_token": 465,
                                                    "label": "from",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "start_token": 469,
                            "end_token": 487,
                            "label": "except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                            "children": [
                                {
                                    "type": "as_pattern",
                                    "start_token": 471,
                                    "end_token": 472,
                                    "label": "as e",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 472,
                                            "end_token": 472,
                                            "label": "e",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 474,
                                    "end_token": 487,
                                    "label": "\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 475,
                                            "end_token": 480,
                                            "label": "logger.exception(\"Failed to generate agent image\")",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "start_token": 475,
                                                    "end_token": 477,
                                                    "label": "logger.exception",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string",
                                                    "start_token": 479,
                                                    "end_token": 479,
                                                    "label": "\"Failed to generate agent image\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "raise_statement",
                                            "start_token": 482,
                                            "end_token": 487,
                                            "label": "raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                                            "children": [
                                                {
                                                    "type": "f_string",
                                                    "start_token": 485,
                                                    "end_token": 485,
                                                    "label": "f",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}