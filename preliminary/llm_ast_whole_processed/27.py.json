{
    "type": "module",
    "start_token": 0,
    "end_token": 1011,
    "label": "from typing import cast\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)\n\n\n@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)\n\n\n@pytest.fixture\ndef mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n",
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 3,
            "label": "from typing import cast",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "typing",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "cast",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 5,
            "end_token": 10,
            "label": "from unittest.mock import AsyncMock",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 6,
                    "end_token": 8,
                    "label": "unittest.mock",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 10,
                    "end_token": 10,
                    "label": "AsyncMock",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 13,
            "end_token": 14,
            "label": "import pytest",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 14,
                    "end_token": 14,
                    "label": "pytest",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 16,
            "end_token": 21,
            "label": "from fastapi import WebSocket, WebSocketDisconnect",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 17,
                    "end_token": 17,
                    "label": "fastapi",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 19,
                    "end_token": 21,
                    "label": "WebSocket, WebSocketDisconnect",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 24,
            "end_token": 31,
            "label": "from backend.server.conn_manager import ConnectionManager",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 25,
                    "end_token": 29,
                    "label": "backend.server.conn_manager",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 31,
                    "end_token": 31,
                    "label": "ConnectionManager",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 33,
            "end_token": 57,
            "label": "from backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 34,
                    "end_token": 38,
                    "label": "backend.server.ws_api",
                    "children": []
                },
                {
                    "type": "expression_list",
                    "start_token": 40,
                    "end_token": 56,
                    "label": "(\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 42,
                            "end_token": 42,
                            "label": "Methods",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 45,
                            "end_token": 45,
                            "label": "WsMessage",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 48,
                            "end_token": 48,
                            "label": "handle_subscribe",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 51,
                            "end_token": 51,
                            "label": "handle_unsubscribe",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 54,
                            "end_token": 54,
                            "label": "websocket_router",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 61,
            "end_token": 82,
            "label": "@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 61,
                    "end_token": 64,
                    "label": "@pytest.fixture",
                    "children": [
                        {
                            "type": "dotted_name",
                            "start_token": 62,
                            "end_token": 63,
                            "label": "pytest.",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 66,
                    "end_token": 82,
                    "label": "def mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 66,
                            "end_token": 66,
                            "label": "def",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 68,
                            "end_token": 69,
                            "label": "()",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 72,
                            "end_token": 72,
                            "label": "AsyncMock",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 72,
                                    "end_token": 72,
                                    "label": "AsyncMock",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 74,
                            "end_token": 82,
                            "label": "\n    return AsyncMock(spec=WebSocket)\n",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "start_token": 75,
                                    "end_token": 81,
                                    "label": "return AsyncMock(spec=WebSocket)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 76,
                                            "end_token": 81,
                                            "label": "AsyncMock(spec=WebSocket)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 76,
                                                    "end_token": 76,
                                                    "label": "AsyncMock",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 78,
                                                    "end_token": 81,
                                                    "label": "spec=WebSocket)",
                                                    "children": [
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 78,
                                                            "end_token": 81,
                                                            "label": "spec=WebSocket)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 79,
                                                                    "end_token": 79,
                                                                    "label": "=",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 81,
                                                                    "end_token": 81,
                                                                    "label": ")",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 85,
            "end_token": 106,
            "label": "@pytest.fixture\ndef mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 85,
                    "end_token": 88,
                    "label": "@pytest.fixture",
                    "children": [
                        {
                            "type": "dotted_name",
                            "start_token": 86,
                            "end_token": 87,
                            "label": "pytest.",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 90,
                    "end_token": 106,
                    "label": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 90,
                            "end_token": 90,
                            "label": "def",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 92,
                            "end_token": 93,
                            "label": "()",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 96,
                            "end_token": 96,
                            "label": "AsyncMock",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 96,
                                    "end_token": 96,
                                    "label": "AsyncMock",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 98,
                            "end_token": 106,
                            "label": "\n    return AsyncMock(spec=ConnectionManager)\n",
                            "children": [
                                {
                                    "type": "return_statement",
                                    "start_token": 99,
                                    "end_token": 105,
                                    "label": "return AsyncMock(spec=ConnectionManager)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 100,
                                            "end_token": 105,
                                            "label": "AsyncMock(spec=ConnectionManager)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 100,
                                                    "end_token": 100,
                                                    "label": "AsyncMock",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 102,
                                                    "end_token": 105,
                                                    "label": "spec=ConnectionManager)",
                                                    "children": [
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 102,
                                                            "end_token": 105,
                                                            "label": "spec=ConnectionManager)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 103,
                                                                    "end_token": 103,
                                                                    "label": "=",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 105,
                                                                    "end_token": 105,
                                                                    "label": ")",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 109,
            "end_token": 262,
            "label": "@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 109,
                    "end_token": 114,
                    "label": "@pytest.mark.asyncio",
                    "children": [
                        {
                            "type": "dotted_name",
                            "start_token": 110,
                            "end_token": 113,
                            "label": "pytest.mark.",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 116,
                    "end_token": 262,
                    "label": "async def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 117,
                            "end_token": 117,
                            "label": "def",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 119,
                            "end_token": 128,
                            "label": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 132,
                            "end_token": 132,
                            "label": "None",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 134,
                            "end_token": 262,
                            "label": "\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 265,
            "end_token": 553,
            "label": "@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 265,
                    "end_token": 270,
                    "label": "@pytest.mark.asyncio",
                    "children": [
                        {
                            "type": "dotted_name",
                            "start_token": 266,
                            "end_token": 269,
                            "label": "pytest.mark.",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 272,
                    "end_token": 553,
                    "label": "async def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 273,
                            "end_token": 273,
                            "label": "def",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 275,
                            "end_token": 284,
                            "label": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 288,
                            "end_token": 288,
                            "label": "None",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 290,
                            "end_token": 553,
                            "label": "\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 556,
            "end_token": 782,
            "label": "@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 556,
                    "end_token": 561,
                    "label": "@pytest.mark.asyncio",
                    "children": [
                        {
                            "type": "dotted_name",
                            "start_token": 557,
                            "end_token": 560,
                            "label": "pytest.mark.",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 563,
                    "end_token": 782,
                    "label": "async def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 564,
                            "end_token": 564,
                            "label": "def",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 566,
                            "end_token": 575,
                            "label": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 579,
                            "end_token": 579,
                            "label": "None",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 581,
                            "end_token": 782,
                            "label": "\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 785,
            "end_token": 1011,
            "label": "@pytest.mark.asyncio\nasync def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 785,
                    "end_token": 790,
                    "label": "@pytest.mark.asyncio",
                    "children": [
                        {
                            "type": "dotted_name",
                            "start_token": 786,
                            "end_token": 789,
                            "label": "pytest.mark.",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 792,
                    "end_token": 1011,
                    "label": "async def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 793,
                            "end_token": 793,
                            "label": "def",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 795,
                            "end_token": 804,
                            "label": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 808,
                            "end_token": 808,
                            "label": "None",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 810,
                            "end_token": 1011,
                            "label": "\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}