{
    "type": "module",
    "start_token": 0,
    "end_token": 674,
    "label": "import time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\n\nimport feedparser\nimport pydantic\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]\n\n\nclass ReadRSSFeedBlock(Block):\n    class Input(BlockSchema):\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )\n\n    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )\n\n    @staticmethod\n    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n        while keep_going:\n            keep_going = input_data.run_continuously\n\n            feed = self.parse_feed(input_data.rss_url)\n\n            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n\n            time.sleep(input_data.polling_rate)\n",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import time",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 11,
            "label": "from datetime import datetime, timedelta, timezone\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 12,
            "end_token": 16,
            "label": "from typing import Any\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 18,
            "end_token": 19,
            "label": "import feedparser",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 21,
            "end_token": 22,
            "label": "import pydantic",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 25,
            "end_token": 39,
            "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 40,
            "end_token": 48,
            "label": "from backend.data.model import SchemaField\n",
            "children": []
        },
        {
            "type": "class_definition",
            "start_token": 51,
            "end_token": 86,
            "label": "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]\n",
            "children": [
                {
                    "type": "attribute",
                    "start_token": 60,
                    "end_token": 62,
                    "label": "title: str",
                    "children": []
                },
                {
                    "type": "attribute",
                    "start_token": 64,
                    "end_token": 66,
                    "label": "link: str",
                    "children": []
                },
                {
                    "type": "attribute",
                    "start_token": 68,
                    "end_token": 70,
                    "label": "description: str",
                    "children": []
                },
                {
                    "type": "attribute",
                    "start_token": 72,
                    "end_token": 74,
                    "label": "pub_date: datetime",
                    "children": []
                },
                {
                    "type": "attribute",
                    "start_token": 76,
                    "end_token": 78,
                    "label": "author: str",
                    "children": []
                },
                {
                    "type": "attribute",
                    "start_token": 80,
                    "end_token": 85,
                    "label": "categories: list[str]",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 89,
            "end_token": 663,
            "label": "class ReadRSSFeedBlock(Block):\n    class Input(BlockSchema):\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )\n\n    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )\n\n    @staticmethod\n    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n        while keep_going:\n            keep_going = input_data.run_continuously\n\n            feed = self.parse_feed(input_data.rss_url)\n\n            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )",
            "children": [
                {
                    "type": "class_definition",
                    "start_token": 96,
                    "end_token": 182,
                    "label": "class Input(BlockSchema):\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )",
                    "children": [
                        {
                            "type": "default_parameter",
                            "start_token": 103,
                            "end_token": 120,
                            "label": "rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )",
                            "children": []
                        },
                        {
                            "type": "default_parameter",
                            "start_token": 122,
                            "end_token": 144,
                            "label": "time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )",
                            "children": []
                        },
                        {
                            "type": "default_parameter",
                            "start_token": 146,
                            "end_token": 163,
                            "label": "polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )",
                            "children": []
                        },
                        {
                            "type": "default_parameter",
                            "start_token": 165,
                            "end_token": 182,
                            "label": "run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "start_token": 185,
                    "end_token": 201,
                    "label": "class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")",
                    "children": [
                        {
                            "type": "default_parameter",
                            "start_token": 192,
                            "end_token": 201,
                            "label": "entry: RSSEntry = SchemaField(description=\"The RSS item\")",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 204,
                    "end_token": 446,
                    "label": "def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )\n\n",
                    "children": [
                        {
                            "type": "call",
                            "start_token": 211,
                            "end_token": 444,
                            "label": "super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )",
                            "children": [
                                {
                                    "type": "argument_list",
                                    "start_token": 218,
                                    "end_token": 276,
                                    "label": "id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            }",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 279,
                                    "end_token": 350,
                                    "label": "test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ]",
                                    "children": []
                                },
                                {
                                    "type": "dictionary",
                                    "start_token": 353,
                                    "end_token": 437,
                                    "label": "test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 447,
                    "end_token": 474,
                    "label": "@staticmethod\n    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  #",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 447,
                            "end_token": 448,
                            "label": "@staticmethod",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 450,
                            "end_token": 474,
                            "label": "def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  #",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 480,
                    "end_token": 674,
                    "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n        while keep_going:\n            keep_going = input_data.run_continuously\n\n            feed = self.parse_feed(input_data.rss_url)\n\n            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n\n            time.sleep(input_data.polling_rate)\n",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 498,
                            "end_token": 500,
                            "label": "keep_going = True",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 502,
                            "end_token": 522,
                            "label": "start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )",
                            "children": []
                        },
                        {
                            "type": "while_statement",
                            "start_token": 524,
                            "end_token": 663,
                            "label": "while keep_going:\n            keep_going = input_data.run_continuously\n\n            feed = self.parse_feed(input_data.rss_url)\n\n            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )",
                            "children": [
                                {
                                    "type": "for_statement",
                                    "start_token": 547,
                                    "end_token": 664,
                                    "label": "for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "start_token": 578,
                                            "end_token": 662,
                                            "label": "if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n",
                                            "children": [
                                                {
                                                    "type": "yield",
                                                    "start_token": 584,
                                                    "end_token": 663,
                                                    "label": "yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 590,
                                                            "end_token": 663,
                                                            "label": "RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "call",
                                    "start_token": 666,
                                    "end_token": 673,
                                    "label": "time.sleep(input_data.polling_rate)",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}