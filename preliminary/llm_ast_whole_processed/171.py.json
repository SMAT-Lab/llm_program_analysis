{
    "type": "module",
    "start_token": 0,
    "end_token": 1599,
    "label": "",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 2,
            "label": "import asyncio\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 5,
            "label": "import builtins\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 6,
            "end_token": 8,
            "label": "import logging\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 9,
            "end_token": 11,
            "label": "import os\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 12,
            "end_token": 14,
            "label": "import threading\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 15,
            "end_token": 17,
            "label": "import time\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 18,
            "end_token": 20,
            "label": "import typing\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 21,
            "end_token": 27,
            "label": "from abc import ABC, abstractmethod\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 28,
            "end_token": 32,
            "label": "from enum import Enum\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 33,
            "end_token": 39,
            "label": "from types import NoneType, UnionType\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 40,
            "end_token": 96,
            "label": "from typing import (\n    Annotated,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    FrozenSet,\n    Iterator,\n    List,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    get_args,\n    get_origin,\n)",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 99,
            "end_token": 103,
            "label": "import Pyro5.api\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 104,
            "end_token": 108,
            "label": "from pydantic import BaseModel\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 109,
            "end_token": 115,
            "label": "from Pyro5 import api as pyro\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 116,
            "end_token": 122,
            "label": "from Pyro5 import config as pyro_config\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 124,
            "end_token": 132,
            "label": "from backend.data import db, redis\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 133,
            "end_token": 141,
            "label": "from backend.util.process import AppProcess\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 142,
            "end_token": 150,
            "label": "from backend.util.retry import conn_retry\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 151,
            "end_token": 161,
            "label": "from backend.util.settings import Config, Secrets\n",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 163,
            "end_token": 170,
            "label": "logger = logging.getLogger(__name__)",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 172,
            "end_token": 177,
            "label": "T = TypeVar(\"T\")",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 179,
            "end_token": 188,
            "label": "C = TypeVar(\"C\", bound=Callable)",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 191,
            "end_token": 195,
            "label": "config = Config()",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 197,
            "end_token": 202,
            "label": "pyro_host = config.pyro_host\n",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 203,
            "end_token": 214,
            "label": "pyro_config.MAX_RETRIES = config.pyro_client_comm_retry  # type: ignore\n",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 215,
            "end_token": 226,
            "label": "pyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout  # type: ignore\n",
            "children": []
        },
        {
            "type": "decorator",
            "start_token": 229,
            "end_token": 239,
            "label": "def expose(func: C) -> C:",
            "children": [
                {
                    "type": "function_definition",
                    "start_token": 229,
                    "end_token": 311,
                    "label": "def expose(func: C) -> C:\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 231,
                            "end_token": 235,
                            "label": "(func: C)",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 239,
                            "end_token": 311,
                            "label": ":\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore",
                            "children": [
                                {
                                    "type": "string",
                                    "start_token": 241,
                                    "end_token": 245,
                                    "label": "\"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"",
                                    "children": []
                                },
                                {
                                    "type": "decorated_definition",
                                    "start_token": 248,
                                    "end_token": 273,
                                    "label": "def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 258,
                                            "end_token": 273,
                                            "label": ":\n        try:\n            return func(*args, **kwargs)\n",
                                            "children": [
                                                {
                                                    "type": "try_statement",
                                                    "start_token": 260,
                                                    "end_token": 273,
                                                    "label": "try:\n            return func(*args, **kwargs)\n",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 262,
                                                            "end_token": 272,
                                                            "label": "\n            return func(*args, **kwargs)",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": 263,
                                                                    "end_token": 272,
                                                                    "label": "return func(*args, **kwargs)",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 274,
                                    "end_token": 293,
                                    "label": "except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 278,
                                            "end_token": 293,
                                            "label": ":\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 315,
            "end_token": 416,
            "label": "def register_pydantic_serializers(func: Callable):\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\ndef _make_custom_serializer",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 317,
                    "end_token": 321,
                    "label": "(func: Callable)",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 322,
                    "end_token": 416,
                    "label": ":\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\ndef _make_custom_serializer",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 324,
                            "end_token": 326,
                            "label": "\"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "start_token": 328,
                            "end_token": 412,
                            "label": "for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n",
                            "children": [
                                {
                                    "type": "block",
                                    "start_token": 340,
                                    "end_token": 412,
                                    "label": ":\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 475,
            "end_token": 472,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 477,
                    "end_token": 484,
                    "label": "(model: Type[BaseModel])",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 485,
                    "end_token": 472,
                    "label": "",
                    "children": [
                        {
                            "type": "def_statement",
                            "start_token": 487,
                            "end_token": 472,
                            "label": "",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 520,
            "end_token": 878,
            "label": "class AppService(AppProcess, ABC):\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 522,
                    "end_token": 526,
                    "label": "(AppProcess, ABC)",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 527,
                    "end_token": 878,
                    "label": ":\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n",
                    "children": []
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 1080,
            "end_token": 1089,
            "label": "AS = TypeVar(\"AS\", bound=AppService)",
            "children": []
        },
        {
            "type": "class_definition",
            "start_token": 1093,
            "end_token": 1295,
            "label": "class PyroClient:\n    proxy: Pyro5.api.Proxy\n\n\ndef close_service_client(client: AppService) -> None:\n    if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef get_service_client(service_type: Type[AS]) -> AS:\n    service_name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n",
            "children": []
        },
        {
            "type": "def_statement",
            "start_token": 1329,
            "end_token": 1598,
            "label": "def _pydantic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:\n    # Peel Annotated parameters\n    if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")\n",
            "children": []
        }
    ]
}