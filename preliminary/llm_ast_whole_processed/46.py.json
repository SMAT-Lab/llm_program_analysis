{
    "type": "module",
    "start_token": 0,
    "end_token": 713,
    "label": "from datetime import datetime\nfrom typing import Any, List\n\nfrom backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\nfrom .helpers import ContentSettings\n\n\nclass ExaFindSimilarBlock(Block):\n    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n\n        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n\n        # Add optional fields if they have values\n        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n\n        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n\n        # Add dates if they exist\n        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n",
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 3,
            "label": "from datetime import datetime",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 5,
            "end_token": 10,
            "label": "from typing import Any, List",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 13,
            "end_token": 33,
            "label": "from backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 35,
            "end_token": 48,
            "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 50,
            "end_token": 57,
            "label": "from backend.data.model import SchemaField",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 59,
            "end_token": 66,
            "label": "from backend.util.request import requests",
            "children": []
        },
        {
            "type": "relative_import",
            "start_token": 69,
            "end_token": 73,
            "label": "from .helpers import ContentSettings",
            "children": []
        },
        {
            "type": "class_definition",
            "start_token": 77,
            "end_token": 546,
            "label": "class ExaFindSimilarBlock(Block):\n    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n\n        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n\n        # Add optional fields if they have values\n        for input_field, api_field in optional_field_mapping.items():\n            value =",
            "children": [
                {
                    "type": "class_definition",
                    "start_token": 84,
                    "end_token": 328,
                    "label": "class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 91,
                            "end_token": 97,
                            "label": "credentials: ExaCredentialsInput = ExaCredentialsField()",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 99,
                            "end_token": 110,
                            "label": "url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 112,
                            "end_token": 134,
                            "label": "number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 136,
                            "end_token": 162,
                            "label": "include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 164,
                            "end_token": 190,
                            "label": "exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 192,
                            "end_token": 204,
                            "label": "start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 206,
                            "end_token": 218,
                            "label": "end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 220,
                            "end_token": 232,
                            "label": "start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 234,
                            "end_token": 246,
                            "label": "end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 248,
                            "end_token": 274,
                            "label": "include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 276,
                            "end_token": 302,
                            "label": "exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 304,
                            "end_token": 328,
                            "label": "contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "start_token": 331,
                    "end_token": 359,
                    "label": "class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 338,
                            "end_token": 359,
                            "label": "results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 362,
                    "end_token": 409,
                    "label": "def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )",
                    "children": [
                        {
                            "type": "call",
                            "start_token": 369,
                            "end_token": 409,
                            "label": "super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 376,
                                    "end_token": 378,
                                    "label": "id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 381,
                                    "end_token": 383,
                                    "label": "description=\"Finds similar links using Exa's findSimilar API\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 386,
                                    "end_token": 392,
                                    "label": "categories={BlockCategory.SEARCH}",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 395,
                                    "end_token": 400,
                                    "label": "input_schema=ExaFindSimilarBlock.Input,",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 402,
                                    "end_token": 407,
                                    "label": "output_schema=ExaFindSimilarBlock.Output,",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 412,
                    "end_token": 713,
                    "label": "def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n\n        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n\n        # Add optional fields if they have values\n        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n\n        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n\n        # Add dates if they exist\n        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 438,
                            "end_token": 440,
                            "label": "url = \"https://api.exa.ai/findSimilar\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 442,
                            "end_token": 462,
                            "label": "headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 465,
                            "end_token": 494,
                            "label": "payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 497,
                            "end_token": 521,
                            "label": "optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "start_token": 533,
                            "end_token": 571,
                            "label": "for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 545,
                                    "end_token": 547,
                                    "label": "value = getattr",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 565,
                                    "end_token": 570,
                                    "label": "payload[api_field] = value",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 573,
                            "end_token": 597,
                            "label": "date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "start_token": 607,
                            "end_token": 645,
                            "label": "for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 619,
                                    "end_token": 627,
                                    "label": "value = getattr(input_data, input_field, None",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 634,
                                    "end_token": 645,
                                    "label": "payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "try_statement",
                            "start_token": 647,
                            "end_token": 692,
                            "label": "try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 650,
                                    "end_token": 655,
                                    "label": "response = requests.post(",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 667,
                                    "end_token": 671,
                                    "label": "response.raise_for_status()",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 673,
                                    "end_token": 679,
                                    "label": "data = response.json()",
                                    "children": []
                                },
                                {
                                    "type": "yield",
                                    "start_token": 681,
                                    "end_token": 692,
                                    "label": "yield \"results\", data.get(\"results\", [])",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "except_clause",
                            "start_token": 694,
                            "end_token": 707,
                            "label": "except Exception as e:\n            yield \"error\", str(e)\n",
                            "children": [
                                {
                                    "type": "yield",
                                    "start_token": 700,
                                    "end_token": 706,
                                    "label": "yield \"error\", str(e)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "yield",
                            "start_token": 708,
                            "end_token": 712,
                            "label": "yield \"results\", []",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}