{
    "type": "module",
    "start_token": 0,
    "end_token": 263,
    "label": "import asyncio\n\nimport pytest\n\nfrom backend.util.retry import conn_retry\n\n\ndef test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"\n\n\n@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"\n",
    "children": [
        {
            "type": "block",
            "start_token": 0,
            "end_token": 263,
            "label": "import asyncio\n\nimport pytest\n\nfrom backend.util.retry import conn_retry\n\n\ndef test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"\n\n\n@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"\n",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "import asyncio",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "start_token": 4,
                    "end_token": 5,
                    "label": "import pytest",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 8,
                    "end_token": 15,
                    "label": "from backend.util.retry import conn_retry",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 19,
                    "end_token": 129,
                    "label": "def test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 20,
                            "end_token": 20,
                            "label": "test_conn_retry_sync_function",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 21,
                            "end_token": 22,
                            "label": "()",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 24,
                            "end_token": 129,
                            "label": "\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == \"Test error\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 25,
                                    "end_token": 27,
                                    "label": "retry_count = 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 25,
                                            "end_token": 25,
                                            "label": "retry_count",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "decorated_definition",
                                    "start_token": 30,
                                    "end_token": 92,
                                    "label": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()",
                                    "children": [
                                        {
                                            "type": "decorator",
                                            "start_token": 30,
                                            "end_token": 52,
                                            "label": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 31,
                                                    "end_token": 52,
                                                    "label": "conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "function_definition",
                                            "start_token": 54,
                                            "end_token": 92,
                                            "label": "def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 55,
                                                    "end_token": 55,
                                                    "label": "test_function",
                                                    "children": []
                                                },
                                                {
                                                    "type": "parameters",
                                                    "start_token": 56,
                                                    "end_token": 57,
                                                    "label": "()",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 59,
                                                    "end_token": 92,
                                                    "label": "\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = test_function()",
                                                    "children": [
                                                        {
                                                            "type": "nonlocal_statement",
                                                            "start_token": 60,
                                                            "end_token": 61,
                                                            "label": "nonlocal retry_count",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "augmented_assignment",
                                                            "start_token": 63,
                                                            "end_token": 66,
                                                            "label": "retry_count -= 1",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 68,
                                                            "end_token": 78,
                                                            "label": "if retry_count > 0:\n            raise ValueError(\"Test error\")",
                                                            "children": [
                                                                {
                                                                    "type": "if_clause",
                                                                    "start_token": 68,
                                                                    "end_token": 72,
                                                                    "label": "if retry_count > 0:",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 73,
                                                                    "end_token": 78,
                                                                    "label": "\n            raise ValueError(\"Test error\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": 74,
                                                                            "end_token": 78,
                                                                            "label": "raise ValueError(\"Test error\")",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 80,
                                                            "end_token": 81,
                                                            "label": "return \"Success\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 84,
                                    "end_token": 86,
                                    "label": "retry_count = 2",
                                    "children": []
                                },
                                {
                                    "type": "expression_statement",
                                    "start_token": 88,
                                    "end_token": 92,
                                    "label": "res = test_function()",
                                    "children": []
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 94,
                                    "end_token": 98,
                                    "label": "assert res == \"Success\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 101,
                                    "end_token": 103,
                                    "label": "retry_count = 100",
                                    "children": []
                                },
                                {
                                    "type": "with_statement",
                                    "start_token": 105,
                                    "end_token": 118,
                                    "label": "with pytest.raises(ValueError) as e:\n        test_function()",
                                    "children": [
                                        {
                                            "type": "with_clause",
                                            "start_token": 105,
                                            "end_token": 107,
                                            "label": "with pytest.",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 114,
                                            "end_token": 118,
                                            "label": ":\n        test_function()",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "start_token": 116,
                                                    "end_token": 118,
                                                    "label": "test_function()",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 120,
                                    "end_token": 129,
                                    "label": "assert str(e.value) == \"Test error\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 133,
                    "end_token": 262,
                    "label": "@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 133,
                            "end_token": 138,
                            "label": "@pytest.mark.asyncio",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 140,
                            "end_token": 262,
                            "label": "async def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 142,
                                    "end_token": 142,
                                    "label": "test_conn_retry_async_function",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 143,
                                    "end_token": 144,
                                    "label": "()",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 146,
                                    "end_token": 262,
                                    "label": "\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 147,
                                            "end_token": 149,
                                            "label": "retry_count = 0",
                                            "children": []
                                        },
                                        {
                                            "type": "decorated_definition",
                                            "start_token": 152,
                                            "end_token": 224,
                                            "label": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()",
                                            "children": [
                                                {
                                                    "type": "decorator",
                                                    "start_token": 152,
                                                    "end_token": 174,
                                                    "label": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "function_definition",
                                                    "start_token": 176,
                                                    "end_token": 224,
                                                    "label": "async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 178,
                                                            "end_token": 178,
                                                            "label": "test_function",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "parameters",
                                                            "start_token": 179,
                                                            "end_token": 180,
                                                            "label": "()",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 182,
                                                            "end_token": 224,
                                                            "label": "\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n        return \"Success\"\n\n    retry_count = 2\n    res = await test_function()",
                                                            "children": [
                                                                {
                                                                    "type": "nonlocal_statement",
                                                                    "start_token": 183,
                                                                    "end_token": 184,
                                                                    "label": "nonlocal retry_count",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "await",
                                                                    "start_token": 186,
                                                                    "end_token": 192,
                                                                    "label": "await asyncio.sleep(1)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 187,
                                                                            "end_token": 192,
                                                                            "label": "asyncio.sleep(1)",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "augmented_assignment",
                                                                    "start_token": 194,
                                                                    "end_token": 197,
                                                                    "label": "retry_count -= 1",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 199,
                                                                    "end_token": 209,
                                                                    "label": "if retry_count > 0:\n            raise ValueError(\"Test error\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_clause",
                                                                            "start_token": 199,
                                                                            "end_token": 203,
                                                                            "label": "if retry_count > 0:",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 204,
                                                                            "end_token": 209,
                                                                            "label": "\n            raise ValueError(\"Test error\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 205,
                                                                                    "end_token": 209,
                                                                                    "label": "raise ValueError(\"Test error\")",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": 211,
                                                                    "end_token": 212,
                                                                    "label": "return \"Success\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 215,
                                            "end_token": 217,
                                            "label": "retry_count = 2",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "start_token": 219,
                                            "end_token": 224,
                                            "label": "res = await test_function()",
                                            "children": []
                                        },
                                        {
                                            "type": "assert_statement",
                                            "start_token": 226,
                                            "end_token": 230,
                                            "label": "assert res == \"Success\"",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 233,
                                            "end_token": 235,
                                            "label": "retry_count = 100",
                                            "children": []
                                        },
                                        {
                                            "type": "with_statement",
                                            "start_token": 237,
                                            "end_token": 251,
                                            "label": "with pytest.raises(ValueError) as e:\n        await test_function()",
                                            "children": [
                                                {
                                                    "type": "with_clause",
                                                    "start_token": 237,
                                                    "end_token": 239,
                                                    "label": "with pytest.",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 245,
                                                    "end_token": 251,
                                                    "label": "e:\n        await test_function()",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "start_token": 248,
                                                            "end_token": 251,
                                                            "label": "await test_function()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assert_statement",
                                            "start_token": 253,
                                            "end_token": 262,
                                            "label": "assert str(e.value) == \"Test error\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}