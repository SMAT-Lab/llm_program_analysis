{
    "type": "module",
    "start_token": 0,
    "end_token": 129,
    "label": "def get_1s_count(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer using Brian Kernighan's way.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n    >>> get_1s_count(25)\n    3\n    >>> get_1s_count(37)\n    3\n    >>> get_1s_count(21)\n    3\n    >>> get_1s_count(58)\n    4\n    >>> get_1s_count(0)\n    0\n    >>> get_1s_count(256)\n    1\n    >>> get_1s_count(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(0.8)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(\"25\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    count = 0\n    while number:\n        # This way we arrive at next set bit (next 1) instead of looping\n        # through each bit and checking for 1s hence the\n        # loop won't run 32 times it will only run the number of `1` times\n        number &= number - 1\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "children": [
        {
            "type": "function_definition",
            "start_token": 0,
            "end_token": 110,
            "label": "def get_1s_count(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer using Brian Kernighan's way.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n    >>> get_1s_count(25)\n    3\n    >>> get_1s_count(37)\n    3\n    >>> get_1s_count(21)\n    3\n    >>> get_1s_count(58)\n    4\n    >>> get_1s_count(0)\n    0\n    >>> get_1s_count(256)\n    1\n    >>> get_1s_count(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(0.8)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(\"25\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    count = 0\n    while number:\n        # This way we arrive at next set bit (next 1) instead of looping\n        # through each bit and checking for 1s hence the\n        # loop won't run 32 times it will only run the number of `1` times\n        number &= number - 1\n        count += 1\n    return count\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "get_1s_count",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 2,
                    "end_token": 6,
                    "label": "(number: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 3,
                            "end_token": 5,
                            "label": "number: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 3,
                                    "end_token": 3,
                                    "label": "number",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 9,
                    "end_token": 9,
                    "label": "int",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 12,
                    "end_token": 16,
                    "label": "\"\"\"\n    Count the number of set bits in a 32 bit integer using Brian Kernighan's way.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n    >>> get_1s_count(25)\n    3\n    >>> get_1s_count(37)\n    3\n    >>> get_1s_count(21)\n    3\n    >>> get_1s_count(58)\n    4\n    >>> get_1s_count(0)\n    0\n    >>> get_1s_count(256)\n    1\n    >>> get_1s_count(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(0.8)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(\"25\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 18,
                    "end_token": 109,
                    "label": "if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    count = 0\n    while number:\n        # This way we arrive at next set bit (next 1) instead of looping\n        # through each bit and checking for 1s hence the\n        # loop won't run 32 times it will only run the number of `1` times\n        number &= number - 1\n        count += 1\n    return count",
                    "children": [
                        {
                            "type": "if_statement",
                            "start_token": 18,
                            "end_token": 36,
                            "label": "if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")",
                            "children": [
                                {
                                    "type": "if_clause",
                                    "start_token": 18,
                                    "end_token": 30,
                                    "label": "if not isinstance(number, int) or number < 0:",
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "start_token": 19,
                                            "end_token": 19,
                                            "label": "not",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 20,
                                            "end_token": 25,
                                            "label": "isinstance(number, int)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 20,
                                                    "end_token": 20,
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 21,
                                                    "end_token": 25,
                                                    "label": "(number, int)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 22,
                                                            "end_token": 22,
                                                            "label": "number",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "start_token": 24,
                                                            "end_token": 24,
                                                            "label": "int",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "boolean_operator",
                                            "start_token": 26,
                                            "end_token": 29,
                                            "label": "or number < 0",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 27,
                                                    "end_token": 27,
                                                    "label": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 28,
                                                    "end_token": 28,
                                                    "label": "<",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 29,
                                                    "end_token": 29,
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "raise_statement",
                                    "start_token": 32,
                                    "end_token": 36,
                                    "label": "raise ValueError(\"Input must be a non-negative integer\")",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 33,
                                            "end_token": 36,
                                            "label": "ValueError(\"Input must be a non-negative integer\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 33,
                                                    "end_token": 33,
                                                    "label": "ValueError",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 34,
                                                    "end_token": 36,
                                                    "label": "(\"Input must be a non-negative integer\")",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "start_token": 35,
                                                            "end_token": 35,
                                                            "label": "\"Input must be a non-negative integer\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 39,
                            "end_token": 41,
                            "label": "count = 0",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 39,
                                    "end_token": 39,
                                    "label": "count",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "start_token": 41,
                                    "end_token": 41,
                                    "label": "0",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "while_statement",
                            "start_token": 43,
                            "end_token": 107,
                            "label": "while number:\n        # This way we arrive at next set bit (next 1) instead of looping\n        # through each bit and checking for 1s hence the\n        # loop won't run 32 times it will only run the number of `1` times\n        number &= number - 1\n        count += 1\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 44,
                                    "end_token": 44,
                                    "label": "number",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 45,
                                    "end_token": 107,
                                    "label": ":\n        # This way we arrive at next set bit (next 1) instead of looping\n        # through each bit and checking for 1s hence the\n        # loop won't run 32 times it will only run the number of `1` times\n        number &= number - 1\n        count += 1\n",
                                    "children": [
                                        {
                                            "type": "comment",
                                            "start_token": 47,
                                            "end_token": 75,
                                            "label": "# This way we arrive at next set bit (next 1) instead of looping\n        # through each bit and checking for 1s hence the\n",
                                            "children": []
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 76,
                                            "end_token": 95,
                                            "label": "# loop won't run 32 times it will only run the number of `1` times\n",
                                            "children": []
                                        },
                                        {
                                            "type": "augmented_assignment",
                                            "start_token": 96,
                                            "end_token": 101,
                                            "label": "number &= number - 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 96,
                                                    "end_token": 96,
                                                    "label": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 98,
                                                    "end_token": 101,
                                                    "label": "= number - 1",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 99,
                                                            "end_token": 99,
                                                            "label": "number",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 101,
                                                            "end_token": 101,
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "augmented_assignment",
                                            "start_token": 103,
                                            "end_token": 106,
                                            "label": "count += 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 103,
                                                    "end_token": 103,
                                                    "label": "count",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 106,
                                                    "end_token": 106,
                                                    "label": "1",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 108,
                            "end_token": 109,
                            "label": "return count",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 109,
                                    "end_token": 109,
                                    "label": "count",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "start_token": 113,
            "end_token": 128,
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "children": [
                {
                    "type": "if_clause",
                    "start_token": 113,
                    "end_token": 118,
                    "label": "if __name__ == \"__main__\":",
                    "children": [
                        {
                            "type": "comparison_operator",
                            "start_token": 114,
                            "end_token": 117,
                            "label": "__name__ == \"__main__\"",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 114,
                                    "end_token": 114,
                                    "label": "__name__",
                                    "children": []
                                },
                                {
                                    "type": "string",
                                    "start_token": 117,
                                    "end_token": 117,
                                    "label": "\"__main__\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 119,
                    "end_token": 128,
                    "label": "\n    import doctest\n\n    doctest.testmod()",
                    "children": [
                        {
                            "type": "import_statement",
                            "start_token": 120,
                            "end_token": 121,
                            "label": "import doctest",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 121,
                                    "end_token": 121,
                                    "label": "doctest",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 124,
                            "end_token": 128,
                            "label": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 124,
                                    "end_token": 128,
                                    "label": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 124,
                                            "end_token": 126,
                                            "label": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 124,
                                                    "end_token": 124,
                                                    "label": "doctest",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 126,
                                                    "end_token": 126,
                                                    "label": "testmod",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 127,
                                            "end_token": 128,
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}