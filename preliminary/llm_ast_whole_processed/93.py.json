{
    "type": "module",
    "start_token": 0,
    "end_token": 293,
    "label": "",
    "children": [
        {
            "type": "comment",
            "start_token": 0,
            "end_token": 0,
            "label": "#",
            "children": []
        },
        {
            "type": "call",
            "start_token": 1,
            "end_token": 3,
            "label": "https://www.geeksforgeeks.org/solve-crossword-puzzle/\n\n\ndef is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n            return False\n    return True\n\n\ndef place_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n    for i, char in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char\n\n\ndef remove_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = \"\"\n        else:\n            puzzle[row][col + i] = \"\"\n\n\ndef solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n            if puzzle[row][col] == \"\":\n                for word in words:\n                    for vertical in [True, False]:\n                        if is_valid(puzzle, word, row, col, vertical):\n                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]\n\n    if solve_crossword(PUZZLE, WORDS):\n        print(\"Solution found:\")\n        for row in PUZZLE:\n            print(\" \".join(row))\n    else:\n        print(\"No solution found:\")\n",
            "children": [
                {
                    "type": "attribute",
                    "start_token": 1,
                    "end_token": 2,
                    "label": "https:",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "//www.geeksforgeeks.org/solve-crossword-puzzle/\n\n\ndef is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n            return False\n    return True\n\n\ndef place_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n    for i, char in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char\n\n\ndef remove_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = \"\"\n        else:\n            puzzle[row][col + i] = \"\"\n\n\ndef solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n            if puzzle[row][col] == \"\":\n                for word in words:\n                    for vertical in [True, False]:\n                        if is_valid(puzzle, word, row, col, vertical):\n                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]\n\n    if solve_crossword(PUZZLE, WORDS):\n        print(\"Solution found:\")\n        for row in PUZZLE:\n            print(\" \".join(row))\n    else:\n        print(\"No solution found:\")\n",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 4,
            "end_token": 78,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 5,
                    "end_token": 12,
                    "label": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 5,
                            "end_token": 5,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 6,
                            "end_token": 6,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 6,
                                    "end_token": 6,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 7,
                            "end_token": 7,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 7,
                                    "end_token": 7,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 8,
                            "end_token": 8,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 8,
                                    "end_token": 8,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 9,
                            "end_token": 9,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 9,
                                    "end_token": 9,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 13,
                    "end_token": 77,
                    "label": "",
                    "children": [
                        {
                            "type": "for_statement",
                            "start_token": 14,
                            "end_token": 21,
                            "label": "",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 14,
                                    "end_token": 14,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 15,
                                    "end_token": 15,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "for_in_clause",
                                    "start_token": 16,
                                    "end_token": 21,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 17,
                                            "end_token": 21,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "start_token": 17,
                                                    "end_token": 20,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "if_clause",
                                                            "start_token": 18,
                                                            "end_token": 19,
                                                            "label": "",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "start_token": 19,
                                                            "end_token": 19,
                                                            "label": "",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "start_token": 20,
                                                            "end_token": 20,
                                                            "label": "",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 22,
                            "end_token": 22,
                            "label": "",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 79,
            "end_token": 133,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 80,
                    "end_token": 86,
                    "label": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 80,
                            "end_token": 80,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 80,
                                    "end_token": 80,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 81,
                            "end_token": 81,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 81,
                                    "end_token": 81,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 82,
                            "end_token": 82,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 82,
                                    "end_token": 82,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 83,
                            "end_token": 83,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 83,
                                    "end_token": 83,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 87,
                    "end_token": 132,
                    "label": "",
                    "children": [
                        {
                            "type": "for_statement",
                            "start_token": 88,
                            "end_token": 95,
                            "label": "",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 88,
                                    "end_token": 88,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 89,
                                    "end_token": 89,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "for_in_clause",
                                    "start_token": 90,
                                    "end_token": 95,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 91,
                                            "end_token": 95,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 92,
                                                    "end_token": 92,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "start_token": 93,
                                                    "end_token": 95,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "if_clause",
                                                            "start_token": 94,
                                                            "end_token": 94,
                                                            "label": "",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "inline_comment",
                                                            "start_token": 95,
                                                            "end_token": 95,
                                                            "label": "",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 134,
            "end_token": 141,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 135,
                    "end_token": 140,
                    "label": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 135,
                            "end_token": 135,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 135,
                                    "end_token": 135,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 136,
                            "end_token": 136,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 136,
                                    "end_token": 136,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 137,
                            "end_token": 137,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 137,
                                    "end_token": 137,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 138,
                            "end_token": 138,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 138,
                                    "end_token": 138,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 141,
                    "end_token": 142,
                    "label": "",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 143,
            "end_token": 147,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 144,
                    "end_token": 144,
                    "label": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 144,
                            "end_token": 144,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 144,
                                    "end_token": 144,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 145,
                    "end_token": 146,
                    "label": "",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 148,
            "end_token": 291,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 149,
                    "end_token": 149,
                    "label": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 149,
                            "end_token": 149,
                            "label": "",
                            "children": [
                                {
                                    "type": "list",
                                    "start_token": 149,
                                    "end_token": 149,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 150,
                    "end_token": 291,
                    "label": "",
                    "children": [
                        {
                            "type": "for_statement",
                            "start_token": 150,
                            "end_token": 157,
                            "label": "",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 150,
                                    "end_token": 150,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 151,
                                    "end_token": 151,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "for_in_clause",
                                    "start_token": 152,
                                    "end_token": 157,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 153,
                                            "end_token": 157,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "start_token": 153,
                                                    "end_token": 156,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "if_clause",
                                                            "start_token": 154,
                                                            "end_token": 156,
                                                            "label": "",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 157,
                            "end_token": 157,
                            "label": "",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "block",
            "start_token": 292,
            "end_token": 293,
            "label": "",
            "children": []
        }
    ]
}