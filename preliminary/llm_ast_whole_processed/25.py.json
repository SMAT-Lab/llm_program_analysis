{
    "type": "module",
    "start_token": 0,
    "end_token": 1184,
    "label": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n\nimport replicate\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nlogger = logging.getLogger(__name__)\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n# Model version enum\nclass MusicGenModelVersion(str, Enum):\n    STEREO_LARGE = \"stereo-large\"\n    MELODY_LARGE = \"melody-large\"\n    LARGE = \"large\"\n\n\n# Audio format enum\nclass AudioFormat(str, Enum):\n    WAV = \"wav\"\n    MP3 = \"mp3\"\n\n\n# Normalization strategy enum\nclass NormalizationStrategy(str, Enum):\n    LOUDNESS = \"loudness\"\n    CLIP = \"clip\"\n    PEAK = \"peak\"\n    RMS = \"rms\"\n\n\nclass AIMusicGeneratorBlock(Block):\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"A description of the music you want to generate\",\n            placeholder=\"e.g., 'An upbeat electronic dance track with heavy bass'\",\n            title=\"Prompt\",\n        )\n        music_gen_model_version: MusicGenModelVersion = SchemaField(\n            description=\"Model to use for generation\",\n            default=MusicGenModelVersion.STEREO_LARGE,\n            title=\"Model Version\",\n        )\n        duration: int = SchemaField(\n            description=\"Duration of the generated audio in seconds\",\n            default=8,\n            title=\"Duration\",\n        )\n        temperature: float = SchemaField(\n            description=\"Controls the 'conservativeness' of the sampling process. Higher temperature means more diversity\",\n            default=1.0,\n            title=\"Temperature\",\n        )\n        top_k: int = SchemaField(\n            description=\"Reduces sampling to the k most likely tokens\",\n            default=250,\n            title=\"Top K\",\n        )\n        top_p: float = SchemaField(\n            description=\"Reduces sampling to tokens with cumulative probability of p. When set to 0 (default), top_k sampling is used\",\n            default=0.0,\n            title=\"Top P\",\n        )\n        classifier_free_guidance: int = SchemaField(\n            description=\"Increases the influence of inputs on the output. Higher values produce lower-variance outputs that adhere more closely to inputs\",\n            default=3,\n            title=\"Classifier Free Guidance\",\n        )\n        output_format: AudioFormat = SchemaField(\n            description=\"Output format for generated audio\",\n            default=AudioFormat.WAV,\n            title=\"Output Format\",\n        )\n        normalization_strategy: NormalizationStrategy = SchemaField(\n            description=\"Strategy for normalizing audio\",\n            default=NormalizationStrategy.LOUDNESS,\n            title=\"Normalization Strategy\",\n        )\n\n    class Output(BlockSchema):\n        result: str = SchemaField(description=\"URL of the generated audio file\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"44f6c8ad-d75c-4ae1-8209-aad1c0326928\",\n            description=\"This block generates music using Meta's MusicGen model on Replicate.\",\n            categories={BlockCategory.AI},\n            input_schema=AIMusicGeneratorBlock.Input,\n            output_schema=AIMusicGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An upbeat electronic dance track with heavy bass\",\n                \"music_gen_model_version\": MusicGenModelVersion.STEREO_LARGE,\n                \"duration\": 8,\n                \"temperature\": 1.0,\n                \"top_k\": 250,\n                \"top_p\": 0.0,\n                \"classifier_free_guidance\": 3,\n                \"output_format\": AudioFormat.WAV,\n                \"normalization_strategy\": NormalizationStrategy.LOUDNESS,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-audio-url.wav\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, music_gen_model_version, prompt, duration, temperature, top_k, top_p, classifier_free_guidance, output_format, normalization_strategy: \"https://replicate.com/output/generated-audio-url.wav\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        max_retries = 3\n        retry_delay = 5  # seconds\n        last_error = None\n\n        for attempt in range(max_retries):\n            try:\n                logger.debug(\n                    f\"[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})\"\n                )\n                result = self.run_model(\n                    api_key=credentials.api_key,\n                    music_gen_model_version=input_data.music_gen_model_version,\n                    prompt=input_data.prompt,\n                    duration=input_data.duration,\n                    temperature=input_data.temperature,\n                    top_k=input_data.top_k,\n                    top_p=input_data.top_p,\n                    classifier_free_guidance=input_data.classifier_free_guidance,\n                    output_format=input_data.output_format,\n                    normalization_strategy=input_data.normalization_strategy,\n                )\n                if result and result != \"No output received\":\n                    yield \"result\", result\n                    return\n                else:\n                    last_error = \"Model returned empty or invalid response\"\n                    raise ValueError(last_error)\n            except Exception as e:\n                last_error = f\"Unexpected error: {str(e)}\"\n                logger.error(f\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n                if attempt < max_retries - 1:\n                    time.sleep(retry_delay)\n                    continue\n\n        # If we've exhausted all retries, yield the error\n        yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"\n\n    def run_model(\n        self,\n        api_key: SecretStr,\n        music_gen_model_version: MusicGenModelVersion,\n        prompt: str,\n        duration: int,\n        temperature: float,\n        top_k: int,\n        top_p: float,\n        classifier_free_guidance: int,\n        output_format: AudioFormat,\n        normalization_strategy: NormalizationStrategy,\n    ):\n        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n\n        # Run the model with parameters\n        output = client.run(\n            \"meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb\",\n            input={\n                \"prompt\": prompt,\n                \"music_gen_model_version\": music_gen_model_version,\n                \"duration\": duration,\n                \"temperature\": temperature,\n                \"top_k\": top_k,\n                \"top_p\": top_p,\n                \"classifier_free_guidance\": classifier_free_guidance,\n                \"output_format\": output_format,\n                \"normalization_strategy\": normalization_strategy,\n            },\n        )\n\n        # Handle the output\n        if isinstance(output, list) and len(output) > 0:\n            result_url = output[0]  # If output is a list, get the first element\n        elif isinstance(output, str):\n            result_url = output  # If output is a string, use it directly\n        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n\n        return result_url\n",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import logging",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 0,
                    "end_token": 0,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "logging",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 4,
            "label": "import time",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 4,
                    "end_token": 4,
                    "label": "time",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 6,
            "end_token": 9,
            "label": "from enum import Enum",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 6,
                    "end_token": 6,
                    "label": "from",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 7,
                    "end_token": 7,
                    "label": "enum",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 8,
                    "end_token": 8,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 9,
                    "end_token": 9,
                    "label": "Enum",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 11,
            "end_token": 14,
            "label": "from typing import Literal",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 11,
                    "end_token": 11,
                    "label": "from",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 12,
                    "end_token": 12,
                    "label": "typing",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 13,
                    "end_token": 13,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 14,
                    "end_token": 14,
                    "label": "Literal",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 17,
            "end_token": 18,
            "label": "import replicate",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 17,
                    "end_token": 17,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 18,
                    "end_token": 18,
                    "label": "replicate",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 20,
            "end_token": 23,
            "label": "from pydantic import SecretStr",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 20,
                    "end_token": 20,
                    "label": "from",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 21,
                    "end_token": 21,
                    "label": "pydantic",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 22,
                    "end_token": 22,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 23,
                    "end_token": 23,
                    "label": "SecretStr",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 26,
            "end_token": 39,
            "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 26,
                    "end_token": 26,
                    "label": "from",
                    "children": []
                },
                {
                    "type": "dotted_name",
                    "start_token": 27,
                    "end_token": 31,
                    "label": "backend.data.block",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 27,
                            "end_token": 27,
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 29,
                            "end_token": 29,
                            "label": "data",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 31,
                            "end_token": 31,
                            "label": "block",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "identifier",
                    "start_token": 32,
                    "end_token": 32,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 33,
                    "end_token": 33,
                    "label": "Block",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 35,
                    "end_token": 35,
                    "label": "BlockCategory",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 37,
                    "end_token": 37,
                    "label": "BlockOutput",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 39,
                    "end_token": 39,
                    "label": "BlockSchema",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 41,
            "end_token": 62,
            "label": "from backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 41,
                    "end_token": 41,
                    "label": "from",
                    "children": []
                },
                {
                    "type": "dotted_name",
                    "start_token": 42,
                    "end_token": 46,
                    "label": "backend.data.model",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 42,
                            "end_token": 42,
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 44,
                            "end_token": 44,
                            "label": "data",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 46,
                            "end_token": 46,
                            "label": "model",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "identifier",
                    "start_token": 47,
                    "end_token": 47,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "start_token": 48,
                    "end_token": 62,
                    "label": "(\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 50,
                            "end_token": 50,
                            "label": "APIKeyCredentials",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 53,
                            "end_token": 53,
                            "label": "CredentialsField",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 56,
                            "end_token": 56,
                            "label": "CredentialsMetaInput",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 59,
                            "end_token": 59,
                            "label": "SchemaField",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 64,
            "end_token": 71,
            "label": "from backend.integrations.providers import ProviderName",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 64,
                    "end_token": 64,
                    "label": "from",
                    "children": []
                },
                {
                    "type": "dotted_name",
                    "start_token": 65,
                    "end_token": 69,
                    "label": "backend.integrations.providers",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 65,
                            "end_token": 65,
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 67,
                            "end_token": 67,
                            "label": "integrations",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 69,
                            "end_token": 69,
                            "label": "providers",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "identifier",
                    "start_token": 70,
                    "end_token": 70,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 71,
                    "end_token": 71,
                    "label": "ProviderName",
                    "children": []
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 74,
            "end_token": 81,
            "label": "logger = logging.getLogger(__name__)",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 74,
                    "end_token": 74,
                    "label": "logger",
                    "children": []
                },
                {
                    "type": "attribute",
                    "start_token": 76,
                    "end_token": 78,
                    "label": "logging.getLogger",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 76,
                            "end_token": 76,
                            "label": "logging",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 78,
                            "end_token": 78,
                            "label": "getLogger",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 84,
            "end_token": 117,
            "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 84,
                    "end_token": 84,
                    "label": "TEST_CREDENTIALS",
                    "children": []
                },
                {
                    "type": "class_definition",
                    "start_token": 86,
                    "end_token": 117,
                    "label": "APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 86,
                            "end_token": 86,
                            "label": "APIKeyCredentials",
                            "children": []
                        },
                        {
                            "type": "dictionary",
                            "start_token": 89,
                            "end_token": 117,
                            "label": "id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)",
                            "children": [
                                {
                                    "type": "pair",
                                    "start_token": 89,
                                    "end_token": 115,
                                    "label": "id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 89,
                                            "end_token": 89,
                                            "label": "id",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "start_token": 91,
                                            "end_token": 91,
                                            "label": "\"01234567-89ab-cdef-0123-456789abcdef\"",
                                            "children": [
                                                {
                                                    "type": "string_content",
                                                    "start_token": 91,
                                                    "end_token": 91,
                                                    "label": "\"01234567-89ab-cdef-0123-456789abcdef\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 119,
            "end_token": 151,
            "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 119,
                    "end_token": 119,
                    "label": "TEST_CREDENTIALS_INPUT",
                    "children": []
                },
                {
                    "type": "dictionary",
                    "start_token": 121,
                    "end_token": 151,
                    "label": "{\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
                    "children": [
                        {
                            "type": "pair",
                            "start_token": 123,
                            "end_token": 265,
                            "label": "\"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n# Model version enum\nclass MusicGenModelVersion(str, Enum):\n    STEREO_LARGE = \"stereo-large\"\n    MELODY_LARGE = \"melody-large\"\n    LARGE = \"large\"\n\n\n# Audio format enum\nclass AudioFormat(str, Enum):\n    WAV = \"wav\"\n    MP3 = \"mp3\"\n\n\n# Normalization strategy enum\nclass NormalizationStrategy(str, Enum):\n    LOUDNESS = \"loudness\"\n    CLIP = \"clip\"\n    PEAK = \"peak\"\n    RMS = \"rms\"\n\n\nclass AIMusicGeneratorBlock(Block):\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 123,
                                    "end_token": 123,
                                    "label": "\"provider\"",
                                    "children": []
                                },
                                {
                                    "type": "attribute",
                                    "start_token": 125,
                                    "end_token": 127,
                                    "label": "TEST_CREDENTIALS.provider",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 125,
                                            "end_token": 125,
                                            "label": "TEST_CREDENTIALS",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 127,
                                            "end_token": 127,
                                            "label": "provider",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "pair",
                            "start_token": 146,
                            "end_token": 148,
                            "label": "TEST_CREDENTIALS.type",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 146,
                                    "end_token": 146,
                                    "label": "TEST_CREDENTIALS",
                                    "children": []
                                },
                                {
                                    "type": "attribute",
                                    "start_token": 147,
                                    "end_token": 147,
                                    "label": ".",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 147,
                                            "end_token": 147,
                                            "label": ".",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 160,
            "end_token": 243,
            "label": "class MusicGenModelVersion(str, Enum):\n    STEREO_LARGE = \"stereo-large\"\n    MELODY_LARGE = \"melody-large\"\n    LARGE = \"large\"\n\n\n# Audio format enum\nclass AudioFormat(str, Enum):\n    WAV = \"wav\"\n    MP3 = \"mp3\"\n\n\n# Normalization strategy enum\nclass NormalizationStrategy(str, Enum):\n    LOUDNESS = \"loudness\"\n    CLIP = \"clip\"\n    PEAK = \"peak\"\n    RMS = \"rms\"\n\n\nclass AIMusicGeneratorBlock(Block)",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 160,
                    "end_token": 160,
                    "label": "class",
                    "children": []
                },
                {
                    "type": "class_definition",
                    "start_token": 240,
                    "end_token": 243,
                    "label": "AIMusicGeneratorBlock(Block)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 240,
                            "end_token": 240,
                            "label": "AIMusicGeneratorBlock",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 511,
            "end_token": 579,
            "label": "class Output(BlockSchema):\n        result: str = SchemaField(description=\"URL of the generated audio file\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"44f6c8ad-d75c-4ae1-8209-aad1c0326928\",\n            description=\"This block generates music using Meta's MusicGen model on Replicate.\",\n            categories={BlockCategory.AI},\n            input_schema=AIMusicGeneratorBlock.Input,",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 511,
                    "end_token": 511,
                    "label": "class",
                    "children": []
                },
                {
                    "type": "parameter",
                    "start_token": 514,
                    "end_token": 514,
                    "label": "BlockSchema",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 515,
                            "end_token": 515,
                            "label": ")",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 541,
            "end_token": 743,
            "label": "def __init__(self):\n        super().__init__(\n            id=\"44f6c8ad-d75c-4ae1-8209-aad1c0326928\",\n            description=\"This block generates music using Meta's MusicGen model on Replicate.\",\n            categories={BlockCategory.AI},\n            input_schema=AIMusicGeneratorBlock.Input,\n            output_schema=AIMusicGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An upbeat electronic dance track with heavy bass\",\n                \"music_gen_model_version\": MusicGenModelVersion.STEREO_LARGE,\n                \"duration\": 8,\n                \"temperature\": 1.0,\n                \"top_k\": 250,\n                \"top_p\": 0.0,\n                \"classifier_free_guidance\": 3,\n                \"output_format\": AudioFormat.WAV,\n                \"normalization_strategy\": NormalizationStrategy.LOUDNESS,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-audio-url.wav\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, music_gen_model_version, prompt, duration, temperature, top_k, top_p, classifier_free_guidance, output_format, normalization_strategy: \"https://replicate.com/output/generated-audio-url.wav\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        max_retries = 3\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 541,
                    "end_token": 541,
                    "label": "def",
                    "children": []
                },
                {
                    "type": "parameter",
                    "start_token": 544,
                    "end_token": 544,
                    "label": "self",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 545,
                            "end_token": 545,
                            "label": ")",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 714,
            "end_token": 942,
            "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        max_retries = 3\n        retry_delay = 5  # seconds\n        last_error = None\n\n        for attempt in range(max_retries):\n            try:\n                logger.debug(\n                    f\"[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})\"\n                )\n                result = self.run_model(\n                    api_key=credentials.api_key,\n                    music_gen_model_version=input_data.music_gen_model_version,\n                    prompt=input_data.prompt,\n                    duration=input_data.duration,\n                    temperature=input_data.temperature,\n                    top_k=input_data.top_k,\n                    top_p=input_data.top_p,\n                    classifier_free_guidance=input_data.classifier_free_guidance,\n                    output_format=input_data.output_format,\n                    normalization_strategy=input_data.normalization_strategy,\n                )\n                if result and result != \"No output received\":\n                    yield \"result\", result\n                    return\n                else:\n                    last_error = \"Model returned empty or invalid response\"\n                    raise ValueError(last_error)\n            except Exception as e:\n                last_error = f\"Unexpected error: {str(e)}\"\n                logger.error(f\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n                if attempt < max_retries - 1:\n                    time.sleep(retry_delay)\n                    continue\n\n        # If we've exhausted all retries, yield the error\n        yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"\n\n    def",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 714,
                    "end_token": 714,
                    "label": "def",
                    "children": []
                },
                {
                    "type": "parameter",
                    "start_token": 717,
                    "end_token": 733,
                    "label": "\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 719,
                            "end_token": 721,
                            "label": ", input_data:",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "start_token": 900,
            "end_token": 942,
            "label": "f\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n                if attempt < max_retries - 1:\n                    time.sleep(retry_delay)\n                    continue\n\n        # If we've exhausted all retries, yield the error\n        yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"\n\n    def",
            "children": [
                {
                    "type": "keyword",
                    "start_token": 900,
                    "end_token": 900,
                    "label": "f",
                    "children": []
                },
                {
                    "type": "expression",
                    "start_token": 901,
                    "end_token": 927,
                    "label": "\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n                if attempt < max_retries - 1:\n                    time.sleep(retry_delay)\n                    continue\n\n        # If we've exhausted",
                    "children": [
                        {
                            "type": "binary_operator",
                            "start_token": 901,
                            "end_token": 927,
                            "label": "\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n                if attempt < max_retries - 1:\n                    time.sleep(retry_delay)\n                    continue\n\n        # If we've exhausted",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 943,
            "end_token": 1184,
            "label": "run_model(\n        self,\n        api_key: SecretStr,\n        music_gen_model_version: MusicGenModelVersion,\n        prompt: str,\n        duration: int,\n        temperature: float,\n        top_k: int,\n        top_p: float,\n        classifier_free_guidance: int,\n        output_format: AudioFormat,\n        normalization_strategy: NormalizationStrategy,\n    ):\n        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n\n        # Run the model with parameters\n        output = client.run(\n            \"meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb\",\n            input={\n                \"prompt\": prompt,\n                \"music_gen_model_version\": music_gen_model_version,\n                \"duration\": duration,\n                \"temperature\": temperature,\n                \"top_k\": top_k,\n                \"top_p\": top_p,\n                \"classifier_free_guidance\": classifier_free_guidance,\n                \"output_format\": output_format,\n                \"normalization_strategy\": normalization_strategy,\n            },\n        )\n\n        # Handle the output\n        if isinstance(output, list) and len(output) > 0:\n            result_url = output[0]  # If output is a list, get the first element\n        elif isinstance(output, str):\n            result_url = output  # If output is a string, use it directly\n        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n\n        return result_url\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 943,
                    "end_token": 943,
                    "label": "run_model",
                    "children": []
                }
            ]
        }
    ]
}