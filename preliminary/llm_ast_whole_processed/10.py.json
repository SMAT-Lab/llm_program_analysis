{
    "type": "module",
    "start_token": 0,
    "end_token": 577,
    "label": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\n\nCHECK_INTERVAL = 30\n\n\ndef get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n\n        # Handle both PR and merge group events\n        if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n\n        return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )\n    except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)\n\n\ndef make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)\n\n\ndef process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n\n    for run in check_runs:\n        if str(run[\"name\"]) != \"Check PR Status\":\n            status = run[\"status\"]\n            conclusion = run[\"conclusion\"]\n\n            if status == \"completed\":\n                if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n                    all_others_passed = False\n                    print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n            )\n\n    return runs_in_progress, all_others_passed\n\n\ndef main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\n\n    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n    if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"\n\n    print(f\"Current run ID: {current_run_id}\")\n\n    while True:\n        data = make_api_request(endpoint, headers)\n\n        check_runs = data[\"check_runs\"]\n\n        print(\"Processing check runs...\")\n\n        print(check_runs)\n\n        runs_in_progress, all_others_passed = process_check_runs(check_runs)\n\n        if not runs_in_progress:\n            break\n\n        print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)\n\n    if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)\n    else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "children": [
        {
            "type": "block",
            "start_token": 0,
            "end_token": 576,
            "label": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\n\nCHECK_INTERVAL = 30\n\n\ndef get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n\n        # Handle both PR and merge group events\n        if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n\n        return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )\n    except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)\n\n\ndef make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)\n\n\ndef process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n\n    for run in check_runs:\n        if str(run[\"name\"]) != \"Check PR Status\":\n            status = run[\"status\"]\n            conclusion = run[\"conclusion\"]\n\n            if status == \"completed\":\n                if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n                    all_others_passed = False\n                    print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n            )\n\n    return runs_in_progress, all_others_passed\n\n\ndef main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\n\n    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n    if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"\n\n    print(f\"Current run ID: {current_run_id}\")\n\n    while True:\n        data = make_api_request(endpoint, headers)\n\n        check_runs = data[\"check_runs\"]\n\n        print(\"Processing check runs...\")\n\n        print(check_runs)\n\n        runs_in_progress, all_others_passed = process_check_runs(check_runs)\n\n        if not runs_in_progress:\n            break\n\n        print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)\n\n    if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)\n    else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "import json",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 0,
                            "end_token": 0,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 1,
                            "end_token": 1,
                            "label": "json",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "import_statement",
                    "start_token": 3,
                    "end_token": 4,
                    "label": "import os",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 3,
                            "end_token": 3,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 4,
                            "end_token": 4,
                            "label": "os",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "import_statement",
                    "start_token": 6,
                    "end_token": 7,
                    "label": "import requests",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 6,
                            "end_token": 6,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 7,
                            "end_token": 7,
                            "label": "requests",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "import_statement",
                    "start_token": 9,
                    "end_token": 10,
                    "label": "import sys",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 9,
                            "end_token": 9,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 10,
                            "end_token": 10,
                            "label": "sys",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "import_statement",
                    "start_token": 12,
                    "end_token": 13,
                    "label": "import time",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 12,
                            "end_token": 12,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 13,
                            "end_token": 13,
                            "label": "time",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "import_from_statement",
                    "start_token": 15,
                    "end_token": 22,
                    "label": "from typing import Dict, List, Tuple",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 15,
                            "end_token": 15,
                            "label": "from",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 16,
                            "end_token": 16,
                            "label": "typing",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 17,
                            "end_token": 17,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 18,
                            "end_token": 18,
                            "label": "Dict",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 19,
                            "end_token": 19,
                            "label": ",",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 20,
                            "end_token": 20,
                            "label": "List",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 21,
                            "end_token": 21,
                            "label": ",",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 22,
                            "end_token": 22,
                            "label": "Tuple",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "start_token": 25,
                    "end_token": 27,
                    "label": "CHECK_INTERVAL = 30",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 25,
                            "end_token": 25,
                            "label": "CHECK_INTERVAL",
                            "children": []
                        },
                        {
                            "type": "assignment_operator",
                            "start_token": 26,
                            "end_token": 26,
                            "label": "=",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 27,
                            "end_token": 27,
                            "label": "30",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 31,
                    "end_token": 181,
                    "label": "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n\n        # Handle both PR and merge group events\n        if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n\n        return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )\n    except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 31,
                            "end_token": 31,
                            "label": "def",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 32,
                            "end_token": 32,
                            "label": "get_environment_variables",
                            "children": []
                        },
                        {
                            "type": "argument_list",
                            "start_token": 33,
                            "end_token": 34,
                            "label": "()",
                            "children": []
                        },
                        {
                            "type": "arrow",
                            "start_token": 35,
                            "end_token": 37,
                            "label": "-> Tuple",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 37,
                            "end_token": 48,
                            "label": "Tuple[str, str, str, str, str]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 38,
                                    "end_token": 38,
                                    "label": "[",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 39,
                                    "end_token": 39,
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 40,
                                    "end_token": 40,
                                    "label": ",",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 41,
                                    "end_token": 41,
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 42,
                                    "end_token": 42,
                                    "label": ",",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 43,
                                    "end_token": 43,
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 44,
                                    "end_token": 44,
                                    "label": ",",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 45,
                                    "end_token": 45,
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 46,
                                    "end_token": 46,
                                    "label": ",",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 47,
                                    "end_token": 47,
                                    "label": "str",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 49,
                            "end_token": 181,
                            "label": ":\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n\n        # Handle both PR and merge group events\n        if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n\n        return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )\n    except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)\n",
                            "children": [
                                {
                                    "type": "string",
                                    "start_token": 51,
                                    "end_token": 53,
                                    "label": "\"\"\"Retrieve and return necessary environment variables.\"\"\"",
                                    "children": []
                                },
                                {
                                    "type": "try_statement",
                                    "start_token": 55,
                                    "end_token": 181,
                                    "label": "try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n\n        # Handle both PR and merge group events\n        if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n\n        return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )\n    except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)\n",
                                    "children": [
                                        {
                                            "type": "with_statement",
                                            "start_token": 58,
                                            "end_token": 80,
                                            "label": "with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 58,
                                                    "end_token": 58,
                                                    "label": "with",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 59,
                                                    "end_token": 61,
                                                    "label": "open(os",
                                                    "children": []
                                                },
                                                {
                                                    "type": "attribute",
                                                    "start_token": 62,
                                                    "end_token": 66,
                                                    "label": ".environ[\"GITHUB_EVENT_PATH\"]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 63,
                                                    "end_token": 63,
                                                    "label": "environ",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 65,
                                                    "end_token": 65,
                                                    "label": "\"GITHUB_EVENT_PATH\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "alias",
                                                    "start_token": 68,
                                                    "end_token": 68,
                                                    "label": "as",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 69,
                                                            "end_token": 69,
                                                            "label": "f",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 70,
                                            "end_token": 80,
                                            "label": ":\n            event = json.load(f)\n",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 72,
                                                    "end_token": 79,
                                                    "label": "event = json.load(f)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 72,
                                                            "end_token": 72,
                                                            "label": "event",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "assignment_operator",
                                                            "start_token": 73,
                                                            "end_token": 73,
                                                            "label": "=",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 74,
                                                            "end_token": 78,
                                                            "label": "json.load(f",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "if_statement",
                                    "start_token": 91,
                                    "end_token": 121,
                                    "label": "if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n",
                                    "children": [
                                        {
                                            "type": "boolean_operator",
                                            "start_token": 93,
                                            "end_token": 93,
                                            "label": "in",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 95,
                                            "end_token": 109,
                                            "label": ":\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n",
                                            "children": []
                                        },
                                        {
                                            "type": "else_clause",
                                            "start_token": 110,
                                            "end_token": 121,
                                            "label": "else:\n            sha = os.environ[\"GITHUB_SHA\"]\n",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 113,
                                                    "end_token": 113,
                                                    "label": "sha",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 123,
                                    "end_token": 161,
                                    "label": "return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 125,
                                            "end_token": 125,
                                            "label": "\n",
                                            "children": []
                                        },
                                        {
                                            "type": "attribute",
                                            "start_token": 126,
                                            "end_token": 130,
                                            "label": "os.environ[\"GITHUB_API_URL\"",
                                            "children": []
                                        },
                                        {
                                            "type": "attribute",
                                            "start_token": 134,
                                            "end_token": 138,
                                            "label": "os.environ[\"GITHUB_REPOSITORY\"",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 142,
                                            "end_token": 142,
                                            "label": "sha",
                                            "children": []
                                        },
                                        {
                                            "type": "attribute",
                                            "start_token": 145,
                                            "end_token": 149,
                                            "label": "os.environ[\"GITHUB_TOKEN\"",
                                            "children": []
                                        },
                                        {
                                            "type": "attribute",
                                            "start_token": 153,
                                            "end_token": 157,
                                            "label": "os.environ[\"GITHUB_RUN_ID\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 184,
                    "end_token": 269,
                    "label": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 184,
                            "end_token": 185,
                            "label": "def make_api_request",
                            "children": []
                        },
                        {
                            "type": "argument_list",
                            "start_token": 186,
                            "end_token": 186,
                            "label": "(",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 188,
                            "end_token": 199,
                            "label": ": str, headers: Dict[str, str])",
                            "children": [
                                {
                                    "type": "type",
                                    "start_token": 193,
                                    "end_token": 198,
                                    "label": "Dict[str, str]",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 204,
                            "end_token": 269,
                            "label": "\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)\n",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 272,
                    "end_token": 404,
                    "label": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n\n    for run in check_runs:\n        if str(run[\"name\"]) != \"Check PR Status\":\n            status = run[\"status\"]\n            conclusion = run[\"conclusion\"]\n\n            if status == \"completed\":\n                if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n                    all_others_passed = False\n                    print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n            )\n\n    return runs_in_progress, all_others_passed\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 272,
                            "end_token": 273,
                            "label": "def process_check_runs",
                            "children": []
                        },
                        {
                            "type": "argument_list",
                            "start_token": 274,
                            "end_token": 281,
                            "label": "(check_runs: List[Dict])",
                            "children": []
                        },
                        {
                            "type": "type",
                            "start_token": 283,
                            "end_token": 289,
                            "label": "> Tuple[bool, bool]",
                            "children": [
                                {
                                    "type": "type",
                                    "start_token": 285,
                                    "end_token": 288,
                                    "label": "[bool, bool",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 291,
                            "end_token": 404,
                            "label": "\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n\n    for run in check_runs:\n        if str(run[\"name\"]) != \"Check PR Status\":\n            status = run[\"status\"]\n            conclusion = run[\"conclusion\"]\n\n            if status == \"completed\":\n                if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n                    all_others_passed = False\n                    print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n            )\n\n    return runs_in_progress, all_others_passed\n",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 407,
                    "end_token": 563,
                    "label": "def main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\n\n    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n    if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"\n\n    print(f\"Current run ID: {current_run_id}\")\n\n    while True:\n        data = make_api_request(endpoint, headers)\n\n        check_runs = data[\"check_runs\"]\n\n        print(\"Processing check runs...\")\n\n        print(check_runs)\n\n        runs_in_progress, all_others_passed = process_check_runs(check_runs)\n\n        if not runs_in_progress:\n            break\n\n        print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)\n\n    if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)\n    else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 407,
                            "end_token": 408,
                            "label": "def main",
                            "children": []
                        },
                        {
                            "type": "argument_list",
                            "start_token": 409,
                            "end_token": 410,
                            "label": "()",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 412,
                            "end_token": 563,
                            "label": "\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\n\n    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n    if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"\n\n    print(f\"Current run ID: {current_run_id}\")\n\n    while True:\n        data = make_api_request(endpoint, headers)\n\n        check_runs = data[\"check_runs\"]\n\n        print(\"Processing check runs...\")\n\n        print(check_runs)\n\n        runs_in_progress, all_others_passed = process_check_runs(check_runs)\n\n        if not runs_in_progress:\n            break\n\n        print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)\n\n    if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)\n    else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "start_token": 567,
                    "end_token": 575,
                    "label": "if __name__ == \"__main__\":\n    main(",
                    "children": [
                        {
                            "type": "comparison_operator",
                            "start_token": 571,
                            "end_token": 571,
                            "label": "\"__main__\"",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 573,
                            "end_token": 575,
                            "label": "\n    main(",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}