{
    "type": "module",
    "start_token": 0,
    "end_token": 410,
    "label": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum\n\n\nclass State(Enum):\n    unvisited = 0\n    visited = 1\n\n\nclass Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\n\n\nclass Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n\n\nclass LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n\n\nclass PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n\n\nclass UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n",
    "children": [
        {
            "type": "comment",
            "start_token": 0,
            "end_token": 12,
            "label": "# -*- coding: utf-8 -*-\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 13,
            "end_token": 17,
            "label": "from collections import deque\n",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 18,
            "end_token": 22,
            "label": "from enum import Enum\n",
            "children": []
        },
        {
            "type": "block",
            "start_token": 25,
            "end_token": 157,
            "label": "class State(Enum):\n    unvisited = 0\n    visited = 1\n\n\nclass Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\n",
            "children": [
                {
                    "type": "class_definition",
                    "start_token": 25,
                    "end_token": 39,
                    "label": "class State(Enum):\n    unvisited = 0\n    visited = 1\n",
                    "children": [
                        {
                            "type": "class_definition",
                            "start_token": 42,
                            "end_token": 157,
                            "label": "class Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\n",
                            "children": [
                                {
                                    "type": "function_definition",
                                    "start_token": 50,
                                    "end_token": 156,
                                    "label": "def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 53,
                                            "end_token": 58,
                                            "label": "self, source, dest)",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 60,
                                            "end_token": 156,
                                            "label": "\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "start_token": 61,
                                                    "end_token": 69,
                                                    "label": "if source is None:\n            return False\n",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 63,
                                                            "end_token": 64,
                                                            "label": "is None",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 67,
                                                            "end_token": 69,
                                                            "label": "return False\n",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 70,
                                                    "end_token": 74,
                                                    "label": "queue = deque()",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 76,
                                                    "end_token": 81,
                                                    "label": "queue.append(source)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 83,
                                                    "end_token": 89,
                                                    "label": "source.visit_state = State.visited",
                                                    "children": []
                                                },
                                                {
                                                    "type": "while_statement",
                                                    "start_token": 91,
                                                    "end_token": 154,
                                                    "label": "while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 94,
                                                            "end_token": 154,
                                                            "label": "\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 95,
                                                                    "end_token": 101,
                                                                    "label": "node = queue.popleft()",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "start_token": 103,
                                                                    "end_token": 106,
                                                                    "label": "print(node)",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "conditional_expression",
                                                                    "start_token": 108,
                                                                    "end_token": 116,
                                                                    "label": "if dest is node:\n                return True\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "start_token": 110,
                                                                            "end_token": 111,
                                                                            "label": "is node",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 114,
                                                                            "end_token": 116,
                                                                            "label": "return True\n",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "for_statement",
                                                                    "start_token": 117,
                                                                    "end_token": 154,
                                                                    "label": "for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 127,
                                                                            "end_token": 154,
                                                                            "label": ":\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "conditional_expression",
                                                                                    "start_token": 129,
                                                                                    "end_token": 138,
                                                                                    "label": "if adjacent_node.visit_state == State.unvisited:",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "comparison_operator",
                                                                                            "start_token": 133,
                                                                                            "end_token": 137,
                                                                                            "label": "== State.unvisited",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 140,
                                                                                            "end_token": 145,
                                                                                            "label": "queue.append(adjacent_node)",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "start_token": 147,
                                                                                    "end_token": 153,
                                                                                    "label": "adjacent_node.visit_state = State.visited",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "start_token": 155,
                                                    "end_token": 156,
                                                    "label": "return False",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "block",
            "start_token": 160,
            "end_token": 256,
            "label": "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n\n\nclass LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n",
            "children": [
                {
                    "type": "class_definition",
                    "start_token": 160,
                    "end_token": 197,
                    "label": "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 168,
                            "end_token": 197,
                            "label": "def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 171,
                                    "end_token": 176,
                                    "label": "self, id, name)",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 178,
                                    "end_token": 197,
                                    "label": "\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 179,
                                            "end_token": 183,
                                            "label": "self.id = id",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 185,
                                            "end_token": 189,
                                            "label": "self.name = name",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 191,
                                            "end_token": 196,
                                            "label": "self.friend_ids = []",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "block",
            "start_token": 200,
            "end_token": 416,
            "label": "",
            "children": [
                {
                    "type": "class_definition",
                    "start_token": 200,
                    "end_token": 229,
                    "label": "class LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 208,
                            "end_token": 229,
                            "label": "def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 211,
                                    "end_token": 212,
                                    "label": "self)",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 214,
                                    "end_token": 229,
                                    "label": "\n        self.lookup = {}  # key: person_id, value: person_server\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 215,
                                            "end_token": 228,
                                            "label": "self.lookup = {}  # key: person_id, value: person_server",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 231,
                            "end_token": 256,
                            "label": "def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 234,
                                    "end_token": 237,
                                    "label": "self, person_id)",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 239,
                                    "end_token": 256,
                                    "label": "\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 241,
                                            "end_token": 247,
                                            "label": "= self.lookup[person_id]",
                                            "children": []
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 249,
                                            "end_token": 255,
                                            "label": "return person_server.people[person_id]",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "start_token": 259,
                    "end_token": 332,
                    "label": "class PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 267,
                            "end_token": 288,
                            "label": "def __init__(self):\n        self.people = {}  # key: person_id, value: person\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 270,
                                    "end_token": 271,
                                    "label": "self)",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 273,
                                    "end_token": 288,
                                    "label": "\n        self.people = {}  # key: person_id, value: person\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 275,
                                            "end_token": 287,
                                            "label": ".people = {}  # key: person_id, value: person",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 290,
                            "end_token": 332,
                            "label": "def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 293,
                                    "end_token": 296,
                                    "label": "self, ids)",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 298,
                                    "end_token": 332,
                                    "label": "\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 299,
                                            "end_token": 302,
                                            "label": "results = []",
                                            "children": []
                                        },
                                        {
                                            "type": "for_statement",
                                            "start_token": 304,
                                            "end_token": 328,
                                            "label": "for id in ids:\n            if id in self.people:\n                results.append(self.people[id])",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 309,
                                                    "end_token": 328,
                                                    "label": "\n            if id in self.people:\n                results.append(self.people[id])",
                                                    "children": [
                                                        {
                                                            "type": "conditional_expression",
                                                            "start_token": 310,
                                                            "end_token": 316,
                                                            "label": "if id in self.people:",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "start_token": 312,
                                                                    "end_token": 312,
                                                                    "label": "in",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "start_token": 318,
                                                                    "end_token": 327,
                                                                    "label": "results.append(self.people[id]",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 330,
                                            "end_token": 331,
                                            "label": "return results",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "start_token": 335,
                    "end_token": 410,
                    "label": "class UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 343,
                            "end_token": 365,
                            "label": "def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 346,
                                    "end_token": 351,
                                    "label": "self, person_ids, lookup)",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 353,
                                    "end_token": 365,
                                    "label": "\n        self.lookup = lookup\n        self.person_ids = person_ids\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 354,
                                            "end_token": 358,
                                            "label": "self.lookup = lookup",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 360,
                                            "end_token": 364,
                                            "label": "self.person_ids = person_ids",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 367,
                                            "end_token": 372,
                                            "label": ".visited_ids = set()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 375,
                            "end_token": 410,
                            "label": "def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 378,
                                    "end_token": 382,
                                    "label": "self, source, dest",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 384,
                                    "end_token": 410,
                                    "label": ":\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n",
                                    "children": [
                                        {
                                            "type": "pass_statement",
                                            "start_token": 409,
                                            "end_token": 410,
                                            "label": "pass\n",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}