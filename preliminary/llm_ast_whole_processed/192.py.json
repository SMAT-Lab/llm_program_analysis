{
    "type": "module",
    "start_token": 0,
    "end_token": 709,
    "label": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"\n\n\nclass CalculatorBlock(Block):\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n\n\nclass CountItemsBlock(Block):\n    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
    "children": [
        {
            "type": "block",
            "start_token": 0,
            "end_token": 709,
            "label": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"\n\n\nclass CalculatorBlock(Block):\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n\n\nclass CountItemsBlock(Block):\n    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "import operator",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 3,
                    "end_token": 6,
                    "label": "from enum import Enum",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 8,
                    "end_token": 11,
                    "label": "from typing import Any",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 14,
                    "end_token": 27,
                    "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 29,
                    "end_token": 36,
                    "label": "from backend.data.model import SchemaField",
                    "children": []
                },
                {
                    "type": "class_definition",
                    "start_token": 40,
                    "end_token": 45,
                    "label": "class Operation(Enum):",
                    "children": [
                        {
                            "type": "block",
                            "start_token": 40,
                            "end_token": 45,
                            "label": "class Operation(Enum):",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 47,
                                    "end_token": 49,
                                    "label": "ADD = \"Add\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 51,
                                    "end_token": 53,
                                    "label": "SUBTRACT = \"Subtract\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 55,
                                    "end_token": 57,
                                    "label": "MULTIPLY = \"Multiply\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 59,
                                    "end_token": 61,
                                    "label": "DIVIDE = \"Divide\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 63,
                                    "end_token": 65,
                                    "label": "POWER = \"Power\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "start_token": 69,
                    "end_token": 273,
                    "label": "class CalculatorBlock(Block):\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                    "children": [
                        {
                            "type": "block",
                            "start_token": 69,
                            "end_token": 273,
                            "label": "class CalculatorBlock(Block):\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                            "children": [
                                {
                                    "type": "class_definition",
                                    "start_token": 76,
                                    "end_token": 153,
                                    "label": "class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 76,
                                            "end_token": 153,
                                            "label": "class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 83,
                                                    "end_token": 100,
                                                    "label": "operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 102,
                                                    "end_token": 116,
                                                    "label": "a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 119,
                                                    "end_token": 134,
                                                    "label": "b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 136,
                                                    "end_token": 153,
                                                    "label": "round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "class_definition",
                                    "start_token": 156,
                                    "end_token": 172,
                                    "label": "class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 156,
                                            "end_token": 172,
                                            "label": "class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 163,
                                                    "end_token": 172,
                                                    "label": "result: float = SchemaField(description=\"The result of your calculation\")",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 175,
                                    "end_token": 273,
                                    "label": "def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 175,
                                            "end_token": 273,
                                            "label": "def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 182,
                                                    "end_token": 273,
                                                    "label": "super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                                                    "children": [
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 189,
                                                            "end_token": 191,
                                                            "label": "id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 194,
                                                            "end_token": 199,
                                                            "label": "input_schema=CalculatorBlock.Input,",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 201,
                                                            "end_token": 206,
                                                            "label": "output_schema=CalculatorBlock.Output,",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 208,
                                                            "end_token": 210,
                                                            "label": "description=\"Performs a mathematical operation on two numbers.\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 213,
                                                            "end_token": 219,
                                                            "label": "categories={BlockCategory.LOGIC}",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 222,
                                                            "end_token": 253,
                                                            "label": "test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 257,
                                                            "end_token": 270,
                                                            "label": "test_output=[\n                (\"result\", 15.0),\n            ]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 276,
                                    "end_token": 463,
                                    "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 278,
                                            "end_token": 288,
                                            "label": "(self, input_data: Input, **kwargs)",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 292,
                                            "end_token": 463,
                                            "label": ":\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 294,
                                                    "end_token": 299,
                                                    "label": "operation = input_data.operation\n",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 300,
                                                    "end_token": 305,
                                                    "label": "a = input_data.a\n",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 306,
                                                    "end_token": 311,
                                                    "label": "b = input_data.b\n",
                                                    "children": []
                                                },
                                                {
                                                    "type": "dictionary",
                                                    "start_token": 313,
                                                    "end_token": 362,
                                                    "label": "operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "start_token": 317,
                                                            "end_token": 324,
                                                            "label": "Operation.ADD: operator.add,",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 326,
                                                            "end_token": 332,
                                                            "label": "Operation.SUBTRACT: operator.sub",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 335,
                                                            "end_token": 341,
                                                            "label": "Operation.MULTIPLY: operator.mul",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 344,
                                                            "end_token": 350,
                                                            "label": "Operation.DIVIDE: operator.truediv",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 353,
                                                            "end_token": 359,
                                                            "label": "Operation.POWER: operator.pow",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 365,
                                                    "end_token": 370,
                                                    "label": "op_func = operations[operation]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "try_statement",
                                                    "start_token": 373,
                                                    "end_token": 462,
                                                    "label": "try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 374,
                                                            "end_token": 462,
                                                            "label": ":\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 376,
                                                                    "end_token": 394,
                                                                    "label": "if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 388,
                                                                            "end_token": 394,
                                                                            "label": ":\n                raise ZeroDivisionError(\"Cannot divide by zero\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 390,
                                                                                    "end_token": 394,
                                                                                    "label": "raise ZeroDivisionError(\"Cannot divide by zero\")",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 397,
                                                                    "end_token": 404,
                                                                    "label": "result = op_func(a, b)",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 407,
                                                                    "end_token": 418,
                                                                    "label": "if input_data.round_result:\n                result = round(result)",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 411,
                                                                            "end_token": 418,
                                                                            "label": ":\n                result = round(result)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "start_token": 413,
                                                                                    "end_token": 418,
                                                                                    "label": "result = round(result)",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "yield",
                                                                    "start_token": 421,
                                                                    "end_token": 424,
                                                                    "label": "yield \"result\", result",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 427,
                                                                    "end_token": 444,
                                                                    "label": "except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 428,
                                                                            "end_token": 444,
                                                                            "label": "ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                                                                            "children": [
                                                                                {
                                                                                    "type": "yield",
                                                                                    "start_token": 431,
                                                                                    "end_token": 434,
                                                                                    "label": "yield \"result\", float",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 446,
                                                                    "end_token": 462,
                                                                    "label": "except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 447,
                                                                            "end_token": 462,
                                                                            "label": "Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                                                                            "children": [
                                                                                {
                                                                                    "type": "yield",
                                                                                    "start_token": 450,
                                                                                    "end_token": 453,
                                                                                    "label": "yield \"result\", float",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "start_token": 466,
                    "end_token": 709,
                    "label": "class CountItemsBlock(Block):\n    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
                    "children": [
                        {
                            "type": "block",
                            "start_token": 466,
                            "end_token": 709,
                            "label": "class CountItemsBlock(Block):\n    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
                            "children": [
                                {
                                    "type": "class_definition",
                                    "start_token": 473,
                                    "end_token": 497,
                                    "label": "class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 473,
                                            "end_token": 497,
                                            "label": "class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 480,
                                                    "end_token": 497,
                                                    "label": "collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "class_definition",
                                    "start_token": 500,
                                    "end_token": 516,
                                    "label": "class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 500,
                                            "end_token": 516,
                                            "label": "class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 507,
                                                    "end_token": 516,
                                                    "label": "count: int = SchemaField(description=\"The number of items in the collection\")",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 519,
                                    "end_token": 599,
                                    "label": "def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 519,
                                            "end_token": 599,
                                            "label": "def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 526,
                                                    "end_token": 599,
                                                    "label": "super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
                                                    "children": [
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 533,
                                                            "end_token": 535,
                                                            "label": "id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 538,
                                                            "end_token": 542,
                                                            "label": "input_schema=CountItemsBlock.Input",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 545,
                                                            "end_token": 549,
                                                            "label": "output_schema=CountItemsBlock.Output",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 552,
                                                            "end_token": 554,
                                                            "label": "description=\"Counts the number of items in a collection.\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 557,
                                                            "end_token": 563,
                                                            "label": "categories={BlockCategory.LOGIC}",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 566,
                                                            "end_token": 582,
                                                            "label": "test_input={\"collection\": [1, 2, 3, 4, 5]}",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "keyword_argument",
                                                            "start_token": 585,
                                                            "end_token": 596,
                                                            "label": "test_output=[\n                (\"count\", 5),\n            ]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 602,
                                    "end_token": 709,
                                    "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 604,
                                            "end_token": 614,
                                            "label": "(self, input_data: Input, **kwargs)",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 618,
                                            "end_token": 709,
                                            "label": ":\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 620,
                                                    "end_token": 624,
                                                    "label": "collection = input_data.collection",
                                                    "children": []
                                                },
                                                {
                                                    "type": "try_statement",
                                                    "start_token": 627,
                                                    "end_token": 708,
                                                    "label": "try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 628,
                                                            "end_token": 708,
                                                            "label": ":\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 630,
                                                                    "end_token": 646,
                                                                    "label": "if isinstance(collection, (str, list, tuple, set, dict))",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 647,
                                                                            "end_token": 654,
                                                                            "label": ":\n                count = len(collection)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "start_token": 649,
                                                                                    "end_token": 654,
                                                                                    "label": "count = len(collection)",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 656,
                                                                    "end_token": 674,
                                                                    "label": "elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 675,
                                                                            "end_token": 675,
                                                                            "label": "\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "start_token": 677,
                                                                                    "end_token": 674,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "yield",
                                                                    "start_token": 686,
                                                                    "end_token": 689,
                                                                    "label": "yield \"count\", count",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 692,
                                                                    "end_token": 709,
                                                                    "label": "except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 693,
                                                                            "end_token": 709,
                                                                            "label": "Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "yield",
                                                                                    "start_token": 696,
                                                                                    "end_token": 699,
                                                                                    "label": "yield \"count\", -",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}