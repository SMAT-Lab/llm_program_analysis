{
    "type": "module",
    "start_token": 0,
    "end_token": 332,
    "label": "from urllib.parse import quote\n\nimport requests\n\nfrom backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass FactCheckerBlock(Block):\n    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 5,
            "label": "from urllib.parse import quote",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 0,
                    "end_token": 4,
                    "label": "from urllib.parse import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 5,
                    "end_token": 5,
                    "label": "quote",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 8,
            "end_token": 9,
            "label": "import requests",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 12,
            "end_token": 32,
            "label": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 12,
                    "end_token": 20,
                    "label": "from backend.blocks.jina._auth import",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 21,
                    "end_token": 32,
                    "label": "(\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 23,
                            "end_token": 23,
                            "label": "JinaCredentials",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 26,
                            "end_token": 26,
                            "label": "JinaCredentialsField",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 29,
                            "end_token": 29,
                            "label": "JinaCredentialsInput",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 34,
            "end_token": 47,
            "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 34,
                    "end_token": 40,
                    "label": "from backend.data.block import",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 41,
                    "end_token": 47,
                    "label": "Block, BlockCategory, BlockOutput, BlockSchema",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 41,
                            "end_token": 41,
                            "label": "Block",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 43,
                            "end_token": 43,
                            "label": "BlockCategory",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 45,
                            "end_token": 45,
                            "label": "BlockOutput",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 49,
            "end_token": 56,
            "label": "from backend.data.model import SchemaField",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 49,
                    "end_token": 55,
                    "label": "from backend.data.model import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 56,
                    "end_token": 56,
                    "label": "SchemaField",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 60,
            "end_token": 332,
            "label": "class FactCheckerBlock(Block):\n    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 61,
                    "end_token": 61,
                    "label": "FactCheckerBlock",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 62,
                    "end_token": 64,
                    "label": "(Block)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 63,
                            "end_token": 63,
                            "label": "Block",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 65,
                    "end_token": 332,
                    "label": ":\n    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
                    "children": [
                        {
                            "type": "class_definition",
                            "start_token": 67,
                            "end_token": 94,
                            "label": "class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 68,
                                    "end_token": 68,
                                    "label": "Input",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 69,
                                    "end_token": 71,
                                    "label": "(BlockSchema)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 70,
                                            "end_token": 70,
                                            "label": "BlockSchema",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 72,
                                    "end_token": 94,
                                    "label": ":\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 74,
                                            "end_token": 85,
                                            "label": "statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 87,
                                            "end_token": 93,
                                            "label": "credentials: JinaCredentialsInput = JinaCredentialsField()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "class_definition",
                            "start_token": 96,
                            "end_token": 147,
                            "label": "class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 97,
                                    "end_token": 97,
                                    "label": "Output",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 98,
                                    "end_token": 100,
                                    "label": "(BlockSchema)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 99,
                                            "end_token": 99,
                                            "label": "BlockSchema",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 101,
                                    "end_token": 147,
                                    "label": ":\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 103,
                                            "end_token": 114,
                                            "label": "factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 116,
                                            "end_token": 125,
                                            "label": "result: bool = SchemaField(description=\"The result of the factuality check\")",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 127,
                                            "end_token": 136,
                                            "label": "reason: str = SchemaField(description=\"The reason for the factuality result\")",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 138,
                                            "end_token": 147,
                                            "label": "error: str = SchemaField(description=\"Error message if the check fails\")",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 150,
                            "end_token": 198,
                            "label": "def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 151,
                                    "end_token": 151,
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 152,
                                    "end_token": 154,
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 153,
                                            "end_token": 153,
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 155,
                                    "end_token": 198,
                                    "label": ":\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 157,
                                            "end_token": 197,
                                            "label": "super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "start_token": 157,
                                                    "end_token": 161,
                                                    "label": "super().__init__",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 157,
                                                            "end_token": 157,
                                                            "label": "super",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 161,
                                                            "end_token": 161,
                                                            "label": "__init__",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 162,
                                                    "end_token": 197,
                                                    "label": "(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )",
                                                    "children": [
                                                        {
                                                            "type": "pair",
                                                            "start_token": 164,
                                                            "end_token": 166,
                                                            "label": "id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 169,
                                                            "end_token": 171,
                                                            "label": "description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 174,
                                                            "end_token": 180,
                                                            "label": "categories={BlockCategory.SEARCH}",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 183,
                                                            "end_token": 188,
                                                            "label": "input_schema=FactCheckerBlock.Input,",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "pair",
                                                            "start_token": 190,
                                                            "end_token": 195,
                                                            "label": "output_schema=FactCheckerBlock.Output,",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 200,
                            "end_token": 332,
                            "label": "def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 201,
                                    "end_token": 201,
                                    "label": "run",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 202,
                                    "end_token": 220,
                                    "label": "(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    )",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 204,
                                            "end_token": 204,
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 206,
                                            "end_token": 217,
                                            "label": "input_data: Input, *, credentials: JinaCredentials, **",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 224,
                                    "end_token": 332,
                                    "label": ":\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 226,
                                            "end_token": 233,
                                            "label": "encoded_statement = quote(input_data.statement)",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 235,
                                            "end_token": 239,
                                            "label": "url = f\"https://g.jina.ai/{encoded_statement}\"\n",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 241,
                                            "end_token": 254,
                                            "label": "headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 259,
                                            "end_token": 270,
                                            "label": "response = requests.get(url, headers=headers)",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 272,
                                            "end_token": 276,
                                            "label": "response.raise_for_status()",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 278,
                                            "end_token": 284,
                                            "label": "data = response.json()",
                                            "children": []
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 287,
                                            "end_token": 332,
                                            "label": "if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 288,
                                                    "end_token": 290,
                                                    "label": "\"data\" in data",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 291,
                                                    "end_token": 322,
                                                    "label": ":\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 293,
                                                            "end_token": 298,
                                                            "label": "data = data[\"data\"]",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "yield",
                                                            "start_token": 300,
                                                            "end_token": 306,
                                                            "label": "yield \"factuality\", data[\"factuality\"]",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "yield",
                                                            "start_token": 308,
                                                            "end_token": 314,
                                                            "label": "yield \"result\", data[\"result\"]",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "yield",
                                                            "start_token": 316,
                                                            "end_token": 322,
                                                            "label": "yield \"reason\", data[\"reason\"]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}