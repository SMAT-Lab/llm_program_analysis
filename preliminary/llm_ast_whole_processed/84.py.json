{
    "type": "module",
    "start_token": 0,
    "end_token": 684,
    "label": "from datetime import datetime, timezone\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket\n\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import Methods, WsMessage\n\n\n@pytest.fixture\ndef connection_manager() -> ConnectionManager:\n    return ConnectionManager()\n\n\n@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket\n\n\n@pytest.mark.asyncio\nasync def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()\n\n\ndef test_disconnect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.active_connections.add(mock_websocket)\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    connection_manager.disconnect(mock_websocket)\n\n    assert mock_websocket not in connection_manager.active_connections\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]\n\n\n@pytest.mark.asyncio\nasync def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n\n\n@pytest.mark.asyncio\nasync def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n\n    assert \"test_graph\" not in connection_manager.subscriptions\n\n\n@pytest.mark.asyncio\nasync def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )\n\n\n@pytest.mark.asyncio\nasync def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_not_called()\n",
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 5,
            "label": "from datetime import datetime, timezone",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "datetime",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 2,
                    "end_token": 2,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "datetime",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 5,
                    "end_token": 5,
                    "label": "timezone",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 7,
            "end_token": 12,
            "label": "from unittest.mock import AsyncMock",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 8,
                    "end_token": 10,
                    "label": "unittest.mock",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 11,
                    "end_token": 11,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 12,
                    "end_token": 12,
                    "label": "AsyncMock",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 15,
            "end_token": 16,
            "label": "import pytest",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 16,
                    "end_token": 16,
                    "label": "pytest",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 18,
            "end_token": 21,
            "label": "from fastapi import WebSocket",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 19,
                    "end_token": 19,
                    "label": "fastapi",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 20,
                    "end_token": 20,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 21,
                    "end_token": 21,
                    "label": "WebSocket",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 24,
            "end_token": 33,
            "label": "from backend.data.execution import ExecutionResult, ExecutionStatus",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 25,
                    "end_token": 29,
                    "label": "backend.data.execution",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 30,
                    "end_token": 30,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 31,
                    "end_token": 31,
                    "label": "ExecutionResult",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 33,
                    "end_token": 33,
                    "label": "ExecutionStatus",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 35,
            "end_token": 42,
            "label": "from backend.server.conn_manager import ConnectionManager",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 36,
                    "end_token": 40,
                    "label": "backend.server.conn_manager",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 41,
                    "end_token": 41,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 42,
                    "end_token": 42,
                    "label": "ConnectionManager",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 44,
            "end_token": 53,
            "label": "from backend.server.model import Methods, WsMessage",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 45,
                    "end_token": 49,
                    "label": "backend.server.model",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 50,
                    "end_token": 50,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 51,
                    "end_token": 51,
                    "label": "Methods",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 53,
                    "end_token": 53,
                    "label": "WsMessage",
                    "children": []
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 57,
            "end_token": 75,
            "label": "@pytest.fixture\ndef connection_manager() -> ConnectionManager:\n    return ConnectionManager()\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 57,
                    "end_token": 60,
                    "label": "@pytest.fixture",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 62,
                    "end_token": 75,
                    "label": "def connection_manager() -> ConnectionManager:\n    return ConnectionManager()\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 64,
                            "end_token": 65,
                            "label": "()",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": 67,
                            "end_token": 68,
                            "label": "> ConnectionManager",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 69,
                            "end_token": 75,
                            "label": ":\n    return ConnectionManager()\n",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 71,
                                    "end_token": 74,
                                    "label": "return ConnectionManager()",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 72,
                                            "end_token": 72,
                                            "label": "ConnectionManager",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 78,
            "end_token": 113,
            "label": "@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 78,
                    "end_token": 81,
                    "label": "@pytest.fixture",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 83,
                    "end_token": 113,
                    "label": "def mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 85,
                            "end_token": 86,
                            "label": "()",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": 88,
                            "end_token": 89,
                            "label": "> AsyncMock",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 90,
                            "end_token": 113,
                            "label": ":\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket\n",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 92,
                                    "end_token": 101,
                                    "label": "websocket: AsyncMock = AsyncMock(spec=WebSocket)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 92,
                                            "end_token": 92,
                                            "label": "websocket",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 96,
                                            "end_token": 101,
                                            "label": "AsyncMock(spec=WebSocket)",
                                            "children": [
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 98,
                                                    "end_token": 100,
                                                    "label": "spec=WebSocket",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 103,
                                    "end_token": 110,
                                    "label": "websocket.send_text = AsyncMock()\n",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 103,
                                            "end_token": 105,
                                            "label": "websocket.send_text",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 107,
                                            "end_token": 109,
                                            "label": "AsyncMock()",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 111,
                                    "end_token": 112,
                                    "label": "return websocket",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 116,
            "end_token": 164,
            "label": "@pytest.mark.asyncio\nasync def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 116,
                    "end_token": 121,
                    "label": "@pytest.mark.asyncio",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 124,
                    "end_token": 164,
                    "label": "def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 126,
                            "end_token": 136,
                            "label": "(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n)",
                            "children": [
                                {
                                    "type": "parameter",
                                    "start_token": 127,
                                    "end_token": 130,
                                    "label": "\n    connection_manager: ConnectionManager",
                                    "children": []
                                },
                                {
                                    "type": "parameter",
                                    "start_token": 132,
                                    "end_token": 134,
                                    "label": "mock_websocket: AsyncMock",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 140,
                            "end_token": 164,
                            "label": ":\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()\n",
                            "children": [
                                {
                                    "type": "await",
                                    "start_token": 142,
                                    "end_token": 148,
                                    "label": "await connection_manager.connect(mock_websocket)",
                                    "children": []
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 150,
                                    "end_token": 155,
                                    "label": "assert mock_websocket in connection_manager.active_connections",
                                    "children": []
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 157,
                                    "end_token": 163,
                                    "label": "mock_websocket.accept.assert_called_once()",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 167,
            "end_token": 232,
            "label": "def test_disconnect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.active_connections.add(mock_websocket)\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    connection_manager.disconnect(mock_websocket)\n\n    assert mock_websocket not in connection_manager.active_connections\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]\n",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 169,
                    "end_token": 179,
                    "label": "(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n)",
                    "children": [
                        {
                            "type": "parameter",
                            "start_token": 170,
                            "end_token": 173,
                            "label": "\n    connection_manager: ConnectionManager",
                            "children": []
                        },
                        {
                            "type": "parameter",
                            "start_token": 175,
                            "end_token": 177,
                            "label": "mock_websocket: AsyncMock",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 183,
                    "end_token": 232,
                    "label": ":\n    connection_manager.active_connections.add(mock_websocket)\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    connection_manager.disconnect(mock_websocket)\n\n    assert mock_websocket not in connection_manager.active_connections\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]\n",
                    "children": [
                        {
                            "type": "call",
                            "start_token": 185,
                            "end_token": 192,
                            "label": "connection_manager.active_connections.add(mock_websocket)",
                            "children": [
                                {
                                    "type": "attribute",
                                    "start_token": 187,
                                    "end_token": 189,
                                    "label": "active_connections.add",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 194,
                            "end_token": 203,
                            "label": "connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
                            "children": [
                                {
                                    "type": "subscript",
                                    "start_token": 196,
                                    "end_token": 199,
                                    "label": "subscriptions[\"test_graph\"]",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 206,
                            "end_token": 211,
                            "label": "connection_manager.disconnect(mock_websocket)",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 206,
                                    "end_token": 210,
                                    "label": "connection_manager.disconnect(mock_websocket",
                                    "children": [
                                        {
                                            "type": "parameter",
                                            "start_token": 208,
                                            "end_token": 209,
                                            "label": "disconnect(",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assert_statement",
                            "start_token": 214,
                            "end_token": 221,
                            "label": "assert mock_websocket not in connection_manager.active_connections\n",
                            "children": []
                        },
                        {
                            "type": "assert_statement",
                            "start_token": 222,
                            "end_token": 231,
                            "label": "assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 235,
            "end_token": 280,
            "label": "@pytest.mark.asyncio\nasync def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 235,
                    "end_token": 240,
                    "label": "@pytest.mark.asyncio",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 243,
                    "end_token": 280,
                    "label": "def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 245,
                            "end_token": 255,
                            "label": "(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n)",
                            "children": [
                                {
                                    "type": "parameter",
                                    "start_token": 246,
                                    "end_token": 249,
                                    "label": "\n    connection_manager: ConnectionManager",
                                    "children": []
                                },
                                {
                                    "type": "parameter",
                                    "start_token": 251,
                                    "end_token": 253,
                                    "label": "mock_websocket: AsyncMock",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 259,
                            "end_token": 280,
                            "label": ":\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n",
                            "children": [
                                {
                                    "type": "await",
                                    "start_token": 261,
                                    "end_token": 269,
                                    "label": "await connection_manager.subscribe(\"test_graph\", mock_websocket)",
                                    "children": []
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 271,
                                    "end_token": 279,
                                    "label": "assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 283,
            "end_token": 339,
            "label": "@pytest.mark.asyncio\nasync def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n\n    assert \"test_graph\" not in connection_manager.subscriptions\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 283,
                    "end_token": 288,
                    "label": "@pytest.mark.asyncio",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 291,
                    "end_token": 339,
                    "label": "def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n\n    assert \"test_graph\" not in connection_manager.subscriptions\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 293,
                            "end_token": 303,
                            "label": "(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n)",
                            "children": [
                                {
                                    "type": "parameter",
                                    "start_token": 294,
                                    "end_token": 297,
                                    "label": "\n    connection_manager: ConnectionManager",
                                    "children": []
                                },
                                {
                                    "type": "parameter",
                                    "start_token": 299,
                                    "end_token": 301,
                                    "label": "mock_websocket: AsyncMock",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 307,
                            "end_token": 339,
                            "label": ":\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n\n    assert \"test_graph\" not in connection_manager.subscriptions\n",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 309,
                                    "end_token": 318,
                                    "label": "connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
                                    "children": [
                                        {
                                            "type": "subscript",
                                            "start_token": 311,
                                            "end_token": 313,
                                            "label": "subscriptions[\"test_graph\"",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "await",
                                    "start_token": 321,
                                    "end_token": 329,
                                    "label": "await connection_manager.unsubscribe(\"test_graph\", mock_websocket)",
                                    "children": []
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 333,
                                    "end_token": 338,
                                    "label": "\"test_graph\" not in connection_manager.subscriptions",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 342,
            "end_token": 540,
            "label": "@pytest.mark.asyncio\nasync def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 342,
                    "end_token": 347,
                    "label": "@pytest.mark.asyncio",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 350,
                    "end_token": 540,
                    "label": "def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 352,
                            "end_token": 362,
                            "label": "(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n)",
                            "children": [
                                {
                                    "type": "parameter",
                                    "start_token": 354,
                                    "end_token": 357,
                                    "label": "connection_manager: ConnectionManager,",
                                    "children": []
                                },
                                {
                                    "type": "parameter",
                                    "start_token": 359,
                                    "end_token": 361,
                                    "label": ": AsyncMock\n",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 366,
                            "end_token": 540,
                            "label": ":\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )\n",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 368,
                                    "end_token": 377,
                                    "label": "connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
                                    "children": [
                                        {
                                            "type": "subscript",
                                            "start_token": 370,
                                            "end_token": 372,
                                            "label": "subscriptions[\"test_graph\"",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 379,
                                    "end_token": 488,
                                    "label": "result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 380,
                                            "end_token": 381,
                                            "label": ": ExecutionResult",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 383,
                                            "end_token": 487,
                                            "label": "ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc)",
                                            "children": [
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 386,
                                                    "end_token": 388,
                                                    "label": "graph_id=\"test_graph\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 391,
                                                    "end_token": 393,
                                                    "label": "graph_version=1",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 396,
                                                    "end_token": 398,
                                                    "label": "graph_exec_id=\"test_exec_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 401,
                                                    "end_token": 403,
                                                    "label": "node_exec_id=\"test_node_exec_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 406,
                                                    "end_token": 408,
                                                    "label": "node_id=\"test_node_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 411,
                                                    "end_token": 413,
                                                    "label": "block_id=\"test_block_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 416,
                                                    "end_token": 421,
                                                    "label": "status=ExecutionStatus.COMPLETED,",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 424,
                                                    "end_token": 429,
                                                    "label": "={\"input1\": \"value1\"}",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 432,
                                                    "end_token": 439,
                                                    "label": "output_data={\"output1\": [\"result1\"]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 443,
                                                    "end_token": 454,
                                                    "label": "add_time=datetime.now(tz=timezone.utc)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 457,
                                                    "end_token": 459,
                                                    "label": "queue_time=None",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 462,
                                                    "end_token": 473,
                                                    "label": "start_time=datetime.now(tz=timezone.utc)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 476,
                                                    "end_token": 487,
                                                    "label": "end_time=datetime.now(tz=timezone.utc)",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "await",
                                    "start_token": 493,
                                    "end_token": 499,
                                    "label": "await connection_manager.send_execution_result(result)",
                                    "children": []
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 502,
                                    "end_token": 537,
                                    "label": "mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 506,
                                            "end_token": 536,
                                            "label": "assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json(",
                                            "children": [
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 512,
                                                    "end_token": 516,
                                                    "label": "method=Methods.EXECUTION_EVENT",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 519,
                                                    "end_token": 521,
                                                    "label": "channel=\"test_graph\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 524,
                                                    "end_token": 528,
                                                    "label": "data=result.model_dump",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "decorated_definition",
            "start_token": 543,
            "end_token": 684,
            "label": "@pytest.mark.asyncio\nasync def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_not_called()\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 543,
                    "end_token": 548,
                    "label": "@pytest.mark.asyncio",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 551,
                    "end_token": 684,
                    "label": "def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_not_called()\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 553,
                            "end_token": 563,
                            "label": "(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n)",
                            "children": [
                                {
                                    "type": "parameter",
                                    "start_token": 555,
                                    "end_token": 558,
                                    "label": "connection_manager: ConnectionManager,",
                                    "children": []
                                },
                                {
                                    "type": "parameter",
                                    "start_token": 560,
                                    "end_token": 562,
                                    "label": ": AsyncMock\n",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 567,
                            "end_token": 684,
                            "label": ":\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_not_called()\n",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 569,
                                    "end_token": 631,
                                    "label": "result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 570,
                                            "end_token": 571,
                                            "label": ": ExecutionResult",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 573,
                                            "end_token": 630,
                                            "label": "ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]}",
                                            "children": [
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 576,
                                                    "end_token": 578,
                                                    "label": "graph_id=\"test_graph\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 581,
                                                    "end_token": 583,
                                                    "label": "graph_version=1",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 586,
                                                    "end_token": 588,
                                                    "label": "graph_exec_id=\"test_exec_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 591,
                                                    "end_token": 593,
                                                    "label": "node_exec_id=\"test_node_exec_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 596,
                                                    "end_token": 598,
                                                    "label": "node_id=\"test_node_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 601,
                                                    "end_token": 603,
                                                    "label": "block_id=\"test_block_id\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 606,
                                                    "end_token": 611,
                                                    "label": "status=ExecutionStatus.COMPLETED,",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 613,
                                                    "end_token": 619,
                                                    "label": "input_data={\"input1\": \"value1\"}",
                                                    "children": []
                                                },
                                                {
                                                    "type": "keyword_argument",
                                                    "start_token": 622,
                                                    "end_token": 629,
                                                    "label": "output_data={\"output1\": [\"result1\"]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "await",
                                    "start_token": 668,
                                    "end_token": 674,
                                    "label": "await connection_manager.send_execution_result(result)",
                                    "children": []
                                },
                                {
                                    "type": "assert_statement",
                                    "start_token": 677,
                                    "end_token": 683,
                                    "label": "mock_websocket.send_text.assert_not_called()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 679,
                                            "end_token": 681,
                                            "label": "send_text.assert_not_called",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}