{
    "type": "module",
    "start_token": 0,
    "end_token": 224,
    "label": "",
    "children": [
        {
            "type": "future_import_statement",
            "start_token": 0,
            "end_token": 3,
            "label": "from __future__ import annotations",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "__future__",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "annotations",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 6,
            "end_token": 9,
            "label": "from abc import abstractmethod",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 7,
                    "end_token": 7,
                    "label": "abc",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 9,
                    "end_token": 9,
                    "label": "abstractmethod",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 11,
            "end_token": 14,
            "label": "from math import pi",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 12,
                    "end_token": 12,
                    "label": "math",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 14,
                    "end_token": 14,
                    "label": "pi",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 16,
            "end_token": 19,
            "label": "from typing import Protocol",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 17,
                    "end_token": 17,
                    "label": "typing",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 19,
                    "end_token": 19,
                    "label": "Protocol",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 22,
            "end_token": 27,
            "label": "import matplotlib.pyplot as plt",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 23,
                    "end_token": 25,
                    "label": "matplotlib.pyplot",
                    "children": []
                },
                {
                    "type": "as_pattern",
                    "start_token": 25,
                    "end_token": 27,
                    "label": "pyplot as plt",
                    "children": [
                        {
                            "type": "as_pattern_target",
                            "start_token": 27,
                            "end_token": 27,
                            "label": "plt",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 29,
            "end_token": 32,
            "label": "import numpy as np",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 30,
                    "end_token": 30,
                    "label": "numpy",
                    "children": []
                },
                {
                    "type": "as_pattern",
                    "start_token": 31,
                    "end_token": 32,
                    "label": "as np",
                    "children": [
                        {
                            "type": "as_pattern_target",
                            "start_token": 32,
                            "end_token": 32,
                            "label": "np",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 36,
            "end_token": 94,
            "label": "class FilterType(Protocol):\n    @abstractmethod\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"\n\n\ndef get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 37,
                    "end_token": 37,
                    "label": "FilterType",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 38,
                    "end_token": 40,
                    "label": "(Protocol)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 39,
                            "end_token": 39,
                            "label": "Protocol",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 41,
                    "end_token": 94,
                    "label": ":\n    @abstractmethod\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"\n\n\ndef get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n",
                    "children": [
                        {
                            "type": "decorated_definition",
                            "start_token": 43,
                            "end_token": 58,
                            "label": "@abstractmethod\n    def process(self, sample: float) -> float:",
                            "children": [
                                {
                                    "type": "decorator",
                                    "start_token": 43,
                                    "end_token": 44,
                                    "label": "@abstractmethod",
                                    "children": []
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 46,
                                    "end_token": 58,
                                    "label": "def process(self, sample: float) -> float:",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 47,
                                            "end_token": 47,
                                            "label": "process",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "start_token": 48,
                                            "end_token": 54,
                                            "label": "(self, sample: float)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 49,
                                                    "end_token": 49,
                                                    "label": "self",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 51,
                                                    "end_token": 53,
                                                    "label": "sample: float",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 56,
                                            "end_token": 57,
                                            "label": "> float",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "string",
                            "start_token": 60,
                            "end_token": 62,
                            "label": "\"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 66,
            "end_token": 116,
            "label": "def get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n    return lowest, highest\n\n\ndef show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n\n    plt.plot(fft_db)\n    plt.show()\n\n\ndef show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 67,
                    "end_token": 67,
                    "label": "get_bounds",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 68,
                    "end_token": 80,
                    "label": "(\n    fft_results: np.ndarray, samplerate: int\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 70,
                            "end_token": 74,
                            "label": "fft_results: np.ndarray",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 76,
                            "end_token": 78,
                            "label": "samplerate: int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 82,
                    "end_token": 92,
                    "label": "> tuple[int | float, int | float]",
                    "children": [
                        {
                            "type": "union_type",
                            "start_token": 84,
                            "end_token": 91,
                            "label": "[int | float, int | float",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 93,
                    "end_token": 116,
                    "label": ":\n    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n    return lowest, highest\n\n\ndef show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n\n    plt.plot(fft_db)\n    plt.show()\n\n\ndef show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()\n",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 95,
                            "end_token": 97,
                            "label": "\"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 99,
                            "end_token": 115,
                            "label": "lowest = min([-20, np.min(fft_results[1 : samplerate",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 99,
                                    "end_token": 99,
                                    "label": "lowest",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 101,
                                    "end_token": 115,
                                    "label": "min([-20, np.min(fft_results[1 : samplerate",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 117,
            "end_token": 186,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 118,
                    "end_token": 118,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 119,
                    "end_token": 126,
                    "label": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 121,
                            "end_token": 123,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 124,
                            "end_token": 126,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 128,
                    "end_token": 129,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 130,
                    "end_token": 186,
                    "label": "",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 132,
                            "end_token": 134,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 136,
                            "end_token": 186,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 136,
                                    "end_token": 136,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "expression_list",
                                    "start_token": 139,
                                    "end_token": 186,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "binary_operator",
                                            "start_token": 142,
                                            "end_token": 181,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 183,
                                            "end_token": 186,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 188,
            "end_token": 224,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 189,
                    "end_token": 189,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 190,
                    "end_token": 197,
                    "label": "",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 192,
                            "end_token": 194,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 195,
                            "end_token": 197,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 199,
                    "end_token": 200,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 201,
                    "end_token": 224,
                    "label": "",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 203,
                            "end_token": 205,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 207,
                            "end_token": 224,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 207,
                                    "end_token": 207,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "expression_list",
                                    "start_token": 210,
                                    "end_token": 224,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "binary_operator",
                                            "start_token": 213,
                                            "end_token": 220,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 222,
                                            "end_token": 224,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}