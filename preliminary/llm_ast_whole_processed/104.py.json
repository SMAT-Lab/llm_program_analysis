{
    "type": "module",
    "start_token": 0,
    "end_token": 325,
    "label": "import datetime\nimport typing\n\nimport fuzzywuzzy.fuzz\nimport prisma.enums\nimport prisma.errors\nimport prisma.models\nimport prisma.types\nimport pydantic\n\nimport market.model\nimport market.utils.extension_types\n\n\nclass AgentQueryError(Exception):\n    \"\"\"Custom exception for agent query errors\"\"\"\n\n    pass\n\n\nclass TopAgentsDBResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n\n\nclass FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n\n\nasync def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def create_agent_entry(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n):\n    \"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 31,
            "label": "import datetime\nimport typing\n\nimport fuzzywuzzy.fuzz\nimport prisma.enums\nimport prisma.errors\nimport prisma.models\nimport prisma.types\n",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 1,
                    "end_token": 19,
                    "label": "datetime\nimport typing\n\nimport fuzzywuzzy.fuzz\nimport prisma.enums\nimport prisma.",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 1,
                            "end_token": 1,
                            "label": "datetime",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 4,
                            "end_token": 4,
                            "label": "typing",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 8,
                            "end_token": 10,
                            "label": "fuzzywuzzy.fuzz",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 13,
                            "end_token": 15,
                            "label": "prisma.enums",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 18,
                            "end_token": 19,
                            "label": "prisma.",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 32,
            "end_token": 34,
            "label": "import pydantic\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 33,
                    "end_token": 33,
                    "label": "pydantic",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 36,
            "end_token": 46,
            "label": "import market.model\nimport market.utils.extension_types",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 37,
                    "end_token": 45,
                    "label": "market.model\nimport market.utils.",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 37,
                            "end_token": 37,
                            "label": "market",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 39,
                            "end_token": 39,
                            "label": "model",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 42,
                            "end_token": 44,
                            "label": "market.utils",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 46,
                            "end_token": 46,
                            "label": "extension_types",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 50,
            "end_token": 60,
            "label": "class AgentQueryError(Exception):\n    \"\"\"Custom exception for agent query errors\"\"\"\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 51,
                    "end_token": 51,
                    "label": "AgentQueryError",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 55,
                    "end_token": 61,
                    "label": ":\n    \"\"\"Custom exception for agent query errors\"\"\"\n\n",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 57,
                            "end_token": 59,
                            "label": "\"\"\"Custom exception for agent query errors\"\"\"",
                            "children": []
                        },
                        {
                            "type": "pass_statement",
                            "start_token": 62,
                            "end_token": 62,
                            "label": "pass",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 66,
            "end_token": 107,
            "label": "class TopAgentsDBResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 67,
                    "end_token": 67,
                    "label": "TopAgentsDBResponse",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 73,
                    "end_token": 107,
                    "label": ":\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n\n",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 75,
                            "end_token": 77,
                            "label": "\"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 109,
            "end_token": 149,
            "label": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 110,
                    "end_token": 110,
                    "label": "FeaturedAgentResponse",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 116,
                    "end_token": 149,
                    "label": ":\n    \"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 118,
                            "end_token": 120,
                            "label": "\"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 152,
            "end_token": 223,
            "label": "async def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 154,
                    "end_token": 154,
                    "label": "delete_agent",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 155,
                    "end_token": 159,
                    "label": "(agent_id: str)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 156,
                            "end_token": 156,
                            "label": "agent_id",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 169,
                    "end_token": 223,
                    "label": ":\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n",
                    "children": [
                        {
                            "type": "try_statement",
                            "start_token": 175,
                            "end_token": 235,
                            "label": "try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                            "children": [
                                {
                                    "type": "block",
                                    "start_token": 199,
                                    "end_token": 204,
                                    "label": "agent_id}\n        )\n        return",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "start_token": 204,
                                            "end_token": 204,
                                            "label": "return",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 205,
                                                    "end_token": 205,
                                                    "label": "deleted_agent",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 208,
                                    "end_token": 222,
                                    "label": "prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "start_token": 217,
                                            "end_token": 222,
                                            "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 239,
            "end_token": 422,
            "label": "async def create_agent_entry(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n):\n    \"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 241,
                    "end_token": 241,
                    "label": "create_agent_entry",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 243,
                    "end_token": 302,
                    "label": "\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 245,
                            "end_token": 286,
                            "label": ": str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 249,
                                    "end_token": 249,
                                    "label": "description",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 255,
                                    "end_token": 255,
                                    "label": ":",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 259,
                                    "end_token": 259,
                                    "label": "keywords",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 269,
                                    "end_token": 269,
                                    "label": "categories",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 279,
                                    "end_token": 279,
                                    "label": "graph",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 289,
                                    "end_token": 289,
                                    "label": ".",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 293,
                                    "end_token": 293,
                                    "label": "=",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 305,
                    "end_token": 422,
                    "label": "\n    \"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                    "children": [
                        {
                            "type": "try_statement",
                            "start_token": 310,
                            "end_token": 422,
                            "label": "try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}