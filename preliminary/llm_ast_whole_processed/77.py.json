{
    "type": "module",
    "start_token": 0,
    "end_token": 1209,
    "label": "from math import cos, sin, sqrt, tau\n\nfrom audio_filters.iir_filter import IIRFilter\n\n\"\"\"\nCreate 2nd-order IIR filters with Butterworth design.\n\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\nAlternatively you can use scipy.signal.butter, which should yield the same results.\n\"\"\"\n\n\ndef make_lowpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n\n\ndef make_highpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n\n\ndef make_bandpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n\n\ndef make_allpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt\n\n\ndef make_peak(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n\n\ndef make_lowshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n\n\ndef make_highshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n",
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 9,
            "label": "from math import cos, sin, sqrt, tau",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "math",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "cos",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 5,
                    "end_token": 5,
                    "label": "sin",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 7,
                    "end_token": 7,
                    "label": "sqrt",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 9,
                    "end_token": 9,
                    "label": "tau",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 12,
            "end_token": 17,
            "label": "from audio_filters.iir_filter import IIRFilter",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 13,
                    "end_token": 15,
                    "label": "audio_filters.iir_filter",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 17,
                    "end_token": 17,
                    "label": "IIRFilter",
                    "children": []
                }
            ]
        },
        {
            "type": "string",
            "start_token": 20,
            "end_token": 22,
            "label": "\"\"\"\nCreate 2nd-order IIR filters with Butterworth design.\n\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\nAlternatively you can use scipy.signal.butter, which should yield the same results.\n\"\"\"",
            "children": []
        },
        {
            "type": "block",
            "start_token": 26,
            "end_token": 1209,
            "label": "def make_lowpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n\n\ndef make_highpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n\n\ndef make_bandpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n\n\ndef make_allpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt\n\n\ndef make_peak(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n\n\ndef make_lowshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n\n\ndef make_highshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n",
            "children": [
                {
                    "type": "function_definition",
                    "start_token": 26,
                    "end_token": 161,
                    "label": "def make_lowpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 28,
                            "end_token": 52,
                            "label": "(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n)",
                            "children": [
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 30,
                                    "end_token": 49,
                                    "label": "frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 35,
                                    "end_token": 37,
                                    "label": "samplerate: int",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 40,
                                    "end_token": 49,
                                    "label": "q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 57,
                            "end_token": 161,
                            "label": "\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 62,
                                    "end_token": 68,
                                    "label": "w0 = tau * frequency / samplerate",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 70,
                                    "end_token": 75,
                                    "label": "_sin = sin(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 77,
                                    "end_token": 82,
                                    "label": "_cos = cos(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 84,
                                    "end_token": 92,
                                    "label": "alpha = _sin / (2 * q_factor)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 95,
                                    "end_token": 103,
                                    "label": "b0 = (1 - _cos) / 2",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 105,
                                    "end_token": 108,
                                    "label": "b1 = 1 -",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 112,
                                    "end_token": 116,
                                    "label": "a0 = 1 + alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 118,
                                    "end_token": 123,
                                    "label": "a1 = -2 * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 125,
                                    "end_token": 129,
                                    "label": "a2 = 1 - alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 132,
                                    "end_token": 137,
                                    "label": "filt = IIRFilter(2)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 139,
                                    "end_token": 158,
                                    "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b0])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 139,
                                            "end_token": 141,
                                            "label": "filt.set_coefficients",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 142,
                                            "end_token": 158,
                                            "label": "([a0, a1, a2], [b0, b1, b0])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 143,
                                                    "end_token": 149,
                                                    "label": "[a0, a1, a2]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 151,
                                                    "end_token": 157,
                                                    "label": "[b0, b1, b0]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 160,
                                    "end_token": 161,
                                    "label": "return filt",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 165,
                    "end_token": 301,
                    "label": "def make_highpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 167,
                            "end_token": 191,
                            "label": "(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n)",
                            "children": [
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 169,
                                    "end_token": 188,
                                    "label": "frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 174,
                                    "end_token": 176,
                                    "label": "samplerate: int",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 179,
                                    "end_token": 188,
                                    "label": "q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 196,
                            "end_token": 301,
                            "label": "\n    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 201,
                                    "end_token": 207,
                                    "label": "w0 = tau * frequency / samplerate",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 209,
                                    "end_token": 214,
                                    "label": "_sin = sin(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 216,
                                    "end_token": 221,
                                    "label": "_cos = cos(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 223,
                                    "end_token": 231,
                                    "label": "alpha = _sin / (2 * q_factor)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 234,
                                    "end_token": 242,
                                    "label": "b0 = (1 + _cos) / 2",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 244,
                                    "end_token": 249,
                                    "label": "b1 = -1 - _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 252,
                                    "end_token": 256,
                                    "label": "a0 = 1 + alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 258,
                                    "end_token": 263,
                                    "label": "a1 = -2 * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 265,
                                    "end_token": 269,
                                    "label": "a2 = 1 - alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 272,
                                    "end_token": 277,
                                    "label": "filt = IIRFilter(2)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 279,
                                    "end_token": 298,
                                    "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b0])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 279,
                                            "end_token": 281,
                                            "label": "filt.set_coefficients",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 282,
                                            "end_token": 298,
                                            "label": "([a0, a1, a2], [b0, b1, b0])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 283,
                                                    "end_token": 289,
                                                    "label": "[a0, a1, a2]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 291,
                                                    "end_token": 297,
                                                    "label": "[b0, b1, b0]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 300,
                                    "end_token": 301,
                                    "label": "return filt",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 305,
                    "end_token": 439,
                    "label": "def make_bandpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 307,
                            "end_token": 331,
                            "label": "(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n)",
                            "children": [
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 309,
                                    "end_token": 328,
                                    "label": "frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 314,
                                    "end_token": 316,
                                    "label": "samplerate: int",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 319,
                                    "end_token": 328,
                                    "label": "q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 336,
                            "end_token": 439,
                            "label": "\n    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 341,
                                    "end_token": 347,
                                    "label": "w0 = tau * frequency / samplerate",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 349,
                                    "end_token": 354,
                                    "label": "_sin = sin(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 356,
                                    "end_token": 361,
                                    "label": "_cos = cos(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 363,
                                    "end_token": 371,
                                    "label": "alpha = _sin / (2 * q_factor)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 374,
                                    "end_token": 378,
                                    "label": "b0 = _sin / 2",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 380,
                                    "end_token": 382,
                                    "label": "b1 = 0",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 384,
                                    "end_token": 387,
                                    "label": "b2 = -b0",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 390,
                                    "end_token": 394,
                                    "label": "a0 = 1 + alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 396,
                                    "end_token": 401,
                                    "label": "a1 = -2 * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 403,
                                    "end_token": 407,
                                    "label": "a2 = 1 - alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 410,
                                    "end_token": 415,
                                    "label": "filt = IIRFilter(2)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 417,
                                    "end_token": 436,
                                    "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 417,
                                            "end_token": 419,
                                            "label": "filt.set_coefficients",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 420,
                                            "end_token": 436,
                                            "label": "([a0, a1, a2], [b0, b1, b2])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 421,
                                                    "end_token": 427,
                                                    "label": "[a0, a1, a2]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 429,
                                                    "end_token": 435,
                                                    "label": "[b0, b1, b2]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 438,
                                    "end_token": 439,
                                    "label": "return filt",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 443,
                    "end_token": 561,
                    "label": "def make_allpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 445,
                            "end_token": 469,
                            "label": "(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n)",
                            "children": [
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 447,
                                    "end_token": 466,
                                    "label": "frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 452,
                                    "end_token": 454,
                                    "label": "samplerate: int",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 457,
                                    "end_token": 466,
                                    "label": "q_factor: float = 1 / sqrt(2)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 474,
                            "end_token": 561,
                            "label": "\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 479,
                                    "end_token": 485,
                                    "label": "w0 = tau * frequency / samplerate",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 487,
                                    "end_token": 492,
                                    "label": "_sin = sin(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 494,
                                    "end_token": 499,
                                    "label": "_cos = cos(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 501,
                                    "end_token": 509,
                                    "label": "alpha = _sin / (2 * q_factor)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 512,
                                    "end_token": 516,
                                    "label": "b0 = 1 - alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 518,
                                    "end_token": 523,
                                    "label": "b1 = -2 * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 526,
                                    "end_token": 529,
                                    "label": "= 1 + alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 532,
                                    "end_token": 537,
                                    "label": "filt = IIRFilter(2)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 539,
                                    "end_token": 558,
                                    "label": "filt.set_coefficients([b2, b1, b0], [b0, b1, b2])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 539,
                                            "end_token": 541,
                                            "label": "filt.set_coefficients",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 542,
                                            "end_token": 558,
                                            "label": "([b2, b1, b0], [b0, b1, b2])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 543,
                                                    "end_token": 549,
                                                    "label": "[b2, b1, b0]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 551,
                                                    "end_token": 557,
                                                    "label": "[b0, b1, b2]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 560,
                                    "end_token": 561,
                                    "label": "return filt",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 565,
                    "end_token": 726,
                    "label": "def make_peak(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 567,
                            "end_token": 595,
                            "label": "(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n",
                            "children": [
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 569,
                                    "end_token": 594,
                                    "label": "frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 574,
                                    "end_token": 576,
                                    "label": "samplerate: int",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 584,
                                    "end_token": 594,
                                    "label": "q_factor: float = 1 / sqrt(2),",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 600,
                            "end_token": 726,
                            "label": ":\n    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 606,
                                    "end_token": 612,
                                    "label": "w0 = tau * frequency / samplerate",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 614,
                                    "end_token": 619,
                                    "label": "_sin = sin(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 621,
                                    "end_token": 626,
                                    "label": "_cos = cos(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 628,
                                    "end_token": 636,
                                    "label": "alpha = _sin / (2 * q_factor)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 638,
                                    "end_token": 648,
                                    "label": "big_a = 10 ** (gain_db / 40)\n",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 650,
                                    "end_token": 656,
                                    "label": "b0 = 1 + alpha * big_a",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 658,
                                    "end_token": 663,
                                    "label": "b1 = -2 * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 665,
                                    "end_token": 671,
                                    "label": "b2 = 1 - alpha * big_a",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 673,
                                    "end_token": 679,
                                    "label": "a0 = 1 + alpha / big_a",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 681,
                                    "end_token": 686,
                                    "label": "a1 = -2 * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 688,
                                    "end_token": 694,
                                    "label": "a2 = 1 - alpha / big_a",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 697,
                                    "end_token": 702,
                                    "label": "filt = IIRFilter(2)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 704,
                                    "end_token": 723,
                                    "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 704,
                                            "end_token": 706,
                                            "label": "filt.set_coefficients",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 707,
                                            "end_token": 723,
                                            "label": "([a0, a1, a2], [b0, b1, b2])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 708,
                                                    "end_token": 714,
                                                    "label": "[a0, a1, a2]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 716,
                                                    "end_token": 722,
                                                    "label": "[b0, b1, b2]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 725,
                                    "end_token": 726,
                                    "label": "return filt",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 730,
                    "end_token": 967,
                    "label": "def make_lowshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 732,
                            "end_token": 761,
                            "label": "(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n)",
                            "children": [
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 734,
                                    "end_token": 760,
                                    "label": "frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 739,
                                    "end_token": 741,
                                    "label": "samplerate: int",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 749,
                                    "end_token": 760,
                                    "label": "q_factor: float = 1 / sqrt(2),\n",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 766,
                            "end_token": 967,
                            "label": "\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 771,
                                    "end_token": 777,
                                    "label": "w0 = tau * frequency / samplerate",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 779,
                                    "end_token": 784,
                                    "label": "_sin = sin(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 786,
                                    "end_token": 791,
                                    "label": "_cos = cos(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 793,
                                    "end_token": 801,
                                    "label": "alpha = _sin / (2 * q_factor)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 803,
                                    "end_token": 812,
                                    "label": "big_a = 10 ** (gain_db / 40)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 814,
                                    "end_token": 888,
                                    "label": "pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 890,
                                    "end_token": 898,
                                    "label": "b0 = big_a * (pmc + aa2)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 900,
                                    "end_token": 906,
                                    "label": "b1 = 2 * big_a * mpc",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 908,
                                    "end_token": 916,
                                    "label": "b2 = big_a * (pmc - aa2)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 918,
                                    "end_token": 922,
                                    "label": "a0 = ppmc + aa2",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 924,
                                    "end_token": 929,
                                    "label": "a1 = -2 * pmpc",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 931,
                                    "end_token": 935,
                                    "label": "a2 = ppmc - aa2",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 938,
                                    "end_token": 943,
                                    "label": "filt = IIRFilter(2)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 945,
                                    "end_token": 964,
                                    "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 945,
                                            "end_token": 947,
                                            "label": "filt.set_coefficients",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 948,
                                            "end_token": 964,
                                            "label": "([a0, a1, a2], [b0, b1, b2])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 949,
                                                    "end_token": 955,
                                                    "label": "[a0, a1, a2]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 957,
                                                    "end_token": 963,
                                                    "label": "[b0, b1, b2]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 966,
                                    "end_token": 967,
                                    "label": "return filt",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 971,
                    "end_token": 1208,
                    "label": "def make_highshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 973,
                            "end_token": 1002,
                            "label": "(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n)",
                            "children": [
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 975,
                                    "end_token": 1000,
                                    "label": "frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 980,
                                    "end_token": 982,
                                    "label": "samplerate: int",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 990,
                                    "end_token": 1000,
                                    "label": "q_factor: float = 1 / sqrt(2),",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 1006,
                            "end_token": 1208,
                            "label": ":\n    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                            "children": [
                                {
                                    "type": "assignment",
                                    "start_token": 1012,
                                    "end_token": 1018,
                                    "label": "w0 = tau * frequency / samplerate",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1020,
                                    "end_token": 1025,
                                    "label": "_sin = sin(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1027,
                                    "end_token": 1032,
                                    "label": "_cos = cos(w0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1034,
                                    "end_token": 1042,
                                    "label": "alpha = _sin / (2 * q_factor)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1044,
                                    "end_token": 1053,
                                    "label": "big_a = 10 ** (gain_db / 40)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1055,
                                    "end_token": 1069,
                                    "label": "pmc = (big_a + 1) - (big_a - 1) * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1071,
                                    "end_token": 1085,
                                    "label": "ppmc = (big_a + 1) + (big_a - 1) * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1087,
                                    "end_token": 1101,
                                    "label": "mpc = (big_a - 1) - (big_a + 1) * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1103,
                                    "end_token": 1117,
                                    "label": "pmpc = (big_a - 1) + (big_a + 1) * _cos",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1119,
                                    "end_token": 1128,
                                    "label": "aa2 = 2 * sqrt(big_a) * alpha",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1131,
                                    "end_token": 1139,
                                    "label": "b0 = big_a * (ppmc + aa2)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1141,
                                    "end_token": 1149,
                                    "label": "b1 = -2 * big_a * pmpc\n",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1151,
                                    "end_token": 1158,
                                    "label": "= big_a * (ppmc - aa2)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1160,
                                    "end_token": 1164,
                                    "label": "a0 = pmc + aa2",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1166,
                                    "end_token": 1171,
                                    "label": "a1 = 2 * mpc\n",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1173,
                                    "end_token": 1177,
                                    "label": "= pmc - aa2\n",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 1179,
                                    "end_token": 1184,
                                    "label": "filt = IIRFilter(2)",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 1186,
                                    "end_token": 1205,
                                    "label": "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 1186,
                                            "end_token": 1188,
                                            "label": "filt.set_coefficients",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 1189,
                                            "end_token": 1205,
                                            "label": "([a0, a1, a2], [b0, b1, b2])",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 1190,
                                                    "end_token": 1196,
                                                    "label": "[a0, a1, a2]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 1198,
                                                    "end_token": 1204,
                                                    "label": "[b0, b1, b2]",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 1207,
                                    "end_token": 1208,
                                    "label": "return filt",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}