{
    "type": "module",
    "start_token": 0,
    "end_token": 539,
    "label": "from urllib.parse import parse_qs, urlparse\n\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass TranscribeYoutubeVideoBlock(Block):\n    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n\n    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n\n    @staticmethod\n    def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise ValueError(f\"Invalid YouTube URL: {url}\")\n\n    @staticmethod\n    def get_transcript(video_id: str):\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n\n        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text\n",
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 7,
            "label": "from urllib.parse import parse_qs, urlparse",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "from urllib",
                    "children": []
                },
                {
                    "type": "dotted_name",
                    "start_token": 2,
                    "end_token": 3,
                    "label": ".parse",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 4,
                    "end_token": 4,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 5,
                    "end_token": 5,
                    "label": "parse_qs",
                    "children": []
                },
                {
                    "type": "import_prefix",
                    "start_token": 6,
                    "end_token": 6,
                    "label": ",",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 7,
                    "end_token": 7,
                    "label": "urlparse",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 10,
            "end_token": 13,
            "label": "from youtube_transcript_api import YouTubeTranscriptApi",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 15,
            "end_token": 20,
            "label": "from youtube_transcript_api.formatters import TextFormatter",
            "children": []
        },
        {
            "type": "block",
            "start_token": 22,
            "end_token": 242,
            "label": "\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass TranscribeYoutubeVideoBlock(Block):\n    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n\n    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n",
            "children": [
                {
                    "type": "import_from_statement",
                    "start_token": 23,
                    "end_token": 36,
                    "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                    "children": [
                        {
                            "type": "import_prefix",
                            "start_token": 23,
                            "end_token": 24,
                            "label": "from backend",
                            "children": []
                        },
                        {
                            "type": "dotted_name",
                            "start_token": 25,
                            "end_token": 28,
                            "label": ".data.block",
                            "children": []
                        },
                        {
                            "type": "import_prefix",
                            "start_token": 29,
                            "end_token": 29,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 30,
                            "end_token": 30,
                            "label": "Block",
                            "children": []
                        },
                        {
                            "type": "import_prefix",
                            "start_token": 31,
                            "end_token": 32,
                            "label": ", BlockCategory",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 33,
                            "end_token": 33,
                            "label": ",",
                            "children": []
                        },
                        {
                            "type": "import_prefix",
                            "start_token": 34,
                            "end_token": 34,
                            "label": "BlockOutput",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 35,
                            "end_token": 35,
                            "label": ",",
                            "children": []
                        },
                        {
                            "type": "import_prefix",
                            "start_token": 36,
                            "end_token": 36,
                            "label": "BlockSchema",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "import_from_statement",
                    "start_token": 38,
                    "end_token": 45,
                    "label": "from backend.data.model import SchemaField",
                    "children": []
                },
                {
                    "type": "class_definition",
                    "start_token": 49,
                    "end_token": 243,
                    "label": "class TranscribeYoutubeVideoBlock(Block):\n    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n\n    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 49,
                            "end_token": 50,
                            "label": "class TranscribeYoutubeVideoBlock",
                            "children": []
                        },
                        {
                            "type": "argument_list",
                            "start_token": 51,
                            "end_token": 53,
                            "label": "(Block)",
                            "children": []
                        },
                        {
                            "type": "block",
                            "start_token": 54,
                            "end_token": 243,
                            "label": ":\n    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n\n    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )",
                            "children": [
                                {
                                    "type": "class_definition",
                                    "start_token": 56,
                                    "end_token": 85,
                                    "label": "class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 56,
                                            "end_token": 57,
                                            "label": "class Input",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 58,
                                            "end_token": 60,
                                            "label": "(BlockSchema)",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 61,
                                            "end_token": 85,
                                            "label": ":\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 63,
                                            "end_token": 85,
                                            "label": "youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 63,
                                                    "end_token": 64,
                                                    "label": "youtube_url:",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 65,
                                                    "end_token": 65,
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 67,
                                                    "end_token": 85,
                                                    "label": "SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "class_definition",
                                    "start_token": 88,
                                    "end_token": 128,
                                    "label": "class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 88,
                                            "end_token": 89,
                                            "label": "class Output",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 90,
                                            "end_token": 92,
                                            "label": "(BlockSchema)",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 93,
                                            "end_token": 128,
                                            "label": ":\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 95,
                                            "end_token": 105,
                                            "label": "video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 107,
                                            "end_token": 115,
                                            "label": ": str = SchemaField(description=\"The transcribed text of the video\")",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 117,
                                            "end_token": 128,
                                            "label": "error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 131,
                                    "end_token": 243,
                                    "label": "def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 131,
                                            "end_token": 132,
                                            "label": "def __init__",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "start_token": 133,
                                            "end_token": 135,
                                            "label": "(self)",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 136,
                                            "end_token": 243,
                                            "label": ":\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 138,
                                                    "end_token": 244,
                                                    "label": "super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 138,
                                                            "end_token": 139,
                                                            "label": "super(",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 140,
                                                            "end_token": 244,
                                                            "label": ").__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "function_definition",
                                                    "start_token": 246,
                                                    "end_token": 383,
                                                    "label": "@staticmethod\n    def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise ValueError(f\"Invalid YouTube URL: {url}\")\n",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 246,
                                                            "end_token": 247,
                                                            "label": "@staticmethod",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "parameters",
                                                            "start_token": 249,
                                                            "end_token": 255,
                                                            "label": "def extract_video_id(url: str)",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 256,
                                                            "end_token": 383,
                                                            "label": "-> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise ValueError(f\"Invalid YouTube URL: {url}\")\n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 268,
                                                            "end_token": 377,
                                                            "label": "if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise",
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 268,
                                                                    "end_token": 275,
                                                                    "label": "if parsed_url.netloc == \"youtu.be\":",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": 277,
                                                                    "end_token": 284,
                                                                    "label": "return parsed_url.path[1:]",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 286,
                                                                    "end_token": 295,
                                                                    "label": "if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\")",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 298,
                                                                    "end_token": 334,
                                                                    "label": "if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] ==",
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 298,
                                                                            "end_token": 305,
                                                                            "label": "if parsed_url.path == \"/watch\":",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 307,
                                                                            "end_token": 315,
                                                                            "label": "p = parse_qs(parsed_url.query)\n",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 316,
                                                                            "end_token": 322,
                                                                            "label": "return p[\"v\"][0",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 325,
                                                                    "end_token": 349,
                                                                    "label": "if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]",
                                                                    "children": [
                                                                        {
                                                                            "type": "slice",
                                                                            "start_token": 325,
                                                                            "end_token": 336,
                                                                            "label": "if parsed_url.path[:7] == \"/embed/\":",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 338,
                                                                            "end_token": 349,
                                                                            "label": "return parsed_url.path.split(\"/\")[2]",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 351,
                                                                    "end_token": 375,
                                                                    "label": "if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]",
                                                                    "children": [
                                                                        {
                                                                            "type": "slice",
                                                                            "start_token": 351,
                                                                            "end_token": 362,
                                                                            "label": "if parsed_url.path[:3] == \"/v/\":",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 364,
                                                                            "end_token": 375,
                                                                            "label": "return parsed_url.path.split(\"/\")[2]",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "function_definition",
                                                    "start_token": 388,
                                                    "end_token": 473,
                                                    "label": "def get_transcript(video_id: str):\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n\n        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 388,
                                                            "end_token": 389,
                                                            "label": "def get_transcript",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "parameters",
                                                            "start_token": 390,
                                                            "end_token": 394,
                                                            "label": "(video_id: str)",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 395,
                                                            "end_token": 473,
                                                            "label": ":\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n\n        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "try_statement",
                                                            "start_token": 397,
                                                            "end_token": 407,
                                                            "label": "try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "for_statement",
                                                            "start_token": 423,
                                                            "end_token": 442,
                                                            "label": "for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 467,
                                                            "end_token": 472,
                                                            "label": "raise ValueError(f\"No transcripts found for the video: {video_id}\")",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "function_definition",
                                                    "start_token": 475,
                                                    "end_token": 539,
                                                    "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text\n",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 475,
                                                            "end_token": 476,
                                                            "label": "def run",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "parameters",
                                                            "start_token": 477,
                                                            "end_token": 487,
                                                            "label": "(self, input_data: Input, **kwargs)",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 488,
                                                            "end_token": 539,
                                                            "label": "-> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text\n",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}