{
    "type": "module",
    "start_token": 0,
    "end_token": 303,
    "label": "",
    "children": [
        {
            "type": "comment",
            "start_token": 0,
            "end_token": 12,
            "label": "# -*- coding: utf-8 -*-\n",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 14,
            "end_token": 15,
            "label": "import re",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 17,
            "end_token": 18,
            "label": "import sys",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 20,
            "end_token": 21,
            "label": "import random",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 23,
            "end_token": 28,
            "label": "from typing import List, Tuple",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 31,
            "end_token": 32,
            "label": "import requests",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 34,
            "end_token": 39,
            "label": "from requests.models import Response",
            "children": []
        },
        {
            "type": "function_definition",
            "start_token": 43,
            "end_token": 90,
            "label": "def find_links_in_text(text: str) -> List[str]:\n    \"\"\"Find links in a text and return a list of URLs.\"\"\"\n\n    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef find_links_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n\n    links = find_links_in_text(content)\n\n    return links\n\n\ndef check_duplicate_links(links: List[str]) -> Tuple[bool, List]:\n    \"",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 45,
                    "end_token": 49,
                    "label": "(text: str)",
                    "children": []
                },
                {
                    "type": "type",
                    "start_token": 51,
                    "end_token": 56,
                    "label": "> List[str]:",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 58,
                    "end_token": 60,
                    "label": "\"\"\"Find links in a text and return a list of URLs.\"\"\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 63,
                    "end_token": 72,
                    "label": "link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef find_links_in_file(filename: str) -> List[str]:\n    \"",
                    "children": [
                        {
                            "type": "call",
                            "start_token": 65,
                            "end_token": 72,
                            "label": "re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef find_links_in_file(filename: str) -> List[str]:\n    \"",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 65,
                                    "end_token": 67,
                                    "label": "re.compile",
                                    "children": []
                                },
                                {
                                    "type": "string",
                                    "start_token": 69,
                                    "end_token": 72,
                                    "label": "r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef find_links_in_file(filename: str) -> List[str]:\n    \"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "start_token": 101,
                    "end_token": 101,
                    "label": "tuple",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 111,
                    "end_token": 111,
                    "label": "\"\"",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 123,
                    "end_token": 123,
                    "label": "-",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 47,
                    "end_token": 90,
                    "label": ": str) -> List[str]:\n    \"\"\"Find links in a text and return a list of URLs.\"\"\"\n\n    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef find_links_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n\n    links = find_links_in_text(content)\n\n    return links\n\n\ndef check_duplicate_links(links: List[str]) -> Tuple[bool, List]:\n    \"",
                    "children": [
                        {
                            "type": "return_statement",
                            "start_token": 107,
                            "end_token": 108,
                            "label": "duplicate list",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 94,
            "end_token": 165,
            "label": "duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n\n    seen = {}\n    duplicates = []\n    has_duplicate = False\n\n    for link in links:\n        link = link.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if duplicates:\n        has_duplicate = True\n\n    return (has_duplicate, duplicates)\n\n\ndef fake_user_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    return random.choice(user_agents)\n\n\ndef get_host_from_link(link: str) -> str:\n\n    host = link.split('://', 1)[1] if '://' in link else link\n\n    # Remove routes, arguments and anchors\n    if '/' in host:\n        host = host.split('/', 1)[0]\n\n    elif '?' in host:\n        host = host.split('?', 1)[0]\n\n    elif '#' in host:\n        host = host.split('#', 1)[0]\n\n    return host\n\n\ndef has_cloudflare_protection(resp: Response) -> bool:\n    \"\"\"Checks if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 96,
                    "end_token": 100,
                    "label": ".\n\n    Returns a",
                    "children": []
                },
                {
                    "type": "type",
                    "start_token": 102,
                    "end_token": 107,
                    "label": "with True or False and duplicate",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 109,
                    "end_token": 111,
                    "label": ".\n    \"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 103,
                    "end_token": 165,
                    "label": "True or False and duplicate list.\n    \"\"\"\n\n    seen = {}\n    duplicates = []\n    has_duplicate = False\n\n    for link in links:\n        link = link.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if duplicates:\n        has_duplicate = True\n\n    return (has_duplicate, duplicates)\n\n\ndef fake_user_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    return random.choice(user_agents)\n\n\ndef get_host_from_link(link: str) -> str:\n\n    host = link.split('://', 1)[1] if '://' in link else link\n\n    # Remove routes, arguments and anchors\n    if '/' in host:\n        host = host.split('/', 1)[0]\n\n    elif '?' in host:\n        host = host.split('?', 1)[0]\n\n    elif '#' in host:\n        host = host.split('#', 1)[0]\n\n    return host\n\n\ndef has_cloudflare_protection(resp: Response) -> bool:\n    \"\"\"Checks if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 116,
                            "end_token": 118,
                            "label": "agent as some",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 116,
                                    "end_token": 118,
                                    "label": "agent as some",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 122,
                            "end_token": 123,
                            "label": "not-",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 125,
                                    "end_token": 126,
                                    "label": "UA.",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 129,
                            "end_token": 130,
                            "label": "\"\"Checks",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 169,
            "end_token": 206,
            "label": ".\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 171,
                    "end_token": 175,
                    "label": "\n    Common protections have the",
                    "children": []
                },
                {
                    "type": "type",
                    "start_token": 178,
                    "end_token": 184,
                    "label": "code as a response:\n        -",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 186,
                    "end_token": 189,
                    "label": ": When host header",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 187,
                    "end_token": 206,
                    "label": "When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 191,
                            "end_token": 194,
                            "label": "missing or incorrect (",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 196,
                            "end_token": 198,
                            "label": "more)\n",
                            "children": []
                        },
                        {
                            "type": "boolean_operator",
                            "start_token": 200,
                            "end_token": 208,
                            "label": "503: When DDOS protection exists\n\n    See",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": 212,
                            "end_token": 213,
                            "label": "at:",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 210,
            "end_token": 228,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 212,
                    "end_token": 214,
                    "label": "at:\n",
                    "children": []
                },
                {
                    "type": "type",
                    "start_token": 216,
                    "end_token": 217,
                    "label": "https:",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 219,
                    "end_token": 221,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 225,
                    "end_token": 228,
                    "label": "",
                    "children": [
                        {
                            "type": "return_statement",
                            "start_token": 226,
                            "end_token": 227,
                            "label": "",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 238,
            "end_token": 300,
            "label": "",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 240,
                    "end_token": 242,
                    "label": "",
                    "children": []
                },
                {
                    "type": "type",
                    "start_token": 244,
                    "end_token": 248,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 245,
                    "end_token": 300,
                    "label": "",
                    "children": []
                }
            ]
        }
    ]
}