{
    "type": "module",
    "start_token": 0,
    "end_token": 580,
    "label": "import logging\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\n\nlogger = logging.getLogger(__name__)\n\n\nclass BaseOAuthHandler(ABC):\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n\n    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n\n    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n\n    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n\n    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes\n",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import logging",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 4,
            "label": "import time",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 6,
            "end_token": 11,
            "label": "from abc import ABC, abstractmethod",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 13,
            "end_token": 16,
            "label": "from typing import ClassVar",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 19,
            "end_token": 26,
            "label": "from backend.data.model import OAuth2Credentials",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 28,
            "end_token": 35,
            "label": "from backend.integrations.providers import ProviderName",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 38,
            "end_token": 45,
            "label": "logger = logging.getLogger(__name__)",
            "children": [
                {
                    "type": "attribute",
                    "start_token": 40,
                    "end_token": 42,
                    "label": "logging.getLogger",
                    "children": []
                },
                {
                    "type": "call",
                    "start_token": 42,
                    "end_token": 45,
                    "label": "getLogger(__name__)",
                    "children": [
                        {
                            "type": "argument_list",
                            "start_token": 43,
                            "end_token": 44,
                            "label": "(__name__",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 49,
            "end_token": 579,
            "label": "class BaseOAuthHandler(ABC):\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n\n    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n\n    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n\n    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n\n    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
            "children": [
                {
                    "type": "block",
                    "start_token": 55,
                    "end_token": 579,
                    "label": "\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n\n    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n\n    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n\n    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n\n    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 69,
                            "end_token": 74,
                            "label": "PROVIDER_NAME: ClassVar[ProviderName]",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 76,
                            "end_token": 87,
                            "label": "DEFAULT_SCOPES: ClassVar[list[str]] = []",
                            "children": []
                        },
                        {
                            "type": "decorated_definition",
                            "start_token": 103,
                            "end_token": 139,
                            "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...",
                            "children": [
                                {
                                    "type": "decorator",
                                    "start_token": 103,
                                    "end_token": 104,
                                    "label": "@abstractmethod",
                                    "children": []
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 119,
                                    "end_token": 139,
                                    "label": "def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 121,
                                            "end_token": 135,
                                            "label": "(self, client_id: str, client_secret: str, redirect_uri: str)",
                                            "children": [
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 124,
                                                    "end_token": 126,
                                                    "label": "client_id: str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 128,
                                                    "end_token": 130,
                                                    "label": "client_secret: str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 132,
                                                    "end_token": 134,
                                                    "label": "redirect_uri: str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "start_token": 156,
                            "end_token": 209,
                            "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n",
                            "children": [
                                {
                                    "type": "decorator",
                                    "start_token": 156,
                                    "end_token": 157,
                                    "label": "@abstractmethod",
                                    "children": []
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 172,
                                    "end_token": 192,
                                    "label": "def get_login_url(self, scopes: list[str], state: str) -> str:\n",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 174,
                                            "end_token": 187,
                                            "label": "(self, scopes: list[str], state: str)",
                                            "children": [
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 178,
                                                    "end_token": 182,
                                                    "label": ": list[str]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 184,
                                                    "end_token": 186,
                                                    "label": "state: str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "start_token": 215,
                            "end_token": 274,
                            "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n",
                            "children": [
                                {
                                    "type": "decorator",
                                    "start_token": 215,
                                    "end_token": 216,
                                    "label": "@abstractmethod",
                                    "children": []
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 231,
                                    "end_token": 253,
                                    "label": "def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 233,
                                            "end_token": 247,
                                            "label": "(\n        self, code: str, scopes: list[str]\n",
                                            "children": [
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 237,
                                                    "end_token": 239,
                                                    "label": "code: str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 241,
                                                    "end_token": 245,
                                                    "label": "scopes: list[str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "start_token": 276,
                            "end_token": 326,
                            "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n",
                            "children": [
                                {
                                    "type": "decorator",
                                    "start_token": 276,
                                    "end_token": 277,
                                    "label": "@abstractmethod",
                                    "children": []
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 292,
                                    "end_token": 304,
                                    "label": "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 294,
                                            "end_token": 300,
                                            "label": "(self, credentials: OAuth2Credentials)",
                                            "children": [
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 298,
                                                    "end_token": 300,
                                                    "label": ": OAuth2Credentials)",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "start_token": 328,
                            "end_token": 378,
                            "label": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n",
                            "children": [
                                {
                                    "type": "decorator",
                                    "start_token": 328,
                                    "end_token": 329,
                                    "label": "@abstractmethod",
                                    "children": []
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 345,
                                    "end_token": 357,
                                    "label": "revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 347,
                                            "end_token": 352,
                                            "label": "self, credentials: OAuth2Credentials)",
                                            "children": [
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 350,
                                                    "end_token": 352,
                                                    "label": ": OAuth2Credentials)",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 380,
                            "end_token": 424,
                            "label": "def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 382,
                                    "end_token": 388,
                                    "label": "(self, credentials: OAuth2Credentials)",
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 386,
                                            "end_token": 388,
                                            "label": ": OAuth2Credentials)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "conditional_expression",
                                    "start_token": 394,
                                    "end_token": 415,
                                    "label": "if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 417,
                                    "end_token": 423,
                                    "label": "return self._refresh_tokens(credentials)",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 426,
                            "end_token": 470,
                            "label": "def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 428,
                                    "end_token": 434,
                                    "label": "(self, credentials: OAuth2Credentials)",
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 432,
                                            "end_token": 434,
                                            "label": ": OAuth2Credentials)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "conditional_expression",
                                    "start_token": 444,
                                    "end_token": 452,
                                    "label": "if self.needs_refresh(credentials):\n",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 462,
                                    "end_token": 469,
                                    "label": "return credentials.access_token.get_secret_value()",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 472,
                            "end_token": 517,
                            "label": "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 474,
                                    "end_token": 480,
                                    "label": "(self, credentials: OAuth2Credentials)",
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 478,
                                            "end_token": 480,
                                            "label": ": OAuth2Credentials)",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 490,
                                    "end_token": 516,
                                    "label": "return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 519,
                            "end_token": 579,
                            "label": "def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 521,
                                    "end_token": 530,
                                    "label": "(self, scopes: list[str])",
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 525,
                                            "end_token": 529,
                                            "label": ": list[str]",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "conditional_expression",
                                    "start_token": 557,
                                    "end_token": 577,
                                    "label": "if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 578,
                                    "end_token": 579,
                                    "label": "return scopes",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}