{
    "type": "module",
    "start_token": 0,
    "end_token": 326,
    "label": "import logging\n\nimport pytest\n\nfrom backend.util.test import SpinTestServer\n\n#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n# Set up logging\nlogger = logging.getLogger(__name__)\n\n# Create console handler with formatting\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n@pytest.fixture(scope=\"session\")\nasync def server():\n    async with SpinTestServer() as server:\n        yield server\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\nasync def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"\n",
    "children": [
        {
            "type": "block",
            "start_token": 0,
            "end_token": 326,
            "label": "import logging\n\nimport pytest\n\nfrom backend.util.test import SpinTestServer\n\n#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n# Set up logging\nlogger = logging.getLogger(__name__)\n\n# Create console handler with formatting\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n@pytest.fixture(scope=\"session\")\nasync def server():\n    async with SpinTestServer() as server:\n        yield server\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\nasync def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"\n",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "import logging",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "start_token": 4,
                    "end_token": 5,
                    "label": "import pytest",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 8,
                    "end_token": 15,
                    "label": "from backend.util.test import SpinTestServer",
                    "children": []
                },
                {
                    "type": "comment",
                    "start_token": 18,
                    "end_token": 41,
                    "label": "#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n",
                    "children": []
                },
                {
                    "type": "comment",
                    "start_token": 42,
                    "end_token": 46,
                    "label": "# Set up logging\n",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 47,
                    "end_token": 54,
                    "label": "logger = logging.getLogger(__name__)",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 50,
                            "end_token": 51,
                            "label": ".getLogger",
                            "children": []
                        },
                        {
                            "type": "call",
                            "start_token": 51,
                            "end_token": 54,
                            "label": "getLogger(__name__)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 53,
                                    "end_token": 53,
                                    "label": "__name__",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 57,
                    "end_token": 63,
                    "label": "# Create console handler with formatting\n",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 64,
                    "end_token": 70,
                    "label": "ch = logging.StreamHandler()",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 67,
                            "end_token": 68,
                            "label": ".StreamHandler",
                            "children": []
                        },
                        {
                            "type": "call",
                            "start_token": 69,
                            "end_token": 70,
                            "label": "()",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "call",
                    "start_token": 73,
                    "end_token": 79,
                    "label": ".setLevel(logging.INFO)",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 76,
                            "end_token": 77,
                            "label": "logging.",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 78,
                            "end_token": 78,
                            "label": "INFO",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "assignment",
                    "start_token": 81,
                    "end_token": 88,
                    "label": "formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 84,
                            "end_token": 85,
                            "label": ".Formatter",
                            "children": []
                        },
                        {
                            "type": "call",
                            "start_token": 86,
                            "end_token": 88,
                            "label": "(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")",
                            "children": [
                                {
                                    "type": "string",
                                    "start_token": 87,
                                    "end_token": 87,
                                    "label": "\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "call",
                    "start_token": 91,
                    "end_token": 95,
                    "label": ".setFormatter(formatter)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 94,
                            "end_token": 94,
                            "label": "formatter",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "call",
                    "start_token": 98,
                    "end_token": 102,
                    "label": ".addHandler(ch)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 101,
                            "end_token": 101,
                            "label": "ch",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 106,
                    "end_token": 134,
                    "label": "@pytest.fixture(scope=\"session\")\nasync def server():\n    async with SpinTestServer() as server:\n        yield server\n",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 107,
                            "end_token": 114,
                            "label": "pytest.fixture(scope=\"session\")",
                            "children": [
                                {
                                    "type": "attribute",
                                    "start_token": 108,
                                    "end_token": 109,
                                    "label": ".fixture",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 117,
                            "end_token": 134,
                            "label": "def server():\n    async with SpinTestServer() as server:\n        yield server\n",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 119,
                                    "end_token": 120,
                                    "label": "()",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 122,
                                    "end_token": 134,
                                    "label": "\n    async with SpinTestServer() as server:\n        yield server\n",
                                    "children": [
                                        {
                                            "type": "with_statement",
                                            "start_token": 124,
                                            "end_token": 130,
                                            "label": "with SpinTestServer() as server:",
                                            "children": [
                                                {
                                                    "type": "with_clause",
                                                    "start_token": 125,
                                                    "end_token": 129,
                                                    "label": "SpinTestServer() as server",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 126,
                                                            "end_token": 127,
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 130,
                                                    "end_token": 134,
                                                    "label": ":\n        yield server\n",
                                                    "children": [
                                                        {
                                                            "type": "yield",
                                                            "start_token": 132,
                                                            "end_token": 133,
                                                            "label": "yield server",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 137,
                    "end_token": 323,
                    "label": "@pytest.fixture(scope=\"session\", autouse=True)\nasync def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0,",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 138,
                            "end_token": 148,
                            "label": "pytest.fixture(scope=\"session\", autouse=True",
                            "children": [
                                {
                                    "type": "attribute",
                                    "start_token": 139,
                                    "end_token": 140,
                                    "label": ".fixture",
                                    "children": []
                                },
                                {
                                    "type": "keyword_argument",
                                    "start_token": 146,
                                    "end_token": 148,
                                    "label": "autouse=True",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 152,
                            "end_token": 323,
                            "label": "def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0,",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 154,
                                    "end_token": 155,
                                    "label": "(server",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 157,
                                    "end_token": 323,
                                    "label": ":\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0,",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 159,
                                            "end_token": 162,
                                            "label": "created_graph_ids = []",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "start_token": 161,
                                                    "end_token": 162,
                                                    "label": "[]",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 164,
                                            "end_token": 170,
                                            "label": "original_create_graph = server.agent_server.test_create_graph",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "start_token": 167,
                                                    "end_token": 169,
                                                    "label": ".agent_server.",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "function_definition",
                                            "start_token": 174,
                                            "end_token": 242,
                                            "label": "def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n",
                                            "children": [
                                                {
                                                    "type": "parameters",
                                                    "start_token": 176,
                                                    "end_token": 183,
                                                    "label": "(*args, **kwargs)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 185,
                                                    "end_token": 242,
                                                    "label": "\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n",
                                                    "children": [
                                                        {
                                                            "type": "await",
                                                            "start_token": 188,
                                                            "end_token": 197,
                                                            "label": "await original_create_graph(*args, **kwargs)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 189,
                                                                    "end_token": 197,
                                                                    "label": "original_create_graph(*args, **kwargs)",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 204,
                                                            "end_token": 225,
                                                            "label": "user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 207,
                                                                    "end_token": 225,
                                                                    "label": ".get(\"user_id\", args[2] if len(args) > 2 else None)",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 229,
                                                            "end_token": 238,
                                                            "label": "append((created_graph.id, user_id))",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 233,
                                                                    "end_token": 235,
                                                                    "label": ".id,",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "tuple",
                                                                    "start_token": 231,
                                                                    "end_token": 238,
                                                                    "label": "(created_graph.id, user_id))",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 240,
                                                            "end_token": 241,
                                                            "label": "return created_graph",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "try_statement",
                                            "start_token": 244,
                                            "end_token": 272,
                                            "label": "try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 246,
                                                    "end_token": 253,
                                                    "label": "\n        server.agent_server.test_create_graph = create_graph_wrapper",
                                                    "children": []
                                                },
                                                {
                                                    "type": "finally_clause",
                                                    "start_token": 263,
                                                    "end_token": 272,
                                                    "label": "finally:\n        server.agent_server.test_create_graph = original_create_graph",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 264,
                                                            "end_token": 272,
                                                            "label": ":\n        server.agent_server.test_create_graph = original_create_graph",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 275,
                                            "end_token": 285,
                                            "label": "# Delete the created graphs and assert they were deleted\n",
                                            "children": []
                                        },
                                        {
                                            "type": "for_statement",
                                            "start_token": 286,
                                            "end_token": 322,
                                            "label": "for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0",
                                            "children": [
                                                {
                                                    "type": "for_in_clause",
                                                    "start_token": 287,
                                                    "end_token": 291,
                                                    "label": "graph_id, user_id in created_graph_ids",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 292,
                                                    "end_token": 322,
                                                    "label": ":\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 294,
                                                            "end_token": 297,
                                                            "label": "if user_id:\n",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 298,
                                                            "end_token": 310,
                                                            "label": "resp = await server.agent_server.test_delete_graph(graph_id, user_id)",
                                                            "children": [
                                                                {
                                                                    "type": "await",
                                                                    "start_token": 300,
                                                                    "end_token": 310,
                                                                    "label": "await server.agent_server.test_delete_graph(graph_id, user_id)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 301,
                                                                            "end_token": 310,
                                                                            "label": "server.agent_server.test_delete_graph(graph_id, user_id)",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 313,
                                                            "end_token": 317,
                                                            "label": "= resp[\"version_counts\"]",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "assert_statement",
                                                            "start_token": 319,
                                                            "end_token": 325,
                                                            "label": "assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}