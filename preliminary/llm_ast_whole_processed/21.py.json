{
    "type": "module",
    "start_token": 0,
    "end_token": 4737,
    "label": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\n\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\n\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.data.model import Credentials\n\n\n@thread_cached\ndef execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)\n\n\n@thread_cached\ndef execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n\n\nsettings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n\n\n_user_credit_model = get_user_credit_model()\n\n# Define the API routes\nv1_router = APIRouter()\n\nv1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n\nv1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Auth #############################\n########################################################\n\n\n@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()\n\n\n########################################################\n##################### Blocks ###########################\n########################################################\n\n\n@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]\n\n\n@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output\n\n\n########################################################\n##################### Credits ##########################\n########################################################\n\n\n@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph\n\n\n@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n########################################################\n##################### Templates ########################\n########################################################\n\n\n@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)\n\n\n########################################################\n##################### Schedules ########################\n########################################################\n\n\nclass ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str\n\n\n@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )\n\n\n@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}\n\n\n@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )\n\n\n########################################################\n#####################  API KEY ##############################\n########################################################\n\n\n@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
    "children": [
        {
            "type": "block",
            "start_token": 0,
            "end_token": 4737,
            "label": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\n\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\n\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.data.model import Credentials\n\n\n@thread_cached\ndef execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)\n\n\n@thread_cached\ndef execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n\n\nsettings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n\n\n_user_credit_model = get_user_credit_model()\n\n# Define the API routes\nv1_router = APIRouter()\n\nv1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n\nv1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Auth #############################\n########################################################\n\n\n@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()\n\n\n########################################################\n##################### Blocks ###########################\n########################################################\n\n\n@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]\n\n\n@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output\n\n\n########################################################\n##################### Credits ##########################\n########################################################\n\n\n@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph\n\n\n@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n########################################################\n##################### Templates ########################\n########################################################\n\n\n@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)\n\n\n########################################################\n##################### Schedules ########################\n########################################################\n\n\nclass ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str\n\n\n@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )\n\n\n@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}\n\n\n@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )\n\n\n########################################################\n#####################  API KEY ##############################\n########################################################\n\n\n@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "import asyncio",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "start_token": 3,
                    "end_token": 4,
                    "label": "import logging",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 6,
                    "end_token": 9,
                    "label": "from collections import defaultdict",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 11,
                    "end_token": 20,
                    "label": "from typing import TYPE_CHECKING, Annotated, Any, Sequence",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "start_token": 23,
                    "end_token": 24,
                    "label": "import pydantic",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 26,
                    "end_token": 33,
                    "label": "from autogpt_libs.auth.middleware import auth_middleware",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 35,
                    "end_token": 42,
                    "label": "from autogpt_libs.feature_flag.client import feature_flag",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 44,
                    "end_token": 51,
                    "label": "from autogpt_libs.utils.cache import thread_cached",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 53,
                    "end_token": 61,
                    "label": "from fastapi import APIRouter, Depends, HTTPException\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 62,
                    "end_token": 68,
                    "label": "from typing_extensions import Optional, TypedDict\n",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "start_token": 70,
                    "end_token": 76,
                    "label": "import backend.data.block\n",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "start_token": 77,
                    "end_token": 84,
                    "label": "import backend.server.integrations.router",
                    "children": []
                },
                {
                    "type": "import_statement",
                    "start_token": 86,
                    "end_token": 94,
                    "label": "import backend.server.routers.analytics\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 95,
                    "end_token": 103,
                    "label": "from backend.data import execution as execution_db\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 104,
                    "end_token": 111,
                    "label": "from backend.data import graph as graph_db",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 113,
                    "end_token": 152,
                    "label": "from backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 154,
                    "end_token": 164,
                    "label": "from backend.data.block import BlockInput, CompletedBlockOutput\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 166,
                    "end_token": 175,
                    "label": "backend.data.credit import get_block_costs, get_user_credit_model\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 177,
                    "end_token": 183,
                    "label": "backend.data.user import get_or_create_user",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 185,
                    "end_token": 195,
                    "label": "from backend.executor import ExecutionManager, ExecutionScheduler, scheduler\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 197,
                    "end_token": 203,
                    "label": "backend.integrations.creds_manager import IntegrationCredentialsManager",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 205,
                    "end_token": 222,
                    "label": "from backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 224,
                    "end_token": 248,
                    "label": "from backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 250,
                    "end_token": 258,
                    "label": "from backend.server.utils import get_user_id\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 259,
                    "end_token": 267,
                    "label": "from backend.util.service import get_service_client\n",
                    "children": []
                },
                {
                    "type": "import_from_statement",
                    "start_token": 268,
                    "end_token": 275,
                    "label": "from backend.util.settings import Settings",
                    "children": []
                },
                {
                    "type": "if_statement",
                    "start_token": 278,
                    "end_token": 290,
                    "label": "if TYPE_CHECKING:\n    from backend.data.model import Credentials\n",
                    "children": [
                        {
                            "type": "if_clause",
                            "start_token": 278,
                            "end_token": 280,
                            "label": "if TYPE_CHECKING:",
                            "children": [
                                {
                                    "type": "expression_statement",
                                    "start_token": 282,
                                    "end_token": 290,
                                    "label": "from backend.data.model import Credentials\n",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 293,
                    "end_token": 300,
                    "label": "@thread_cached\ndef execution_manager_client() -",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 293,
                            "end_token": 294,
                            "label": "@thread_cached",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 296,
                            "end_token": 300,
                            "label": "def execution_manager_client() -",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "start_token": 305,
                    "end_token": 309,
                    "label": "return get_service_client(ExecutionManager)",
                    "children": []
                },
                {
                    "type": "decorated_definition",
                    "start_token": 313,
                    "end_token": 330,
                    "label": "@thread_cached\ndef execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 313,
                            "end_token": 314,
                            "label": "@thread_cached",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 316,
                            "end_token": 330,
                            "label": "def execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "start_token": 325,
                    "end_token": 329,
                    "label": "return get_service_client(ExecutionScheduler)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 333,
                    "end_token": 337,
                    "label": "settings = Settings()",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 339,
                    "end_token": 346,
                    "label": "logger = logging.getLogger(__name__)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 348,
                    "end_token": 352,
                    "label": "integration_creds_manager = IntegrationCredentialsManager()",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 356,
                    "end_token": 360,
                    "label": "_user_credit_model = get_user_credit_model()",
                    "children": []
                },
                {
                    "type": "comment",
                    "start_token": 363,
                    "end_token": 368,
                    "label": "# Define the API routes\n",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 369,
                    "end_token": 373,
                    "label": "v1_router = APIRouter()",
                    "children": []
                },
                {
                    "type": "call",
                    "start_token": 377,
                    "end_token": 405,
                    "label": ".include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 377,
                            "end_token": 378,
                            "label": ".include_router",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 380,
                                    "end_token": 387,
                                    "label": "\n    backend.server.integrations.router",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "call",
                    "start_token": 407,
                    "end_token": 405,
                    "label": "",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 407,
                            "end_token": 413,
                            "label": "v1_router.include_router(\n    backend.",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 382,
                                    "end_token": 389,
                                    "label": ".server.integrations.router.router",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 449,
                    "end_token": 468,
                    "label": "####################",
                    "children": []
                },
                {
                    "type": "comment",
                    "start_token": 527,
                    "end_token": 509,
                    "label": "",
                    "children": []
                },
                {
                    "type": "decorated_definition",
                    "start_token": 617,
                    "end_token": 637,
                    "label": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)]",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 617,
                            "end_token": 618,
                            "label": "@v1_router",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 620,
                            "end_token": 637,
                            "label": "post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)]",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "await",
                    "start_token": 641,
                    "end_token": 661,
                    "label": "def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)",
                    "children": []
                },
                {
                    "type": "return_statement",
                    "start_token": 940,
                    "end_token": 934,
                    "label": "",
                    "children": []
                },
                {
                    "type": "decorated_definition",
                    "start_token": 943,
                    "end_token": 967,
                    "label": "@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 943,
                            "end_token": 944,
                            "label": "@v1_router",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 944,
                            "end_token": 967,
                            "label": "v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "if_statement",
                    "start_token": 1002,
                    "end_token": 1018,
                    "label": "if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
                    "children": [
                        {
                            "type": "if_clause",
                            "start_token": 1002,
                            "end_token": 1018,
                            "label": "if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
                            "children": [
                                {
                                    "type": "raise_statement",
                                    "start_token": 1010,
                                    "end_token": 1018,
                                    "label": "status_code=404, detail=f\"Block #{block_id} not found.\")",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 1009,
                                            "end_token": 1018,
                                            "label": "(status_code=404, detail=f\"Block #{block_id} not found.\")",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "start_token": 1008,
                                                    "end_token": 1009,
                                                    "label": "HTTPException(",
                                                    "children": []
                                                },
                                                {
                                                    "type": "dotted_name",
                                                    "start_token": 1009,
                                                    "end_token": 1018,
                                                    "label": "(status_code=404, detail=f\"Block #{block_id} not found.\")",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "defaultdict",
                    "start_token": 1022,
                    "end_token": 104,
                    "label": "",
                    "children": []
                },
                {
                    "type": "for_statement",
                    "start_token": 1128,
                    "end_token": 1137,
                    "label": "###### Credits ###",
                    "children": [
                        {
                            "type": "for_in_clause",
                            "start_token": 1288,
                            "end_token": 1133,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "start_token": 1167,
                    "end_token": 1396,
                    "label": "###################################################\n\n\n@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n",
                    "children": []
                },
                {
                    "type": "decorated_definition",
                    "start_token": 1221,
                    "end_token": 1375,
                    "label": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 1221,
                            "end_token": 1222,
                            "label": "@v1_router",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 1221,
                            "end_token": 1375,
                            "label": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 1221,
                    "end_token": 1375,
                    "label": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 1311,
                            "end_token": 1313,
                            "label": ".GraphModel:",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 1320,
                            "end_token": 1330,
                            "label": "\n        graph = graph_db.make_graph_model(create_graph.graph,",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 1221,
                    "end_token": 1375,
                    "label": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 3717,
                            "end_token": 4414,
                            "label": "#####################  API KEY ##############################\n########################################################\n\n\n@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 4417,
                            "end_token": 4404,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "decorated_definition",
                    "start_token": 1221,
                    "end_token": 1375,
                    "label": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,",
                    "children": [
                        {
                            "type": "decorator",
                            "start_token": 4588,
                            "end_token": 4101,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": 4417,
                            "end_token": 4010,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "import_from_statement",
                    "start_token": 4137,
                    "end_token": 4211,
                    "label": "=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 357,
                    "end_token": 370,
                    "label": "= get_user_credit_model()\n\n# Define the API routes\nv1_router =",
                    "children": []
                },
                {
                    "type": "call",
                    "start_token": 383,
                    "end_token": 393,
                    "label": "server.integrations.router.router,\n    prefix=",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 4046,
                            "end_token": 4080,
                            "label": "user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 4501,
                                    "end_token": 4737,
                                    "label": "await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}