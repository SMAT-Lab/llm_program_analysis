{
    "type": "module",
    "start_token": 0,
    "end_token": 264,
    "label": "",
    "children": [
        {
            "type": "function_definition",
            "start_token": 0,
            "end_token": 95,
            "label": "def gray_code(bit_count: int) -> list:\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\n\n    # bit count represents no. of bits in the gray code\n    if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")\n\n    # get the generated string sequence\n    sequence = gray_code_sequence_string(bit_count)\n    #\n    # convert them to integers\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n\n    return sequence\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "gray_code",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 2,
                    "end_token": 6,
                    "label": "(bit_count: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 3,
                            "end_token": 5,
                            "label": "bit_count: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 3,
                                    "end_token": 3,
                                    "label": "bit_count",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "start_token": 8,
                    "end_token": 9,
                    "label": "> list",
                    "children": [
                        {
                            "type": "generic_type",
                            "start_token": 9,
                            "end_token": 9,
                            "label": "list",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 9,
                                    "end_token": 9,
                                    "label": "list",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "string",
                    "start_token": 12,
                    "end_token": 14,
                    "label": "\"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"",
                    "children": [
                        {
                            "type": "string_content",
                            "start_token": 12,
                            "end_token": 14,
                            "label": "\"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 15,
                    "end_token": 95,
                    "label": "\n\n    # bit count represents no. of bits in the gray code\n    if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")\n\n    # get the generated string sequence\n    sequence = gray_code_sequence_string(bit_count)\n    #\n    # convert them to integers\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n\n    return sequence\n",
                    "children": [
                        {
                            "type": "comment",
                            "start_token": 17,
                            "end_token": 29,
                            "label": "# bit count represents no. of bits in the gray code\n",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "start_token": 30,
                            "end_token": 40,
                            "label": "if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 31,
                                    "end_token": 33,
                                    "label": "bit_count < 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 31,
                                            "end_token": 31,
                                            "label": "bit_count",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 33,
                                            "end_token": 33,
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "raise_statement",
                                    "start_token": 36,
                                    "end_token": 40,
                                    "label": "raise ValueError(\"The given input must be positive\")",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 37,
                                            "end_token": 40,
                                            "label": "ValueError(\"The given input must be positive\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 37,
                                                    "end_token": 37,
                                                    "label": "ValueError",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 38,
                                                    "end_token": 40,
                                                    "label": "(\"The given input must be positive\")",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "start_token": 39,
                                                            "end_token": 39,
                                                            "label": "\"The given input must be positive\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_content",
                                                                    "start_token": 39,
                                                                    "end_token": 39,
                                                                    "label": "\"The given input must be positive\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 50,
                            "end_token": 55,
                            "label": "sequence = gray_code_sequence_string(bit_count)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 50,
                                    "end_token": 50,
                                    "label": "sequence",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 52,
                                    "end_token": 55,
                                    "label": "gray_code_sequence_string(bit_count)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 52,
                                            "end_token": 52,
                                            "label": "gray_code_sequence_string",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 53,
                                            "end_token": 55,
                                            "label": "(bit_count)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 54,
                                                    "end_token": 54,
                                                    "label": "bit_count",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "start_token": 65,
                            "end_token": 90,
                            "label": "for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)",
                            "children": [
                                {
                                    "type": "for_in_clause",
                                    "start_token": 65,
                                    "end_token": 74,
                                    "label": "for i in range(len(sequence))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 66,
                                            "end_token": 66,
                                            "label": "i",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 68,
                                            "end_token": 74,
                                            "label": "range(len(sequence))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 69,
                                                    "end_token": 70,
                                                    "label": "(len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 71,
                                                    "end_token": 73,
                                                    "label": "(sequence)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 72,
                                                            "end_token": 72,
                                                            "label": "sequence",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 77,
                                    "end_token": 90,
                                    "label": "sequence[i] = int(sequence[i], 2)",
                                    "children": [
                                        {
                                            "type": "subscript",
                                            "start_token": 77,
                                            "end_token": 80,
                                            "label": "sequence[i]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 77,
                                                    "end_token": 77,
                                                    "label": "sequence",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 79,
                                                    "end_token": 79,
                                                    "label": "i",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 82,
                                            "end_token": 90,
                                            "label": "int(sequence[i], 2)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 82,
                                                    "end_token": 82,
                                                    "label": "int",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 83,
                                                    "end_token": 89,
                                                    "label": "(sequence[i], 2",
                                                    "children": [
                                                        {
                                                            "type": "subscript",
                                                            "start_token": 84,
                                                            "end_token": 87,
                                                            "label": "sequence[i]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 84,
                                                                    "end_token": 84,
                                                                    "label": "sequence",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 86,
                                                                    "end_token": 86,
                                                                    "label": "i",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 89,
                                                            "end_token": 89,
                                                            "label": "2",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 93,
                            "end_token": 94,
                            "label": "return sequence",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 94,
                                    "end_token": 94,
                                    "label": "sequence",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 98,
            "end_token": 218,
            "label": "def gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n\n    # The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1\n    if bit_count == 0:\n        return [\"0\"]\n\n    if bit_count == 1:\n        return [\"0\", \"1\"]\n\n    seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n\n    sequence = []\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 99,
                    "end_token": 99,
                    "label": "gray_code_sequence_string",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 100,
                    "end_token": 104,
                    "label": "(bit_count: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 101,
                            "end_token": 103,
                            "label": "bit_count: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 101,
                                    "end_token": 101,
                                    "label": "bit_count",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 103,
                                    "end_token": 103,
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 103,
                                            "end_token": 103,
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "return_statement",
                    "start_token": 106,
                    "end_token": 107,
                    "label": "> list",
                    "children": [
                        {
                            "type": "generic_type",
                            "start_token": 107,
                            "end_token": 107,
                            "label": "list",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 107,
                                    "end_token": 107,
                                    "label": "list",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "string",
                    "start_token": 110,
                    "end_token": 112,
                    "label": "\"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"",
                    "children": [
                        {
                            "type": "string_content",
                            "start_token": 110,
                            "end_token": 112,
                            "label": "\"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 114,
                    "end_token": 218,
                    "label": "\n    # The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1\n    if bit_count == 0:\n        return [\"0\"]\n\n    if bit_count == 1:\n        return [\"0\", \"1\"]\n\n    seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n\n    sequence = []\n",
                    "children": [
                        {
                            "type": "if_statement",
                            "start_token": 137,
                            "end_token": 147,
                            "label": "if bit_count == 0:\n        return [\"0\"]",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 138,
                                    "end_token": 141,
                                    "label": "bit_count == 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 138,
                                            "end_token": 138,
                                            "label": "bit_count",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 140,
                                            "end_token": 140,
                                            "label": "=",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 144,
                                    "end_token": 147,
                                    "label": "return [\"0\"]",
                                    "children": [
                                        {
                                            "type": "list",
                                            "start_token": 145,
                                            "end_token": 147,
                                            "label": "[\"0\"]",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "start_token": 146,
                                                    "end_token": 146,
                                                    "label": "\"0\"",
                                                    "children": [
                                                        {
                                                            "type": "string_content",
                                                            "start_token": 146,
                                                            "end_token": 146,
                                                            "label": "\"0\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "start_token": 150,
                            "end_token": 162,
                            "label": "if bit_count == 1:\n        return [\"0\", \"1\"]",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 151,
                                    "end_token": 154,
                                    "label": "bit_count == 1",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 151,
                                            "end_token": 151,
                                            "label": "bit_count",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 153,
                                            "end_token": 153,
                                            "label": "=",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 157,
                                    "end_token": 162,
                                    "label": "return [\"0\", \"1\"]",
                                    "children": [
                                        {
                                            "type": "list",
                                            "start_token": 158,
                                            "end_token": 162,
                                            "label": "[\"0\", \"1\"]",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "start_token": 159,
                                                    "end_token": 159,
                                                    "label": "\"0\"",
                                                    "children": [
                                                        {
                                                            "type": "string_content",
                                                            "start_token": 159,
                                                            "end_token": 159,
                                                            "label": "\"0\"",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "string",
                                                    "start_token": 161,
                                                    "end_token": 161,
                                                    "label": "\"1\"",
                                                    "children": [
                                                        {
                                                            "type": "string_content",
                                                            "start_token": 161,
                                                            "end_token": 161,
                                                            "label": "\"1\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 165,
                            "end_token": 170,
                            "label": "seq_len = 1 << bit_count",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 165,
                                    "end_token": 165,
                                    "label": "seq_len",
                                    "children": []
                                },
                                {
                                    "type": "binary_operator",
                                    "start_token": 167,
                                    "end_token": 170,
                                    "label": "1 << bit_count",
                                    "children": [
                                        {
                                            "type": "integer",
                                            "start_token": 167,
                                            "end_token": 167,
                                            "label": "1",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 170,
                                            "end_token": 170,
                                            "label": "bit_count",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "call",
                            "start_token": 205,
                            "end_token": 211,
                            "label": "= gray_code_sequence_string(bit_count - 1)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 205,
                                    "end_token": 205,
                                    "label": "=",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 206,
                                    "end_token": 211,
                                    "label": "gray_code_sequence_string(bit_count - 1)",
                                    "children": [
                                        {
                                            "type": "binary_operator",
                                            "start_token": 208,
                                            "end_token": 210,
                                            "label": "bit_count - 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 208,
                                                    "end_token": 208,
                                                    "label": "bit_count",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 210,
                                                    "end_token": 210,
                                                    "label": "1",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 204,
                            "end_token": 211,
                            "label": "smaller_sequence = gray_code_sequence_string(bit_count - 1)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 204,
                                    "end_token": 204,
                                    "label": "smaller_sequence",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 205,
                                    "end_token": 211,
                                    "label": "= gray_code_sequence_string(bit_count - 1)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 205,
                                            "end_token": 205,
                                            "label": "=",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 206,
                                            "end_token": 211,
                                            "label": "gray_code_sequence_string(bit_count - 1)",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 208,
                                                    "end_token": 210,
                                                    "label": "bit_count - 1",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 208,
                                                            "end_token": 208,
                                                            "label": "bit_count",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 210,
                                                            "end_token": 210,
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 214,
                            "end_token": 217,
                            "label": "sequence = []",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 214,
                                    "end_token": 214,
                                    "label": "sequence",
                                    "children": []
                                },
                                {
                                    "type": "list",
                                    "start_token": 216,
                                    "end_token": 217,
                                    "label": "[]",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "start_token": 232,
                            "end_token": 239,
                            "label": "",
                            "children": [
                                {
                                    "type": "for_in_clause",
                                    "start_token": 232,
                                    "end_token": 238,
                                    "label": "for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 233,
                                            "end_token": 233,
                                            "label": "i",
                                            "children": []
                                        },
                                        {
                                            "type": "binary_operator",
                                            "start_token": 235,
                                            "end_token": 238,
                                            "label": "range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 235,
                                                    "end_token": 235,
                                                    "label": "range",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 237,
                                                    "end_token": 237,
                                                    "label": "seq_len",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 243,
                            "end_token": 244,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 244,
                                    "end_token": 244,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "start_token": 251,
            "end_token": 263,
            "label": "",
            "children": [
                {
                    "type": "comparison_operator",
                    "start_token": 252,
                    "end_token": 254,
                    "label": "",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 252,
                            "end_token": 252,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "string",
                            "start_token": 254,
                            "end_token": 254,
                            "label": "",
                            "children": [
                                {
                                    "type": "string_content",
                                    "start_token": 254,
                                    "end_token": 254,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 256,
                    "end_token": 263,
                    "label": "",
                    "children": [
                        {
                            "type": "aliased_import",
                            "start_token": 257,
                            "end_token": 257,
                            "label": "",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 257,
                                    "end_token": 257,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "call",
                            "start_token": 258,
                            "end_token": 262,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 258,
                                    "end_token": 258,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 259,
                                    "end_token": 261,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}