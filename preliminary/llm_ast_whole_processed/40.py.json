{
    "type": "module",
    "start_token": 3,
    "end_token": 204,
    "label": "\n\n\ndef backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n\n    # Base case: if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True\n\n    # Try every possible substring from 'start' to 'end'\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n\n    return False\n\n\ndef word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n\n    return backtrack(input_string, word_dict, 0)\n",
    "children": [
        {
            "type": "function_definition",
            "start_token": 6,
            "end_token": 144,
            "label": "def backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n\n    # Base case: if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True\n\n    # Try every possible substring from 'start' to 'end'\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n\n    return False\n",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 8,
                    "end_token": 23,
                    "label": "(input_string: str, word_dict: set[str], start: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 9,
                            "end_token": 11,
                            "label": "input_string: str",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 13,
                            "end_token": 18,
                            "label": "word_dict: set[str]",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 20,
                            "end_token": 22,
                            "label": "start: int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "type_parameter",
                    "start_token": 25,
                    "end_token": 26,
                    "label": "> bool",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 28,
                    "end_token": 144,
                    "label": "\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n\n    # Base case: if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True\n\n    # Try every possible substring from 'start' to 'end'\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n\n    return False\n",
                    "children": [
                        {
                            "type": "comment",
                            "start_token": 30,
                            "end_token": 54,
                            "label": "\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "start_token": 62,
                            "end_token": 85,
                            "label": "if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 75,
                                    "end_token": 81,
                                    "label": "start == len(input_string)",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 84,
                                    "end_token": 85,
                                    "label": "return True",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "start_token": 98,
                            "end_token": 139,
                            "label": "for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 101,
                                    "end_token": 113,
                                    "label": "range(start + 1, len(input_string) + 1)",
                                    "children": []
                                },
                                {
                                    "type": "subscript",
                                    "start_token": 117,
                                    "end_token": 118,
                                    "label": "input_string[",
                                    "children": []
                                },
                                {
                                    "type": "and",
                                    "start_token": 125,
                                    "end_token": 135,
                                    "label": "and backtrack(\n            input_string, word_dict, end\n        )",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 126,
                                            "end_token": 135,
                                            "label": "backtrack(\n            input_string, word_dict, end\n        )",
                                            "children": [
                                                {
                                                    "type": "parameters",
                                                    "start_token": 127,
                                                    "end_token": 134,
                                                    "label": "(\n            input_string, word_dict, end\n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 138,
                                    "end_token": 139,
                                    "label": "return True",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 142,
                            "end_token": 143,
                            "label": "return False",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 147,
            "end_token": 203,
            "label": "def word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n\n    return backtrack(input_string, word_dict, 0)",
            "children": [
                {
                    "type": "parameters",
                    "start_token": 149,
                    "end_token": 160,
                    "label": "(input_string: str, word_dict: set[str])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 150,
                            "end_token": 152,
                            "label": "input_string: str",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 154,
                            "end_token": 158,
                            "label": "word_dict: set[str",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "type_parameter",
                    "start_token": 161,
                    "end_token": 163,
                    "label": "-> bool",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 165,
                    "end_token": 203,
                    "label": "\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n\n    return backtrack(input_string, word_dict, 0)",
                    "children": [
                        {
                            "type": "comment",
                            "start_token": 167,
                            "end_token": 191,
                            "label": "\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": 195,
                            "end_token": 203,
                            "label": "return backtrack(input_string, word_dict, 0)",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 196,
                                    "end_token": 203,
                                    "label": "backtrack(input_string, word_dict, 0)",
                                    "children": [
                                        {
                                            "type": "parameters",
                                            "start_token": 197,
                                            "end_token": 202,
                                            "label": "(input_string, word_dict, 0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}