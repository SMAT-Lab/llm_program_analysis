{
    "type": "module",
    "start_token": 0,
    "end_token": 205,
    "label": "import codecs\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass TextDecoderBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n\n    class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text\n",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import codecs",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 4,
            "end_token": 11,
            "label": "from backend.data.block import Block",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 5,
                    "end_token": 9,
                    "label": "backend.data.block",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 11,
                    "end_token": 11,
                    "label": "Block",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 12,
            "end_token": 17,
            "label": ", BlockCategory, BlockOutput, BlockSchema",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 5,
                    "end_token": 9,
                    "label": "backend.data.block",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 13,
                    "end_token": 17,
                    "label": "BlockCategory, BlockOutput, BlockSchema",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 19,
            "end_token": 26,
            "label": "from backend.data.model import SchemaField",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 20,
                    "end_token": 24,
                    "label": "backend.data.model",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 26,
                    "end_token": 26,
                    "label": "SchemaField",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 30,
            "end_token": 184,
            "label": "class TextDecoderBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n\n    class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) ->",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 31,
                    "end_token": 31,
                    "label": "TextDecoderBlock",
                    "children": []
                },
                {
                    "type": "dotted_name",
                    "start_token": 33,
                    "end_token": 33,
                    "label": "Block",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 35,
                    "end_token": 184,
                    "label": ":\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n\n    class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) ->",
                    "children": [
                        {
                            "type": "class_definition",
                            "start_token": 37,
                            "end_token": 62,
                            "label": "class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 38,
                                    "end_token": 38,
                                    "label": "Input",
                                    "children": []
                                },
                                {
                                    "type": "dotted_name",
                                    "start_token": 40,
                                    "end_token": 40,
                                    "label": "BlockSchema",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 42,
                                    "end_token": 62,
                                    "label": ":\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 44,
                                            "end_token": 61,
                                            "label": "text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 44,
                                                    "end_token": 44,
                                                    "label": "text",
                                                    "children": []
                                                },
                                                {
                                                    "type": "pair",
                                                    "start_token": 51,
                                                    "end_token": 53,
                                                    "label": "description=\"A string containing escaped characters to be decoded\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "pair",
                                                    "start_token": 56,
                                                    "end_token": 58,
                                                    "label": "placeholder='Your entire text block with \\\\n and \\\\\" escaped characters'",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "class_definition",
                            "start_token": 64,
                            "end_token": 83,
                            "label": "class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 65,
                                    "end_token": 65,
                                    "label": "Output",
                                    "children": []
                                },
                                {
                                    "type": "dotted_name",
                                    "start_token": 67,
                                    "end_token": 67,
                                    "label": "BlockSchema",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 69,
                                    "end_token": 83,
                                    "label": ":\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 71,
                                            "end_token": 81,
                                            "label": "decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 71,
                                                    "end_token": 71,
                                                    "label": "decoded_text",
                                                    "children": []
                                                },
                                                {
                                                    "type": "pair",
                                                    "start_token": 78,
                                                    "end_token": 80,
                                                    "label": "description=\"The decoded text with escape sequences processed\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 85,
                            "end_token": 117,
                            "label": "def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 86,
                                    "end_token": 86,
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 87,
                                    "end_token": 89,
                                    "label": "(self)",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 91,
                                    "end_token": 117,
                                    "label": "\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 92,
                                            "end_token": 167,
                                            "label": "super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "start_token": 93,
                                                    "end_token": 96,
                                                    "label": "().__init__",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 170,
                            "end_token": 204,
                            "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 171,
                                    "end_token": 171,
                                    "label": "run",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 172,
                                    "end_token": 179,
                                    "label": "(self, input_data: Input, *",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 186,
                                    "end_token": 204,
                                    "label": ":\n        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 188,
                                            "end_token": 199,
                                            "label": "decoded_text = codecs.decode(input_data.text, \"unicode_escape\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 188,
                                                    "end_token": 188,
                                                    "label": "decoded_text",
                                                    "children": []
                                                },
                                                {
                                                    "type": "pair",
                                                    "start_token": 190,
                                                    "end_token": 198,
                                                    "label": "codecs.decode(input_data.text, \"unicode_escape\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "yield",
                                            "start_token": 201,
                                            "end_token": 204,
                                            "label": "yield \"decoded_text\", decoded_text",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}