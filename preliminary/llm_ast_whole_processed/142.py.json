{
    "type": "module",
    "start_token": 0,
    "end_token": 581,
    "label": "import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\n\n\nclass EmailCredentials(BaseModel):\n    smtp_server: str = SchemaField(\n        default=\"smtp.gmail.com\", description=\"SMTP server address\"\n    )\n    smtp_port: int = SchemaField(default=25, description=\"SMTP port number\")\n    smtp_username: BlockSecret = SecretField(key=\"smtp_username\")\n    smtp_password: BlockSecret = SecretField(key=\"smtp_password\")\n\n    model_config = ConfigDict(title=\"Email Credentials\")\n\n\nclass SendEmailBlock(Block):\n    class Input(BlockSchema):\n        to_email: str = SchemaField(\n            description=\"Recipient email address\", placeholder=\"recipient@example.com\"\n        )\n        subject: str = SchemaField(\n            description=\"Subject of the email\", placeholder=\"Enter the email subject\"\n        )\n        body: str = SchemaField(\n            description=\"Body of the email\", placeholder=\"Enter the email body\"\n        )\n        creds: EmailCredentials = SchemaField(\n            description=\"SMTP credentials\",\n            default=EmailCredentials(),\n        )\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the email sending operation\")\n        error: str = SchemaField(\n            description=\"Error message if the email sending failed\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )\n\n    @staticmethod\n    def send_email(\n        creds: EmailCredentials, to_email: str, subject: str, body: str\n    ) -> str:\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n\n        msg = MIMEMultipart()\n        msg[\"From\"] = smtp_username\n        msg[\"To\"] = to_email\n        msg[\"Subject\"] = subject\n        msg.attach(MIMEText(body, \"plain\"))\n\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n\n        return \"Email sent successfully\"\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"status\", self.send_email(\n            input_data.creds,\n            input_data.to_email,\n            input_data.subject,\n            input_data.body,\n        )\n",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import smtplib",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 3,
            "end_token": 10,
            "label": "from email.mime.multipart import MIMEMultipart",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 12,
            "end_token": 19,
            "label": "from email.mime.text import MIMEText",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 22,
            "end_token": 27,
            "label": "from pydantic import BaseModel, ConfigDict",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 30,
            "end_token": 43,
            "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
            "children": []
        },
        {
            "type": "import_from_statement",
            "start_token": 45,
            "end_token": 56,
            "label": "from backend.data.model import BlockSecret, SchemaField, SecretField",
            "children": []
        },
        {
            "type": "class_definition",
            "start_token": 60,
            "end_token": 129,
            "label": "class EmailCredentials(BaseModel):\n    smtp_server: str = SchemaField(\n        default=\"smtp.gmail.com\", description=\"SMTP server address\"\n    )\n    smtp_port: int = SchemaField(default=25, description=\"SMTP port number\")\n    smtp_username: BlockSecret = SecretField(key=\"smtp_username\")\n    smtp_password: BlockSecret = SecretField(key=\"smtp_password\")\n\n    model_config = ConfigDict(title=\"Email Credentials\")",
            "children": [
                {
                    "type": "assignment",
                    "start_token": 67,
                    "end_token": 82,
                    "label": "smtp_server: str = SchemaField(\n        default=\"smtp.gmail.com\", description=\"SMTP server address\"\n    )",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 84,
                    "end_token": 97,
                    "label": "smtp_port: int = SchemaField(default=25, description=\"SMTP port number\")",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 99,
                    "end_token": 108,
                    "label": "smtp_username: BlockSecret = SecretField(key=\"smtp_username\")",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 110,
                    "end_token": 119,
                    "label": "smtp_password: BlockSecret = SecretField(key=\"smtp_password\")",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 122,
                    "end_token": 129,
                    "label": "model_config = ConfigDict(title=\"Email Credentials\")",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 133,
            "end_token": 381,
            "label": "class SendEmailBlock(Block):\n    class Input(BlockSchema):\n        to_email: str = SchemaField(\n            description=\"Recipient email address\", placeholder=\"recipient@example.com\"\n        )\n        subject: str = SchemaField(\n            description=\"Subject of the email\", placeholder=\"Enter the email subject\"\n        )\n        body: str = SchemaField(\n            description=\"Body of the email\", placeholder=\"Enter the email body\"\n        )\n        creds: EmailCredentials = SchemaField(\n            description=\"SMTP credentials\",\n            default=EmailCredentials(),\n        )\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the email sending operation\")\n        error: str = SchemaField(\n            description=\"Error message if the email sending failed\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )",
            "children": [
                {
                    "type": "class_definition",
                    "start_token": 140,
                    "end_token": 217,
                    "label": "class Input(BlockSchema):\n        to_email: str = SchemaField(\n            description=\"Recipient email address\", placeholder=\"recipient@example.com\"\n        )\n        subject: str = SchemaField(\n            description=\"Subject of the email\", placeholder=\"Enter the email subject\"\n        )\n        body: str = SchemaField(\n            description=\"Body of the email\", placeholder=\"Enter the email body\"\n        )\n        creds: EmailCredentials = SchemaField(\n            description=\"SMTP credentials\",\n            default=EmailCredentials(),\n        )",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 147,
                            "end_token": 162,
                            "label": "to_email: str = SchemaField(\n            description=\"Recipient email address\", placeholder=\"recipient@example.com\"\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 164,
                            "end_token": 179,
                            "label": "subject: str = SchemaField(\n            description=\"Subject of the email\", placeholder=\"Enter the email subject\"\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 181,
                            "end_token": 196,
                            "label": "body: str = SchemaField(\n            description=\"Body of the email\", placeholder=\"Enter the email body\"\n        )",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 198,
                            "end_token": 217,
                            "label": "creds: EmailCredentials = SchemaField(\n            description=\"SMTP credentials\",\n            default=EmailCredentials(),\n        )",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "class_definition",
                    "start_token": 220,
                    "end_token": 249,
                    "label": "class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the email sending operation\")\n        error: str = SchemaField(\n            description=\"Error message if the email sending failed\"\n        )",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 227,
                            "end_token": 236,
                            "label": "status: str = SchemaField(description=\"Status of the email sending operation\")",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 238,
                            "end_token": 249,
                            "label": "error: str = SchemaField(\n            description=\"Error message if the email sending failed\"\n        )",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 252,
                    "end_token": 381,
                    "label": "def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )",
                    "children": [
                        {
                            "type": "block",
                            "start_token": 259,
                            "end_token": 381,
                            "label": "super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )",
                            "children": [
                                {
                                    "type": "function_definition",
                                    "start_token": 384,
                                    "end_token": 531,
                                    "label": "@staticmethod\n    def send_email(\n        creds: EmailCredentials, to_email: str, subject: str, body: str\n    ) -> str:\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n\n        msg = MIMEMultipart()\n        msg[\"From\"] = smtp_username\n        msg[\"To\"] = to_email\n        msg[\"Subject\"] = subject\n        msg.attach(MIMEText(body, \"plain\"))\n\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n\n        return \"Email sent successfully\"",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 486,
                                            "end_token": 531,
                                            "label": "with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n\n        return \"Email sent successfully\"",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 534,
                                    "end_token": 581,
                                    "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"status\", self.send_email(\n            input_data.creds,\n            input_data.to_email,\n            input_data.subject,\n            input_data.body,\n        )\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 552,
                                            "end_token": 581,
                                            "label": "yield \"status\", self.send_email(\n            input_data.creds,\n            input_data.to_email,\n            input_data.subject,\n            input_data.body,\n        )\n",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}