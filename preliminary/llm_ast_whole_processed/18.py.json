{
    "type": "module",
    "start_token": 0,
    "end_token": 280,
    "label": "\"\"\"\nGraph Coloring also called \"m coloring problem\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\n\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"\"\"\n\n\ndef valid_coloring(\n    neighbours: list[int], colored_vertices: list[int], color: int\n) -> bool:\n    \"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"\n    # Does any neighbour not satisfy the constraints\n    return not any(\n        neighbour == 1 and colored_vertices[i] == color\n        for i, neighbour in enumerate(neighbours)\n    )\n\n\ndef util_color(\n    graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int\n) -> bool:\n    \"\"\"\n    Pseudo-Code\n\n    Base Case:\n    1. Check if coloring is complete\n        1.1 If complete return True (meaning that we successfully colored the graph)\n\n    Recursive Step:\n    2. Iterates over each color:\n        Check if the current coloring is valid:\n            2.1. Color given vertex\n            2.2. Do recursive call, check if this coloring leads to a solution\n            2.4. if current coloring leads to a solution return\n            2.5. Uncolor given vertex\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n    >>> max_colors = 3\n    >>> colored_vertices = [0, 1, 0, 0, 0]\n    >>> index = 3\n\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    True\n\n    >>> max_colors = 2\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    False\n    \"\"\"\n\n    # Base Case\n    if index == len(graph):\n        return True\n\n    # Recursive Step\n    for i in range(max_colors):\n        if valid_coloring(graph[index], colored_vertices, i):\n            # Color current vertex\n            colored_vertices[index] = i\n            # Validate coloring\n            if util_color(graph, max_colors, colored_vertices, index + 1):\n                return True\n            # Backtrack\n            colored_vertices[index] = -1\n    return False\n\n\ndef color(graph: list[list[int]], max_colors: int) -> list[int]:\n    \"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\n    colored_vertices = [-1] * len(graph)\n\n    if util_color(graph, max_colors, colored_vertices, 0):\n        return colored_vertices\n\n    return []\n",
    "children": [
        {
            "type": "concatenated_string",
            "start_token": 0,
            "end_token": 6,
            "label": "\"\"\"\nGraph Coloring also called \"m coloring problem\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\n\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"\"\"",
            "children": [
                {
                    "type": "string_start",
                    "start_token": 0,
                    "end_token": 0,
                    "label": "\"\"",
                    "children": []
                },
                {
                    "type": "string_content",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "\"\nGraph Coloring also called \"",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 2,
                    "end_token": 2,
                    "label": "m",
                    "children": []
                },
                {
                    "type": "string_content",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "coloring",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 4,
                    "end_token": 4,
                    "label": "problem",
                    "children": []
                },
                {
                    "type": "string_end",
                    "start_token": 5,
                    "end_token": 5,
                    "label": "\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\n\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 6,
                    "end_token": 6,
                    "label": "\"\"",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 10,
            "end_token": 80,
            "label": "def valid_coloring(\n    neighbours: list[int], colored_vertices: list[int], color: int\n) -> bool:\n    \"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"\n    # Does any neighbour not satisfy the constraints\n    return not any(\n        neighbour == 1 and colored_vertices[i] == color\n        for i, neighbour in enumerate(neighbours)\n    )\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 10,
                    "end_token": 10,
                    "label": "def",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 11,
                    "end_token": 11,
                    "label": "valid_coloring",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 12,
                    "end_token": 32,
                    "label": "(\n    neighbours: list[int], colored_vertices: list[int], color: int\n)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 14,
                            "end_token": 14,
                            "label": "neighbours",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 14,
                            "end_token": 19,
                            "label": "neighbours: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 14,
                                    "end_token": 14,
                                    "label": "neighbours",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 16,
                                    "end_token": 19,
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 16,
                                            "end_token": 16,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "start_token": 17,
                                            "end_token": 19,
                                            "label": "[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 18,
                                                    "end_token": 18,
                                                    "label": "int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "start_token": 21,
                            "end_token": 21,
                            "label": "colored_vertices",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 21,
                            "end_token": 26,
                            "label": "colored_vertices: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 21,
                                    "end_token": 21,
                                    "label": "colored_vertices",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 23,
                                    "end_token": 26,
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 23,
                                            "end_token": 23,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "start_token": 24,
                                            "end_token": 26,
                                            "label": "[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 25,
                                                    "end_token": 25,
                                                    "label": "int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "start_token": 28,
                            "end_token": 28,
                            "label": "color",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 28,
                            "end_token": 30,
                            "label": "color: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 28,
                                    "end_token": 28,
                                    "label": "color",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 29,
                                    "end_token": 30,
                                    "label": ": int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 29,
                                            "end_token": 29,
                                            "label": ":",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 34,
                    "end_token": 35,
                    "label": "> bool",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 35,
                            "end_token": 35,
                            "label": "bool",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 36,
                    "end_token": 79,
                    "label": ":\n    \"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"\n    # Does any neighbour not satisfy the constraints\n    return not any(\n        neighbour == 1 and colored_vertices[i] == color\n        for i, neighbour in enumerate(neighbours)\n    )",
                    "children": [
                        {
                            "type": "comment",
                            "start_token": 42,
                            "end_token": 50,
                            "label": "# Does any neighbour not satisfy the constraints\n",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": 51,
                            "end_token": 80,
                            "label": "return not any(\n        neighbour == 1 and colored_vertices[i] == color\n        for i, neighbour in enumerate(neighbours)\n    )\n",
                            "children": [
                                {
                                    "type": "not_operator",
                                    "start_token": 52,
                                    "end_token": 53,
                                    "label": "not any",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 83,
            "end_token": 215,
            "label": "def util_color(\n    graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int\n) -> bool:\n    \"\"\"\n    Pseudo-Code\n\n    Base Case:\n    1. Check if coloring is complete\n        1.1 If complete return True (meaning that we successfully colored the graph)\n\n    Recursive Step:\n    2. Iterates over each color:\n        Check if the current coloring is valid:\n            2.1. Color given vertex\n            2.2. Do recursive call, check if this coloring leads to a solution\n            2.4. if current coloring leads to a solution return\n            2.5. Uncolor given vertex\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n    >>> max_colors = 3\n    >>> colored_vertices = [0, 1, 0, 0, 0]\n    >>> index = 3\n\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    True\n\n    >>> max_colors = 2\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    False\n    \"\"\"\n\n    # Base Case\n    if index == len(graph):\n        return True\n\n    # Recursive Step\n    for i in range(max_colors):\n        if valid_coloring(graph[index], colored_vertices, i):\n            # Color current vertex\n            colored_vertices[index] = i\n            # Validate coloring\n            if util_color(graph, max_colors, colored_vertices, index + 1):\n                return True\n            # Backtrack\n            colored_vertices[index] = -1\n    return False\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 83,
                    "end_token": 83,
                    "label": "def",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 84,
                    "end_token": 84,
                    "label": "util_color",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 85,
                    "end_token": 112,
                    "label": "(\n    graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int\n)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 87,
                            "end_token": 87,
                            "label": "graph",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 87,
                            "end_token": 95,
                            "label": "graph: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 87,
                                    "end_token": 87,
                                    "label": "graph",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 89,
                                    "end_token": 95,
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 89,
                                            "end_token": 89,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "start_token": 90,
                                            "end_token": 95,
                                            "label": "[list[int]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 91,
                                                    "end_token": 93,
                                                    "label": "list[int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "start_token": 97,
                            "end_token": 97,
                            "label": "max_colors",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 97,
                            "end_token": 99,
                            "label": "max_colors: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 97,
                                    "end_token": 97,
                                    "label": "max_colors",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 99,
                                    "end_token": 99,
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 99,
                                            "end_token": 99,
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "start_token": 101,
                            "end_token": 101,
                            "label": "colored_vertices",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 101,
                            "end_token": 107,
                            "label": "colored_vertices: list[int],",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 101,
                                    "end_token": 101,
                                    "label": "colored_vertices",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 103,
                                    "end_token": 107,
                                    "label": "list[int],",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 103,
                                            "end_token": 103,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "start_token": 104,
                                            "end_token": 107,
                                            "label": "[int],",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 105,
                                                    "end_token": 105,
                                                    "label": "int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "start_token": 109,
                            "end_token": 109,
                            "label": ":",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 109,
                            "end_token": 111,
                            "label": ": int\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 109,
                                    "end_token": 109,
                                    "label": ":",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 111,
                                    "end_token": 111,
                                    "label": "\n",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 111,
                                            "end_token": 111,
                                            "label": "\n",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 114,
                    "end_token": 115,
                    "label": "> bool",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 115,
                            "end_token": 115,
                            "label": "bool",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 116,
                    "end_token": 214,
                    "label": ":\n    \"\"\"\n    Pseudo-Code\n\n    Base Case:\n    1. Check if coloring is complete\n        1.1 If complete return True (meaning that we successfully colored the graph)\n\n    Recursive Step:\n    2. Iterates over each color:\n        Check if the current coloring is valid:\n            2.1. Color given vertex\n            2.2. Do recursive call, check if this coloring leads to a solution\n            2.4. if current coloring leads to a solution return\n            2.5. Uncolor given vertex\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n    >>> max_colors = 3\n    >>> colored_vertices = [0, 1, 0, 0, 0]\n    >>> index = 3\n\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    True\n\n    >>> max_colors = 2\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    False\n    \"\"\"\n\n    # Base Case\n    if index == len(graph):\n        return True\n\n    # Recursive Step\n    for i in range(max_colors):\n        if valid_coloring(graph[index], colored_vertices, i):\n            # Color current vertex\n            colored_vertices[index] = i\n            # Validate coloring\n            if util_color(graph, max_colors, colored_vertices, index + 1):\n                return True\n            # Backtrack\n            colored_vertices[index] = -1\n    return False",
                    "children": [
                        {
                            "type": "comment",
                            "start_token": 123,
                            "end_token": 136,
                            "label": "# Base Case\n    if index == len(graph):\n",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": 137,
                            "end_token": 138,
                            "label": "return True",
                            "children": []
                        },
                        {
                            "type": "comment",
                            "start_token": 141,
                            "end_token": 152,
                            "label": "# Recursive Step\n    for i in range(max_colors):",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "start_token": 145,
                            "end_token": 214,
                            "label": "for i in range(max_colors):\n        if valid_coloring(graph[index], colored_vertices, i):\n            # Color current vertex\n            colored_vertices[index] = i\n            # Validate coloring\n            if util_color(graph, max_colors, colored_vertices, index + 1):\n                return True\n            # Backtrack\n            colored_vertices[index] = -1\n    return False",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 145,
                                    "end_token": 145,
                                    "label": "for",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 146,
                                    "end_token": 146,
                                    "label": "i",
                                    "children": []
                                },
                                {
                                    "type": "range",
                                    "start_token": 148,
                                    "end_token": 150,
                                    "label": "range(max_colors",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 151,
                                    "end_token": 214,
                                    "label": "):\n        if valid_coloring(graph[index], colored_vertices, i):\n            # Color current vertex\n            colored_vertices[index] = i\n            # Validate coloring\n            if util_color(graph, max_colors, colored_vertices, index + 1):\n                return True\n            # Backtrack\n            colored_vertices[index] = -1\n    return False",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 218,
            "end_token": 279,
            "label": "def color(graph: list[list[int]], max_colors: int) -> list[int]:\n    \"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\n    colored_vertices = [-1] * len(graph)\n\n    if util_color(graph, max_colors, colored_vertices, 0):\n        return colored_vertices\n\n    return []",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 218,
                    "end_token": 218,
                    "label": "def",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 219,
                    "end_token": 219,
                    "label": "color",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 220,
                    "end_token": 234,
                    "label": "(graph: list[list[int]], max_colors: int)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 221,
                            "end_token": 221,
                            "label": "graph",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 221,
                            "end_token": 229,
                            "label": "graph: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 221,
                                    "end_token": 221,
                                    "label": "graph",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 223,
                                    "end_token": 229,
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 223,
                                            "end_token": 223,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "start_token": 224,
                                            "end_token": 229,
                                            "label": "[list[int]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 225,
                                                    "end_token": 227,
                                                    "label": "list[int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "start_token": 231,
                            "end_token": 231,
                            "label": "max_colors",
                            "children": []
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 231,
                            "end_token": 233,
                            "label": "max_colors: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 231,
                                    "end_token": 231,
                                    "label": "max_colors",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 233,
                                    "end_token": 233,
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 233,
                                            "end_token": 233,
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 236,
                    "end_token": 240,
                    "label": "> list[int]",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 240,
                            "end_token": 240,
                            "label": "]",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 241,
                    "end_token": 278,
                    "label": ":\n    \"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\n    colored_vertices = [-1] * len(graph)\n\n    if util_color(graph, max_colors, colored_vertices, 0):\n        return colored_vertices\n\n    return [",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 247,
                            "end_token": 258,
                            "label": "colored_vertices = [-1] * len(graph)\n",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "start_token": 260,
                            "end_token": 275,
                            "label": "if util_color(graph, max_colors, colored_vertices, 0):\n        return colored_vertices\n",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 260,
                                    "end_token": 260,
                                    "label": "if",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 261,
                                    "end_token": 261,
                                    "label": "util_color",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 271,
                                    "end_token": 274,
                                    "label": ":\n        return colored_vertices",
                                    "children": []
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 273,
                                    "end_token": 274,
                                    "label": "return colored_vertices",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 277,
                            "end_token": 278,
                            "label": "return [",
                            "children": []
                        }
                    ]
                }
            ]
        }
    ]
}