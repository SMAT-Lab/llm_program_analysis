{
    "type": "module",
    "start_token": 0,
    "end_token": 12,
    "label": "package cjson.serialization\nimport cjson.serialization.common.TokenVerificationException",
    "children": [
        {
            "type": "packageHeader",
            "start_token": 0,
            "end_token": 3,
            "label": "package cjson.serialization",
            "children": [
                {
                    "type": "package",
                    "start_token": 0,
                    "end_token": 0,
                    "label": "package",
                    "children": []
                },
                {
                    "type": "packageNameIdentifier",
                    "start_token": 1,
                    "end_token": 3,
                    "label": "cjson.serialization",
                    "children": []
                }
            ]
        },
        {
            "type": "importList",
            "start_token": 5,
            "end_token": 12,
            "label": "import cjson.serialization.common.TokenVerificationException",
            "children": [
                {
                    "type": "importSpecified",
                    "start_token": 5,
                    "end_token": 12,
                    "label": "import cjson.serialization.common.TokenVerificationException",
                    "children": [
                        {
                            "type": "import",
                            "start_token": 5,
                            "end_token": 5,
                            "label": "import",
                            "children": []
                        },
                        {
                            "type": "packageNameIdentifier",
                            "start_token": 6,
                            "end_token": 10,
                            "label": "cjson.serialization.common",
                            "children": []
                        },
                        {
                            "type": "exceptionTypePattern",
                            "start_token": 11,
                            "end_token": 12,
                            "label": ".TokenVerificationException",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_placeholder",
            "name": "TokenVerifier",
            "start_line": 3,
            "end_line": 21,
            "start_token": 14,
            "end_token": 171,
            "label": "public class TokenVerifier {\n    public static func verifyClassDecl(input_Tk: Tokens, marcoName: String): (Option<NodeFormat_ClassDecl>, Option<NodeFormat_StructDecl>) {\n        var decl = parseDecl(input_Tk)\n        if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        } else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }\n    }\n    public static func verifyVarDecl(input_Tk: Tokens, marcoName: String): NodeFormat_VarDecl {\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }\n}",
            "children": [
                {
                    "type": "sourceFile",
                    "start_token": 14,
                    "end_token": 171,
                    "label": "public class TokenVerifier {\n    public static func verifyClassDecl(input_Tk: Tokens, marcoName: String): (Option<NodeFormat_ClassDecl>, Option<NodeFormat_StructDecl>) {\n        var decl = parseDecl(input_Tk)\n        if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        } else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }\n    }\n    public static func verifyVarDecl(input_Tk: Tokens, marcoName: String): NodeFormat_VarDecl {\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }\n}",
                    "children": [
                        {
                            "type": "modifiers",
                            "start_token": 14,
                            "end_token": 14,
                            "label": "public",
                            "children": []
                        },
                        {
                            "type": "classDefinition",
                            "start_token": 15,
                            "end_token": 171,
                            "label": "class TokenVerifier {\n    public static func verifyClassDecl(input_Tk: Tokens, marcoName: String): (Option<NodeFormat_ClassDecl>, Option<NodeFormat_StructDecl>) {\n        var decl = parseDecl(input_Tk)\n        if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        } else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }\n    }\n    public static func verifyVarDecl(input_Tk: Tokens, marcoName: String): NodeFormat_VarDecl {\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }\n}",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 16,
                                    "end_token": 16,
                                    "label": "TokenVerifier",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": 17,
                                    "end_token": 171,
                                    "label": "{\n    public static func verifyClassDecl(input_Tk: Tokens, marcoName: String): (Option<NodeFormat_ClassDecl>, Option<NodeFormat_StructDecl>) {\n        var decl = parseDecl(input_Tk)\n        if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        } else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }\n    }\n    public static func verifyVarDecl(input_Tk: Tokens, marcoName: String): NodeFormat_VarDecl {\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }\n}",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_placeholder",
                            "name": "verifyClassDecl",
                            "start_line": 4,
                            "end_line": 13,
                            "start_token": 19,
                            "end_token": 117,
                            "label": "public static func verifyClassDecl(input_Tk: Tokens, marcoName: String): (Option<NodeFormat_ClassDecl>, Option<NodeFormat_StructDecl>) {\n        var decl = parseDecl(input_Tk)\n        if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        } else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }\n    }\n",
                            "children": [
                                {
                                    "type": "functionDefinition",
                                    "start_token": 19,
                                    "end_token": 116,
                                    "label": "public static func verifyClassDecl(input_Tk: Tokens, marcoName: String): (Option<NodeFormat_ClassDecl>, Option<NodeFormat_StructDecl>) {\n        var decl = parseDecl(input_Tk)\n        if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        } else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }\n    }",
                                    "children": [
                                        {
                                            "type": "modifiers",
                                            "start_token": 19,
                                            "end_token": 20,
                                            "label": "public static",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 21,
                                            "end_token": 22,
                                            "label": "func verifyClassDecl",
                                            "children": []
                                        },
                                        {
                                            "type": "functionParameters",
                                            "start_token": 23,
                                            "end_token": 31,
                                            "label": "(input_Tk: Tokens, marcoName: String)",
                                            "children": [
                                                {
                                                    "type": "parameter",
                                                    "start_token": 24,
                                                    "end_token": 26,
                                                    "label": "input_Tk: Tokens",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 24,
                                                            "end_token": 24,
                                                            "label": "input_Tk",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "typeIdentifier",
                                                            "start_token": 26,
                                                            "end_token": 26,
                                                            "label": "Tokens",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "parameter",
                                                    "start_token": 28,
                                                    "end_token": 30,
                                                    "label": "marcoName: String",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 28,
                                                            "end_token": 28,
                                                            "label": "marcoName",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "typeIdentifier",
                                                            "start_token": 30,
                                                            "end_token": 30,
                                                            "label": "String",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "typeExpression",
                                            "start_token": 32,
                                            "end_token": 43,
                                            "label": ": (Option<NodeFormat_ClassDecl>, Option<NodeFormat_StructDecl>)",
                                            "children": [
                                                {
                                                    "type": "typeArguments",
                                                    "start_token": 33,
                                                    "end_token": 37,
                                                    "label": "(Option<NodeFormat_ClassDecl>",
                                                    "children": [
                                                        {
                                                            "type": "typeIdentifier",
                                                            "start_token": 36,
                                                            "end_token": 36,
                                                            "label": "NodeFormat_ClassDecl",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "typeArguments",
                                                    "start_token": 39,
                                                    "end_token": 42,
                                                    "label": "Option<NodeFormat_StructDecl>",
                                                    "children": [
                                                        {
                                                            "type": "typeIdentifier",
                                                            "start_token": 41,
                                                            "end_token": 41,
                                                            "label": "NodeFormat_StructDecl",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 44,
                                            "end_token": 116,
                                            "label": "{\n        var decl = parseDecl(input_Tk)\n        if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        } else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }\n    }",
                                            "children": [
                                                {
                                                    "type": "variableDeclaration",
                                                    "start_token": 46,
                                                    "end_token": 52,
                                                    "label": "var decl = parseDecl(input_Tk)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 47,
                                                            "end_token": 47,
                                                            "label": "decl",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "callExpression",
                                                            "start_token": 49,
                                                            "end_token": 52,
                                                            "label": "parseDecl(input_Tk)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 49,
                                                                    "end_token": 49,
                                                                    "label": "parseDecl",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argumentList",
                                                                    "start_token": 50,
                                                                    "end_token": 52,
                                                                    "label": "(input_Tk)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 51,
                                                                            "end_token": 51,
                                                                            "label": "input_Tk",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "ifExpression",
                                                    "start_token": 54,
                                                    "end_token": 78,
                                                    "label": "if (decl.isClassDecl()) {\n            return (Some(decl.asClassDecl()), None)\n        }",
                                                    "children": [
                                                        {
                                                            "type": "callExpression",
                                                            "start_token": 56,
                                                            "end_token": 61,
                                                            "label": "decl.isClassDecl())",
                                                            "children": [
                                                                {
                                                                    "type": "fieldExpression",
                                                                    "start_token": 56,
                                                                    "end_token": 58,
                                                                    "label": "decl.isClassDecl",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 62,
                                                            "end_token": 78,
                                                            "label": "{\n            return (Some(decl.asClassDecl()), None)\n        }",
                                                            "children": [
                                                                {
                                                                    "type": "returnExpression",
                                                                    "start_token": 64,
                                                                    "end_token": 76,
                                                                    "label": "return (Some(decl.asClassDecl()), None)",
                                                                    "children": [
                                                                        {
                                                                            "type": "tupleLiteral",
                                                                            "start_token": 65,
                                                                            "end_token": 76,
                                                                            "label": "(Some(decl.asClassDecl()), None)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "callExpression",
                                                                                    "start_token": 67,
                                                                                    "end_token": 73,
                                                                                    "label": "(decl.asClassDecl())",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "fieldExpression",
                                                                                            "start_token": 68,
                                                                                            "end_token": 70,
                                                                                            "label": "decl.asClassDecl",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "none",
                                                                                    "start_token": 75,
                                                                                    "end_token": 75,
                                                                                    "label": "None",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else",
                                                    "start_token": 79,
                                                    "end_token": 114,
                                                    "label": "else if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        } else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }",
                                                    "children": [
                                                        {
                                                            "type": "ifExpression",
                                                            "start_token": 80,
                                                            "end_token": 104,
                                                            "label": "if (decl.isStructDecl()) {\n            return (None, Some(decl.asStructDecl()))\n        }",
                                                            "children": [
                                                                {
                                                                    "type": "callExpression",
                                                                    "start_token": 82,
                                                                    "end_token": 87,
                                                                    "label": "decl.isStructDecl())",
                                                                    "children": [
                                                                        {
                                                                            "type": "fieldExpression",
                                                                            "start_token": 82,
                                                                            "end_token": 84,
                                                                            "label": "decl.isStructDecl",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 88,
                                                                    "end_token": 104,
                                                                    "label": "{\n            return (None, Some(decl.asStructDecl()))\n        }",
                                                                    "children": [
                                                                        {
                                                                            "type": "returnExpression",
                                                                            "start_token": 90,
                                                                            "end_token": 102,
                                                                            "label": "return (None, Some(decl.asStructDecl()))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "tupleLiteral",
                                                                                    "start_token": 91,
                                                                                    "end_token": 102,
                                                                                    "label": "(None, Some(decl.asStructDecl()))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "none",
                                                                                            "start_token": 92,
                                                                                            "end_token": 92,
                                                                                            "label": "None",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "callExpression",
                                                                                            "start_token": 94,
                                                                                            "end_token": 101,
                                                                                            "label": "Some(decl.asStructDecl())",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "fieldExpression",
                                                                                                    "start_token": 96,
                                                                                                    "end_token": 98,
                                                                                                    "label": "decl.asStructDecl",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 105,
                                                            "end_token": 114,
                                                            "label": "else {\n            throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")\n        }",
                                                            "children": [
                                                                {
                                                                    "type": "throwExpression",
                                                                    "start_token": 108,
                                                                    "end_token": 112,
                                                                    "label": "throw TokenVerificationException(\"${marcoName} is only allowed for class or struct\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 109,
                                                                            "end_token": 109,
                                                                            "label": "TokenVerificationException",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "stringLiteral",
                                                                            "start_token": 111,
                                                                            "end_token": 111,
                                                                            "label": "\"${marcoName} is only allowed for class or struct\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_placeholder",
                            "name": "verifyVarDecl",
                            "start_line": 14,
                            "end_line": 20,
                            "start_token": 118,
                            "end_token": 170,
                            "label": "public static func verifyVarDecl(input_Tk: Tokens, marcoName: String): NodeFormat_VarDecl {\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }\n",
                            "children": [
                                {
                                    "type": "module",
                                    "start_token": 118,
                                    "end_token": 169,
                                    "label": "public static func verifyVarDecl(input_Tk: Tokens, marcoName: String): NodeFormat_VarDecl {\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }",
                                    "children": [
                                        {
                                            "type": "modifiers",
                                            "start_token": 118,
                                            "end_token": 119,
                                            "label": "public static",
                                            "children": [
                                                {
                                                    "type": "PUBLIC",
                                                    "start_token": 118,
                                                    "end_token": 118,
                                                    "label": "public",
                                                    "children": []
                                                },
                                                {
                                                    "type": "STATIC",
                                                    "start_token": 119,
                                                    "end_token": 119,
                                                    "label": "static",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "functionDefinition",
                                            "start_token": 120,
                                            "end_token": 169,
                                            "label": "func verifyVarDecl(input_Tk: Tokens, marcoName: String): NodeFormat_VarDecl {\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 120,
                                                    "end_token": 121,
                                                    "label": "func verifyVarDecl",
                                                    "children": []
                                                },
                                                {
                                                    "type": "functionParameters",
                                                    "start_token": 122,
                                                    "end_token": 130,
                                                    "label": "(input_Tk: Tokens, marcoName: String)",
                                                    "children": [
                                                        {
                                                            "type": "parameterList",
                                                            "start_token": 123,
                                                            "end_token": 129,
                                                            "label": "input_Tk: Tokens, marcoName: String",
                                                            "children": [
                                                                {
                                                                    "type": "parameter",
                                                                    "start_token": 123,
                                                                    "end_token": 125,
                                                                    "label": "input_Tk: Tokens",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 123,
                                                                            "end_token": 123,
                                                                            "label": "input_Tk",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "typeExpression",
                                                                            "start_token": 124,
                                                                            "end_token": 125,
                                                                            "label": ": Tokens",
                                                                            "children": [
                                                                                {
                                                                                    "type": "userType",
                                                                                    "start_token": 125,
                                                                                    "end_token": 125,
                                                                                    "label": "Tokens",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "parameter",
                                                                    "start_token": 127,
                                                                    "end_token": 129,
                                                                    "label": "marcoName: String",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 127,
                                                                            "end_token": 127,
                                                                            "label": "marcoName",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "typeExpression",
                                                                            "start_token": 128,
                                                                            "end_token": 129,
                                                                            "label": ": String",
                                                                            "children": [
                                                                                {
                                                                                    "type": "userType",
                                                                                    "start_token": 129,
                                                                                    "end_token": 129,
                                                                                    "label": "String",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "typeExpression",
                                                    "start_token": 131,
                                                    "end_token": 132,
                                                    "label": ": NodeFormat_VarDecl",
                                                    "children": [
                                                        {
                                                            "type": "userType",
                                                            "start_token": 132,
                                                            "end_token": 132,
                                                            "label": "NodeFormat_VarDecl",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 133,
                                                    "end_token": 169,
                                                    "label": "{\n        var decl = parseDecl(input_Tk)\n        if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }\n        return decl.asVarDecl()\n    }",
                                                    "children": [
                                                        {
                                                            "type": "variableDeclaration",
                                                            "start_token": 135,
                                                            "end_token": 141,
                                                            "label": "var decl = parseDecl(input_Tk)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 135,
                                                                    "end_token": 136,
                                                                    "label": "var decl",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "callExpression",
                                                                    "start_token": 138,
                                                                    "end_token": 141,
                                                                    "label": "parseDecl(input_Tk)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 138,
                                                                            "end_token": 138,
                                                                            "label": "parseDecl",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argumentList",
                                                                            "start_token": 139,
                                                                            "end_token": 141,
                                                                            "label": "(input_Tk)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 140,
                                                                                    "end_token": 140,
                                                                                    "label": "input_Tk",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "ifExpression",
                                                            "start_token": 143,
                                                            "end_token": 160,
                                                            "label": "if (!decl.isVarDecl()) {\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }",
                                                            "children": [
                                                                {
                                                                    "type": "parenthesizedExpression",
                                                                    "start_token": 144,
                                                                    "end_token": 151,
                                                                    "label": "(!decl.isVarDecl())",
                                                                    "children": [
                                                                        {
                                                                            "type": "unaryExpression",
                                                                            "start_token": 145,
                                                                            "end_token": 145,
                                                                            "label": "!",
                                                                            "children": [
                                                                                {
                                                                                    "type": "BOOLEAN",
                                                                                    "start_token": 145,
                                                                                    "end_token": 145,
                                                                                    "label": "!",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "callExpression",
                                                                            "start_token": 146,
                                                                            "end_token": 151,
                                                                            "label": "decl.isVarDecl())",
                                                                            "children": [
                                                                                {
                                                                                    "type": "fieldExpression",
                                                                                    "start_token": 146,
                                                                                    "end_token": 148,
                                                                                    "label": "decl.isVarDecl",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 146,
                                                                                            "end_token": 146,
                                                                                            "label": "decl",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 148,
                                                                                            "end_token": 148,
                                                                                            "label": "isVarDecl",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argumentList",
                                                                                    "start_token": 149,
                                                                                    "end_token": 150,
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 152,
                                                                    "end_token": 160,
                                                                    "label": "{\n            throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")\n        }",
                                                                    "children": [
                                                                        {
                                                                            "type": "throwExpression",
                                                                            "start_token": 154,
                                                                            "end_token": 158,
                                                                            "label": "throw TokenVerificationException(\"${marcoName} is noly allow for class level vars\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 154,
                                                                                    "end_token": 155,
                                                                                    "label": "throw TokenVerificationException",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argumentList",
                                                                                    "start_token": 156,
                                                                                    "end_token": 158,
                                                                                    "label": "(\"${marcoName} is noly allow for class level vars\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "stringLiteral",
                                                                                            "start_token": 157,
                                                                                            "end_token": 157,
                                                                                            "label": "\"${marcoName} is noly allow for class level vars\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "returnExpression",
                                                            "start_token": 162,
                                                            "end_token": 167,
                                                            "label": "return decl.asVarDecl()",
                                                            "children": [
                                                                {
                                                                    "type": "callExpression",
                                                                    "start_token": 163,
                                                                    "end_token": 167,
                                                                    "label": "decl.asVarDecl()",
                                                                    "children": [
                                                                        {
                                                                            "type": "fieldExpression",
                                                                            "start_token": 163,
                                                                            "end_token": 165,
                                                                            "label": "decl.asVarDecl",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 163,
                                                                                    "end_token": 163,
                                                                                    "label": "decl",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 165,
                                                                                    "end_token": 165,
                                                                                    "label": "asVarDecl",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argumentList",
                                                                            "start_token": 166,
                                                                            "end_token": 166,
                                                                            "label": "(",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}