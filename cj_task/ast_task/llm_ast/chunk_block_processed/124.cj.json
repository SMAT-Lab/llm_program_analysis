{
    "type": "module",
    "start_token": 0,
    "end_token": 25,
    "label": "macro package enum_enhance\n\nimport std.ast.*\nimport std.collection.{ArrayList, enumerate, filter, all}",
    "children": [
        {
            "type": "macroDecl",
            "start_token": 0,
            "end_token": 0,
            "label": "macro",
            "children": []
        },
        {
            "type": "packageHeader",
            "start_token": 1,
            "end_token": 2,
            "label": "package enum_enhance",
            "children": [
                {
                    "type": "packageNameIdentifier",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "package",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 2,
                    "end_token": 2,
                    "label": "enum_enhance",
                    "children": []
                }
            ]
        },
        {
            "type": "importList",
            "start_token": 5,
            "end_token": 25,
            "label": "import std.ast.*\nimport std.collection.{ArrayList, enumerate, filter, all}",
            "children": [
                {
                    "type": "importAll",
                    "start_token": 5,
                    "end_token": 10,
                    "label": "import std.ast.*",
                    "children": [
                        {
                            "type": "import",
                            "start_token": 5,
                            "end_token": 6,
                            "label": "import std",
                            "children": []
                        },
                        {
                            "type": "packageNameIdentifier",
                            "start_token": 6,
                            "end_token": 8,
                            "label": "std.ast",
                            "children": []
                        },
                        {
                            "type": "wildcardPattern",
                            "start_token": 10,
                            "end_token": 10,
                            "label": "*",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "importSpecified",
                    "start_token": 12,
                    "end_token": 25,
                    "label": "import std.collection.{ArrayList, enumerate, filter, all}",
                    "children": [
                        {
                            "type": "import",
                            "start_token": 12,
                            "end_token": 13,
                            "label": "import std",
                            "children": []
                        },
                        {
                            "type": "packageNameIdentifier",
                            "start_token": 13,
                            "end_token": 15,
                            "label": "std.collection",
                            "children": []
                        },
                        {
                            "type": "importContent",
                            "start_token": 17,
                            "end_token": 25,
                            "label": "{ArrayList, enumerate, filter, all}",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 18,
                                    "end_token": 18,
                                    "label": "ArrayList",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 20,
                                    "end_token": 20,
                                    "label": "enumerate",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 22,
                                    "end_token": 22,
                                    "label": "filter",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 24,
                                    "end_token": 24,
                                    "label": "all",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "EquatableEnum",
            "start_line": 6,
            "end_line": 104,
            "start_token": 28,
            "end_token": 48,
            "label": "public macro EquatableEnum(input: Tokens): Tokens {\n    let enumm = EnumDecl(input)\n    // match表达式\n    let hashMatchExpr = MatchExpr()\n    hashMatchExpr.selector = RefExpr(quote(this))\n    hashMatchExpr.lParen = Token(TokenKind.LPAREN)\n    hashMatchExpr.rParen = Token(TokenKind.RPAREN)\n    // 基础类型无嵌套参数构造器\n    let noNestedPrimConstr = enumm.constructors |>\n        filter {\n        i: Constructor => i.typeArguments |>\n            all {\n            i: TypeNode => match (i) {\n                case a: PrimitiveType => true\n                case _ => throw ASTException(\"All args of Constructor shall be primitive type\")\n            }\n        }\n    }\n    // 构造case\n    let noNestedPrimCases = ArrayList<MatchCase>()\n    var hashIndex = 0i64\n    for (constr in noNestedPrimConstr) {\n        let matchCase = MatchCase()\n        let blockNodes = matchCase.block.nodes\n        let enumPatt = EnumPattern()\n\n        blockNodes.append(VarDecl(quote(var hasher = DefaultHasher(res: $(hashIndex)))))\n        enumPatt.constructor = parseExpr(constr.identifier.toTokens())\n\n        for (item in constr.typeArguments |> enumerate) {\n            let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())\n            enumPatt.patterns.append(TypePattern(quote($(id): $(item[1]))))\n            blockNodes.append(CallExpr(quote(hasher.write($(id)))))\n        }\n        blockNodes.append(CallExpr(quote(hasher.finish())))\n\n        matchCase.patterns.append(enumPatt)\n        noNestedPrimCases.append(matchCase)\n        hashIndex++\n    }\n    noNestedPrimCases.iterator().forEach {i => hashMatchExpr.matchCases.append(i)}\n    // hashCode函数\n    let block = Block()\n    block.nodes.append(hashMatchExpr)\n    let hashCode = FuncDecl(\n        quote(\n            \n        public func hashCode(): Int64 {\n            $block\n        }))\n    // == 函数\n    let equal = FuncDecl(\n        quote(\n        public operator func ==(that: $(enumm.identifier)): Bool {\n            this.hashCode() == that.hashCode()\n        })\n    )\n    // != 函数\n    let notEqual = FuncDecl(\n        quote(\n        public operator func !=(that: $(enumm.identifier)): Bool {\n            this.hashCode() != that.hashCode()\n        })\n    )\n    // 将函数加入枚举\n    let funcs = ArrayList<String>()\n    for (decl in enumm.decls) {\n        match (decl) {\n            // case d: FuncDecl => funcSet.put(d.identifier.toTokens().toString())\n            case d: FuncDecl => funcs.append(d.identifier.value)\n            case _ => ()\n        }\n    }\n    if (!funcs.contains(\"hashCode\")) {\n        enumm.decls.append(hashCode)\n    }\n    if (!funcs.contains(\"==\")) {\n        enumm.decls.append(equal)\n    }\n    if (!funcs.contains(\"!=\")) {\n        enumm.decls.append(notEqual)\n    }\n    // 继承接口\n    let intfs = ArrayList<String>()\n    for (i in enumm.superTypes) {\n        match (i) {\n            case r: RefType => intfs.append(r.toTokens().toString())\n            case r: TypeNode => ()\n        }\n    }\n    if (!intfs.contains(\"Hashable\")) {\n        enumm.superTypes.append(RefType(quote(Hashable)))\n    }\n    if (!intfs.contains(\"Equatable\")) {\n        enumm.superTypes.append(RefType(quote(Equatable<$(enumm.identifier)>)))\n    }\n\n    enumm.toTokens()\n}\n",
            "children": [
                {
                    "type": "module",
                    "start_token": 28,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "PUBLIC",
                            "start_token": 28,
                            "end_token": 28,
                            "label": "public",
                            "children": []
                        },
                        {
                            "type": "macroDefinition",
                            "start_token": 29,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "MACRO",
                                    "start_token": 29,
                                    "end_token": 29,
                                    "label": "macro",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 30,
                                    "end_token": 30,
                                    "label": "EquatableEnum",
                                    "children": []
                                },
                                {
                                    "type": "functionParameters",
                                    "start_token": 31,
                                    "end_token": 35,
                                    "label": "(input: Tokens)",
                                    "children": [
                                        {
                                            "type": "parameter",
                                            "start_token": 32,
                                            "end_token": 34,
                                            "label": "input: Tokens",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 32,
                                                    "end_token": 32,
                                                    "label": "input",
                                                    "children": []
                                                },
                                                {
                                                    "type": "typeExpression",
                                                    "start_token": 33,
                                                    "end_token": 34,
                                                    "label": ": Tokens",
                                                    "children": [
                                                        {
                                                            "type": "userType",
                                                            "start_token": 34,
                                                            "end_token": 34,
                                                            "label": "Tokens",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "typeExpression",
                                    "start_token": 36,
                                    "end_token": 37,
                                    "label": ": Tokens",
                                    "children": [
                                        {
                                            "type": "userType",
                                            "start_token": 37,
                                            "end_token": 37,
                                            "label": "Tokens",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 38,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "LET",
                                            "start_token": 40,
                                            "end_token": 40,
                                            "label": "let",
                                            "children": []
                                        },
                                        {
                                            "type": "variableDeclaration",
                                            "start_token": 41,
                                            "end_token": 46,
                                            "label": "enumm = EnumDecl(input)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 41,
                                                    "end_token": 41,
                                                    "label": "enumm",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignmentExpression",
                                                    "start_token": 42,
                                                    "end_token": 46,
                                                    "label": "= EnumDecl(input)",
                                                    "children": [
                                                        {
                                                            "type": "callExpression",
                                                            "start_token": 43,
                                                            "end_token": 46,
                                                            "label": "EnumDecl(input)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 43,
                                                                    "end_token": 43,
                                                                    "label": "EnumDecl",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argumentList",
                                                                    "start_token": 44,
                                                                    "end_token": 45,
                                                                    "label": "(input",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 45,
                                                                            "end_token": 45,
                                                                            "label": "input",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 48,
                                            "end_token": 48,
                                            "label": "// match表达式\n    let hashMatchExpr = MatchExpr()\n    hashMatchExpr.selector = RefExpr(quote(this))\n    hashMatchExpr.lParen = Token(TokenKind.LPAREN)\n    hashMatchExpr.rParen = Token(TokenKind.RPAREN)\n    // 基础类型无嵌套参数构造器\n    let noNestedPrimConstr = enumm.constructors |>\n        filter {\n        i: Constructor => i.typeArguments |>\n            all {\n            i: TypeNode => match (i) {\n                case a: PrimitiveType => true\n                case _ => throw ASTException(\"All args of Constructor shall be primitive type\")\n            }\n        }\n    }\n    // 构造case\n    let noNestedPrimCases = ArrayList<MatchCase>()\n    var hashIndex = 0i64\n    for (constr in noNestedPrimConstr) {\n        let matchCase = MatchCase()\n        let blockNodes = matchCase.block.nodes\n        let enumPatt = EnumPattern()\n\n        blockNodes.append(VarDecl(quote(var hasher = DefaultHasher(res: $(hashIndex)))))\n        enumPatt.constructor = parseExpr(constr.identifier.toTokens())\n\n        for (item in constr.typeArguments |> enumerate) {\n            let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())\n            enumPatt.patterns.append(TypePattern(quote($(id): $(item[1]))))\n            blockNodes.append(CallExpr(quote(hasher.write($(id)))))\n        }\n        blockNodes.append(CallExpr(quote(hasher.finish())))\n\n        matchCase.patterns.append(enumPatt)\n        noNestedPrimCases.append(matchCase)\n        hashIndex++\n    }\n    noNestedPrimCases.iterator().forEach {i => hashMatchExpr.matchCases.append(i)}\n    // hashCode函数\n    let block = Block()\n    block.nodes.append(hashMatchExpr)\n    let hashCode = FuncDecl(\n        quote(\n            \n        public func hashCode(): Int64 {\n            $block\n        }))\n    // == 函数\n    let equal = FuncDecl(\n        quote(\n        public operator func ==(that: $(enumm.identifier)): Bool {\n            this.hashCode() == that.hashCode()\n        })\n    )\n    // != 函数\n    let notEqual = FuncDecl(\n        quote(\n        public operator func !=(that: $(enumm.identifier)): Bool {\n            this.hashCode() != that.hashCode()\n        })\n    )\n    // 将函数加入枚举\n    let funcs = ArrayList<String>()\n    for (decl in enumm.decls) {\n        match (decl) {\n            // case d: FuncDecl => funcSet.put(d.identifier.toTokens().toString())\n            case d: FuncDecl => funcs.append(d.identifier.value)\n            case _ => ()\n        }\n    }\n    if (!funcs.contains(\"hashCode\")) {\n        enumm.decls.append(hashCode)\n    }\n    if (!funcs.contains(\"==\")) {\n        enumm.decls.append(equal)\n    }\n    if (!funcs.contains(\"!=\")) {\n        enumm.decls.append(notEqual)\n    }\n    // 继承接口\n    let intfs = ArrayList<String>()\n    for (i in enumm.superTypes) {\n        match (i) {\n            case r: RefType => intfs.append(r.toTokens().toString())\n            case r: TypeNode => ()\n        }\n    }\n    if (!intfs.contains(\"Hashable\")) {\n        enumm.superTypes.append(RefType(quote(Hashable)))\n    }\n    if (!intfs.contains(\"Equatable\")) {\n        enumm.superTypes.append(RefType(quote(Equatable<$(enumm.identifier)>)))\n    }\n\n    enumm.toTokens()\n}\n",
                                            "children": []
                                        },
                                        {
                                            "type": "LET",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "variableDeclaration",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignmentExpression",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "callExpression",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "body",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "LET",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "variableDeclaration",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "assignmentExpression",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "callExpression",
                                                                                                    "start_token": -1,
                                                                                                    "end_token": -1,
                                                                                                    "label": "",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argumentList",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "FOR",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "argumentList",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "variableDeclaration",
                                                                                                    "start_token": -1,
                                                                                                    "end_token": -1,
                                                                                                    "label": "",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "assignmentExpression",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "callExpression",
                                                                                                                    "start_token": -1,
                                                                                                                    "end_token": -1,
                                                                                                                    "label": "",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "start_token": -1,
                                                                                                                            "end_token": -1,
                                                                                                                            "label": "",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argumentList",
                                                                                                                            "start_token": -1,
                                                                                                                            "end_token": -1,
                                                                                                                            "label": "",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "body",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "IF",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "callExpression",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "body",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "IF",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "callExpression",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "body",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "RETURN",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}