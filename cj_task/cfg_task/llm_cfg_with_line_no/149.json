{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [],
  "classes": [
    {
      "name": "SymbolShapeHint",
      "type": "class",
      "start_line": 2,
      "end_line": 34,
      "functions": [
        {
          "name": "GetSymbolShapeHintNum",
          "type": "function",
          "start_line": 6,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 6,
              "line": "    public func GetSymbolShapeHintNum(result: SymbolShapeHint): Int64 {"
            },
            {
              "lineno": 7,
              "line": "        match (result) {"
            },
            {
              "lineno": 8,
              "line": "            case FORCE_NONE => return 0;"
            },
            {
              "lineno": 9,
              "line": "            case FORCE_SQUARE => return 1;"
            },
            {
              "lineno": 10,
              "line": "            case FORCE_RECTANGLE => return 2;"
            },
            {
              "lineno": 11,
              "line": "        }"
            },
            {
              "lineno": 12,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 6,
              "end_line": 6,
              "label": "    public func GetSymbolShapeHintNum(result: SymbolShapeHint): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "        match (result) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "            case FORCE_NONE => return 0;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "            case FORCE_SQUARE => return 1;",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "            case FORCE_RECTANGLE => return 2;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 13,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    public operator func ==(right: SymbolShapeHint): Bool {"
            },
            {
              "lineno": 14,
              "line": "        if (GetSymbolShapeHintNum(right) == GetSymbolShapeHintNum(this)) {"
            },
            {
              "lineno": 15,
              "line": "            true;"
            },
            {
              "lineno": 16,
              "line": "        } else {"
            },
            {
              "lineno": 17,
              "line": "            false;"
            },
            {
              "lineno": 18,
              "line": "        }"
            },
            {
              "lineno": 19,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 13,
              "label": "    public operator func ==(right: SymbolShapeHint): Bool {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 14,
                  "end_line": 14,
                  "label": "        if (GetSymbolShapeHintNum(right) == GetSymbolShapeHintNum(this)) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "            true;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 16,
                      "end_line": 17,
                      "label": "        } else {\n            false;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 20,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    public operator func !=(right: SymbolShapeHint): Bool {"
            },
            {
              "lineno": 21,
              "line": "        if (GetSymbolShapeHintNum(right) != GetSymbolShapeHintNum(this)) {"
            },
            {
              "lineno": 22,
              "line": "            true;"
            },
            {
              "lineno": 23,
              "line": "        } else {"
            },
            {
              "lineno": 24,
              "line": "            false;"
            },
            {
              "lineno": 25,
              "line": "        }"
            },
            {
              "lineno": 26,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 20,
              "end_line": 20,
              "label": "    public operator func !=(right: SymbolShapeHint): Bool {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "        if (GetSymbolShapeHintNum(right) != GetSymbolShapeHintNum(this)) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "            true;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 24,
                      "end_line": 24,
                      "label": "            false;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 27,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    public func toString() {"
            },
            {
              "lineno": 28,
              "line": "        match (this) {"
            },
            {
              "lineno": 29,
              "line": "            case FORCE_NONE => \"FORCE_NONE\""
            },
            {
              "lineno": 30,
              "line": "            case FORCE_SQUARE => \"FORCE_SQUARE\""
            },
            {
              "lineno": 31,
              "line": "            case FORCE_RECTANGLE => \"FORCE_RECTANGLE\""
            },
            {
              "lineno": 32,
              "line": "        }"
            },
            {
              "lineno": 33,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 27,
              "end_line": 28,
              "label": "    public func toString() {\n        match (this) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 29,
                  "end_line": 29,
                  "label": "            case FORCE_NONE => \"FORCE_NONE\"",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 30,
                  "end_line": 30,
                  "label": "            case FORCE_SQUARE => \"FORCE_SQUARE\"",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 31,
                  "end_line": 31,
                  "label": "            case FORCE_RECTANGLE => \"FORCE_RECTANGLE\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 32,
              "end_line": 33,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public enum SymbolShapeHint <: Equatable<SymbolShapeHint> & ToString {"
        },
        {
          "lineno": 3,
          "line": "    | FORCE_NONE"
        },
        {
          "lineno": 4,
          "line": "    | FORCE_SQUARE"
        },
        {
          "lineno": 5,
          "line": "    | FORCE_RECTANGLE"
        },
        {
          "lineno": 34,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 34,
          "label": "public enum SymbolShapeHint <: Equatable<SymbolShapeHint> & ToString {\n    | FORCE_NONE\n    | FORCE_SQUARE\n    | FORCE_RECTANGLE\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package datamatrix.encoder"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package datamatrix.encoder",
      "successors": []
    }
  ]
}