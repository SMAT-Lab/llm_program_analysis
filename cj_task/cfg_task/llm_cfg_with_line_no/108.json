{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 31,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "main() {"
        },
        {
          "lineno": 32,
          "line": "    let expr = Num(1.2) + Num(3.4) * Num(2.0) - Num(1.0) / Num(2.0)"
        },
        {
          "lineno": 33,
          "line": "    println(expr.calc())"
        },
        {
          "lineno": 34,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 31,
          "end_line": 34,
          "label": "main() {\n    let expr = Num(1.2) + Num(3.4) * Num(2.0) - Num(1.0) / Num(2.0)\n    println(expr.calc())\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Expr",
      "type": "class",
      "start_line": 3,
      "end_line": 29,
      "functions": [
        {
          "name": "calc",
          "type": "function",
          "start_line": 7,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 7,
              "line": "    public func calc(): Float64 {"
            },
            {
              "lineno": 8,
              "line": "        match(this) {"
            },
            {
              "lineno": 9,
              "line": "            case Num(number) => number"
            },
            {
              "lineno": 10,
              "line": "            case Add(a, b) => a.calc() + b.calc()"
            },
            {
              "lineno": 11,
              "line": "            case Sub(a, b) => a.calc() - b.calc()"
            },
            {
              "lineno": 12,
              "line": "            case Mul(a, b) => a.calc() * b.calc()"
            },
            {
              "lineno": 13,
              "line": "            case Div(a, b) => a.calc() / b.calc()"
            },
            {
              "lineno": 14,
              "line": "        }"
            },
            {
              "lineno": 15,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 7,
              "end_line": 8,
              "label": "    public func calc(): Float64 {\n        match(this) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "            case Num(number) => number",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "            case Add(a, b) => a.calc() + b.calc()",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "            case Sub(a, b) => a.calc() - b.calc()",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "            case Mul(a, b) => a.calc() * b.calc()",
                  "successors": []
                },
                {
                  "id": 6,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "            case Div(a, b) => a.calc() / b.calc()",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "start_line": 14,
              "end_line": 15,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "+",
          "type": "function",
          "start_line": 17,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    public operator func +(that: Expr): Expr {"
            },
            {
              "lineno": 18,
              "line": "        return Add(this, that)"
            },
            {
              "lineno": 19,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 17,
              "end_line": 18,
              "label": "public operator func +(that: Expr): Expr {\n    return Add(this, that)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "-",
          "type": "function",
          "start_line": 20,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    public operator func -(that: Expr): Expr {"
            },
            {
              "lineno": 21,
              "line": "        return Sub(this, that)"
            },
            {
              "lineno": 22,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 20,
              "end_line": 21,
              "label": "    public operator func -(that: Expr): Expr {\n        return Sub(this, that)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "*",
          "type": "function",
          "start_line": 23,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    public operator func *(that: Expr): Expr {"
            },
            {
              "lineno": 24,
              "line": "        return Mul(this, that)"
            },
            {
              "lineno": 25,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 23,
              "end_line": 24,
              "label": "    public operator func *(that: Expr): Expr {\n        return Mul(this, that)",
              "successors": []
            }
          ]
        },
        {
          "name": "/",
          "type": "function",
          "start_line": 26,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    public operator func /(that: Expr): Expr {"
            },
            {
              "lineno": 27,
              "line": "        return Div(this, that)"
            },
            {
              "lineno": 28,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 26,
              "end_line": 27,
              "label": "    public operator func /(that: Expr): Expr {\n        return Div(this, that)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "enum Expr {"
        },
        {
          "lineno": 4,
          "line": "    Num(Float64) |"
        },
        {
          "lineno": 5,
          "line": "    Add(Expr, Expr) | Sub(Expr, Expr) | Mul(Expr, Expr) | Div(Expr, Expr)"
        },
        {
          "lineno": 6,
          "line": ""
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 29,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 3,
          "end_line": 5,
          "label": "enum Expr {\n    Num(Float64) |\n    Add(Expr, Expr) | Sub(Expr, Expr) | Mul(Expr, Expr) | Div(Expr, Expr)",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "",
              "successors": [
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 29,
                      "end_line": 29,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 基于 enum 和模式匹配实现算术表达式表示和计算"
    },
    {
      "lineno": 2,
      "line": "// cjc version: 0.53.13"
    },
    {
      "lineno": 30,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "// 基于 enum 和模式匹配实现算术表达式表示和计算\n// cjc version: 0.53.13\n",
      "successors": []
    }
  ]
}