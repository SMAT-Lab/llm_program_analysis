{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [],
  "classes": [
    {
      "name": "Context",
      "type": "class",
      "start_line": 6,
      "end_line": 30,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 13,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    init(attrs: Tokens, input: Tokens) {"
            },
            {
              "lineno": 14,
              "line": "        this.attrs = attrs"
            },
            {
              "lineno": 15,
              "line": "        this.input = input"
            },
            {
              "lineno": 16,
              "line": "        this.structDecl = match (parseDecl(input)) {"
            },
            {
              "lineno": 17,
              "line": "            case d: StructDecl => d"
            },
            {
              "lineno": 18,
              "line": "            case _ =>"
            },
            {
              "lineno": 19,
              "line": "                diagReport(DiagReportLevel.ERROR, input, \"宏仅适用于结构体\", \"请检查宏是否作用在结构体上\")"
            },
            {
              "lineno": 20,
              "line": "                throw Exception(\"不支持的类型\")"
            },
            {
              "lineno": 21,
              "line": "        }"
            },
            {
              "lineno": 22,
              "line": "        if (!findInterface(\"Serializable\", this.structDecl)) {"
            },
            {
              "lineno": 23,
              "line": "            diagReport(DiagReportLevel.ERROR, input, \"结构体需要声明 Serializable 接口\", \"请检查结构体是否声明要实现 Serializable 接口\")"
            },
            {
              "lineno": 24,
              "line": "            throw Exception(\"未声明 Serializable 接口\")"
            },
            {
              "lineno": 25,
              "line": "        }"
            },
            {
              "lineno": 26,
              "line": "        let visitor = StructDeclVisitor()"
            },
            {
              "lineno": 27,
              "line": "        this.structDecl.traverse(visitor)"
            },
            {
              "lineno": 28,
              "line": "        this.valDecls = visitor.varDecls.toArray()"
            },
            {
              "lineno": 29,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 15,
              "label": "    init(attrs: Tokens, input: Tokens) {\n        this.attrs = attrs\n        this.input = input",
              "successors": [
                {
                  "id": 2,
                  "start_line": 16,
                  "end_line": 21,
                  "label": "        this.structDecl = match (parseDecl(input)) {\n            case d: StructDecl => d\n            case _ =>\n                diagReport(DiagReportLevel.ERROR, input, \"\n洪仅适用于结构体\", \"\n请检查洪是否作用在结构体上\")\n                throw Exception(\"\n不支持的类型\")\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 22,
                      "end_line": 25,
                      "label": "        if (!findInterface(\"Serializable\", this.structDecl)) {\n            diagReport(DiagReportLevel.ERROR, input, \"\n结构体需要声明 Serializable 接口\", \"\n请检查结构体是否声明要实现 Serializable 接口\")\n            throw Exception(\"\n未声明 Serializable 接口\")\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 26,
                          "end_line": 29,
                          "label": "        let visitor = StructDeclVisitor()\n        this.structDecl.traverse(visitor)\n        this.valDecls = visitor.varDecls.toArray()\n    }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class Context {"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 8,
          "line": "    let attrs: Tokens"
        },
        {
          "lineno": 9,
          "line": "    let input: Tokens"
        },
        {
          "lineno": 10,
          "line": "    let structDecl: StructDecl"
        },
        {
          "lineno": 11,
          "line": "    let valDecls: Array<VarDecl>"
        },
        {
          "lineno": 12,
          "line": "    "
        },
        {
          "lineno": 30,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 11,
          "label": "class Context {\n\n    let attrs: Tokens\n    let input: Tokens\n    let structDecl: StructDecl\n    let valDecls: Array<VarDecl>\n    ",
          "successors": [
            {
              "id": 2,
              "start_line": 30,
              "end_line": 30,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package Macro_JsonSerializable.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "// 生成上下文"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "macro package Macro_JsonSerializable.macros",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\nimport std.ast.*",
          "successors": [
            {
              "id": 3,
              "start_line": 4,
              "end_line": 5,
              "label": "\n// 生成上下文",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}