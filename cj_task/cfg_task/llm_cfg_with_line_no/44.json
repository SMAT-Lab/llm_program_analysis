{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 92,
  "functions": [
    {
      "name": "controller",
      "type": "function",
      "start_line": 15,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "func controller() {"
        },
        {
          "lineno": 16,
          "line": "    spawn {"
        },
        {
          "lineno": 17,
          "line": "        while (!g_quit) {"
        },
        {
          "lineno": 18,
          "line": "            let key = Console.stdIn.read().getOrDefault {r' '}"
        },
        {
          "lineno": 19,
          "line": "            if (key == r'q' || key == r'Q') {"
        },
        {
          "lineno": 20,
          "line": "                g_quit = true"
        },
        {
          "lineno": 21,
          "line": "            }"
        },
        {
          "lineno": 22,
          "line": "        }"
        },
        {
          "lineno": 23,
          "line": "    }"
        },
        {
          "lineno": 24,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 15,
          "end_line": 15,
          "label": "func controller() {",
          "successors": [
            {
              "id": 2,
              "start_line": 16,
              "end_line": 16,
              "label": "    spawn {",
              "successors": [
                {
                  "id": 3,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "        while (!g_quit) {",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 18,
                      "end_line": 20,
                      "label": "            let key = Console.stdIn.read().getOrDefault {r' '}\n            if (key == r'q' || key == r'Q') {\n                g_quit = true",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 21,
                          "end_line": 21,
                          "label": "            }",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 22,
                              "end_line": 22,
                              "label": "        }",
                              "successors": [
                                {
                                  "id": 3,
                                  "start_line": 17,
                                  "end_line": 17,
                                  "label": "        while (!g_quit) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "    }",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "start_line": 24,
              "end_line": 24,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 36,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "main() {"
        },
        {
          "lineno": 37,
          "line": "    let messageQueue = NonBlockingQueue<(TcpSocket, Array<Byte>)>()"
        },
        {
          "lineno": 38,
          "line": "    let members = LinkedList<TcpSocket>() // 群聊成员/客户端"
        },
        {
          "lineno": 39,
          "line": "    let server = TcpServerSocket(bindAt: PORT) // 服务端"
        },
        {
          "lineno": 40,
          "line": "    server.bind()"
        },
        {
          "lineno": 41,
          "line": "    controller()"
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "    // 和新的客户端建立连接"
        },
        {
          "lineno": 44,
          "line": "    let mutex = ReentrantMutex()"
        },
        {
          "lineno": 45,
          "line": "    let monitor = Monitor()"
        },
        {
          "lineno": 46,
          "line": "    spawn {"
        },
        {
          "lineno": 47,
          "line": "        while (!g_quit) {"
        },
        {
          "lineno": 48,
          "line": "            let client = server.accept()"
        },
        {
          "lineno": 49,
          "line": "            synchronized (mutex) {"
        },
        {
          "lineno": 50,
          "line": "                members.append(client)"
        },
        {
          "lineno": 51,
          "line": "            }"
        },
        {
          "lineno": 52,
          "line": "            // 每个连接要处理的任务"
        },
        {
          "lineno": 53,
          "line": "            spawn {"
        },
        {
          "lineno": 54,
          "line": "                while (!g_quit) {"
        },
        {
          "lineno": 55,
          "line": "                    let data = Array<Byte>(BUFFER_SIZE, repeat: 0)"
        },
        {
          "lineno": 56,
          "line": "                    try { client.read(data) } catch (e: SocketException) {"
        },
        {
          "lineno": 57,
          "line": "                        return // 遇到异常终止此线程，由转发线程清理资源"
        },
        {
          "lineno": 58,
          "line": "                    }"
        },
        {
          "lineno": 59,
          "line": "                    println(String.fromUtf8(data))"
        },
        {
          "lineno": 60,
          "line": "                    messageQueue.enqueue((client, data))"
        },
        {
          "lineno": 61,
          "line": "                    synchronized (monitor) { monitor.notify() }"
        },
        {
          "lineno": 62,
          "line": "                }"
        },
        {
          "lineno": 63,
          "line": "            }"
        },
        {
          "lineno": 64,
          "line": "        }"
        },
        {
          "lineno": 65,
          "line": "    }"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    // 转发消息到所有客户端，实现群聊"
        },
        {
          "lineno": 68,
          "line": "    while (!g_quit) {"
        },
        {
          "lineno": 69,
          "line": "        // 我们使用了并发数据结构，这里 Monitor 不必保护数据，仅用于避免当前 while 空转"
        },
        {
          "lineno": 70,
          "line": "        synchronized (monitor) {"
        },
        {
          "lineno": 71,
          "line": "            monitor.wait(timeout: 100 * Duration.millisecond)            "
        },
        {
          "lineno": 72,
          "line": "        }"
        },
        {
          "lineno": 73,
          "line": "        while (let Some((client, data)) <- messageQueue.dequeue()) {"
        },
        {
          "lineno": 74,
          "line": "            mutex.lock()"
        },
        {
          "lineno": 75,
          "line": "            // 遍历群聊成员，转发消息并清理无效客户端"
        },
        {
          "lineno": 76,
          "line": "            members.removeIf { socket =>"
        },
        {
          "lineno": 77,
          "line": "                if (refEq(client, socket)) { // 不必转发给消息源"
        },
        {
          "lineno": 78,
          "line": "                    return false"
        },
        {
          "lineno": 79,
          "line": "                }"
        },
        {
          "lineno": 80,
          "line": "                !socket.tryWrite(data)"
        },
        {
          "lineno": 81,
          "line": "            }"
        },
        {
          "lineno": 82,
          "line": "            mutex.unlock()"
        },
        {
          "lineno": 83,
          "line": "        }"
        },
        {
          "lineno": 84,
          "line": "    }"
        },
        {
          "lineno": 85,
          "line": "    // 退出时通知所有客户端"
        },
        {
          "lineno": 86,
          "line": "    for (client in members) {"
        },
        {
          "lineno": 87,
          "line": "        if (client.tryWrite(\"Server Exit\".toArray())) {"
        },
        {
          "lineno": 88,
          "line": "            client.close()"
        },
        {
          "lineno": 89,
          "line": "        }"
        },
        {
          "lineno": 90,
          "line": "    }"
        },
        {
          "lineno": 91,
          "line": "    server.close()"
        },
        {
          "lineno": 92,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 36,
          "end_line": 41,
          "label": "main() {\n    let messageQueue = NonBlockingQueue<(TcpSocket, Array<Byte>)>()\n    let members = LinkedList<TcpSocket>() // \n    let server = TcpServerSocket(bindAt: PORT) // \n    server.bind()\n    controller()",
          "successors": [
            {
              "id": 2,
              "start_line": 44,
              "end_line": 45,
              "label": "let mutex = ReentrantMutex()\nlet monitor = Monitor()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 46,
                  "end_line": 65,
                  "label": "spawn {\n    while (!g_quit) {\n        let client = server.accept()\n        synchronized (mutex) {\n            members.append(client)\n        }\n        // 每个连接要处理的任务\n        spawn {\n            while (!g_quit) {\n                let data = Array<Byte>(BUFFER_SIZE, repeat: 0)\n                try { client.read(data) } catch (e: SocketException) {\n                    return // 遇到异常终止此线程，由转发线程清理资源\n                }\n                println(String.fromUtf8(data))\n                messageQueue.enqueue((client, data))\n                synchronized (monitor) { monitor.notify() }\n            }\n        }\n    }\n}",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 68,
                      "end_line": 84,
                      "label": "while (!g_quit) {\n    synchronized (monitor) {\n        monitor.wait(timeout: 100 * Duration.millisecond)            \n    }\n    while (let Some((client, data)) <- messageQueue.dequeue()) {\n        mutex.lock()\n        // 遍历群聊成员，转发消息并清理无效客户端\n        members.removeIf { socket =>\n            if (refEq(client, socket)) { // 不必转发给消息源\n                return false\n            }\n            !socket.tryWrite(data)\n        }\n        mutex.unlock()\n    }\n}",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 86,
                          "end_line": 90,
                          "label": "for (client in members) {\n    if (client.tryWrite(\"Server Exit\".toArray())) {\n        client.close()\n    }\n}",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 91,
                              "end_line": 92,
                              "label": "server.close()\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "TcpSocket",
      "type": "class",
      "start_line": 26,
      "end_line": 34,
      "functions": [
        {
          "name": "tryWrite",
          "type": "function",
          "start_line": 27,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    public func tryWrite(data: Array<Byte>) {"
            },
            {
              "lineno": 28,
              "line": "        try { this.write(data) } catch (e: SocketException) {"
            },
            {
              "lineno": 29,
              "line": "            if (!this.isClosed()) { this.close() }"
            },
            {
              "lineno": 30,
              "line": "            return false"
            },
            {
              "lineno": 31,
              "line": "        }"
            },
            {
              "lineno": 32,
              "line": "        return true"
            },
            {
              "lineno": 33,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 27,
              "end_line": 27,
              "label": "public func tryWrite(data: Array<Byte>) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "try { this.write(data) } catch (e: SocketException) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 29,
                      "end_line": 30,
                      "label": "if (!this.isClosed()) { this.close() }\nreturn false",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 32,
                  "end_line": 32,
                  "label": "return true",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 26,
          "line": "extend TcpSocket {"
        },
        {
          "lineno": 34,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 26,
          "end_line": 34,
          "label": "extend TcpSocket {\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 群聊程序-服务器"
    },
    {
      "lineno": 2,
      "line": "// 仓颉语言团队 刘俊杰 2024/10/21"
    },
    {
      "lineno": 3,
      "line": "import std.net.*"
    },
    {
      "lineno": 4,
      "line": "import std.time.*"
    },
    {
      "lineno": 5,
      "line": "import std.sync.*"
    },
    {
      "lineno": 6,
      "line": "import std.collection.*"
    },
    {
      "lineno": 7,
      "line": "import std.collection.concurrent.*"
    },
    {
      "lineno": 8,
      "line": "import std.console.*"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "const PORT: UInt16 = 24621"
    },
    {
      "lineno": 11,
      "line": "const BUFFER_SIZE = 1024"
    },
    {
      "lineno": 12,
      "line": "var g_quit = false"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "// 从控制台读取退出命令"
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "// 群聊程序-服务器",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 2,
          "label": "// 仓颉语言团队 刘俊杰 2024/10/21",
          "successors": [
            {
              "id": 3,
              "start_line": 3,
              "end_line": 8,
              "label": "import std.net.*\nimport std.time.*\nimport std.sync.*\nimport std.collection.*\nimport std.collection.concurrent.*\nimport std.console.*",
              "successors": [
                {
                  "id": 4,
                  "start_line": 10,
                  "end_line": 12,
                  "label": "const PORT: UInt16 = 24621\nconst BUFFER_SIZE = 1024\nvar g_quit = false",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "// 从控制台读取退出命令",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}