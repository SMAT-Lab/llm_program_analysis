{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 84,
  "functions": [],
  "classes": [
    {
      "name": "Manifest",
      "type": "class",
      "start_line": 6,
      "end_line": 49,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    public init(id: String,host: String){"
            },
            {
              "lineno": 12,
              "line": "        let book = Books.formID(id)"
            },
            {
              "lineno": 13,
              "line": "        this.metadata = Metadata(book.name,"
            },
            {
              "lineno": 14,
              "line": "                                conformsTo: \"https://readium.org/webpub-manifest/schema/webpub-manifest.jsonld\","
            },
            {
              "lineno": 15,
              "line": "                                modified: book.lastModifiedDate,"
            },
            {
              "lineno": 16,
              "line": "                                numberOfPages: book.getPageCount())"
            },
            {
              "lineno": 17,
              "line": "        this.metadata.addSeriesBelongTo(book)"
            },
            {
              "lineno": 18,
              "line": "        this.links.append(Link(rel: \"self\", "
            },
            {
              "lineno": 19,
              "line": "                               href: \"http://${host}/api/v1/books/${id}/manifest\", "
            },
            {
              "lineno": 20,
              "line": "                               type_u: \"application/divina+json\"))"
            },
            {
              "lineno": 21,
              "line": "        this.links.append(Link(rel: \"http://opds-spec.org/acquisition\", "
            },
            {
              "lineno": 22,
              "line": "                               href: \"http://${host}/api/v1/books/${id}/file\", "
            },
            {
              "lineno": 23,
              "line": "                               type_u: \"application/vnd.comicbook+zip\"))"
            },
            {
              "lineno": 24,
              "line": "        this.readingOrder = ReadingOrder(id,host,book.getPageCount())"
            },
            {
              "lineno": 25,
              "line": "        this.resources.append(Link(href: \"http://${host}/api/v1/books/${id}/thumbnail\", "
            },
            {
              "lineno": 26,
              "line": "                                   type_u: \"image/jpeg\"))"
            },
            {
              "lineno": 27,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 11,
              "end_line": 27,
              "label": "    public init(id: String,host: String){\n        let book = Books.formID(id)\n        this.metadata = Metadata(book.name,\n                                conformsTo: \"https://readium.org/webpub-manifest/schema/webpub-manifest.jsonld\",\n                                modified: book.lastModifiedDate,\n                                numberOfPages: book.getPageCount())\n        this.metadata.addSeriesBelongTo(book)\n        this.links.append(Link(rel: \"self\", \n                               href: \"http://${host}/api/v1/books/${id}/manifest\", \n                               type_u: \"application/divina+json\"))\n        this.links.append(Link(rel: \"http://opds-spec.org/acquisition\", \n                               href: \"http://${host}/api/v1/books/${id}/file\", \n                               type_u: \"application/vnd.comicbook+zip\"))\n        this.readingOrder = ReadingOrder(id,host,book.getPageCount())\n        this.resources.append(Link(href: \"http://${host}/api/v1/books/${id}/thumbnail\", \n                                   type_u: \"image/jpeg\"))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 28,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public func toJson(): String {"
            },
            {
              "lineno": 29,
              "line": "        let stream = ByteBuffer()"
            },
            {
              "lineno": 30,
              "line": "        let w = JsonWriter(stream)"
            },
            {
              "lineno": 31,
              "line": "        w.startObject()"
            },
            {
              "lineno": 32,
              "line": "        w.writeName(\"context\").writeValue(\"https://readium.org/webpub-manifest/context.jsonld\")"
            },
            {
              "lineno": 33,
              "line": "        w.writeName(\"metadata\").writeValue(metadata)"
            },
            {
              "lineno": 34,
              "line": "        w.writeName(\"links\").writeValue<ArrayList<Link>>(links)"
            },
            {
              "lineno": 35,
              "line": "        w.writeName(\"images\").startArray()"
            },
            {
              "lineno": 36,
              "line": "        w.endArray()"
            },
            {
              "lineno": 37,
              "line": "        w.writeName(\"readingOrder\").writeValue(readingOrder)"
            },
            {
              "lineno": 38,
              "line": "        w.writeName(\"resources\").writeValue<ArrayList<Link>>(resources)"
            },
            {
              "lineno": 39,
              "line": "        w.writeName(\"toc\").startArray()"
            },
            {
              "lineno": 40,
              "line": "        w.endArray()"
            },
            {
              "lineno": 41,
              "line": "        w.writeName(\"landmarks\").startArray()"
            },
            {
              "lineno": 42,
              "line": "        w.endArray()"
            },
            {
              "lineno": 43,
              "line": "        w.writeName(\"pageList\").startArray()"
            },
            {
              "lineno": 44,
              "line": "        w.endArray()"
            },
            {
              "lineno": 45,
              "line": "        w.endObject()"
            },
            {
              "lineno": 46,
              "line": "        w.flush()"
            },
            {
              "lineno": 47,
              "line": "        return String.fromUtf8(readToEnd(stream))"
            },
            {
              "lineno": 48,
              "line": "    }        "
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 28,
              "end_line": 46,
              "label": "    public func toJson(): String {\n        let stream = ByteBuffer()\n        let w = JsonWriter(stream)\n        w.startObject()\n        w.writeName(\"context\").writeValue(\"https://readium.org/webpub-manifest/context.jsonld\")\n        w.writeName(\"metadata\").writeValue(metadata)\n        w.writeName(\"links\").writeValue<ArrayList<Link>>(links)\n        w.writeName(\"images\").startArray()\n        w.endArray()\n        w.writeName(\"readingOrder\").writeValue(readingOrder)\n        w.writeName(\"resources\").writeValue<ArrayList<Link>>(resources)\n        w.writeName(\"toc\").startArray()\n        w.endArray()\n        w.writeName(\"landmarks\").startArray()\n        w.endArray()\n        w.writeName(\"pageList\").startArray()\n        w.endArray()\n        w.endObject()\n        w.flush()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 47,
                  "end_line": 47,
                  "label": "        return String.fromUtf8(readToEnd(stream))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class Manifest{"
        },
        {
          "lineno": 7,
          "line": "    var metadata: Metadata"
        },
        {
          "lineno": 8,
          "line": "    var links: ArrayList<Link> = ArrayList<Link>()"
        },
        {
          "lineno": 9,
          "line": "    var readingOrder: ReadingOrder"
        },
        {
          "lineno": 10,
          "line": "    var resources: ArrayList<Link> = ArrayList<Link>()"
        },
        {
          "lineno": 49,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 49,
          "label": "class Manifest{\n    var metadata: Metadata\n    var links: ArrayList<Link> = ArrayList<Link>()\n    var readingOrder: ReadingOrder\n    var resources: ArrayList<Link> = ArrayList<Link>()\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ReadingOrder",
      "type": "class",
      "start_line": 51,
      "end_line": 84,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 55,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    init(id: String,host: String,count: Int64) {"
            },
            {
              "lineno": 56,
              "line": "        this.host = host"
            },
            {
              "lineno": 57,
              "line": "        this.id = id"
            },
            {
              "lineno": 58,
              "line": "        for (i in 1..=count) {"
            },
            {
              "lineno": 59,
              "line": "            this.pages.append(Page.getPage(id, i, \"\"))"
            },
            {
              "lineno": 60,
              "line": "        }"
            },
            {
              "lineno": 61,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 55,
              "end_line": 57,
              "label": "    init(id: String,host: String,count: Int64) {\n        this.host = host\n        this.id = id",
              "successors": [
                {
                  "id": 2,
                  "start_line": 58,
                  "end_line": 60,
                  "label": "        for (i in 1..=count) {\n            this.pages.append(Page.getPage(id, i, \"\"))\n        }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 62,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    public func toJson(w: JsonWriter): Unit {"
            },
            {
              "lineno": 63,
              "line": "        w.startArray()"
            },
            {
              "lineno": 64,
              "line": "        for (i in 0..pages.size) {"
            },
            {
              "lineno": 65,
              "line": "            w.startObject()"
            },
            {
              "lineno": 66,
              "line": "            w.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}\")"
            },
            {
              "lineno": 67,
              "line": "            w.writeName(\"type\").writeValue(\"image/${pages[i].format}\")"
            },
            {
              "lineno": 68,
              "line": "            w.writeName(\"width\").writeValue(pages[i].width)"
            },
            {
              "lineno": 69,
              "line": "            w.writeName(\"height\").writeValue(pages[i].height)"
            },
            {
              "lineno": 70,
              "line": "            if (pages[i].format != \"jpeg\"){"
            },
            {
              "lineno": 71,
              "line": "                w.writeName(\"alternate\").startArray()"
            },
            {
              "lineno": 72,
              "line": "                w.startObject()"
            },
            {
              "lineno": 73,
              "line": "                w.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}?convert=jpeg\")"
            },
            {
              "lineno": 74,
              "line": "                w.writeName(\"type\").writeValue(\"image/jpeg\")"
            },
            {
              "lineno": 75,
              "line": "                w.writeName(\"width\").writeValue(pages[i].width)"
            },
            {
              "lineno": 76,
              "line": "                w.writeName(\"height\").writeValue(pages[i].height)"
            },
            {
              "lineno": 77,
              "line": "                w.endObject()"
            },
            {
              "lineno": 78,
              "line": "                w.endArray()"
            },
            {
              "lineno": 79,
              "line": "            }"
            },
            {
              "lineno": 80,
              "line": "            w.endObject()   "
            },
            {
              "lineno": 81,
              "line": "        }"
            },
            {
              "lineno": 82,
              "line": "        w.endArray()"
            },
            {
              "lineno": 83,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 62,
              "end_line": 62,
              "label": "    public func toJson(w: JsonWriter): Unit {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 63,
                  "end_line": 64,
                  "label": "        w.startArray()\n        for (i in 0..pages.size) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 65,
                      "end_line": 69,
                      "label": "            w.startObject()\n            w.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}\")\n            w.writeName(\"type\").writeValue(\"image/${pages[i].format}\")\n            w.writeName(\"width\").writeValue(pages[i].width)\n            w.writeName(\"height\").writeValue(pages[i].height)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 70,
                          "end_line": 70,
                          "label": "            if (pages[i].format != \"jpeg\"){",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 71,
                              "end_line": 78,
                              "label": "                w.writeName(\"alternate\").startArray()\n                w.startObject()\n                w.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}?convert=jpeg\")\n                w.writeName(\"type\").writeValue(\"image/jpeg\")\n                w.writeName(\"width\").writeValue(pages[i].width)\n                w.writeName(\"height\").writeValue(pages[i].height)\n                w.endObject()\n                w.endArray()",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 79,
                                  "end_line": 80,
                                  "label": "            }\n            w.endObject()",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 81,
                                      "end_line": 81,
                                      "label": "        }",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 82,
                                          "end_line": 82,
                                          "label": "        w.endArray()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 83,
                                              "end_line": 83,
                                              "label": "    }",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 51,
          "line": "class ReadingOrder <: JsonSerializable{"
        },
        {
          "lineno": 52,
          "line": "    var pages: ArrayList<Page> = ArrayList<Page>()"
        },
        {
          "lineno": 53,
          "line": "    var host: String = \"\""
        },
        {
          "lineno": 54,
          "line": "    var id: String = \"\""
        },
        {
          "lineno": 84,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 51,
          "end_line": 54,
          "label": "class ReadingOrder <: JsonSerializable{\n    var pages: ArrayList<Page> = ArrayList<Page>()\n    var host: String = \"\"\n    var id: String = \"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 84,
              "end_line": 84,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package opds_cj.path.api.v1.books"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.{collection.*,io.*}"
    },
    {
      "lineno": 4,
      "line": "import encoding.json.stream.*"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 50,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package opds_cj.path.api.v1.books",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\nimport std.{collection.*,io.*}",
          "successors": [
            {
              "id": 3,
              "start_line": 4,
              "end_line": 5,
              "label": "import encoding.json.stream.*\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 50,
                  "end_line": 50,
                  "label": "",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}