{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 102,
  "functions": [],
  "classes": [
    {
      "name": "StackedBarChartPage",
      "type": "class",
      "start_line": 8,
      "end_line": 102,
      "functions": [
        {
          "name": "aboutToAppear",
          "type": "function",
          "start_line": 16,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    protected override func aboutToAppear() {"
            },
            {
              "lineno": 17,
              "line": "        let description: Description = this.model.getDescription()"
            },
            {
              "lineno": 18,
              "line": "        description.setEnabled(false)"
            },
            {
              "lineno": 19,
              "line": "        let l: ?Legend = this.model.getLegend()"
            },
            {
              "lineno": 20,
              "line": "        if (let Some(l) <- l) {"
            },
            {
              "lineno": 21,
              "line": "            l.setEnabled(false)"
            },
            {
              "lineno": 22,
              "line": "        }"
            },
            {
              "lineno": 23,
              "line": "        // if more than 40 entries are displayed in the this.model, no values will be drawn"
            },
            {
              "lineno": 24,
              "line": "        this.model.setMaxVisibleValueCount(40)"
            },
            {
              "lineno": 25,
              "line": "        this.model.setDrawGridBackground(false)"
            },
            {
              "lineno": 26,
              "line": "        this.model.setGridBackgroundColor(0x500000ff)"
            },
            {
              "lineno": 27,
              "line": "        this.model.setDrawBarShadow(false)"
            },
            {
              "lineno": 28,
              "line": "        this.model.setDrawValueAboveBar(false)"
            },
            {
              "lineno": 29,
              "line": "        this.limitLine1 = LimitLine(120.0, \"Upper Limit\")"
            },
            {
              "lineno": 30,
              "line": "        this.limitLine1.setLineWidth(4.0)"
            },
            {
              "lineno": 31,
              "line": "        this.limitLine1.enableDashedLine(10, 10)"
            },
            {
              "lineno": 32,
              "line": "        this.limitLine1.setLabelPosition(LimitLabelPosition.RIGHT_TOP)"
            },
            {
              "lineno": 33,
              "line": "        this.limitLine1.setTextSize(10.0)"
            },
            {
              "lineno": 34,
              "line": "        this.limitLine2 = LimitLine(50.0, \"Lower Limit\")"
            },
            {
              "lineno": 35,
              "line": "        this.limitLine2.setLineWidth(4.0)"
            },
            {
              "lineno": 36,
              "line": "        this.limitLine2.enableDashedLine(10, 10)"
            },
            {
              "lineno": 37,
              "line": "        this.limitLine2.setLineColor(0xFFFF00)"
            },
            {
              "lineno": 38,
              "line": "        this.limitLine2.setLabelPosition(LimitLabelPosition.RIGHT_BOTTOM)"
            },
            {
              "lineno": 39,
              "line": "        this.limitLine2.setTextSize(10.0)"
            },
            {
              "lineno": 40,
              "line": "        this.leftAxis = this.model.getAxisLeft()"
            },
            {
              "lineno": 41,
              "line": "        if (let Some(leftAxis) <- this.leftAxis) {"
            },
            {
              "lineno": 42,
              "line": "            leftAxis.setAxisMinimum(0.0)"
            },
            {
              "lineno": 43,
              "line": "            leftAxis.setDrawLimitLinesBehindData(false)"
            },
            {
              "lineno": 44,
              "line": "            leftAxis.addLimitLine(this.limitLine1)"
            },
            {
              "lineno": 45,
              "line": "            leftAxis.addLimitLine(this.limitLine2)"
            },
            {
              "lineno": 46,
              "line": "        }"
            },
            {
              "lineno": 47,
              "line": "        this.rightAxis = this.model.getAxisRight()"
            },
            {
              "lineno": 48,
              "line": "        if (let Some(rightAxis) <- this.rightAxis) {"
            },
            {
              "lineno": 49,
              "line": "            rightAxis.setEnabled(false)"
            },
            {
              "lineno": 50,
              "line": "            rightAxis.setAxisMinimum(0.0)"
            },
            {
              "lineno": 51,
              "line": "        }"
            },
            {
              "lineno": 52,
              "line": "        this.xAxis = this.model.getXAxis()"
            },
            {
              "lineno": 53,
              "line": "        if (let Some(xAxis) <- this.xAxis) {"
            },
            {
              "lineno": 54,
              "line": "            xAxis.setPosition(XAxisPosition.TOP)"
            },
            {
              "lineno": 55,
              "line": "        }"
            },
            {
              "lineno": 56,
              "line": "        this.barData = this.getStackData()"
            },
            {
              "lineno": 57,
              "line": "        this.model.setData(this.barData)"
            },
            {
              "lineno": 58,
              "line": "        this.model.setVisibleXRangeMaximum(20.0)"
            },
            {
              "lineno": 59,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 16,
              "end_line": 20,
              "label": "    protected override func aboutToAppear() {\n        let description: Description = this.model.getDescription()\n        description.setEnabled(false)\n        let l: ?Legend = this.model.getLegend()\n        if (let Some(l) <- l) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 22,
                  "label": "            l.setEnabled(false)\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 23,
                      "end_line": 28,
                      "label": "        // if more than 40 entries are displayed in the this.model, no values will be drawn\n        this.model.setMaxVisibleValueCount(40)\n        this.model.setDrawGridBackground(false)\n        this.model.setGridBackgroundColor(0x500000ff)\n        this.model.setDrawBarShadow(false)\n        this.model.setDrawValueAboveBar(false)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 29,
                          "end_line": 39,
                          "label": "        this.limitLine1 = LimitLine(120.0, \"Upper Limit\")\n        this.limitLine1.setLineWidth(4.0)\n        this.limitLine1.enableDashedLine(10, 10)\n        this.limitLine1.setLabelPosition(LimitLabelPosition.RIGHT_TOP)\n        this.limitLine1.setTextSize(10.0)\n        this.limitLine2 = LimitLine(50.0, \"Lower Limit\")\n        this.limitLine2.setLineWidth(4.0)\n        this.limitLine2.enableDashedLine(10, 10)\n        this.limitLine2.setLineColor(0xFFFF00)\n        this.limitLine2.setLabelPosition(LimitLabelPosition.RIGHT_BOTTOM)\n        this.limitLine2.setTextSize(10.0)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 40,
                              "end_line": 41,
                              "label": "        this.leftAxis = this.model.getAxisLeft()\n        if (let Some(leftAxis) <- this.leftAxis) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 42,
                                  "end_line": 46,
                                  "label": "            leftAxis.setAxisMinimum(0.0)\n            leftAxis.setDrawLimitLinesBehindData(false)\n            leftAxis.addLimitLine(this.limitLine1)\n            leftAxis.addLimitLine(this.limitLine2)\n        }",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 47,
                                      "end_line": 48,
                                      "label": "        this.rightAxis = this.model.getAxisRight()\n        if (let Some(rightAxis) <- this.rightAxis) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 49,
                                          "end_line": 51,
                                          "label": "            rightAxis.setEnabled(false)\n            rightAxis.setAxisMinimum(0.0)\n        }",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 52,
                                              "end_line": 53,
                                              "label": "        this.xAxis = this.model.getXAxis()\n        if (let Some(xAxis) <- this.xAxis) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "start_line": 54,
                                                  "end_line": 55,
                                                  "label": "            xAxis.setPosition(XAxisPosition.TOP)\n        }",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "start_line": 56,
                                                      "end_line": 58,
                                                      "label": "        this.barData = this.getStackData()\n        this.model.setData(this.barData)\n        this.model.setVisibleXRangeMaximum(20.0)",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getStackData",
          "type": "function",
          "start_line": 60,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 60,
              "line": "    private func getStackData(): BarData {"
            },
            {
              "lineno": 61,
              "line": "        let values: ArrayList<BarEntry> = ArrayList<BarEntry>()"
            },
            {
              "lineno": 62,
              "line": "        values.append(BarEntry(1.0, [38.0, 28.0, 39.8]))"
            },
            {
              "lineno": 63,
              "line": "        values.append(BarEntry(2.0, [18.2, 16.1, 16.1]))"
            },
            {
              "lineno": 64,
              "line": "        values.append(BarEntry(3.0, [45.8, 49.8, 26.7]))"
            },
            {
              "lineno": 65,
              "line": "        values.append(BarEntry(4.0, [36.5, 43.8, 15.1]))"
            },
            {
              "lineno": 66,
              "line": "        values.append(BarEntry(5.0, [51.5, 35.4, 24.1]))"
            },
            {
              "lineno": 67,
              "line": "        values.append(BarEntry(6.0, [44.9, 21.4, 15.9]))"
            },
            {
              "lineno": 68,
              "line": "        values.append(BarEntry(7.0, [32.9, 40.4, 32.7]))"
            },
            {
              "lineno": 69,
              "line": "        values.append(BarEntry(8.0, [24.3, 31.0, 47.1]))"
            },
            {
              "lineno": 70,
              "line": "        values.append(BarEntry(9.0, [17.4, 48.4, 49.6]))"
            },
            {
              "lineno": 71,
              "line": "        values.append(BarEntry(10.0, [32.0, 29.8, 20.0]))"
            },
            {
              "lineno": 72,
              "line": "        values.append(BarEntry(11.0, [43.9, 52.7, 27.7]))"
            },
            {
              "lineno": 73,
              "line": "        values.append(BarEntry(12.0, [28.4, 46.2, 51.8]))"
            },
            {
              "lineno": 74,
              "line": "        values.append(BarEntry(13.0, [42.6, 51.9, 44.0]))"
            },
            {
              "lineno": 75,
              "line": "        values.append(BarEntry(14.0, [14.8, 22.4, 31.2]))"
            },
            {
              "lineno": 76,
              "line": "        values.append(BarEntry(15.0, [50.3, 18.7, 18.3]))"
            },
            {
              "lineno": 77,
              "line": "        values.append(BarEntry(16.0, [20.7, 22.9, 40.2]))"
            },
            {
              "lineno": 78,
              "line": "        values.append(BarEntry(17.0, [49.4, 38.3, 41.7]))"
            },
            {
              "lineno": 79,
              "line": "        values.append(BarEntry(18.0, [45.9, 40.7, 29.5]))"
            },
            {
              "lineno": 80,
              "line": "        values.append(BarEntry(19.0, [37.1, 31.8, 42.9]))"
            },
            {
              "lineno": 81,
              "line": "        let set1: BarDataSet"
            },
            {
              "lineno": 82,
              "line": "        set1 = BarDataSet(values, \"Statistics Vienna 2014\")"
            },
            {
              "lineno": 83,
              "line": "        set1.setDrawIcons(false)"
            },
            {
              "lineno": 84,
              "line": "        set1.setColorsByVariable(this.getColors())"
            },
            {
              "lineno": 85,
              "line": "        set1.setStackLabels([\"Births\", \"Divorces\", \"Marriages\"])"
            },
            {
              "lineno": 86,
              "line": "        let dataSets: ArrayList<IBarDataSet> = ArrayList<IBarDataSet>()"
            },
            {
              "lineno": 87,
              "line": "        dataSets.append(set1)"
            },
            {
              "lineno": 88,
              "line": "        let data: BarData = BarData(dataSets)"
            },
            {
              "lineno": 89,
              "line": "        data.setValueTextColor(0xffffff)"
            },
            {
              "lineno": 90,
              "line": "        return data"
            },
            {
              "lineno": 91,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 60,
              "end_line": 89,
              "label": "    private func getStackData(): BarData {\n        let values: ArrayList<BarEntry> = ArrayList<BarEntry>()\n        values.append(BarEntry(1.0, [38.0, 28.0, 39.8]))\n        values.append(BarEntry(2.0, [18.2, 16.1, 16.1]))\n        values.append(BarEntry(3.0, [45.8, 49.8, 26.7]))\n        values.append(BarEntry(4.0, [36.5, 43.8, 15.1]))\n        values.append(BarEntry(5.0, [51.5, 35.4, 24.1]))\n        values.append(BarEntry(6.0, [44.9, 21.4, 15.9]))\n        values.append(BarEntry(7.0, [32.9, 40.4, 32.7]))\n        values.append(BarEntry(8.0, [24.3, 31.0, 47.1]))\n        values.append(BarEntry(9.0, [17.4, 48.4, 49.6]))\n        values.append(BarEntry(10.0, [32.0, 29.8, 20.0]))\n        values.append(BarEntry(11.0, [43.9, 52.7, 27.7]))\n        values.append(BarEntry(12.0, [28.4, 46.2, 51.8]))\n        values.append(BarEntry(13.0, [42.6, 51.9, 44.0]))\n        values.append(BarEntry(14.0, [14.8, 22.4, 31.2]))\n        values.append(BarEntry(15.0, [50.3, 18.7, 18.3]))\n        values.append(BarEntry(16.0, [20.7, 22.9, 40.2]))\n        values.append(BarEntry(17.0, [49.4, 38.3, 41.7]))\n        values.append(BarEntry(18.0, [45.9, 40.7, 29.5]))\n        values.append(BarEntry(19.0, [37.1, 31.8, 42.9]))\n        let set1: BarDataSet\n        set1 = BarDataSet(values, \"Statistics Vienna 2014\")\n        set1.setDrawIcons(false)\n        set1.setColorsByVariable(this.getColors())\n        set1.setStackLabels([\"Births\", \"Divorces\", \"Marriages\"])\n        let dataSets: ArrayList<IBarDataSet> = ArrayList<IBarDataSet>()\n        dataSets.append(set1)\n        let data: BarData = BarData(dataSets)\n        data.setValueTextColor(0xffffff)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 90,
                  "end_line": 90,
                  "label": "        return data",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getColors",
          "type": "function",
          "start_line": 92,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 92,
              "line": "    private func getColors(): Array<UInt32> {"
            },
            {
              "lineno": 93,
              "line": "        let colors: Array<UInt32> = [UInt32(ColorTemplate.MATERIAL_COLORS[0]), UInt32(ColorTemplate.MATERIAL_COLORS[1]),"
            },
            {
              "lineno": 94,
              "line": "        UInt32(ColorTemplate.MATERIAL_COLORS[2])]"
            },
            {
              "lineno": 95,
              "line": "        return colors"
            },
            {
              "lineno": 96,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 92,
              "end_line": 95,
              "label": "    private func getColors(): Array<UInt32> {\n        let colors: Array<UInt32> = [UInt32(ColorTemplate.MATERIAL_COLORS[0]), UInt32(ColorTemplate.MATERIAL_COLORS[1]),\n        UInt32(ColorTemplate.MATERIAL_COLORS[2])]\n        return colors",
              "successors": []
            }
          ]
        },
        {
          "name": "build",
          "type": "function",
          "start_line": 97,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "    func build() {"
            },
            {
              "lineno": 98,
              "line": "        Column {"
            },
            {
              "lineno": 99,
              "line": "            BarChart(model: this.model)"
            },
            {
              "lineno": 100,
              "line": "        }.width(100.percent).height(70.percent).backgroundColor(Color.WHITE)"
            },
            {
              "lineno": 101,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 97,
              "end_line": 101,
              "label": "    func build() {\n        Column {\n            BarChart(model: this.model)\n        }.width(100.percent).height(70.percent).backgroundColor(Color.WHITE)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "class StackedBarChartPage {"
        },
        {
          "lineno": 9,
          "line": "    private var model: BarChartModel = BarChartModel.build()"
        },
        {
          "lineno": 10,
          "line": "    private var leftAxis: ?YAxis = Option<YAxis>.None"
        },
        {
          "lineno": 11,
          "line": "    private var rightAxis: ?YAxis = Option<YAxis>.None"
        },
        {
          "lineno": 12,
          "line": "    private var xAxis: ?XAxis = Option<XAxis>.None"
        },
        {
          "lineno": 13,
          "line": "    private var limitLine1: LimitLine = LimitLine(0.0, \"limit1\")"
        },
        {
          "lineno": 14,
          "line": "    private var limitLine2: LimitLine = LimitLine(0.0, \"limit2\")"
        },
        {
          "lineno": 15,
          "line": "    private var barData: BarData = BarData()"
        },
        {
          "lineno": 102,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 102,
          "label": "class StackedBarChartPage {\n    private var model: BarChartModel = BarChartModel.build()\n    private var leftAxis: ?YAxis = Option<YAxis>.None\n    private var rightAxis: ?YAxis = Option<YAxis>.None\n    private var xAxis: ?XAxis = Option<XAxis>.None\n    private var limitLine1: LimitLine = LimitLine(0.0, \"limit1\")\n    private var limitLine2: LimitLine = LimitLine(0.0, \"limit2\")\n    private var barData: BarData = BarData()\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package ohos_app_cangjie_entry.barPage"
    },
    {
      "lineno": 2,
      "line": "import ohos.base.*"
    },
    {
      "lineno": 3,
      "line": "import ohos.component.*"
    },
    {
      "lineno": 4,
      "line": "import ohos.state_manage.*"
    },
    {
      "lineno": 5,
      "line": "import ohos.state_macro_manage.*"
    },
    {
      "lineno": 6,
      "line": "@Entry"
    },
    {
      "lineno": 7,
      "line": "@Component"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "package ohos_app_cangjie_entry.barPage\nimport ohos.base.*\nimport ohos.component.*\nimport ohos.state_manage.*\nimport ohos.state_macro_manage.*\n@Entry\n@Component",
      "successors": []
    }
  ]
}