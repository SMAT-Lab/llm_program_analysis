{
  "name": "enum_enhance",
  "type": "CFG",
  "start_line": 1,
  "end_line": 106,
  "functions": [
    {
      "name": "ToStringEnum",
      "type": "function",
      "start_line": 6,
      "end_line": 106,
      "functions": [
        {
          "name": "toString",
          "type": "function",
          "start_line": 65,
          "end_line": 68,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    let toString = FuncDecl(quote("
            },
            {
              "lineno": 66,
              "line": "        public func toString(): String {"
            },
            {
              "lineno": 67,
              "line": "            $block"
            },
            {
              "lineno": 68,
              "line": "        }))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 65,
              "end_line": 68,
              "label": "    let toString = FuncDecl(quote(\n        public func toString(): String {\n            $block\n        }))",
              "successors": []
            }
          ]
        },
        {
          "name": "toStringBool",
          "type": "function",
          "start_line": 72,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 72,
              "line": "    let toStringBool = FuncDecl(quote("
            },
            {
              "lineno": 73,
              "line": "        public func toString(b: Bool): String {"
            },
            {
              "lineno": 74,
              "line": "            if (b) {"
            },
            {
              "lineno": 75,
              "line": "                $block1"
            },
            {
              "lineno": 76,
              "line": "            } else {"
            },
            {
              "lineno": 77,
              "line": "                this.toString()"
            },
            {
              "lineno": 78,
              "line": "            }"
            },
            {
              "lineno": 79,
              "line": "        }))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 72,
              "end_line": 73,
              "label": "    let toStringBool = FuncDecl(quote(\n        public func toString(b: Bool): String {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 74,
                  "end_line": 75,
                  "label": "            if (b) {\n                $block1",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 76,
                      "end_line": 77,
                      "label": "            } else {\n                this.toString()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 78,
                          "end_line": 79,
                          "label": "            }\n        }))",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public macro ToStringEnum(input: Tokens): Tokens {"
        },
        {
          "lineno": 7,
          "line": "    let enumm = EnumDecl(input)"
        },
        {
          "lineno": 8,
          "line": "    // match表达式"
        },
        {
          "lineno": 9,
          "line": "    var matchExprs = Array<MatchExpr>(2, { _ => MatchExpr()})"
        },
        {
          "lineno": 10,
          "line": "    for (expr in matchExprs) {"
        },
        {
          "lineno": 11,
          "line": "        expr.selector = RefExpr(quote(this))"
        },
        {
          "lineno": 12,
          "line": "        expr.lParen = Token(TokenKind.LPAREN)"
        },
        {
          "lineno": 13,
          "line": "        expr.rParen = Token(TokenKind.RPAREN)"
        },
        {
          "lineno": 14,
          "line": "    }"
        },
        {
          "lineno": 15,
          "line": "    // 构造case"
        },
        {
          "lineno": 16,
          "line": "    let matchCaseSet = Array<ArrayList<MatchCase>>(2, {_ => ArrayList<MatchCase>()})"
        },
        {
          "lineno": 17,
          "line": "    for (constr in enumm.constructors) {"
        },
        {
          "lineno": 18,
          "line": "        let matchCases = Array<MatchCase>(2, {_ => MatchCase()}) // 0: case Red => \"Red\" | 1： case Red => \"Enum.Red\""
        },
        {
          "lineno": 19,
          "line": "        let enumPatt = EnumPattern()"
        },
        {
          "lineno": 20,
          "line": "        let litConstBuilders = Array<StringBuilder>(2, {_ => StringBuilder()})"
        },
        {
          "lineno": 21,
          "line": "        // 添加 \"Enum.\""
        },
        {
          "lineno": 22,
          "line": "        litConstBuilders[1].append(enumm.identifier.value)"
        },
        {
          "lineno": 23,
          "line": "        litConstBuilders[1].append(r'.')"
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "        litConstBuilders |> forEach{i => i.append(constr.identifier.value)}"
        },
        {
          "lineno": 26,
          "line": "        enumPatt.constructor = parseExpr(constr.identifier.toTokens())"
        },
        {
          "lineno": 27,
          "line": "        // 组装 MatchCase"
        },
        {
          "lineno": 28,
          "line": "        var flag = false"
        },
        {
          "lineno": 29,
          "line": "        let constrArgSize = constr.typeArguments.size"
        },
        {
          "lineno": 30,
          "line": "        for (item in constr.typeArguments |> enumerate) {"
        },
        {
          "lineno": 31,
          "line": "            if (!flag) {"
        },
        {
          "lineno": 32,
          "line": "                litConstBuilders |> forEach{i => i.append(r\"(\")}"
        },
        {
          "lineno": 33,
          "line": "                flag = true"
        },
        {
          "lineno": 34,
          "line": "            }"
        },
        {
          "lineno": 35,
          "line": "            let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())"
        },
        {
          "lineno": 36,
          "line": "            enumPatt.patterns.append(TypePattern(quote($id: $(item[1]))))"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "            litConstBuilders[0].append(\"\\${${id.toTokens()}.toString()}\")"
        },
        {
          "lineno": 39,
          "line": "            match (item[1]) {"
        },
        {
          "lineno": 40,
          "line": "                case r: RefType where r.identifier.value == enumm.identifier.value =>"
        },
        {
          "lineno": 41,
          "line": "                litConstBuilders[1].append(\"\\${${id.toTokens()}.toString(true)}\")"
        },
        {
          "lineno": 42,
          "line": "                case p: TypeNode => "
        },
        {
          "lineno": 43,
          "line": "                litConstBuilders[1].append(\"\\${${id.toTokens()}.toString()}\")"
        },
        {
          "lineno": 44,
          "line": "            }"
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 46,
          "line": "            if (item[0] != constrArgSize - 1) {"
        },
        {
          "lineno": 47,
          "line": "                litConstBuilders |> forEach{i => i.append(\", \")}"
        },
        {
          "lineno": 48,
          "line": "            }"
        },
        {
          "lineno": 49,
          "line": "        }"
        },
        {
          "lineno": 50,
          "line": "        if (flag) {"
        },
        {
          "lineno": 51,
          "line": "            litConstBuilders |> forEach{i => i.append(r')')}"
        },
        {
          "lineno": 52,
          "line": "        }"
        },
        {
          "lineno": 53,
          "line": "        for (((mat, lit), set) in matchCases |> zip(litConstBuilders) |> zip(matchCaseSet)) {"
        },
        {
          "lineno": 54,
          "line": "            mat.patterns.append(enumPatt)"
        },
        {
          "lineno": 55,
          "line": "            mat.block.nodes.append(LitConstExpr(quote($(lit.toString()))))"
        },
        {
          "lineno": 56,
          "line": "            set.append(mat)"
        },
        {
          "lineno": 57,
          "line": "        }"
        },
        {
          "lineno": 58,
          "line": "    }"
        },
        {
          "lineno": 59,
          "line": "    for ((expr, set) in matchExprs |> zip(matchCaseSet)) {"
        },
        {
          "lineno": 60,
          "line": "        set |> forEach{i => expr.matchCases.append(i)}"
        },
        {
          "lineno": 61,
          "line": "    }"
        },
        {
          "lineno": 62,
          "line": "    // toString(): String函数"
        },
        {
          "lineno": 63,
          "line": "    let block = Block()"
        },
        {
          "lineno": 64,
          "line": "    block.nodes.append(matchExprs[0])"
        },
        {
          "lineno": 69,
          "line": "    // toString(b: Bool): String函数"
        },
        {
          "lineno": 70,
          "line": "    let block1 = Block()"
        },
        {
          "lineno": 71,
          "line": "    block1.nodes.append(matchExprs[1])"
        },
        {
          "lineno": 80,
          "line": "    // 将函数加入枚举"
        },
        {
          "lineno": 81,
          "line": "    let funcs = ArrayList<String>()"
        },
        {
          "lineno": 82,
          "line": "    for (decl in enumm.decls) {"
        },
        {
          "lineno": 83,
          "line": "        match (decl) {"
        },
        {
          "lineno": 84,
          "line": "            // case d: FuncDecl => funcSet.put(d.identifier.toTokens().toString())"
        },
        {
          "lineno": 85,
          "line": "            case d: FuncDecl => funcs.append(d.identifier.value)"
        },
        {
          "lineno": 86,
          "line": "            case _ => ()"
        },
        {
          "lineno": 87,
          "line": "        }"
        },
        {
          "lineno": 88,
          "line": "    }"
        },
        {
          "lineno": 89,
          "line": "    if (!funcs.contains(\"toString\")) {"
        },
        {
          "lineno": 90,
          "line": "        enumm.decls.append(toString)"
        },
        {
          "lineno": 91,
          "line": "        enumm.decls.append(toStringBool)"
        },
        {
          "lineno": 92,
          "line": "    }"
        },
        {
          "lineno": 93,
          "line": "    // 继承接口"
        },
        {
          "lineno": 94,
          "line": "    let intfs = ArrayList<String>()"
        },
        {
          "lineno": 95,
          "line": "    for (i in enumm.superTypes) {"
        },
        {
          "lineno": 96,
          "line": "        match (i) {"
        },
        {
          "lineno": 97,
          "line": "            case r: RefType => intfs.append(r.toTokens().toString())"
        },
        {
          "lineno": 98,
          "line": "            case r: TypeNode => ()"
        },
        {
          "lineno": 99,
          "line": "        }"
        },
        {
          "lineno": 100,
          "line": "    }"
        },
        {
          "lineno": 101,
          "line": "    if (!intfs.contains(\"ToString\")) {"
        },
        {
          "lineno": 102,
          "line": "        enumm.superTypes.append(RefType(quote(ToString)))"
        },
        {
          "lineno": 103,
          "line": "    }"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 105,
          "line": "    enumm.toTokens()"
        },
        {
          "lineno": 106,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 9,
          "label": "public macro ToStringEnum(input: Tokens): Tokens {\n    let enumm = EnumDecl(input)\n    // match表达式\n    var matchExprs = Array<MatchExpr>(2, { _ => MatchExpr()})",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 14,
              "label": "for (expr in matchExprs) {\n        expr.selector = RefExpr(quote(this))\n        expr.lParen = Token(TokenKind.LPAREN)\n        expr.rParen = Token(TokenKind.RPAREN)\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "// 构造case\n    let matchCaseSet = Array<ArrayList<MatchCase>>(2, {_ => ArrayList<MatchCase>()})",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 17,
                      "end_line": 58,
                      "label": "for (constr in enumm.constructors) {\n        let matchCases = Array<MatchCase>(2, {_ => MatchCase()}) // 0: case Red => \"Red\" | 1： case Red => \"Enum.Red\"\n        let enumPatt = EnumPattern()\n        let litConstBuilders = Array<StringBuilder>(2, {_ => StringBuilder()})\n        // 添加 \"Enum.\"\n        litConstBuilders[1].append(enumm.identifier.value)\n        litConstBuilders[1].append(r'.')\n        litConstBuilders |> forEach{i => i.append(constr.identifier.value)}\n        enumPatt.constructor = parseExpr(constr.identifier.toTokens())\n        // 组装 MatchCase\n        var flag = false\n        let constrArgSize = constr.typeArguments.size\n        for (item in constr.typeArguments |> enumerate) {\n            if (!flag) {\n                litConstBuilders |> forEach{i => i.append(r\"(\")}\n                flag = true\n            }\n            let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())\n            enumPatt.patterns.append(TypePattern(quote($id: $(item[1]))))\n\n            litConstBuilders[0].append(\"\\${${id.toTokens()}.toString()}\")\n            match (item[1]) {\n                case r: RefType where r.identifier.value == enumm.identifier.value =>\n                litConstBuilders[1].append(\"\\${${id.toTokens()}.toString(true)}\")\n                case p: TypeNode => \n                litConstBuilders[1].append(\"\\${${id.toTokens()}.toString()}\")\n            }\n\n            if (item[0] != constrArgSize - 1) {\n                litConstBuilders |> forEach{i => i.append(\", \")}\n            }\n        }\n        if (flag) {\n            litConstBuilders |> forEach{i => i.append(r')')}\n        }\n        for (((mat, lit), set) in matchCases |> zip(litConstBuilders) |> zip(matchCaseSet)) {\n            mat.patterns.append(enumPatt)\n            mat.block.nodes.append(LitConstExpr(quote($(lit.toString()))))\n            set.append(mat)\n        }\n    }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 59,
                          "end_line": 61,
                          "label": "for ((expr, set) in matchExprs |> zip(matchCaseSet)) {\n        set |> forEach{i => expr.matchCases.append(i)}\n    }",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 62,
                              "end_line": 64,
                              "label": "// toString(): String函数\n    let block = Block()\n    block.nodes.append(matchExprs[0])",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 69,
                                  "end_line": 71,
                                  "label": "// toString(b: Bool): String函数\n    let block1 = Block()\n    block1.nodes.append(matchExprs[1])",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 80,
                                      "end_line": 82,
                                      "label": "// 将函数加入枚举\n    let funcs = ArrayList<String>()\n    for (decl in enumm.decls) {",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 83,
                                          "end_line": 87,
                                          "label": "match (decl) {\n            // case d: FuncDecl => funcSet.put(d.identifier.toTokens().toString())\n            case d: FuncDecl => funcs.append(d.identifier.value)\n            case _ => ()\n        }",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 88,
                                              "end_line": 92,
                                              "label": "}\n    if (!funcs.contains(\"toString\")) {\n        enumm.decls.append(toString)\n        enumm.decls.append(toStringBool)\n    }",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 93,
                                                  "end_line": 100,
                                                  "label": "// 继承接口\n    let intfs = ArrayList<String>()\n    for (i in enumm.superTypes) {\n        match (i) {\n            case r: RefType => intfs.append(r.toTokens().toString())\n            case r: TypeNode => ()\n        }\n    }",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 101,
                                                      "end_line": 103,
                                                      "label": "if (!intfs.contains(\"ToString\")) {\n        enumm.superTypes.append(RefType(quote(ToString)))\n    }",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 104,
                                                          "end_line": 106,
                                                          "label": "\n    enumm.toTokens()\n}",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package enum_enhance"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.*"
    },
    {
      "lineno": 5,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "macro package enum_enhance",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 4,
          "label": "import std.ast.*\nimport std.collection.*",
          "successors": []
        }
      ]
    }
  ]
}