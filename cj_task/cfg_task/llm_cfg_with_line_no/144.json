{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 79,
  "functions": [],
  "classes": [
    {
      "name": "CvTextElement",
      "type": "class",
      "start_line": 3,
      "end_line": 67,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 16,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    public init(data: Layer, globalData: GlobalData) {"
            },
            {
              "lineno": 17,
              "line": "        super(data, globalData)"
            },
            {
              "lineno": 18,
              "line": "        this.textSpans = ArrayList<Object>()"
            },
            {
              "lineno": 19,
              "line": "        this.yOffset = 0"
            },
            {
              "lineno": 20,
              "line": "        this.fillColorAnim = false"
            },
            {
              "lineno": 21,
              "line": "        this.strokeColorAnim = false"
            },
            {
              "lineno": 22,
              "line": "        this.strokeWidthAnim = false"
            },
            {
              "lineno": 23,
              "line": "        this.stroke = false"
            },
            {
              "lineno": 24,
              "line": "        this.fill = false"
            },
            {
              "lineno": 25,
              "line": "        this.justifyOffset = 0"
            },
            {
              "lineno": 26,
              "line": "        this.currentRender = None"
            },
            {
              "lineno": 27,
              "line": "        this.renderType = \"canvas\""
            },
            {
              "lineno": 28,
              "line": "        this.values = valuesData(\"rgba(0,0,0,0)\",\"rgba(0,0,0,0)\", 0.0, \"\")"
            },
            {
              "lineno": 29,
              "line": "        //this.initElement(data, globalData, comp)"
            },
            {
              "lineno": 30,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 16,
              "end_line": 30,
              "label": "    public init(data: Layer, globalData: GlobalData) {\n        super(data, globalData)\n        this.textSpans = ArrayList<Object>()\n        this.yOffset = 0\n        this.fillColorAnim = false\n        this.strokeColorAnim = false\n        this.strokeWidthAnim = false\n        this.stroke = false\n        this.fill = false\n        this.justifyOffset = 0\n        this.currentRender = None\n        this.renderType = \"canvas\"\n        this.values = valuesData(\"rgba(0,0,0,0)\",\"rgba(0,0,0,0)\", 0.0, \"\")\n        //this.initElement(data, globalData, comp)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "tHelper",
          "type": "function",
          "start_line": 31,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 31,
              "line": "    public func tHelper() { }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 31,
              "end_line": 31,
              "label": "    public func tHelper() { }",
              "successors": []
            }
          ]
        },
        {
          "name": "buildNewText",
          "type": "function",
          "start_line": 32,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    public func buildNewText() {"
            },
            {
              "lineno": 33,
              "line": "        var documentData = this.textProperty.currentData"
            },
            {
              "lineno": 34,
              "line": "        //this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);"
            },
            {
              "lineno": 35,
              "line": "        var hasFill = false"
            },
            {
              "lineno": 36,
              "line": "        if (!documentData.fc.isEmpty()) {"
            },
            {
              "lineno": 37,
              "line": "            hasFill = true"
            },
            {
              "lineno": 38,
              "line": "            this.values.fill = this.buildColor(documentData.fc)"
            },
            {
              "lineno": 39,
              "line": "        } else {"
            },
            {
              "lineno": 40,
              "line": "            this.values.fill = \"rgba(0,0,0,0)\""
            },
            {
              "lineno": 41,
              "line": "        }"
            },
            {
              "lineno": 42,
              "line": "        this.fill = hasFill"
            },
            {
              "lineno": 43,
              "line": "        var hasStroke = false"
            },
            {
              "lineno": 44,
              "line": "        if (!documentData.sc.isEmpty()) {"
            },
            {
              "lineno": 45,
              "line": "            hasStroke = true"
            },
            {
              "lineno": 46,
              "line": "            this.values.stroke = this.buildColor(documentData.sc)"
            },
            {
              "lineno": 47,
              "line": "            this.values.sWidth = documentData.sw"
            },
            {
              "lineno": 48,
              "line": "        }"
            },
            {
              "lineno": 49,
              "line": "        var fontData = this.globalData.fontManager.getFontByName(documentData.f)"
            },
            {
              "lineno": 50,
              "line": "        var letters: ArrayList<Letter> = documentData.l"
            },
            {
              "lineno": 51,
              "line": "        //mHelper: new Matrix(),"
            },
            {
              "lineno": 52,
              "line": "        var matrixHelper: Matrix =  Matrix()"
            },
            {
              "lineno": 53,
              "line": "        this.stroke = hasStroke"
            },
            {
              "lineno": 54,
              "line": "        this.values.fValue = \"${documentData.finalSize}\" + \"px \" + this.globalData.fontManager.getFontByName(documentData.f).fFamily"
            },
            {
              "lineno": 55,
              "line": "        var len: Int64 = documentData.finalText.size"
            },
            {
              "lineno": 56,
              "line": "        var xPos = 0"
            },
            {
              "lineno": 57,
              "line": "        var yPos = 0"
            },
            {
              "lineno": 58,
              "line": "        var firstLine = true"
            },
            {
              "lineno": 59,
              "line": "        var cnt = 0"
            },
            {
              "lineno": 60,
              "line": "        for (i in 0..len) {"
            },
            {
              "lineno": 61,
              "line": "            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily)"
            },
            {
              "lineno": 62,
              "line": "            //shapeData = (charData && charData.data) || {};"
            },
            {
              "lineno": 63,
              "line": "            var shapeData = charData.data"
            },
            {
              "lineno": 64,
              "line": "            matrixHelper.reset()"
            },
            {
              "lineno": 65,
              "line": "        }"
            },
            {
              "lineno": 66,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 32,
              "end_line": 33,
              "label": "    public func buildNewText() {\n        var documentData = this.textProperty.currentData",
              "successors": [
                {
                  "id": 2,
                  "start_line": 35,
                  "end_line": 35,
                  "label": "        var hasFill = false",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 36,
                      "end_line": 38,
                      "label": "        if (!documentData.fc.isEmpty()) {\n            hasFill = true\n            this.values.fill = this.buildColor(documentData.fc)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 42,
                          "end_line": 42,
                          "label": "        this.fill = hasFill",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 43,
                              "end_line": 43,
                              "label": "        var hasStroke = false",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 44,
                                  "end_line": 47,
                                  "label": "        if (!documentData.sc.isEmpty()) {\n            hasStroke = true\n            this.values.stroke = this.buildColor(documentData.sc)\n            this.values.sWidth = documentData.sw",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 49,
                                      "end_line": 55,
                                      "label": "        var fontData = this.globalData.fontManager.getFontByName(documentData.f)\n        var letters: ArrayList<Letter> = documentData.l\n        var matrixHelper: Matrix =  Matrix()\n        this.stroke = hasStroke\n        this.values.fValue = \"${documentData.finalSize}\" + \"px \" + this.globalData.fontManager.getFontByName(documentData.f).fFamily\n        var len: Int64 = documentData.finalText.size",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 56,
                                          "end_line": 59,
                                          "label": "        var xPos = 0\n        var yPos = 0\n        var firstLine = true\n        var cnt = 0",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "start_line": 60,
                                              "end_line": 64,
                                              "label": "        for (i in 0..len) {\n            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily)\n            var shapeData = charData.data\n            matrixHelper.reset()",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "start_line": 65,
                                                  "end_line": 66,
                                                  "label": "        }",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 4,
                          "start_line": 39,
                          "end_line": 41,
                          "label": "        } else {\n            this.values.fill = \"rgba(0,0,0,0)\"\n        }",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 42,
                              "end_line": 42,
                              "label": "        this.fill = hasFill",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 43,
                                  "end_line": 43,
                                  "label": "        var hasStroke = false",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 44,
                                      "end_line": 47,
                                      "label": "        if (!documentData.sc.isEmpty()) {\n            hasStroke = true\n            this.values.stroke = this.buildColor(documentData.sc)\n            this.values.sWidth = documentData.sw",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 49,
                                          "end_line": 55,
                                          "label": "        var fontData = this.globalData.fontManager.getFontByName(documentData.f)\n        var letters: ArrayList<Letter> = documentData.l\n        var matrixHelper: Matrix =  Matrix()\n        this.stroke = hasStroke\n        this.values.fValue = \"${documentData.finalSize}\" + \"px \" + this.globalData.fontManager.getFontByName(documentData.f).fFamily\n        var len: Int64 = documentData.finalText.size",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 56,
                                              "end_line": 59,
                                              "label": "        var xPos = 0\n        var yPos = 0\n        var firstLine = true\n        var cnt = 0",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 60,
                                                  "end_line": 64,
                                                  "label": "        for (i in 0..len) {\n            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily)\n            var shapeData = charData.data\n            matrixHelper.reset()",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 65,
                                                      "end_line": 66,
                                                      "label": "        }",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "public class CvTextElement <: ITextElement{"
        },
        {
          "lineno": 4,
          "line": "    var textSpans: ArrayList<Object>"
        },
        {
          "lineno": 5,
          "line": "    var yOffset: Int64"
        },
        {
          "lineno": 6,
          "line": "    var fillColorAnim: Bool"
        },
        {
          "lineno": 7,
          "line": "    var strokeColorAnim: Bool"
        },
        {
          "lineno": 8,
          "line": "    var strokeWidthAnim: Bool"
        },
        {
          "lineno": 9,
          "line": "    var stroke: Bool"
        },
        {
          "lineno": 10,
          "line": "    var fill: Bool"
        },
        {
          "lineno": 11,
          "line": "    var justifyOffset: Int64"
        },
        {
          "lineno": 12,
          "line": "    var currentRender: Option<String>"
        },
        {
          "lineno": 13,
          "line": "    var renderType: String"
        },
        {
          "lineno": 14,
          "line": "    var values: valuesData"
        },
        {
          "lineno": 15,
          "line": "    //TODO comp"
        },
        {
          "lineno": 67,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 3,
          "end_line": 14,
          "label": "public class CvTextElement <: ITextElement{\n    var textSpans: ArrayList<Object>\n    var yOffset: Int64\n    var fillColorAnim: Bool\n    var strokeColorAnim: Bool\n    var strokeWidthAnim: Bool\n    var stroke: Bool\n    var fill: Bool\n    var justifyOffset: Int64\n    var currentRender: Option<String>\n    var renderType: String\n    var values: valuesData\n    //TODO comp",
          "successors": [
            {
              "id": 2,
              "start_line": 67,
              "end_line": 67,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "valuesData",
      "type": "class",
      "start_line": 68,
      "end_line": 79,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 73,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 73,
              "line": "    public init(fill: String, stroke: String, sWidth: Float64, fValue: String) {"
            },
            {
              "lineno": 74,
              "line": "        this.fill = fill"
            },
            {
              "lineno": 75,
              "line": "        this.stroke = stroke"
            },
            {
              "lineno": 76,
              "line": "        this.sWidth = sWidth"
            },
            {
              "lineno": 77,
              "line": "        this.fValue = fValue"
            },
            {
              "lineno": 78,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 73,
              "end_line": 78,
              "label": "    public init(fill: String, stroke: String, sWidth: Float64, fValue: String) {\n        this.fill = fill\n        this.stroke = stroke\n        this.sWidth = sWidth\n        this.fValue = fValue\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 68,
          "line": "public class valuesData {"
        },
        {
          "lineno": 69,
          "line": "    var fill: String"
        },
        {
          "lineno": 70,
          "line": "    var stroke: String"
        },
        {
          "lineno": 71,
          "line": "    var sWidth: Float64"
        },
        {
          "lineno": 72,
          "line": "    var fValue: String"
        },
        {
          "lineno": 79,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 68,
          "end_line": 72,
          "label": "public class valuesData {\n    var fill: String\n    var stroke: String\n    var sWidth: Float64\n    var fValue: String",
          "successors": [
            {
              "id": 2,
              "start_line": 79,
              "end_line": 79,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package elements"
    },
    {
      "lineno": 2,
      "line": "//TODO: 未完全实现"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package elements",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 2,
          "label": "//TODO: \\\\u672a\\\\u5b8c\\\\u5168\\\\u5b9e\\\\u73b0",
          "successors": []
        }
      ]
    }
  ]
}