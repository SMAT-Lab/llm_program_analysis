{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 35,
  "functions": [
    {
      "name": "task",
      "type": "function",
      "start_line": 9,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "func task(): Int64 {"
        },
        {
          "lineno": 10,
          "line": "    var n: Int64 = 0"
        },
        {
          "lineno": 11,
          "line": "    let random = Random()"
        },
        {
          "lineno": 12,
          "line": "    for (_ in 0..M) {"
        },
        {
          "lineno": 13,
          "line": "        let x = random.nextFloat64()"
        },
        {
          "lineno": 14,
          "line": "        let y = random.nextFloat64()"
        },
        {
          "lineno": 15,
          "line": "        if ((x - 0.5) ** 2 + (y - 0.5) ** 2 < 0.25) {"
        },
        {
          "lineno": 16,
          "line": "            n++"
        },
        {
          "lineno": 17,
          "line": "        }"
        },
        {
          "lineno": 18,
          "line": "    }"
        },
        {
          "lineno": 19,
          "line": "    return n"
        },
        {
          "lineno": 20,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 9,
          "end_line": 11,
          "label": "func task(): Int64 {\n    var n: Int64 = 0\n    let random = Random()",
          "successors": [
            {
              "id": 2,
              "start_line": 12,
              "end_line": 18,
              "label": "for (_ in 0..M) {\n    let x = random.nextFloat64()\n    let y = random.nextFloat64()\n    if ((x - 0.5) ** 2 + (y - 0.5) ** 2 < 0.25) {\n        n++\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 19,
                  "end_line": 20,
                  "label": "return n\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 22,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "main() {"
        },
        {
          "lineno": 23,
          "line": "    let futures = ArrayList<Future<Int64>>()"
        },
        {
          "lineno": 24,
          "line": "    for (_ in 0..N) {"
        },
        {
          "lineno": 25,
          "line": "        let future = spawn { task() }"
        },
        {
          "lineno": 26,
          "line": "        futures.append(future)"
        },
        {
          "lineno": 27,
          "line": "    }"
        },
        {
          "lineno": 28,
          "line": "    var n = 0"
        },
        {
          "lineno": 29,
          "line": "    for (future in futures) {"
        },
        {
          "lineno": 30,
          "line": "        n += future.get()"
        },
        {
          "lineno": 31,
          "line": "    }"
        },
        {
          "lineno": 32,
          "line": "    let pi = Float64(n) / Float64(M * N) * 4.0"
        },
        {
          "lineno": 33,
          "line": "    println(\"π ≈ ${pi}\")"
        },
        {
          "lineno": 34,
          "line": "    println(\"deviation: ${abs(Float64.PI - pi)}\")"
        },
        {
          "lineno": 35,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 23,
          "label": "main() {\n    let futures = ArrayList<Future<Int64>>()",
          "successors": [
            {
              "id": 2,
              "start_line": 24,
              "end_line": 27,
              "label": "for (_ in 0..N) {\n        let future = spawn { task() }\n        futures.append(future)\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "var n = 0",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 29,
                      "end_line": 31,
                      "label": "for (future in futures) {\n        n += future.get()\n    }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 32,
                          "end_line": 34,
                          "label": "let pi = Float64(n) / Float64(M * N) * 4.0\n    println(\"π ≈ ${pi}\")\n    println(\"deviation: ${abs(Float64.PI - pi)}\")",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 35,
                              "end_line": 35,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 基于仓颉并发机制，在多线程中随机投点估算圆周率的值"
    },
    {
      "lineno": 2,
      "line": "// cjc version: 0.53.13"
    },
    {
      "lineno": 3,
      "line": "import std.collection.*"
    },
    {
      "lineno": 4,
      "line": "import std.random.*"
    },
    {
      "lineno": 5,
      "line": "import std.math.*"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "const M = 200000"
    },
    {
      "lineno": 8,
      "line": "const N = 16"
    },
    {
      "lineno": 21,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "// 基于仓栾并发机制，在多线程中随机投点估算圆周率的值\n// cjc version: 0.53.13",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 5,
          "label": "import std.collection.*\nimport std.random.*\nimport std.math.*",
          "successors": [
            {
              "id": 3,
              "start_line": 7,
              "end_line": 8,
              "label": "const M = 200000\nconst N = 16",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}