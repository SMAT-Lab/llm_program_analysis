{
  "name": "cj_debounce_throttle_repeater",
  "type": "CFG",
  "start_line": 2,
  "end_line": 112,
  "functions": [],
  "classes": [
    {
      "name": "Repeater",
      "type": "class",
      "start_line": 6,
      "end_line": 112,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    public init(throttle!: Bool, mode!: RepeaterMode, task!: RepeaterTask) {"
            },
            {
              "lineno": 19,
              "line": "        this(throttle: throttle, config: mode.config, task: task)"
            },
            {
              "lineno": 20,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 20,
              "label": "    public init(throttle!: Bool, mode!: RepeaterMode, task!: RepeaterTask) {\n        this(throttle: throttle, config: mode.config, task: task)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 22,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    public init(throttle!: Bool, config!: RepeaterConfig, task!: RepeaterTask) {"
            },
            {
              "lineno": 23,
              "line": "        this.config = config"
            },
            {
              "lineno": 24,
              "line": "        this.task = task"
            },
            {
              "lineno": 25,
              "line": "        this.throttle = throttle"
            },
            {
              "lineno": 26,
              "line": "        this.verifyConfig()"
            },
            {
              "lineno": 27,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 27,
              "label": "    public init(throttle!: Bool, config!: RepeaterConfig, task!: RepeaterTask) {\n        this.config = config\n        this.task = task\n        this.throttle = throttle\n        this.verifyConfig()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "verifyConfig",
          "type": "function",
          "start_line": 31,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 31,
              "line": "    func verifyConfig() {}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 31,
              "end_line": 31,
              "label": "    func verifyConfig() {}",
              "successors": []
            }
          ]
        },
        {
          "name": "verifyConfig",
          "type": "function",
          "start_line": 35,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    func verifyConfig() {"
            },
            {
              "lineno": 36,
              "line": "        if (!config.leading && !config.trailing) {"
            },
            {
              "lineno": 37,
              "line": "            throw IllegalArgumentException('leading和trailing需要至少有一项为true')"
            },
            {
              "lineno": 38,
              "line": "        }"
            },
            {
              "lineno": 39,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 35,
              "end_line": 35,
              "label": "    func verifyConfig() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 36,
                  "end_line": 37,
                  "label": "        if (!config.leading && !config.trailing) {\n            throw IllegalArgumentException('leading\\u548ctrailing\\u9700\\u8981\\u81f3\\u5c11\\u6709\\u4e00\\u9879\\u4e3atrue')",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 38,
              "end_line": 39,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "canRunTask",
          "type": "function",
          "start_line": 42,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    private prop canRunTask: Bool {"
            },
            {
              "lineno": 43,
              "line": "        get() {"
            },
            {
              "lineno": 44,
              "line": "            if (throttle) {"
            },
            {
              "lineno": 45,
              "line": "                let delta = getNowTime() - lastRunTaskTime"
            },
            {
              "lineno": 46,
              "line": "                (delta > config.interval) || !this.firstRunTask"
            },
            {
              "lineno": 47,
              "line": "            } else {"
            },
            {
              "lineno": 48,
              "line": "                let delta = getNowTime() - lastCallTime"
            },
            {
              "lineno": 49,
              "line": "                (delta > config.interval) || !this.firstRunTask"
            },
            {
              "lineno": 50,
              "line": "            }"
            },
            {
              "lineno": 51,
              "line": "        }"
            },
            {
              "lineno": 52,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 44,
              "label": "    private prop canRunTask: Bool {\n        get() {\n            if (throttle) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 45,
                  "end_line": 46,
                  "label": "                let delta = getNowTime() - lastRunTaskTime\n                (delta > config.interval) || !this.firstRunTask",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 50,
                      "end_line": 51,
                      "label": "            }\n        }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 52,
                          "end_line": 52,
                          "label": "    }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 47,
                  "end_line": 49,
                  "label": "            } else {\n                let delta = getNowTime() - lastCallTime\n                (delta > config.interval) || !this.firstRunTask",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 50,
                      "end_line": 51,
                      "label": "            }\n        }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 52,
                          "end_line": 52,
                          "label": "    }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dealLeadingCall",
          "type": "function",
          "start_line": 54,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    private func dealLeadingCall() {"
            },
            {
              "lineno": 55,
              "line": "        // timer不存在，说明没开启过计时。如果设置了头部执行，则立即执行"
            },
            {
              "lineno": 56,
              "line": "        if (config.leading && canRunTask) {"
            },
            {
              "lineno": 57,
              "line": "            runTask()"
            },
            {
              "lineno": 58,
              "line": "        }"
            },
            {
              "lineno": 59,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 54,
              "end_line": 56,
              "label": "    private func dealLeadingCall() {\n        // timer不不存在，说明没开启过计时。如设置了头部执行，则立即执行\n        if (config.leading && canRunTask) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 57,
                  "end_line": 57,
                  "label": "            runTask()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 58,
                      "end_line": 59,
                      "label": "        }\n    }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "start_line": 58,
                  "end_line": 59,
                  "label": "        }\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "dealTrailingCall",
          "type": "function",
          "start_line": 61,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 61,
              "line": "    private func dealTrailingCall() {"
            },
            {
              "lineno": 62,
              "line": "        if (config.trailing && timer.isNone()) {"
            },
            {
              "lineno": 63,
              "line": "            // 这里置为true，是考虑到只有trailing没有leading的情况。假设任务已执行一次"
            },
            {
              "lineno": 64,
              "line": "            firstRunTask = true"
            },
            {
              "lineno": 65,
              "line": "            lastRunTaskTime = getNowTime()"
            },
            {
              "lineno": 66,
              "line": "            // 启动timer"
            },
            {
              "lineno": 67,
              "line": "            timer = Timer.after(config.interval) {"
            },
            {
              "lineno": 68,
              "line": "                let now = getNowTime()"
            },
            {
              "lineno": 69,
              "line": ""
            },
            {
              "lineno": 70,
              "line": "                if (throttle) {"
            },
            {
              "lineno": 71,
              "line": "                    runTask()"
            },
            {
              "lineno": 72,
              "line": "                    if (now - lastCallTime > config.interval) {"
            },
            {
              "lineno": 73,
              "line": "                        cancel()"
            },
            {
              "lineno": 74,
              "line": "                        return None"
            },
            {
              "lineno": 75,
              "line": "                    } else {"
            },
            {
              "lineno": 76,
              "line": "                        return config.interval"
            },
            {
              "lineno": 77,
              "line": "                    }"
            },
            {
              "lineno": 78,
              "line": "                } else {"
            },
            {
              "lineno": 79,
              "line": "                    if (now - lastCallTime > config.interval) {"
            },
            {
              "lineno": 80,
              "line": "                        runTask()"
            },
            {
              "lineno": 81,
              "line": "                        // Timer置None，重新计时"
            },
            {
              "lineno": 82,
              "line": "                        cancel()"
            },
            {
              "lineno": 83,
              "line": "                        // 返回None，让timer生效"
            },
            {
              "lineno": 84,
              "line": "                        return None"
            },
            {
              "lineno": 85,
              "line": "                    } else {"
            },
            {
              "lineno": 86,
              "line": "                        // 定时器距离上次调用call方法的时间间隔"
            },
            {
              "lineno": 87,
              "line": "                        let delta = now - lastCallTime"
            },
            {
              "lineno": 88,
              "line": "                        // 返回从上次点击后到下一个interval的时间"
            },
            {
              "lineno": 89,
              "line": "                        return config.interval - delta"
            },
            {
              "lineno": 90,
              "line": "                    }"
            },
            {
              "lineno": 91,
              "line": "                }"
            },
            {
              "lineno": 92,
              "line": "            }"
            },
            {
              "lineno": 93,
              "line": "        }"
            },
            {
              "lineno": 94,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 61,
              "end_line": 61,
              "label": "    private func dealTrailingCall() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 62,
                  "end_line": 62,
                  "label": "        if (config.trailing && timer.isNone()) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 63,
                      "end_line": 65,
                      "label": "            // 这里置为true，是考虑到只有trailing没有leading的情况。假设任务已执行一次\n            firstRunTask = true\n            lastRunTaskTime = getNowTime()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 66,
                          "end_line": 67,
                          "label": "            // 启动timer\n            timer = Timer.after(config.interval) {",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 68,
                              "end_line": 68,
                              "label": "                let now = getNowTime()",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 70,
                                  "end_line": 70,
                                  "label": "                if (throttle) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 71,
                                      "end_line": 71,
                                      "label": "                    runTask()",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 72,
                                          "end_line": 72,
                                          "label": "                    if (now - lastCallTime > config.interval) {",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 73,
                                              "end_line": 74,
                                              "label": "                        cancel()\n                        return None",
                                              "successors": []
                                            },
                                            {
                                              "id": 10,
                                              "start_line": 75,
                                              "end_line": 76,
                                              "label": "                    } else {\n                        return config.interval",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 11,
                                      "start_line": 78,
                                      "end_line": 78,
                                      "label": "                } else {",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "start_line": 79,
                                          "end_line": 79,
                                          "label": "                    if (now - lastCallTime > config.interval) {",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "start_line": 80,
                                              "end_line": 82,
                                              "label": "                        runTask()\n                        // Timer置None，重新计时\n                        cancel()",
                                              "successors": [
                                                {
                                                  "id": 14,
                                                  "start_line": 83,
                                                  "end_line": 84,
                                                  "label": "                        // 返回None，让timer生效\n                        return None",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 15,
                                              "start_line": 85,
                                              "end_line": 90,
                                              "label": "                    } else {\n                        // 定时器距离上次调用call方法的时间间隔\n                        let delta = now - lastCallTime\n                        // 返回从上次点击后到下一个interval的时间\n                        return config.interval - delta\n                    }",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 16,
                              "start_line": 91,
                              "end_line": 92,
                              "label": "                }\n            }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 17,
              "start_line": 93,
              "end_line": 94,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "call",
          "type": "function",
          "start_line": 96,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 96,
              "line": "    public func call(): Unit {"
            },
            {
              "lineno": 97,
              "line": "        this.dealLeadingCall()"
            },
            {
              "lineno": 98,
              "line": "        this.dealTrailingCall()"
            },
            {
              "lineno": 99,
              "line": "        lastCallTime = getNowTime()"
            },
            {
              "lineno": 100,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 96,
              "end_line": 99,
              "label": "    public func call(): Unit {\n        this.dealLeadingCall()\n        this.dealTrailingCall()\n        lastCallTime = getNowTime()",
              "successors": []
            }
          ]
        },
        {
          "name": "cancel",
          "type": "function",
          "start_line": 102,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 102,
              "line": "    public func cancel(): Unit {"
            },
            {
              "lineno": 103,
              "line": "        timer?.cancel()"
            },
            {
              "lineno": 104,
              "line": "        timer = None"
            },
            {
              "lineno": 105,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 102,
              "end_line": 105,
              "label": "    public func cancel(): Unit {\n        timer?.cancel()\n        timer = None\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "runTask",
          "type": "function",
          "start_line": 107,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 107,
              "line": "    private func runTask() {"
            },
            {
              "lineno": 108,
              "line": "        task()"
            },
            {
              "lineno": 109,
              "line": "        firstRunTask = true"
            },
            {
              "lineno": 110,
              "line": "        lastRunTaskTime = getNowTime()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 107,
              "end_line": 110,
              "label": "    private func runTask() {\n        task()\n        firstRunTask = true\n        lastRunTaskTime = getNowTime()",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public class Repeater {"
        },
        {
          "lineno": 7,
          "line": "    private var lastCallTime: MonoTime = getNowTime()"
        },
        {
          "lineno": 8,
          "line": "    private var lastRunTaskTime: MonoTime = getNowTime()"
        },
        {
          "lineno": 9,
          "line": "    private var firstRunTask: Bool = false"
        },
        {
          "lineno": 10,
          "line": "    // 定时器，只有trailing才会使用"
        },
        {
          "lineno": 11,
          "line": "    private var timer: ?Timer = None"
        },
        {
          "lineno": 12,
          "line": ""
        },
        {
          "lineno": 13,
          "line": "    // 配置和任务"
        },
        {
          "lineno": 14,
          "line": "    private let config: RepeaterConfig"
        },
        {
          "lineno": 15,
          "line": "    private let task: RepeaterTask"
        },
        {
          "lineno": 16,
          "line": "    private let throttle: Bool"
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 29,
          "line": "    // release条件下为空实现"
        },
        {
          "lineno": 30,
          "line": "    @When[!debug]"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    // debug下实现具体逻辑"
        },
        {
          "lineno": 34,
          "line": "    @When[debug]"
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 41,
          "line": "    // 是否可以运行任务"
        },
        {
          "lineno": 53,
          "line": ""
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 95,
          "line": ""
        },
        {
          "lineno": 101,
          "line": ""
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 111,
          "line": "    }"
        },
        {
          "lineno": 112,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 17,
          "label": "public class Repeater {\n    private var lastCallTime: MonoTime = getNowTime()\n    private var lastRunTaskTime: MonoTime = getNowTime()\n    private var firstRunTask: Bool = false\n    // 定时器，只有trailing才会使用\n    private var timer: ?Timer = None\n\n    // 配置和任务\n    private let config: RepeaterConfig\n    private let task: RepeaterTask\n    private let throttle: Bool\n",
          "successors": [
            {
              "id": 2,
              "start_line": 29,
              "end_line": 30,
              "label": "// release条件下为空实现\n    @When[!debug]\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 33,
                  "end_line": 34,
                  "label": "// debug下实现具体逻辑\n    @When[debug]\n",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 41,
                      "end_line": 41,
                      "label": "// 是否可以运行任务\n",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 111,
                          "end_line": 112,
                          "label": "    }\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 2,
      "line": "package cj_debounce_throttle.repeater"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "public import std.sync.Timer"
    },
    {
      "lineno": 5,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 2,
      "end_line": 5,
      "label": "package cj_debounce_throttle.repeater\n\npublic import std.sync.Timer\n",
      "successors": []
    }
  ]
}