{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 142,
  "functions": [
    {
      "name": "getRubyTOKENFromStr",
      "type": "function",
      "start_line": 2,
      "end_line": 142,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "func getRubyTOKENFromStr(str: String): RUBYTOKEN {"
        },
        {
          "lineno": 3,
          "line": "    let rubyTypeStr: String = str"
        },
        {
          "lineno": 4,
          "line": "    var token: RUBYTOKEN = match (rubyTypeStr) {"
        },
        {
          "lineno": 5,
          "line": "        case \"integer\" | \"float\" | \"i\" | \"ri\" => RUBYTOKEN.NUMBER_LITERAL"
        },
        {
          "lineno": 6,
          "line": "        case \"instance_variable\" | \"class_variable\" => RUBYTOKEN.INSTANCE_VARIABLE"
        },
        {
          "lineno": 7,
          "line": "        case \"alias\" => RUBYTOKEN.ALIAS"
        },
        {
          "lineno": 8,
          "line": "        case \"super\" => RUBYTOKEN.SUPER"
        },
        {
          "lineno": 9,
          "line": "        case \"self\" => RUBYTOKEN.SELF"
        },
        {
          "lineno": 10,
          "line": "        case \"undef\" => RUBYTOKEN.UNDEF"
        },
        {
          "lineno": 11,
          "line": "        case \"class\" => RUBYTOKEN.CLASS"
        },
        {
          "lineno": 12,
          "line": "        case \"def\" => RUBYTOKEN.DEF"
        },
        {
          "lineno": 13,
          "line": "        case \"end\" => RUBYTOKEN.END"
        },
        {
          "lineno": 14,
          "line": "        case \"module\" => RUBYTOKEN.MODULE"
        },
        {
          "lineno": 15,
          "line": "        case \"return\" => RUBYTOKEN.RETURN"
        },
        {
          "lineno": 16,
          "line": "        case \"and\" => RUBYTOKEN.AND"
        },
        {
          "lineno": 17,
          "line": "        case \"begin\" | \"BEGIN\" => RUBYTOKEN.BEGIN"
        },
        {
          "lineno": 18,
          "line": "        case \"break\" => RUBYTOKEN.BREAK"
        },
        {
          "lineno": 19,
          "line": "        case \"do\" => RUBYTOKEN.DO"
        },
        {
          "lineno": 20,
          "line": "        case \"ensure\" => RUBYTOKEN.ENSURE"
        },
        {
          "lineno": 21,
          "line": "        case \"for\" => RUBYTOKEN.FOR"
        },
        {
          "lineno": 22,
          "line": "        case \"in\" => RUBYTOKEN.IN"
        },
        {
          "lineno": 23,
          "line": "        case \"next\" => RUBYTOKEN.NEXT"
        },
        {
          "lineno": 24,
          "line": "        case \"not\" => RUBYTOKEN.NOT"
        },
        {
          "lineno": 25,
          "line": "        case \"or\" => RUBYTOKEN.OR"
        },
        {
          "lineno": 26,
          "line": "        case \"redo\" => RUBYTOKEN.REDO"
        },
        {
          "lineno": 27,
          "line": "        case \"rescue\" => RUBYTOKEN.RESCUE"
        },
        {
          "lineno": 28,
          "line": "        case \"retry\" => RUBYTOKEN.RETRY"
        },
        {
          "lineno": 29,
          "line": "        case \"yield\" => RUBYTOKEN.YIELD"
        },
        {
          "lineno": 30,
          "line": "        case \"until\" => RUBYTOKEN.UNTIL"
        },
        {
          "lineno": 31,
          "line": "        case \"unless\" => RUBYTOKEN.UNLESS"
        },
        {
          "lineno": 32,
          "line": "        case \"while\" => RUBYTOKEN.WHILE"
        },
        {
          "lineno": 33,
          "line": "        case \"if\" => RUBYTOKEN.IF"
        },
        {
          "lineno": 34,
          "line": "        case \"case\" => RUBYTOKEN.CASE"
        },
        {
          "lineno": 35,
          "line": "        case \"when\" => RUBYTOKEN.WHEN"
        },
        {
          "lineno": 36,
          "line": "        case \"then\" => RUBYTOKEN.THEN"
        },
        {
          "lineno": 37,
          "line": "        case \"else\" => RUBYTOKEN.ELSE"
        },
        {
          "lineno": 38,
          "line": "        case \"elsif\" => RUBYTOKEN.ELSIF"
        },
        {
          "lineno": 39,
          "line": "        case \"end\" | \"END\" => RUBYTOKEN.END"
        },
        {
          "lineno": 40,
          "line": "        case \"until\" => RUBYTOKEN.UNTIL"
        },
        {
          "lineno": 41,
          "line": "        case \"constant\" => RUBYTOKEN.CONSTANT"
        },
        {
          "lineno": 42,
          "line": "        case \"abort\" |"
        },
        {
          "lineno": 43,
          "line": "           \"catch\" |"
        },
        {
          "lineno": 44,
          "line": "           \"chomp\" |"
        },
        {
          "lineno": 45,
          "line": "           \"chop\" |"
        },
        {
          "lineno": 46,
          "line": "           \"eval\" |"
        },
        {
          "lineno": 47,
          "line": "           \"exec\" |"
        },
        {
          "lineno": 48,
          "line": "           \"exit\" |"
        },
        {
          "lineno": 49,
          "line": "           \"fail\" |"
        },
        {
          "lineno": 50,
          "line": "           \"fork\" |"
        },
        {
          "lineno": 51,
          "line": "           \"format\" |"
        },
        {
          "lineno": 52,
          "line": "           \"gets\" |"
        },
        {
          "lineno": 53,
          "line": "           \"gsub\" |"
        },
        {
          "lineno": 54,
          "line": "           \"Integer\" |"
        },
        {
          "lineno": 55,
          "line": "           \"proc\" |"
        },
        {
          "lineno": 56,
          "line": "           \"lambda\" |"
        },
        {
          "lineno": 57,
          "line": "           \"load\" |"
        },
        {
          "lineno": 58,
          "line": "           \"loop\" |"
        },
        {
          "lineno": 59,
          "line": "           \"open\" |"
        },
        {
          "lineno": 60,
          "line": "           \"p\" |"
        },
        {
          "lineno": 61,
          "line": "           \"print\" |"
        },
        {
          "lineno": 62,
          "line": "           \"proc\" |"
        },
        {
          "lineno": 63,
          "line": "           \"puts\" |"
        },
        {
          "lineno": 64,
          "line": "           \"putc\" |"
        },
        {
          "lineno": 65,
          "line": "           \"pp\" |"
        },
        {
          "lineno": 66,
          "line": "           \"raise\" |"
        },
        {
          "lineno": 67,
          "line": "           \"fail\" |"
        },
        {
          "lineno": 68,
          "line": "           \"rand\" |"
        },
        {
          "lineno": 69,
          "line": "           \"readline\" |"
        },
        {
          "lineno": 70,
          "line": "           \"readlines\" |"
        },
        {
          "lineno": 71,
          "line": "           \"require\" |"
        },
        {
          "lineno": 72,
          "line": "           \"scan\" |"
        },
        {
          "lineno": 73,
          "line": "           \"select\" |"
        },
        {
          "lineno": 74,
          "line": "           \"sleep\" |"
        },
        {
          "lineno": 75,
          "line": "           \"srand\" |"
        },
        {
          "lineno": 76,
          "line": "           \"system\" |"
        },
        {
          "lineno": 77,
          "line": "           \"sub\" |"
        },
        {
          "lineno": 78,
          "line": "           \"throw\" => RUBYTOKEN.METHOD"
        },
        {
          "lineno": 79,
          "line": "        case \"nil\" => RUBYTOKEN.NIL"
        },
        {
          "lineno": 80,
          "line": "        case \"true\" => RUBYTOKEN.TRUE"
        },
        {
          "lineno": 81,
          "line": "        case \"false\" => RUBYTOKEN.FALSE"
        },
        {
          "lineno": 82,
          "line": "        case \"__ENCODING__\" | \"encoding\" => RUBYTOKEN._ENCODING"
        },
        {
          "lineno": 83,
          "line": "        case \"__LINE__\" | \"line\"=> RUBYTOKEN._LINE"
        },
        {
          "lineno": 84,
          "line": "        case \"__FILE__\" | \"file\" => RUBYTOKEN._FILE"
        },
        {
          "lineno": 85,
          "line": "        case \"defined?\" => RUBYTOKEN.DEFINED"
        },
        {
          "lineno": 86,
          "line": "        case \"(\" | \"%w(\" => RUBYTOKEN.LPAREN"
        },
        {
          "lineno": 87,
          "line": "        case \")\" => RUBYTOKEN.RPAREN"
        },
        {
          "lineno": 88,
          "line": "        case \"{\" | \"#{\" => RUBYTOKEN.LBRACE"
        },
        {
          "lineno": 89,
          "line": "        case \"}\" => RUBYTOKEN.RBRACE"
        },
        {
          "lineno": 90,
          "line": "        case \"[\" | \"[]\" | \"[]=\" => RUBYTOKEN.LBRACK"
        },
        {
          "lineno": 91,
          "line": "        case \"]\" => RUBYTOKEN.RBRACK"
        },
        {
          "lineno": 92,
          "line": "        case \"+\" => RUBYTOKEN.PLUS"
        },
        {
          "lineno": 93,
          "line": "        case \"-\" => RUBYTOKEN.MINUS"
        },
        {
          "lineno": 94,
          "line": "        case \"*\" => RUBYTOKEN.MULT"
        },
        {
          "lineno": 95,
          "line": "        case \"**\" => RUBYTOKEN.POW"
        },
        {
          "lineno": 96,
          "line": "        case \"/\" => RUBYTOKEN.DIV"
        },
        {
          "lineno": 97,
          "line": "        case \"%\" | \"%i(\" => RUBYTOKEN.MOD"
        },
        {
          "lineno": 98,
          "line": "        case \"<<\" => RUBYTOKEN.LTLT"
        },
        {
          "lineno": 99,
          "line": "        case \">>\" => RUBYTOKEN.GTGT"
        },
        {
          "lineno": 100,
          "line": "        case \"&\" | \"&.\"=> RUBYTOKEN.AND"
        },
        {
          "lineno": 101,
          "line": "        case \"|\" => RUBYTOKEN.OR"
        },
        {
          "lineno": 102,
          "line": "        case \"!\" => RUBYTOKEN.NOT"
        },
        {
          "lineno": 103,
          "line": "        case \"NOT\" => RUBYTOKEN.NOT_KEYWORD"
        },
        {
          "lineno": 104,
          "line": "        case \"&&\" | \"&&=\" => RUBYTOKEN.ANDAND"
        },
        {
          "lineno": 105,
          "line": "        case \"AND\" => RUBYTOKEN.AND_KEYWORD"
        },
        {
          "lineno": 106,
          "line": "        case \"||\" | \"||=\"=> RUBYTOKEN.OROR"
        },
        {
          "lineno": 107,
          "line": "        case \"OR\" => RUBYTOKEN.OR_KEYWORD"
        },
        {
          "lineno": 108,
          "line": "        case \"^\"  => RUBYTOKEN.XOR"
        },
        {
          "lineno": 109,
          "line": "        case \"~\" | \"~@\" => RUBYTOKEN.TILDE"
        },
        {
          "lineno": 110,
          "line": "        case \"<\"  => RUBYTOKEN.LT"
        },
        {
          "lineno": 111,
          "line": "        case \">\" | \"->\"  => RUBYTOKEN.GT"
        },
        {
          "lineno": 112,
          "line": "        case \"<=\" => RUBYTOKEN.LTEQ"
        },
        {
          "lineno": 113,
          "line": "        case \">=\" | \"=>\" => RUBYTOKEN.GTEQ"
        },
        {
          "lineno": 114,
          "line": "        case \"==\" | \"===\"=> RUBYTOKEN.EQEQ"
        },
        {
          "lineno": 115,
          "line": "        case \"!=\" | \"!~\" => RUBYTOKEN.NOTEQ"
        },
        {
          "lineno": 116,
          "line": "        case \"<>\" | \"<=>\"=> RUBYTOKEN.LTGT"
        },
        {
          "lineno": 117,
          "line": "        case \",\" => RUBYTOKEN.COMMA"
        },
        {
          "lineno": 118,
          "line": "        case \":\" | \"::\" => RUBYTOKEN.COLON"
        },
        {
          "lineno": 119,
          "line": "        case \".\" => RUBYTOKEN.DOT"
        },
        {
          "lineno": 120,
          "line": "        case \"..\" | \"...\" => RUBYTOKEN.RANGE"
        },
        {
          "lineno": 121,
          "line": "        case \"`\"  => RUBYTOKEN.BACKTICK"
        },
        {
          "lineno": 122,
          "line": "        case \"=\" | \"=~\"=> RUBYTOKEN.EQ"
        },
        {
          "lineno": 123,
          "line": "        case \";\" => RUBYTOKEN.SEMICOLON"
        },
        {
          "lineno": 124,
          "line": "        case \"+=\" | \"+@\" => RUBYTOKEN.PLUSEQ"
        },
        {
          "lineno": 125,
          "line": "        case \"-=\" | \"-@\" => RUBYTOKEN.MINUSEQ"
        },
        {
          "lineno": 126,
          "line": "        case \"*=\" => RUBYTOKEN.MULTEQ"
        },
        {
          "lineno": 127,
          "line": "        case \"/=\"  => RUBYTOKEN.DIVEQ"
        },
        {
          "lineno": 128,
          "line": "        case \"%=\"  => RUBYTOKEN.MODEQ"
        },
        {
          "lineno": 129,
          "line": "        case \"&=\"  => RUBYTOKEN.ANDEQ"
        },
        {
          "lineno": 130,
          "line": "        case \"|=\"  => RUBYTOKEN.OREQ"
        },
        {
          "lineno": 131,
          "line": "        case \"^=\"  => RUBYTOKEN.XOREQ"
        },
        {
          "lineno": 132,
          "line": "        case \">>=\"  => RUBYTOKEN.GTGTEQ"
        },
        {
          "lineno": 133,
          "line": "        case \"<<=\"  => RUBYTOKEN.LTLTEQ"
        },
        {
          "lineno": 134,
          "line": "        case \"**=\"  => RUBYTOKEN.POWEQ"
        },
        {
          "lineno": 135,
          "line": "        case \"identifier\" => RUBYTOKEN.IDENTIFIER"
        },
        {
          "lineno": 136,
          "line": "        case \"comment\" => RUBYTOKEN.COMMENT"
        },
        {
          "lineno": 137,
          "line": "        case \"simple_symbol\" | \"string_content\" | \"heredoc_content\" | \"heredoc_beginning\" | \"heredoc_end\" | \"string\" | \"\\\"\"=> RUBYTOKEN.QUOTED_STRING"
        },
        {
          "lineno": 138,
          "line": "        case \"escape_sequence\" => RUBYTOKEN.WHITESPACE"
        },
        {
          "lineno": 139,
          "line": "        case _ => RUBYTOKEN.BAD_CHARACTER"
        },
        {
          "lineno": 140,
          "line": "    }"
        },
        {
          "lineno": 141,
          "line": "    token"
        },
        {
          "lineno": 142,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 3,
          "label": "func getRubyTOKENFromStr(str: String): RUBYTOKEN {\n    let rubyTypeStr: String = str",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 139,
              "label": "var token: RUBYTOKEN = match (rubyTypeStr) {\n        case \"integer\" | \"float\" | \"i\" | \"ri\" => RUBYTOKEN.NUMBER_LITERAL\n        case \"instance_variable\" | \"class_variable\" => RUBYTOKEN.INSTANCE_VARIABLE\n        case \"alias\" => RUBYTOKEN.ALIAS\n        case \"super\" => RUBYTOKEN.SUPER\n        case \"self\" => RUBYTOKEN.SELF\n        case \"undef\" => RUBYTOKEN.UNDEF\n        case \"class\" => RUBYTOKEN.CLASS\n        case \"def\" => RUBYTOKEN.DEF\n        case \"end\" => RUBYTOKEN.END\n        case \"module\" => RUBYTOKEN.MODULE\n        case \"return\" => RUBYTOKEN.RETURN\n        case \"and\" => RUBYTOKEN.AND\n        case \"begin\" | \"BEGIN\" => RUBYTOKEN.BEGIN\n        case \"break\" => RUBYTOKEN.BREAK\n        case \"do\" => RUBYTOKEN.DO\n        case \"ensure\" => RUBYTOKEN.ENSURE\n        case \"for\" => RUBYTOKEN.FOR\n        case \"in\" => RUBYTOKEN.IN\n        case \"next\" => RUBYTOKEN.NEXT\n        case \"not\" => RUBYTOKEN.NOT\n        case \"or\" => RUBYTOKEN.OR\n        case \"redo\" => RUBYTOKEN.REDO\n        case \"rescue\" => RUBYTOKEN.RESCUE\n        case \"retry\" => RUBYTOKEN.RETRY\n        case \"yield\" => RUBYTOKEN.YIELD\n        case \"until\" => RUBYTOKEN.UNTIL\n        case \"unless\" => RUBYTOKEN.UNLESS\n        case \"while\" => RUBYTOKEN.WHILE\n        case \"if\" => RUBYTOKEN.IF\n        case \"case\" => RUBYTOKEN.CASE\n        case \"when\" => RUBYTOKEN.WHEN\n        case \"then\" => RUBYTOKEN.THEN\n        case \"else\" => RUBYTOKEN.ELSE\n        case \"elsif\" => RUBYTOKEN.ELSIF\n        case \"end\" | \"END\" => RUBYTOKEN.END\n        case \"until\" => RUBYTOKEN.UNTIL\n        case \"constant\" => RUBYTOKEN.CONSTANT\n        case \"abort\" |\n           \"catch\" |\n           \"chomp\" |\n           \"chop\" |\n           \"eval\" |\n           \"exec\" |\n           \"exit\" |\n           \"fail\" |\n           \"fork\" |\n           \"format\" |\n           \"gets\" |\n           \"gsub\" |\n           \"Integer\" |\n           \"proc\" |\n           \"lambda\" |\n           \"load\" |\n           \"loop\" |\n           \"open\" |\n           \"p\" |\n           \"print\" |\n           \"proc\" |\n           \"puts\" |\n           \"putc\" |\n           \"pp\" |\n           \"raise\" |\n           \"fail\" |\n           \"rand\" |\n           \"readline\" |\n           \"readlines\" |\n           \"require\" |\n           \"scan\" |\n           \"select\" |\n           \"sleep\" |\n           \"srand\" |\n           \"system\" |\n           \"sub\" |\n           \"throw\" => RUBYTOKEN.METHOD\n        case \"nil\" => RUBYTOKEN.NIL\n        case \"true\" => RUBYTOKEN.TRUE\n        case \"false\" => RUBYTOKEN.FALSE\n        case \"__ENCODING__\" | \"encoding\" => RUBYTOKEN._ENCODING\n        case \"__LINE__\" | \"line\"=> RUBYTOKEN._LINE\n        case \"__FILE__\" | \"file\" => RUBYTOKEN._FILE\n        case \"defined?\" => RUBYTOKEN.DEFINED\n        case \"(\" | \"%w(\" => RUBYTOKEN.LPAREN\n        case \")\" => RUBYTOKEN.RPAREN\n        case \"{\" | \"#{\" => RUBYTOKEN.LBRACE\n        case \"}\" => RUBYTOKEN.RBRACE\n        case \"[\" | \"[]\" | \"[]=\" => RUBYTOKEN.LBRACK\n        case \"]\" => RUBYTOKEN.RBRACK\n        case \"+\" => RUBYTOKEN.PLUS\n        case \"-\" => RUBYTOKEN.MINUS\n        case \"*\" => RUBYTOKEN.MULT\n        case \"**\" => RUBYTOKEN.POW\n        case \"/\" => RUBYTOKEN.DIV\n        case \"%\" | \"%i(\" => RUBYTOKEN.MOD\n        case \"<<\" => RUBYTOKEN.LTLT\n        case \">>\" => RUBYTOKEN.GTGT\n        case \"&\" | \"&.\"=> RUBYTOKEN.AND\n        case \"|\" => RUBYTOKEN.OR\n        case \"!\" => RUBYTOKEN.NOT\n        case \"NOT\" => RUBYTOKEN.NOT_KEYWORD\n        case \"&&\" | \"&&=\" => RUBYTOKEN.ANDAND\n        case \"AND\" => RUBYTOKEN.AND_KEYWORD\n        case \"||\" | \"||=\"=> RUBYTOKEN.OROR\n        case \"OR\" => RUBYTOKEN.OR_KEYWORD\n        case \"^\"  => RUBYTOKEN.XOR\n        case \"~\" | \"~@\" => RUBYTOKEN.TILDE\n        case \"<\"  => RUBYTOKEN.LT\n        case \">\" | \"->\"  => RUBYTOKEN.GT\n        case \"<=\" => RUBYTOKEN.LTEQ\n        case \">=\" | \"=>\" => RUBYTOKEN.GTEQ\n        case \"==\" | \"===\"=> RUBYTOKEN.EQEQ\n        case \"!=\" | \"!~\" => RUBYTOKEN.NOTEQ\n        case \"<>\" | \"<=>\"=> RUBYTOKEN.LTGT\n        case \",\" => RUBYTOKEN.COMMA\n        case \":\" | \"::\" => RUBYTOKEN.COLON\n        case \".\" => RUBYTOKEN.DOT\n        case \"..\" | \"...\" => RUBYTOKEN.RANGE\n        case \"`\"  => RUBYTOKEN.BACKTICK\n        case \"=\" | \"=~\"=> RUBYTOKEN.EQ\n        case \";\" => RUBYTOKEN.SEMICOLON\n        case \"+=\" | \"+@\" => RUBYTOKEN.PLUSEQ\n        case \"-=\" | \"-@\" => RUBYTOKEN.MINUSEQ\n        case \"*=\" => RUBYTOKEN.MULTEQ\n        case \"/=\"  => RUBYTOKEN.DIVEQ\n        case \"%=\"  => RUBYTOKEN.MODEQ\n        case \"&=\"  => RUBYTOKEN.ANDEQ\n        case \"|=\"  => RUBYTOKEN.OREQ\n        case \"^=\"  => RUBYTOKEN.XOREQ\n        case \">>=\"  => RUBYTOKEN.GTGTEQ\n        case \"<<=\"  => RUBYTOKEN.LTLTEQ\n        case \"**=\"  => RUBYTOKEN.POWEQ\n        case \"identifier\" => RUBYTOKEN.IDENTIFIER\n        case \"comment\" => RUBYTOKEN.COMMENT\n        case \"simple_symbol\" | \"string_content\" | \"heredoc_content\" | \"heredoc_beginning\" | \"heredoc_end\" | \"string\" | \"\\\"\"=> RUBYTOKEN.QUOTED_STRING\n        case \"escape_sequence\" => RUBYTOKEN.WHITESPACE\n        case _ => RUBYTOKEN.BAD_CHARACTER\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 141,
                  "end_line": 141,
                  "label": "token",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 142,
                      "end_line": 142,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package editorkit.language_ruby.lexer"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package editorkit.language_ruby.lexer",
      "successors": []
    }
  ]
}