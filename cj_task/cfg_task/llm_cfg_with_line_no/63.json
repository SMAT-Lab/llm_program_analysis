{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [],
  "classes": [
    {
      "name": "Page",
      "type": "class",
      "start_line": 6,
      "end_line": 62,
      "functions": [
        {
          "name": "unzip",
          "type": "function",
          "start_line": 13,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    public static func unzip(file: String, id: String) {"
            },
            {
              "lineno": 14,
              "line": "        let argument: Array<String> = [\"e\", \"-y\", file, \"-o./data/cache/${id}\"]"
            },
            {
              "lineno": 15,
              "line": "        Process.run(\"7z\", argument, stdOut: Discard)"
            },
            {
              "lineno": 16,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 16,
              "label": "    public static func unzip(file: String, id: String) {\n        let argument: Array<String> = [\"e\", \"-y\", file, \"-o./data/cache/${id}\"]\n        Process.run(\"7z\", argument, stdOut: Discard)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "identify",
          "type": "function",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    public static func identify(path: String) {"
            },
            {
              "lineno": 19,
              "line": "        let output = Process.runOutput(\"identify\", path)"
            },
            {
              "lineno": 20,
              "line": "        return String.fromUtf8(output[1]).split(\" \")"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 20,
              "label": "    public static func identify(path: String) {\n        let output = Process.runOutput(\"identify\", path)\n        return String.fromUtf8(output[1]).split(\" \")",
              "successors": []
            }
          ]
        },
        {
          "name": "getPage",
          "type": "function",
          "start_line": 23,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    public static func getPage(id: String, page: Int64, convert: String) {"
            },
            {
              "lineno": 24,
              "line": "        var pageImage = Page()"
            },
            {
              "lineno": 25,
              "line": "        let url = baseConfig.getFileURL(Books.getFile(id))"
            },
            {
              "lineno": 26,
              "line": "        if (!exists(\"./data/cache/${id}/\")) {"
            },
            {
              "lineno": 27,
              "line": "            unzip(url, id)"
            },
            {
              "lineno": 28,
              "line": "        }"
            },
            {
              "lineno": 29,
              "line": "        for (file in Directory.readFrom(\"data/cache/${id}/\")) {"
            },
            {
              "lineno": 30,
              "line": "            var filename = file.path.fileNameWithoutExtension"
            },
            {
              "lineno": 31,
              "line": "            let r = Regex(\"\\\\d+\")"
            },
            {
              "lineno": 32,
              "line": "            let matchData = r.matcher(filename).find().getOrThrow().matchStr()"
            },
            {
              "lineno": 33,
              "line": "            if (Int64.parse(matchData) == page) {"
            },
            {
              "lineno": 34,
              "line": "                pageImage.path = file.path.toString()"
            },
            {
              "lineno": 35,
              "line": "                let info = identify(pageImage.path)"
            },
            {
              "lineno": 36,
              "line": "                pageImage.format = info[1].toAsciiLower()"
            },
            {
              "lineno": 37,
              "line": "                pageImage.width = Int64.parse(info[2].split(\"x\")[0])"
            },
            {
              "lineno": 38,
              "line": "                pageImage.height = Int64.parse(info[2].split(\"x\")[1])"
            },
            {
              "lineno": 39,
              "line": "                pageImage.convert(convert)"
            },
            {
              "lineno": 40,
              "line": "                return pageImage"
            },
            {
              "lineno": 41,
              "line": "            }"
            },
            {
              "lineno": 42,
              "line": "        }"
            },
            {
              "lineno": 43,
              "line": "        return pageImage"
            },
            {
              "lineno": 44,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 23,
              "end_line": 25,
              "label": "    public static func getPage(id: String, page: Int64, convert: String) {\n        var pageImage = Page()\n        let url = baseConfig.getFileURL(Books.getFile(id))",
              "successors": [
                {
                  "id": 2,
                  "start_line": 26,
                  "end_line": 28,
                  "label": "        if (!exists(\"./data/cache/${id}/\")) {\n            unzip(url, id)\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 29,
                      "end_line": 42,
                      "label": "        for (file in Directory.readFrom(\"data/cache/${id}/\")) {\n            var filename = file.path.fileNameWithoutExtension\n            let r = Regex(\"\\\\d+\")\n            let matchData = r.matcher(filename).find().getOrThrow().matchStr()\n            if (Int64.parse(matchData) == page) {\n                pageImage.path = file.path.toString()\n                let info = identify(pageImage.path)\n                pageImage.format = info[1].toAsciiLower()\n                pageImage.width = Int64.parse(info[2].split(\"x\")[0])\n                pageImage.height = Int64.parse(info[2].split(\"x\")[1])\n                pageImage.convert(convert)\n                return pageImage\n            }\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 43,
                          "end_line": 43,
                          "label": "        return pageImage",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readFile",
          "type": "function",
          "start_line": 45,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    public func readFile() {"
            },
            {
              "lineno": 46,
              "line": "        this.data.appendAll(File.readFrom(this.path))"
            },
            {
              "lineno": 47,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 45,
              "end_line": 47,
              "label": "    public func readFile() {\n        this.data.appendAll(File.readFrom(this.path))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "convert",
          "type": "function",
          "start_line": 49,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    func convert(type_u: String) {"
            },
            {
              "lineno": 50,
              "line": "        if (type_u == \"\") {"
            },
            {
              "lineno": 51,
              "line": "            return"
            },
            {
              "lineno": 52,
              "line": "        }"
            },
            {
              "lineno": 53,
              "line": "        if (this.format != type_u) {"
            },
            {
              "lineno": 54,
              "line": "            if (!exists(this.path.replace(\".${this.format}\", \".${type_u}\"))) {"
            },
            {
              "lineno": 55,
              "line": "                let argument: Array<String> = [this.path, this.path.replace(\".${this.format}\", \".${type_u}\")]"
            },
            {
              "lineno": 56,
              "line": "                Process.run(\"convert\", argument, stdOut: Discard)"
            },
            {
              "lineno": 57,
              "line": "            }"
            },
            {
              "lineno": 58,
              "line": "            this.path = this.path.replace(\".${this.format}\", \".${type_u}\")"
            },
            {
              "lineno": 59,
              "line": "            this.format = type_u"
            },
            {
              "lineno": 60,
              "line": "        }"
            },
            {
              "lineno": 61,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 49,
              "label": "    func convert(type_u: String) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 50,
                  "end_line": 51,
                  "label": "        if (type_u == \"\") {\n            return",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 53,
                  "end_line": 54,
                  "label": "        if (this.format != type_u) {\n            if (!exists(this.path.replace(\".${this.format}\", \".${type_u}\"))) {",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 55,
                      "end_line": 56,
                      "label": "                let argument: Array<String> = [this.path, this.path.replace(\".${this.format}\", \".${type_u}\")]\n                Process.run(\"convert\", argument, stdOut: Discard)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 58,
                  "end_line": 59,
                  "label": "            this.path = this.path.replace(\".${this.format}\", \".${type_u}\")\n            this.format = type_u",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public class Page {"
        },
        {
          "lineno": 7,
          "line": "    public var width: Int64 = 0"
        },
        {
          "lineno": 8,
          "line": "    public var height: Int64 = 0"
        },
        {
          "lineno": 9,
          "line": "    public var format: String = \"\""
        },
        {
          "lineno": 10,
          "line": "    var path: String = \"\""
        },
        {
          "lineno": 11,
          "line": "    public var data: ArrayList<Byte> = ArrayList<Byte>()"
        },
        {
          "lineno": 12,
          "line": ""
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 11,
          "label": "public class Page {\\n    public var width: Int64 = 0\\n    public var height: Int64 = 0\\n    public var format: String = \"\"\\n    var path: String = \"\"\\n    public var data: ArrayList<Byte> = ArrayList<Byte>()",
          "successors": [
            {
              "id": 2,
              "start_line": 62,
              "end_line": 62,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package opds_cj.data_stru"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.{process.*, fs.*, convert.*, regex.*, collection.*}"
    },
    {
      "lineno": 4,
      "line": "import opds_cj.config.baseConfig"
    },
    {
      "lineno": 5,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package opds_cj.data_stru",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 2,
      "end_line": 4,
      "label": "\nimport std.{process.*, fs.*, convert.*, regex.*, collection.*}\nimport opds_cj.config.baseConfig",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 5,
      "end_line": 5,
      "label": "",
      "successors": []
    }
  ]
}