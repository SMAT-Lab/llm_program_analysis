{
  "name": "enum_enhance",
  "type": "CFG",
  "start_line": 1,
  "end_line": 92,
  "functions": [],
  "classes": [
    {
      "name": "EquatableColor",
      "type": "enum",
      "start_line": 8,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "public enum EquatableColor {"
        },
        {
          "lineno": 9,
          "line": "    | Red"
        },
        {
          "lineno": 10,
          "line": "    | Yellow"
        },
        {
          "lineno": 11,
          "line": "    | Green(Bool)"
        },
        {
          "lineno": 12,
          "line": "    | Orange(Bool)"
        },
        {
          "lineno": 13,
          "line": "    | Blue(Rune)"
        },
        {
          "lineno": 14,
          "line": "    | Pink(Rune)"
        },
        {
          "lineno": 15,
          "line": "    | YCbCr(UInt8, Int32, Float64)"
        },
        {
          "lineno": 16,
          "line": "    | RGBA(Rune, Int32, Bool)"
        },
        {
          "lineno": 17,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 17,
          "label": "public enum EquatableColor {\n    | Red\n    | Yellow\n    | Green(Bool)\n    | Orange(Bool)\n    | Blue(Rune)\n    | Pink(Rune)\n    | YCbCr(UInt8, Int32, Float64)\n    | RGBA(Rune, Int32, Bool)\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "EqutableEnumTest",
      "type": "class",
      "start_line": 20,
      "end_line": 92,
      "functions": [
        {
          "name": "noArgTest",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    func noArgTest(): Unit {"
            },
            {
              "lineno": 23,
              "line": "        let red1 = EquatableColor.Red"
            },
            {
              "lineno": 24,
              "line": "        let red2 = EquatableColor.Red"
            },
            {
              "lineno": 25,
              "line": "        let yellow = EquatableColor.Yellow"
            },
            {
              "lineno": 26,
              "line": ""
            },
            {
              "lineno": 27,
              "line": "        @Expect(red1 == red2)"
            },
            {
              "lineno": 28,
              "line": "        @Expect(red1 != yellow)"
            },
            {
              "lineno": 29,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 29,
              "label": "    func noArgTest(): Unit {\n        let red1 = EquatableColor.Red\n        let red2 = EquatableColor.Red\n        let yellow = EquatableColor.Yellow\n\n        @Expect(red1 == red2)\n        @Expect(red1 != yellow)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "boolTest",
          "type": "function",
          "start_line": 32,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    func boolTest(): Unit {"
            },
            {
              "lineno": 33,
              "line": "        let green1 = EquatableColor.Green(true)"
            },
            {
              "lineno": 34,
              "line": "        let green2 = EquatableColor.Green(true)"
            },
            {
              "lineno": 35,
              "line": "        let green3 = EquatableColor.Green(false)"
            },
            {
              "lineno": 36,
              "line": "        let orange1 = EquatableColor.Orange(true)"
            },
            {
              "lineno": 37,
              "line": "        let orange2 = EquatableColor.Orange(false)"
            },
            {
              "lineno": 38,
              "line": ""
            },
            {
              "lineno": 39,
              "line": "        @Expect(green1 == green2)"
            },
            {
              "lineno": 40,
              "line": "        @Expect(green1 != green3)"
            },
            {
              "lineno": 41,
              "line": "        @Expect(green1 != orange1)"
            },
            {
              "lineno": 42,
              "line": "        @Expect(green1 != orange2)"
            },
            {
              "lineno": 43,
              "line": "        @Expect(green3 != orange1)"
            },
            {
              "lineno": 44,
              "line": "        @Expect(green3 != orange2)"
            },
            {
              "lineno": 45,
              "line": "        @Expect(orange1 != orange2)"
            },
            {
              "lineno": 46,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 32,
              "end_line": 46,
              "label": "    func boolTest(): Unit {\n        let green1 = EquatableColor.Green(true)\n        let green2 = EquatableColor.Green(true)\n        let green3 = EquatableColor.Green(false)\n        let orange1 = EquatableColor.Orange(true)\n        let orange2 = EquatableColor.Orange(false)\n\n        @Expect(green1 == green2)\n        @Expect(green1 != green3)\n        @Expect(green1 != orange1)\n        @Expect(green1 != orange2)\n        @Expect(green3 != orange1)\n        @Expect(green3 != orange2)\n        @Expect(orange1 != orange2)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "runeTest",
          "type": "function",
          "start_line": 49,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    func runeTest(): Unit {"
            },
            {
              "lineno": 50,
              "line": "        let blue1 = EquatableColor.Blue(r\"A\")"
            },
            {
              "lineno": 51,
              "line": "        let blue2 = EquatableColor.Blue(r\"A\")"
            },
            {
              "lineno": 52,
              "line": "        let blue3 = EquatableColor.Blue(r\"B\")"
            },
            {
              "lineno": 53,
              "line": "        let blue4 = EquatableColor.Blue(r\"\\\\\")"
            },
            {
              "lineno": 54,
              "line": "        let pink1 = EquatableColor.Pink(r\"A\")"
            },
            {
              "lineno": 55,
              "line": "        let pink2 = EquatableColor.Pink(r\"B\")"
            },
            {
              "lineno": 56,
              "line": "        let pink3 = EquatableColor.Pink(r\"\\\\\")"
            },
            {
              "lineno": 57,
              "line": "        "
            },
            {
              "lineno": 58,
              "line": "        @Expect(blue1 == blue2)"
            },
            {
              "lineno": 59,
              "line": "        @Expect(blue1 != blue3)"
            },
            {
              "lineno": 60,
              "line": "        @Expect(blue1 != pink1)"
            },
            {
              "lineno": 61,
              "line": "        @Expect(blue1 != pink2)"
            },
            {
              "lineno": 62,
              "line": "        @Expect(blue1 != blue4)"
            },
            {
              "lineno": 63,
              "line": "        @Expect(blue3 != pink1)"
            },
            {
              "lineno": 64,
              "line": "        @Expect(blue3 != pink2)"
            },
            {
              "lineno": 65,
              "line": "        @Expect(blue4 != pink3)"
            },
            {
              "lineno": 66,
              "line": "        @Expect(pink1 != pink2)"
            },
            {
              "lineno": 67,
              "line": "        @Expect(pink1 != blue4)"
            },
            {
              "lineno": 68,
              "line": "        @Expect(pink3 != blue4)"
            },
            {
              "lineno": 69,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 68,
              "label": "func runeTest(): Unit {\n let blue1 = EquatableColor.Blue(r\"A\")\n let blue2 = EquatableColor.Blue(r\"A\")\n let blue3 = EquatableColor.Blue(r\"B\")\n let blue4 = EquatableColor.Blue(r\"\\\\\")\n let pink1 = EquatableColor.Pink(r\"A\")\n let pink2 = EquatableColor.Pink(r\"B\")\n let pink3 = EquatableColor.Pink(r\"\\\\\")\n \n @Expect(blue1 == blue2)\n @Expect(blue1 != blue3)\n @Expect(blue1 != pink1)\n @Expect(blue1 != pink2)\n @Expect(blue1 != blue4)\n @Expect(blue3 != pink1)\n @Expect(blue3 != pink2)\n @Expect(blue4 != pink3)\n @Expect(pink1 != pink2)\n @Expect(pink1 != blue4)\n @Expect(pink3 != blue4)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 69,
                  "end_line": 69,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "nultiArgTest",
          "type": "function",
          "start_line": 72,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 72,
              "line": "    func nultiArgTest(): Unit {"
            },
            {
              "lineno": 73,
              "line": "        let ycbcr1 = EquatableColor.YCbCr(255, 1024, 0.5)"
            },
            {
              "lineno": 74,
              "line": "        let ycbcr2 = EquatableColor.YCbCr(255, 1024, 0.5)"
            },
            {
              "lineno": 75,
              "line": "        let ycbcr3 = EquatableColor.YCbCr(128, 2048, 0.75)"
            },
            {
              "lineno": 76,
              "line": "        "
            },
            {
              "lineno": 77,
              "line": "        let rgba1 = EquatableColor.RGBA(r\"A\", 1024, true)"
            },
            {
              "lineno": 78,
              "line": "        let rgba2 = EquatableColor.RGBA(r\"A\", 1024, true)"
            },
            {
              "lineno": 79,
              "line": "        let rgba3 = EquatableColor.RGBA(r\"B\", 2048, false)"
            },
            {
              "lineno": 80,
              "line": "        let rgba4 = EquatableColor.RGBA(r\"A\", 2048, true)"
            },
            {
              "lineno": 81,
              "line": "        "
            },
            {
              "lineno": 82,
              "line": "        @Expect(ycbcr1 == ycbcr2)"
            },
            {
              "lineno": 83,
              "line": "        @Expect(ycbcr1 != ycbcr3)"
            },
            {
              "lineno": 84,
              "line": "        @Expect(ycbcr1 != rgba1)"
            },
            {
              "lineno": 85,
              "line": "        @Expect(ycbcr1 != rgba3)"
            },
            {
              "lineno": 86,
              "line": "        "
            },
            {
              "lineno": 87,
              "line": "        @Expect(rgba1 == rgba2)"
            },
            {
              "lineno": 88,
              "line": "        @Expect(rgba1 != rgba3)"
            },
            {
              "lineno": 89,
              "line": "        @Expect(rgba1 != rgba4)"
            },
            {
              "lineno": 90,
              "line": "        @Expect(rgba1 != ycbcr1)"
            },
            {
              "lineno": 91,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 72,
              "end_line": 91,
              "label": [
                "    func nultiArgTest(): Unit {",
                "        let ycbcr1 = EquatableColor.YCbCr(255, 1024, 0.5)",
                "        let ycbcr2 = EquatableColor.YCbCr(255, 1024, 0.5)",
                "        let ycbcr3 = EquatableColor.YCbCr(128, 2048, 0.75)",
                "        ",
                "        let rgba1 = EquatableColor.RGBA(r\"A\", 1024, true)",
                "        let rgba2 = EquatableColor.RGBA(r\"A\", 1024, true)",
                "        let rgba3 = EquatableColor.RGBA(r\"B\", 2048, false)",
                "        let rgba4 = EquatableColor.RGBA(r\"A\", 2048, true)",
                "        ",
                "        @Expect(ycbcr1 == ycbcr2)",
                "        @Expect(ycbcr1 != ycbcr3)",
                "        @Expect(ycbcr1 != rgba1)",
                "        @Expect(ycbcr1 != rgba3)",
                "        ",
                "        @Expect(rgba1 == rgba2)",
                "        @Expect(rgba1 != rgba3)",
                "        @Expect(rgba1 != rgba4)",
                "        @Expect(rgba1 != ycbcr1)",
                "    }"
              ],
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 20,
          "line": "class EqutableEnumTest {"
        },
        {
          "lineno": 21,
          "line": "    @TestCase"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    @TestCase"
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 48,
          "line": "    @TestCase"
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 71,
          "line": "    @TestCase"
        },
        {
          "lineno": 92,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 20,
          "end_line": 20,
          "label": "class EqutableEnumTest {",
          "successors": [
            {
              "id": 2,
              "start_line": 21,
              "end_line": 21,
              "label": "@TestCase",
              "successors": [
                {
                  "id": 3,
                  "start_line": 30,
                  "end_line": 30,
                  "label": "",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 31,
                      "end_line": 31,
                      "label": "@TestCase",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 47,
                          "end_line": 47,
                          "label": "",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 48,
                              "end_line": 48,
                              "label": "@TestCase",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 70,
                                  "end_line": 70,
                                  "label": "",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 71,
                                      "end_line": 71,
                                      "label": "@TestCase",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 92,
                                          "end_line": 92,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package enum_enhance.test"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "// import std.unittest.testmacro.*"
    },
    {
      "lineno": 4,
      "line": "// import std.unittest.*"
    },
    {
      "lineno": 5,
      "line": "import enum_enhance.{EquatableEnum, ToStringEnum}"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "@EquatableEnum"
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 19,
      "line": "@Test"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package enum_enhance.test",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 2,
          "label": "",
          "successors": [
            {
              "id": 3,
              "start_line": 3,
              "end_line": 4,
              "label": "// import std.unittest.testmacro.*\n// import std.unittest.*",
              "successors": [
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "import enum_enhance.{EquatableEnum, ToStringEnum}\n",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "@EquatableEnum",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 18,
                          "end_line": 18,
                          "label": "",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 19,
                              "end_line": 19,
                              "label": "@Test",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}