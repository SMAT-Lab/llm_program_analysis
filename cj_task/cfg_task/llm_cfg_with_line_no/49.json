{
  "name": "simple_math_interpreter",
  "type": "CFG",
  "start_line": 1,
  "end_line": 73,
  "functions": [],
  "classes": [
    {
      "name": "Combinator",
      "type": "class",
      "start_line": 5,
      "end_line": 7,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "public class Combinator<I, O> {"
        },
        {
          "lineno": 6,
          "line": "    public Combinator(public let parseFunc: (List<I>) -> Option<(O, List<I>)>) {}"
        },
        {
          "lineno": 7,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 7,
          "label": "public class Combinator<I, O> {\n    public Combinator(public let parseFunc: (List<I>) -> Option<(O, List<I>)>) {}\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Combinator Extension",
      "type": "class",
      "start_line": 9,
      "end_line": 73,
      "functions": [
        {
          "name": "make",
          "type": "function",
          "start_line": 10,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 10,
              "line": "    public static func make(predicate: (I) -> Bool): Combinator<I, I> {"
            },
            {
              "lineno": 11,
              "line": "        Combinator {"
            },
            {
              "lineno": 12,
              "line": "            input => match (input) {"
            },
            {
              "lineno": 13,
              "line": "                case Cons(hd, tl) => if (predicate(hd)) {"
            },
            {
              "lineno": 14,
              "line": "                    Some((hd, tl))"
            },
            {
              "lineno": 15,
              "line": "                } else {"
            },
            {
              "lineno": 16,
              "line": "                    None"
            },
            {
              "lineno": 17,
              "line": "                }"
            },
            {
              "lineno": 18,
              "line": "                case Nil => None"
            },
            {
              "lineno": 19,
              "line": "            }"
            },
            {
              "lineno": 20,
              "line": "        }"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 10,
              "end_line": 12,
              "label": "public static func make(predicate: (I) -> Bool): Combinator<I, I> {\n    Combinator {\n        input => match (input) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 15,
                  "label": "case Cons(hd, tl) => if (predicate(hd)) {\n    Some((hd, tl))\n} else {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 16,
                      "end_line": 17,
                      "label": "None\n}",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 18,
                          "end_line": 18,
                          "label": "case Nil => None",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 19,
                              "end_line": 21,
                              "label": "}\n    }\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "case Nil => None",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 19,
                      "end_line": 21,
                      "label": "}\n    }\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "map",
          "type": "function",
          "start_line": 23,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    public func map<O2>(f: (O) -> O2): Combinator<I, O2> {"
            },
            {
              "lineno": 24,
              "line": "        Combinator {"
            },
            {
              "lineno": 25,
              "line": "            input => match (this.parseFunc(input)) {"
            },
            {
              "lineno": 26,
              "line": "                case Some((value, rest)) => Some((f(value), rest))"
            },
            {
              "lineno": 27,
              "line": "                case None => None"
            },
            {
              "lineno": 28,
              "line": "            }"
            },
            {
              "lineno": 29,
              "line": "        }"
            },
            {
              "lineno": 30,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 23,
              "end_line": 23,
              "label": "    public func map<O2>(f: (O) -> O2): Combinator<I, O2> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 24,
                  "end_line": 25,
                  "label": "        Combinator {\n            input => match (this.parseFunc(input)) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 26,
                      "end_line": 26,
                      "label": "                case Some((value, rest)) => Some((f(value), rest))",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 28,
                          "end_line": 29,
                          "label": "            }\n        }",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 30,
                              "end_line": 30,
                              "label": "    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 27,
                      "end_line": 27,
                      "label": "                case None => None",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 28,
                          "end_line": 29,
                          "label": "            }\n        }",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 30,
                              "end_line": 30,
                              "label": "    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "and",
          "type": "function",
          "start_line": 32,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> {"
            },
            {
              "lineno": 33,
              "line": "        Combinator {"
            },
            {
              "lineno": 34,
              "line": "            input => match (this.parseFunc(input)) {"
            },
            {
              "lineno": 35,
              "line": "                case Some((value1, rest1)) => match (c2.parseFunc(rest1)) {"
            },
            {
              "lineno": 36,
              "line": "                    case Some((value2, rest2)) => Some(((value1, value2), rest2))"
            },
            {
              "lineno": 37,
              "line": "                    case None => None"
            },
            {
              "lineno": 38,
              "line": "                }"
            },
            {
              "lineno": 39,
              "line": "                case None => None"
            },
            {
              "lineno": 40,
              "line": "            }"
            },
            {
              "lineno": 41,
              "line": "        }"
            },
            {
              "lineno": 42,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 32,
              "end_line": 33,
              "label": "    public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> {\n        Combinator {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 34,
                  "end_line": 34,
                  "label": "            input => match (this.parseFunc(input)) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 35,
                      "end_line": 38,
                      "label": "                case Some((value1, rest1)) => match (c2.parseFunc(rest1)) {\n                    case Some((value2, rest2)) => Some(((value1, value2), rest2))\n                    case None => None\n                }",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 39,
                      "end_line": 39,
                      "label": "                case None => None",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 40,
              "end_line": 42,
              "label": "            }\n        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "or",
          "type": "function",
          "start_line": 44,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    public func or(c2: Combinator<I, O>): Combinator<I, O> {"
            },
            {
              "lineno": 45,
              "line": "        Combinator {"
            },
            {
              "lineno": 46,
              "line": "            input => match (this.parseFunc(input)) {"
            },
            {
              "lineno": 47,
              "line": "                case Some(a) => Some(a)"
            },
            {
              "lineno": 48,
              "line": "                case None => c2.parseFunc(input)"
            },
            {
              "lineno": 49,
              "line": "            }"
            },
            {
              "lineno": 50,
              "line": "        }"
            },
            {
              "lineno": 51,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 44,
              "end_line": 45,
              "label": "    public func or(c2: Combinator<I, O>): Combinator<I, O> {\n        Combinator {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 46,
                  "end_line": 46,
                  "label": "            input => match (this.parseFunc(input)) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 47,
                      "end_line": 47,
                      "label": "                case Some(a) => Some(a)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 48,
                      "end_line": 48,
                      "label": "                case None => c2.parseFunc(input)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 49,
              "end_line": 51,
              "label": "            }\n        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "many",
          "type": "function",
          "start_line": 53,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 53,
              "line": "    public func many(min: Int64): Combinator<I, List<O>> {"
            },
            {
              "lineno": 54,
              "line": "        Combinator {"
            },
            {
              "lineno": 55,
              "line": "            input =>"
            },
            {
              "lineno": 56,
              "line": "            var vlist = List<O>.empty()"
            },
            {
              "lineno": 57,
              "line": "            var rest = input"
            },
            {
              "lineno": 58,
              "line": "            while (true) {"
            },
            {
              "lineno": 59,
              "line": "                match (this.parseFunc(rest)) {"
            },
            {
              "lineno": 60,
              "line": "                    case None => break"
            },
            {
              "lineno": 61,
              "line": "                    case Some((value, _rest)) =>"
            },
            {
              "lineno": 62,
              "line": "                        rest = _rest"
            },
            {
              "lineno": 63,
              "line": "                        vlist = vlist.add(value)"
            },
            {
              "lineno": 64,
              "line": "                }"
            },
            {
              "lineno": 65,
              "line": "            }"
            },
            {
              "lineno": 66,
              "line": "            if (vlist.lenth() < min) {"
            },
            {
              "lineno": 67,
              "line": "                None"
            },
            {
              "lineno": 68,
              "line": "            } else {"
            },
            {
              "lineno": 69,
              "line": "                Some((vlist.reverse(), rest))"
            },
            {
              "lineno": 70,
              "line": "            }"
            },
            {
              "lineno": 71,
              "line": "        }"
            },
            {
              "lineno": 72,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 53,
              "end_line": 57,
              "label": "    public func many(min: Int64): Combinator<I, List<O>> {\n        Combinator {\n            input =>\n            var vlist = List<O>.empty()\n            var rest = input",
              "successors": [
                {
                  "id": 2,
                  "start_line": 58,
                  "end_line": 58,
                  "label": "            while (true) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 59,
                      "end_line": 59,
                      "label": "                match (this.parseFunc(rest)) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 60,
                          "end_line": 60,
                          "label": "                    case None => break",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 61,
                          "end_line": 63,
                          "label": "                    case Some((value, _rest)) =>\n                        rest = _rest\n                        vlist = vlist.add(value)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 58,
                              "end_line": 58,
                              "label": "            while (true) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 66,
                  "end_line": 66,
                  "label": "            if (vlist.lenth() < min) {",
                  "successors": [
                    {
                      "id": 8,
                      "start_line": 67,
                      "end_line": 67,
                      "label": "                None",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "start_line": 68,
                      "end_line": 70,
                      "label": "            } else {\n                Some((vlist.reverse(), rest))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "extend<I, O> Combinator<I, O> {"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 73,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 9,
          "end_line": 73,
          "label": "extend<I, O> Combinator<I, O> {\n\n\n\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package simple_math_interpreter"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import simple_math_interpreter.ext.*"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 8,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package simple_math_interpreter",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 3,
          "label": "import simple_math_interpreter.ext.*",
          "successors": []
        }
      ]
    }
  ]
}