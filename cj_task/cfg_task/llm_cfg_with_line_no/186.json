{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 42,
  "functions": [
    {
      "name": "f_gold",
      "type": "function",
      "start_line": 2,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "func f_gold (str:Array<UInt8>):Bool{"
        },
        {
          "lineno": 3,
          "line": "  let len = str.size"
        },
        {
          "lineno": 4,
          "line": "  if ( str [ 0 ] < b'A' || str [ 0 ] > b'Z' ) {return false}"
        },
        {
          "lineno": 5,
          "line": "  if ( str [ len - 1 ] != b'.' ) {return false}"
        },
        {
          "lineno": 6,
          "line": "  var prev_state = 0"
        },
        {
          "lineno": 7,
          "line": "  var curr_state = 0"
        },
        {
          "lineno": 8,
          "line": "  var index = 1"
        },
        {
          "lineno": 9,
          "line": "  while ( index <= str . size ) {"
        },
        {
          "lineno": 10,
          "line": "    if ( str [ index ] >= b'A' && str [ index ] <= b'Z' ) {curr_state = 0}"
        },
        {
          "lineno": 11,
          "line": "    else if ( str [ index ] == b' ' ) {curr_state = 1}"
        },
        {
          "lineno": 12,
          "line": "    else if ( str [ index ] >= b'a' && str [ index ] <= b'z' ) {curr_state = 2}"
        },
        {
          "lineno": 13,
          "line": "    else if ( str [ index ] == b'.' ) {curr_state = 3}"
        },
        {
          "lineno": 14,
          "line": "    if ( prev_state == curr_state && curr_state != 2 ) {return false}"
        },
        {
          "lineno": 15,
          "line": "    if ( prev_state == 2 && curr_state == 0 ) {return false}"
        },
        {
          "lineno": 16,
          "line": "    if ( curr_state == 3 && prev_state != 1 ) {return ( index + 1 == str . size )}"
        },
        {
          "lineno": 17,
          "line": "    index ++"
        },
        {
          "lineno": 18,
          "line": "    prev_state = curr_state"
        },
        {
          "lineno": 19,
          "line": "  }"
        },
        {
          "lineno": 20,
          "line": "  return false"
        },
        {
          "lineno": 21,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 3,
          "label": "func f_gold (str:Array<UInt8>):Bool{\n  let len = str.size",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if ( str [ 0 ] < b'A' || str [ 0 ] > b'Z' ) {return false}",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 5,
              "end_line": 5,
              "label": "if ( str [ len - 1 ] != b'.' ) {return false}",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 6,
              "end_line": 8,
              "label": "var prev_state = 0\n  var curr_state = 0\n  var index = 1",
              "successors": [
                {
                  "id": 5,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "while ( index <= str . size ) {",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "if ( str [ index ] >= b'A' && str [ index ] <= b'Z' ) {curr_state = 0}",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "else if ( str [ index ] == b' ' ) {curr_state = 1}",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "else if ( str [ index ] >= b'a' && str [ index ] <= b'z' ) {curr_state = 2}",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "else if ( str [ index ] == b'.' ) {curr_state = 3}",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "if ( prev_state == curr_state && curr_state != 2 ) {return false}",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "if ( prev_state == 2 && curr_state == 0 ) {return false}",
                      "successors": []
                    },
                    {
                      "id": 12,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "if ( curr_state == 3 && prev_state != 1 ) {return ( index + 1 == str . size )}",
                      "successors": []
                    },
                    {
                      "id": 13,
                      "start_line": 17,
                      "end_line": 18,
                      "label": "index ++\n    prev_state = curr_state",
                      "successors": [
                        {
                          "id": 5
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 14,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "return false",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 23,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "main(){"
        },
        {
          "lineno": 24,
          "line": "    var n_success = 0"
        },
        {
          "lineno": 25,
          "line": "    let param0 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\","
        },
        {
          "lineno": 26,
          "line": "                         \"I am single.\", \"My name is KG.\","
        },
        {
          "lineno": 27,
          "line": "                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\","
        },
        {
          "lineno": 28,
          "line": "    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\","
        },
        {
          "lineno": 29,
          "line": "                         \"I am single.\", \"My name is KG.\","
        },
        {
          "lineno": 30,
          "line": "                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\","
        },
        {
          "lineno": 31,
          "line": "                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])"
        },
        {
          "lineno": 32,
          "line": "    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\","
        },
        {
          "lineno": 33,
          "line": "                         \"I am single.\", \"My name is KG.\","
        },
        {
          "lineno": 34,
          "line": "                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\","
        },
        {
          "lineno": 35,
          "line": "                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])"
        },
        {
          "lineno": 36,
          "line": "    for (i in 0..param0.size){"
        },
        {
          "lineno": 37,
          "line": "        if (f_gold(param0[i].toArray()) == f_filled(param1[i].toArray())){"
        },
        {
          "lineno": 38,
          "line": "            n_success += 1"
        },
        {
          "lineno": 39,
          "line": "        }"
        },
        {
          "lineno": 40,
          "line": "    }"
        },
        {
          "lineno": 41,
          "line": "    println(\"#Results: ${n_success}, ${param0.size}\\n\")"
        },
        {
          "lineno": 42,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 23,
          "end_line": 24,
          "label": "main(){\n    var n_success = 0",
          "successors": [
            {
              "id": 2,
              "start_line": 25,
              "end_line": 35,
              "label": "let param0 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])\n    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])",
              "successors": [
                {
                  "id": 3,
                  "start_line": 36,
                  "end_line": 36,
                  "label": "for (i in 0..param0.size){",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 37,
                      "end_line": 39,
                      "label": "if (f_gold(param0[i].toArray()) == f_filled(param1[i].toArray())){\n            n_success += 1\n        }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 36,
                          "end_line": 36,
                          "label": "for (i in 0..param0.size){",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 40,
                              "end_line": 41,
                              "label": "}\n    println(\"#Results: ${n_success}, ${param0.size}\\n\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": " from std import collection.*"
    },
    {
      "lineno": 22,
      "line": "//TOFILL"
    }
  ],
  "blocks": []
}