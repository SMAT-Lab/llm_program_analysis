{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 17,
  "functions": [
    {
      "name": "node",
      "type": "function",
      "start_line": 3,
      "end_line": 10,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "func node(value: Rune,"
        },
        {
          "lineno": 4,
          "line": "    left!: () -> Unit = {=>}, right!: () -> Unit = {=>}) {"
        },
        {
          "lineno": 5,
          "line": "    return { =>"
        },
        {
          "lineno": 6,
          "line": "        left()"
        },
        {
          "lineno": 7,
          "line": "        print(value)"
        },
        {
          "lineno": 8,
          "line": "        right()"
        },
        {
          "lineno": 9,
          "line": "    }"
        },
        {
          "lineno": 10,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 3,
          "end_line": 4,
          "label": "func node(value: Rune,\n    left!: () -> Unit = {=>}, right!: () -> Unit = {=>}) {",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 9,
              "label": "    return { =>\n        left()\n        print(value)\n        right()\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 12,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "main() {"
        },
        {
          "lineno": 13,
          "line": "    let tree = node(r'A',"
        },
        {
          "lineno": 14,
          "line": "        left: node(r'B', left: node(r'C', right: node(r'D'))),"
        },
        {
          "lineno": 15,
          "line": "        right: node(r'E', left: node(r'F'), right: node(r'G')))"
        },
        {
          "lineno": 16,
          "line": "    tree()"
        },
        {
          "lineno": 17,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 12,
          "end_line": 17,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 15,
              "label": "    let tree = node(r'A',\n        left: node(r'B', left: node(r'C', right: node(r'D'))),\n        right: node(r'E', left: node(r'F'), right: node(r'G')))",
              "successors": [
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "    tree()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 基于函数实现二叉树，演示仓颉函数的 first class 及闭包特性"
    },
    {
      "lineno": 2,
      "line": "// cjc version: 0.53.13"
    },
    {
      "lineno": 11,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "// 基于函数实现二叉树，演示仓储函数的 first class 及闭包特性\n// cjc version: 0.53.13",
      "successors": []
    }
  ]
}