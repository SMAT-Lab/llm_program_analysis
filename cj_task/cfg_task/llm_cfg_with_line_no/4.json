{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 206,
  "functions": [],
  "classes": [
    {
      "name": "JSONTests",
      "type": "class",
      "start_line": 11,
      "end_line": 206,
      "functions": [
        {
          "name": "jsonEqual",
          "type": "function",
          "start_line": 13,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    func jsonEqual() {"
            },
            {
              "lineno": 14,
              "line": "        const jsonStr = \"\"\""
            },
            {
              "lineno": 15,
              "line": "                        {"
            },
            {
              "lineno": 16,
              "line": "                          \"name\": \"John Doe\","
            },
            {
              "lineno": 17,
              "line": "                          \"age\": 30,"
            },
            {
              "lineno": 18,
              "line": "                          \"city\": \"New York\""
            },
            {
              "lineno": 19,
              "line": "                        }"
            },
            {
              "lineno": 20,
              "line": "                        \"\"\""
            },
            {
              "lineno": 21,
              "line": ""
            },
            {
              "lineno": 22,
              "line": "        var jsonVal = JsonValue.fromStr(jsonStr)"
            },
            {
              "lineno": 23,
              "line": "        var jsonVal2 = JsonValue.fromStr(jsonStr)"
            },
            {
              "lineno": 24,
              "line": ""
            },
            {
              "lineno": 25,
              "line": "        assertJson(jsonVal, jsonVal2)"
            },
            {
              "lineno": 26,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 20,
              "label": "    func jsonEqual() {\n        const jsonStr = \"\"\"\n                        {\n                          \"name\": \"John Doe\",\n                          \"age\": 30,\n                          \"city\": \"New York\"\n                        }\n                        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 22,
                  "end_line": 23,
                  "label": "        var jsonVal = JsonValue.fromStr(jsonStr)\n        var jsonVal2 = JsonValue.fromStr(jsonStr)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 25,
                      "end_line": 26,
                      "label": "        assertJson(jsonVal, jsonVal2)\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "basic",
          "type": "function",
          "start_line": 29,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    func basic() {"
            },
            {
              "lineno": 30,
              "line": "        assertJson(@Json( 1 + 2 ), JsonInt(3))"
            },
            {
              "lineno": 31,
              "line": "        assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))"
            },
            {
              "lineno": 32,
              "line": "        assertJson(@Json( \"Hello, \" + \"world!\" ), JsonString(\"Hello, world!\"))"
            },
            {
              "lineno": 33,
              "line": "        assertJson(@Json( true ), JsonBool(true))"
            },
            {
              "lineno": 34,
              "line": "        assertJson(@Json( false ), JsonBool(false))"
            },
            {
              "lineno": 35,
              "line": "        assertJson(@Json( null ), JsonNull())"
            },
            {
              "lineno": 36,
              "line": "        assertJson(@Json( None ), JsonNull())"
            },
            {
              "lineno": 37,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 29,
              "end_line": 37,
              "label": "    func basic() {\n        assertJson(@Json( 1 + 2 ), JsonInt(3))\n        assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))\n        assertJson(@Json( \"Hello, \" + \"world!\" ), JsonString(\"Hello, world!\"))\n        assertJson(@Json( true ), JsonBool(true))\n        assertJson(@Json( false ), JsonBool(false))\n        assertJson(@Json( null ), JsonNull())\n        assertJson(@Json( None ), JsonNull())\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "variable",
          "type": "function",
          "start_line": 40,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 40,
              "line": "    func variable() {"
            },
            {
              "lineno": 41,
              "line": "        var a = 1"
            },
            {
              "lineno": 42,
              "line": "        var b = 2"
            },
            {
              "lineno": 43,
              "line": "        var c = \"Hello, \""
            },
            {
              "lineno": 44,
              "line": "        var d = \"world!\""
            },
            {
              "lineno": 45,
              "line": "        var e = true"
            },
            {
              "lineno": 46,
              "line": "        var f = false"
            },
            {
              "lineno": 47,
              "line": "        var h = None<Int>"
            },
            {
              "lineno": 48,
              "line": ""
            },
            {
              "lineno": 49,
              "line": "        assertJson(@Json( a + b ), JsonInt(3))"
            },
            {
              "lineno": 50,
              "line": "        assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))"
            },
            {
              "lineno": 51,
              "line": "        assertJson(@Json( c + d ), JsonString(\"Hello, world!\"))"
            },
            {
              "lineno": 52,
              "line": "        assertJson(@Json( e ), JsonBool(true))"
            },
            {
              "lineno": 53,
              "line": "        assertJson(@Json( f ), JsonBool(false))"
            },
            {
              "lineno": 54,
              "line": "        assertJson(@Json( h ), JsonNull())"
            },
            {
              "lineno": 55,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 40,
              "end_line": 47,
              "label": "    func variable() {\n        var a = 1\n        var b = 2\n        var c = \"Hello, \"\n        var d = \"world!\"\n        var e = true\n        var f = false\n        var h = None<Int>",
              "successors": [
                {
                  "id": 2,
                  "start_line": 49,
                  "end_line": 54,
                  "label": "        assertJson(@Json( a + b ), JsonInt(3))\n        assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))\n        assertJson(@Json( c + d ), JsonString(\"Hello, world!\"))\n        assertJson(@Json( e ), JsonBool(true))\n        assertJson(@Json( f ), JsonBool(false))\n        assertJson(@Json( h ), JsonNull())",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 55,
                      "end_line": 55,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "array",
          "type": "function",
          "start_line": 58,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    func array() {"
            },
            {
              "lineno": 59,
              "line": "        assertJson(@Json( [1, 2, 3] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))"
            },
            {
              "lineno": 60,
              "line": "        assertJson(@Json( [\"apple\", \"banana\", \"cherry\"] ),"
            },
            {
              "lineno": 61,
              "line": "            JsonArray([JsonString(\"apple\"), JsonString(\"banana\"), JsonString(\"cherry\")]))"
            },
            {
              "lineno": 62,
              "line": "        assertJson("
            },
            {
              "lineno": 63,
              "line": "            @Json( [1, \"two\", true, null ] ),"
            },
            {
              "lineno": 64,
              "line": "            JsonArray([JsonInt(1), JsonString(\"two\"), JsonBool(true), JsonNull()])"
            },
            {
              "lineno": 65,
              "line": "        )"
            },
            {
              "lineno": 66,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 58,
              "end_line": 66,
              "label": "    func array() {\n        assertJson(@Json( [1, 2, 3] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))\n        assertJson(@Json( [\"apple\", \"banana\", \"cherry\"] ),\n            JsonArray([JsonString(\"apple\"), JsonString(\"banana\"), JsonString(\"cherry\")]))\n        assertJson(\n            @Json( [1, \"two\", true, null ] ),\n            JsonArray([JsonInt(1), JsonString(\"two\"), JsonBool(true), JsonNull()])\n        )\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "object",
          "type": "function",
          "start_line": 69,
          "end_line": 191,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 69,
              "line": "    func object() {"
            },
            {
              "lineno": 70,
              "line": "        const jsonStr = \"\"\""
            },
            {
              "lineno": 71,
              "line": "                        {"
            },
            {
              "lineno": 72,
              "line": "                          \"name\": \"John Doe\","
            },
            {
              "lineno": 73,
              "line": "                          \"age\": 30,"
            },
            {
              "lineno": 74,
              "line": "                          \"city\": \"New York\""
            },
            {
              "lineno": 75,
              "line": "                        }"
            },
            {
              "lineno": 76,
              "line": "                        \"\"\""
            },
            {
              "lineno": 77,
              "line": "        let jsonVal = JsonValue.fromStr(jsonStr)"
            },
            {
              "lineno": 78,
              "line": "        let jsonMVal = @Json("
            },
            {
              "lineno": 79,
              "line": "            {"
            },
            {
              "lineno": 80,
              "line": "                \"name\": \"John Doe\","
            },
            {
              "lineno": 81,
              "line": "                \"age\": 30,"
            },
            {
              "lineno": 82,
              "line": "                \"city\": \"New York\""
            },
            {
              "lineno": 83,
              "line": "            }"
            },
            {
              "lineno": 84,
              "line": "        )"
            },
            {
              "lineno": 85,
              "line": "        assertJson(jsonVal, jsonMVal)"
            },
            {
              "lineno": 86,
              "line": ""
            },
            {
              "lineno": 87,
              "line": "        const jsonStr2 = \"\"\""
            },
            {
              "lineno": 88,
              "line": "                        {"
            },
            {
              "lineno": 89,
              "line": "                          \"fruits\": [\"apple\", \"banana\", \"cherry\"],"
            },
            {
              "lineno": 90,
              "line": "                          \"numbers\": [1, 2, 3, 4, 5],"
            },
            {
              "lineno": 91,
              "line": "                          \"mixed\": [1, \"two\", true, null]"
            },
            {
              "lineno": 92,
              "line": "                        }"
            },
            {
              "lineno": 93,
              "line": "                        \"\"\""
            },
            {
              "lineno": 94,
              "line": "        let jsonVal2 = JsonValue.fromStr(jsonStr2)"
            },
            {
              "lineno": 95,
              "line": "        let jsonMVal2 = @Json("
            },
            {
              "lineno": 96,
              "line": "            {"
            },
            {
              "lineno": 97,
              "line": "                \"fruits\": [\"apple\", \"banana\", \"cherry\"],"
            },
            {
              "lineno": 98,
              "line": "                \"numbers\": [1, 2, 3, 4, 5],"
            },
            {
              "lineno": 99,
              "line": "                \"mixed\": [1, \"two\", true, null]"
            },
            {
              "lineno": 100,
              "line": "            }"
            },
            {
              "lineno": 101,
              "line": "        )"
            },
            {
              "lineno": 102,
              "line": "        assertJson(jsonVal2, jsonMVal2)"
            },
            {
              "lineno": 103,
              "line": ""
            },
            {
              "lineno": 104,
              "line": "        const jsonStr3 = \"\"\""
            },
            {
              "lineno": 105,
              "line": "                        {"
            },
            {
              "lineno": 106,
              "line": "                          \"person\": {"
            },
            {
              "lineno": 107,
              "line": "                            \"name\": {"
            },
            {
              "lineno": 108,
              "line": "                              \"first\": \"Jane\","
            },
            {
              "lineno": 109,
              "line": "                              \"last\": \"Smith\""
            },
            {
              "lineno": 110,
              "line": "                            },"
            },
            {
              "lineno": 111,
              "line": "                            \"age\": 28,"
            },
            {
              "lineno": 112,
              "line": "                            \"address\": {"
            },
            {
              "lineno": 113,
              "line": "                              \"street\": \"123 Main St\","
            },
            {
              "lineno": 114,
              "line": "                              \"city\": \"Boston\","
            },
            {
              "lineno": 115,
              "line": "                              \"country\": \"USA\""
            },
            {
              "lineno": 116,
              "line": "                            }"
            },
            {
              "lineno": 117,
              "line": "                          }"
            },
            {
              "lineno": 118,
              "line": "                        }"
            },
            {
              "lineno": 119,
              "line": "                        \"\"\""
            },
            {
              "lineno": 120,
              "line": "        let jsonVal3 = JsonValue.fromStr(jsonStr3)"
            },
            {
              "lineno": 121,
              "line": "        let jsonMVal3 = @Json("
            },
            {
              "lineno": 122,
              "line": "            {"
            },
            {
              "lineno": 123,
              "line": "                \"person\": {"
            },
            {
              "lineno": 124,
              "line": "                    \"name\": {"
            },
            {
              "lineno": 125,
              "line": "                        \"first\": \"Jane\","
            },
            {
              "lineno": 126,
              "line": "                        \"last\": \"Smith\""
            },
            {
              "lineno": 127,
              "line": "                    },"
            },
            {
              "lineno": 128,
              "line": "                    \"age\": 28,"
            },
            {
              "lineno": 129,
              "line": "                    \"address\": {"
            },
            {
              "lineno": 130,
              "line": "                        \"street\": \"123 Main St\","
            },
            {
              "lineno": 131,
              "line": "                        \"city\": \"Boston\","
            },
            {
              "lineno": 132,
              "line": "                        \"country\": \"USA\""
            },
            {
              "lineno": 133,
              "line": "                    }"
            },
            {
              "lineno": 134,
              "line": "                }"
            },
            {
              "lineno": 135,
              "line": "            }"
            },
            {
              "lineno": 136,
              "line": "        )"
            },
            {
              "lineno": 137,
              "line": "        assertJson(jsonVal3, jsonMVal3)"
            },
            {
              "lineno": 138,
              "line": ""
            },
            {
              "lineno": 139,
              "line": "        const jsonStr4 = \"\"\""
            },
            {
              "lineno": 140,
              "line": "                        {"
            },
            {
              "lineno": 141,
              "line": "                          \"company\": \"Tech Corp\","
            },
            {
              "lineno": 142,
              "line": "                          \"employees\": ["
            },
            {
              "lineno": 143,
              "line": "                            {"
            },
            {
              "lineno": 144,
              "line": "                              \"id\": 1,"
            },
            {
              "lineno": 145,
              "line": "                              \"name\": \"Alice\","
            },
            {
              "lineno": 146,
              "line": "                              \"department\": \"Engineering\","
            },
            {
              "lineno": 147,
              "line": "                              \"projects\": [\"Project A\", \"Project B\"]"
            },
            {
              "lineno": 148,
              "line": "                            },"
            },
            {
              "lineno": 149,
              "line": "                            {"
            },
            {
              "lineno": 150,
              "line": "                              \"id\": 2,"
            },
            {
              "lineno": 151,
              "line": "                              \"name\": \"Bob\","
            },
            {
              "lineno": 152,
              "line": "                              \"department\": \"Marketing\","
            },
            {
              "lineno": 153,
              "line": "                              \"campaigns\": {"
            },
            {
              "lineno": 154,
              "line": "                                \"online\": [\"Social Media\", \"Email\"],"
            },
            {
              "lineno": 155,
              "line": "                                \"offline\": [\"TV\", \"Radio\"]"
            },
            {
              "lineno": 156,
              "line": "                              }"
            },
            {
              "lineno": 157,
              "line": "                            }"
            },
            {
              "lineno": 158,
              "line": "                          ],"
            },
            {
              "lineno": 159,
              "line": "                          \"founded\": 1995,"
            },
            {
              "lineno": 160,
              "line": "                          \"active\": true,"
            },
            {
              "lineno": 161,
              "line": "                          \"CEO\": null"
            },
            {
              "lineno": 162,
              "line": "                        }"
            },
            {
              "lineno": 163,
              "line": "                        \"\"\""
            },
            {
              "lineno": 164,
              "line": "        let jsonVal4 = JsonValue.fromStr(jsonStr4)"
            },
            {
              "lineno": 165,
              "line": "        let jsonMVal4 = @Json("
            },
            {
              "lineno": 166,
              "line": "            {"
            },
            {
              "lineno": 167,
              "line": "                \"company\": \"Tech Corp\","
            },
            {
              "lineno": 168,
              "line": "                \"employees\": ["
            },
            {
              "lineno": 169,
              "line": "                    {"
            },
            {
              "lineno": 170,
              "line": "                        \"id\": 1,"
            },
            {
              "lineno": 171,
              "line": "                        \"name\": \"Alice\","
            },
            {
              "lineno": 172,
              "line": "                        \"department\": \"Engineering\","
            },
            {
              "lineno": 173,
              "line": "                        \"projects\": [\"Project A\", \"Project B\"]"
            },
            {
              "lineno": 174,
              "line": "                    },"
            },
            {
              "lineno": 175,
              "line": "                    {"
            },
            {
              "lineno": 176,
              "line": "                        \"id\": 2,"
            },
            {
              "lineno": 177,
              "line": "                        \"name\": \"Bob\","
            },
            {
              "lineno": 178,
              "line": "                        \"department\": \"Marketing\","
            },
            {
              "lineno": 179,
              "line": "                        \"campaigns\": {"
            },
            {
              "lineno": 180,
              "line": "                            \"online\": [\"Social Media\", \"Email\"],"
            },
            {
              "lineno": 181,
              "line": "                            \"offline\": [\"TV\", \"Radio\"]"
            },
            {
              "lineno": 182,
              "line": "                        }"
            },
            {
              "lineno": 183,
              "line": "                    }"
            },
            {
              "lineno": 184,
              "line": "                ],"
            },
            {
              "lineno": 185,
              "line": "                \"founded\": 1995,"
            },
            {
              "lineno": 186,
              "line": "                \"active\": true,"
            },
            {
              "lineno": 187,
              "line": "                \"CEO\": null"
            },
            {
              "lineno": 188,
              "line": "            }"
            },
            {
              "lineno": 189,
              "line": "        )"
            },
            {
              "lineno": 190,
              "line": "        assertJson(jsonVal4, jsonMVal4)"
            },
            {
              "lineno": 191,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 69,
              "end_line": 191,
              "label": "    func object() {\n        const jsonStr = \"\"\"\n                        {\n                          \"name\": \"John Doe\",\n                          \"age\": 30,\n                          \"city\": \"New York\"\n                        }\n                        \"\"\"\n        let jsonVal = JsonValue.fromStr(jsonStr)\n        let jsonMVal = @Json(\n            {\n                \"name\": \"John Doe\",\n                \"age\": 30,\n                \"city\": \"New York\"\n            }\n        )\n        assertJson(jsonVal, jsonMVal)\n\n        const jsonStr2 = \"\"\"\n                        {\n                          \"fruits\": [\"apple\", \"banana\", \"cherry\"],\n                          \"numbers\": [1, 2, 3, 4, 5],\n                          \"mixed\": [1, \"two\", true, null]\n                        }\n                        \"\"\"\n        let jsonVal2 = JsonValue.fromStr(jsonStr2)\n        let jsonMVal2 = @Json(\n            {\n                \"fruits\": [\"apple\", \"banana\", \"cherry\"],\n                \"numbers\": [1, 2, 3, 4, 5],\n                \"mixed\": [1, \"two\", true, null]\n            }\n        )\n        assertJson(jsonVal2, jsonMVal2)\n\n        const jsonStr3 = \"\"\"\n                        {\n                          \"person\": {\n                            \"name\": {\n                              \"first\": \"Jane\",\n                              \"last\": \"Smith\"\n                            },\n                            \"age\": 28,\n                            \"address\": {\n                              \"street\": \"123 Main St\",\n                              \"city\": \"Boston\",\n                              \"country\": \"USA\"\n                            }\n                          }\n                        }\n                        \"\"\"\n        let jsonVal3 = JsonValue.fromStr(jsonStr3)\n        let jsonMVal3 = @Json(\n            {\n                \"person\": {\n                    \"name\": {\n                        \"first\": \"Jane\",\n                        \"last\": \"Smith\"\n                    },\n                    \"age\": 28,\n                    \"address\": {\n                        \"street\": \"123 Main St\",\n                        \"city\": \"Boston\",\n                        \"country\": \"USA\"\n                    }\n                }\n            }\n        )\n        assertJson(jsonVal3, jsonMVal3)\n\n        const jsonStr4 = \"\"\"\n                        {\n                          \"company\": \"Tech Corp\",\n                          \"employees\": [\n                            {\n                              \"id\": 1,\n                              \"name\": \"Alice\",\n                              \"department\": \"Engineering\",\n                              \"projects\": [\"Project A\", \"Project B\"]\n                            },\n                            {\n                              \"id\": 2,\n                              \"name\": \"Bob\",\n                              \"department\": \"Marketing\",\n                              \"campaigns\": {\n                                \"online\": [\"Social Media\", \"Email\"],\n                                \"offline\": [\"TV\", \"Radio\"]\n                              }\n                            }\n                          ],\n                          \"founded\": 1995,\n                          \"active\": true,\n                          \"CEO\": null\n                        }\n                        \"\"\"\n        let jsonVal4 = JsonValue.fromStr(jsonStr4)\n        let jsonMVal4 = @Json(\n            {\n                \"company\": \"Tech Corp\",\n                \"employees\": [\n                    {\n                        \"id\": 1,\n                        \"name\": \"Alice\",\n                        \"department\": \"Engineering\",\n                        \"projects\": [\"Project A\", \"Project B\"]\n                    },\n                    {\n                        \"id\": 2,\n                        \"name\": \"Bob\",\n                        \"department\": \"Marketing\",\n                        \"campaigns\": {\n                            \"online\": [\"Social Media\", \"Email\"],\n                            \"offline\": [\"TV\", \"Radio\"]\n                        }\n                    }\n                ],\n                \"founded\": 1995,\n                \"active\": true,\n                \"CEO\": null\n            }\n        )\n        assertJson(jsonVal4, jsonMVal4)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "empty",
          "type": "function",
          "start_line": 194,
          "end_line": 199,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 194,
              "line": "    func empty() {"
            },
            {
              "lineno": 195,
              "line": "        assertJson(@Json( {} ), JsonObject())"
            },
            {
              "lineno": 196,
              "line": "        assertJson(@Json( [] ), JsonArray())"
            },
            {
              "lineno": 197,
              "line": ""
            },
            {
              "lineno": 198,
              "line": "        @Assert((), @Json())"
            },
            {
              "lineno": 199,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 194,
              "end_line": 199,
              "label": "    func empty() {\n        assertJson(@Json( {} ), JsonObject())\n        assertJson(@Json( [] ), JsonArray())\n\n        @Assert((), @Json())\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "trailingComma",
          "type": "function",
          "start_line": 202,
          "end_line": 205,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 202,
              "line": "    func trailingComma() {"
            },
            {
              "lineno": 203,
              "line": "        assertJson(@Json( [1, 2, 3,] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))"
            },
            {
              "lineno": 204,
              "line": "        assertJson(@Json( {\"a\": 1, \"b\": 2, \"c\": 3,} ), @Json( {\"a\": 1, \"b\": 2, \"c\": 3} ))"
            },
            {
              "lineno": 205,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 202,
              "end_line": 205,
              "label": "func trailingComma() {\n    assertJson(@Json( [1, 2, 3,] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))\n    assertJson(@Json( {\"a\": 1, \"b\": 2, \"c\": 3,} ), @Json( {\"a\": 1, \"b\": 2, \"c\": 3} ))\n}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class JSONTests {"
        },
        {
          "lineno": 12,
          "line": "    @TestCase"
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    @TestCase"
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 39,
          "line": "    @TestCase"
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 57,
          "line": "    @TestCase"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    @TestCase"
        },
        {
          "lineno": 192,
          "line": ""
        },
        {
          "lineno": 193,
          "line": "    @TestCase"
        },
        {
          "lineno": 200,
          "line": ""
        },
        {
          "lineno": 201,
          "line": "    @TestCase"
        },
        {
          "lineno": 206,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 206,
          "label": "class JSONTests {\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package json_cj.test"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.unittest.*"
    },
    {
      "lineno": 4,
      "line": "import std.ast.*"
    },
    {
      "lineno": 5,
      "line": "import std.unittest.testmacro.{Test, Assert, TestCase, Fail}"
    },
    {
      "lineno": 6,
      "line": "import encoding.json.*"
    },
    {
      "lineno": 7,
      "line": "import json_cj.*"
    },
    {
      "lineno": 8,
      "line": "import json_cj.testutil.assertJson"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "@Test"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package json_cj.test",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 8,
          "label": "import std.unittest.*\nimport std.ast.*\nimport std.unittest.testmacro.{Test, Assert, TestCase, Fail}\nimport encoding.json.*\nimport json_cj.*\nimport json_cj.testutil.assertJson",
          "successors": [
            {
              "id": 3,
              "start_line": 10,
              "end_line": 10,
              "label": "@Test",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}