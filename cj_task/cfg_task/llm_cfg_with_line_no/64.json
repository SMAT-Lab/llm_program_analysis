{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 119,
  "functions": [
    {
      "name": "parseType",
      "type": "function",
      "start_line": 31,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "func parseType(oriType: String, pointerCount: String): Tokens {"
        },
        {
          "lineno": 32,
          "line": "    if (oriType == \"char\" && pointerCount.count(\"*\") == 1) {"
        },
        {
          "lineno": 33,
          "line": "        return Tokens() + Token(TokenKind.IDENTIFIER, \"CString\") //返回CString"
        },
        {
          "lineno": 34,
          "line": "    }"
        },
        {
          "lineno": 35,
          "line": "    var outType = Tokens()"
        },
        {
          "lineno": 36,
          "line": "    if (typeMap.contains(oriType)) {"
        },
        {
          "lineno": 37,
          "line": "        outType += Token(typeMap[oriType])"
        },
        {
          "lineno": 38,
          "line": "    } else {"
        },
        {
          "lineno": 39,
          "line": "        outType += Token(TokenKind.UNIT)"
        },
        {
          "lineno": 40,
          "line": "    }"
        },
        {
          "lineno": 41,
          "line": "    for (_ in 0..pointerCount.count(\"*\")) {"
        },
        {
          "lineno": 42,
          "line": "        outType = quote(CPointer<$(outType)>)"
        },
        {
          "lineno": 43,
          "line": "    }"
        },
        {
          "lineno": 44,
          "line": "    return outType"
        },
        {
          "lineno": 45,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 31,
          "end_line": 31,
          "label": "func parseType(oriType: String, pointerCount: String): Tokens {",
          "successors": [
            {
              "id": 2,
              "start_line": 32,
              "end_line": 34,
              "label": "if (oriType == \"char\" && pointerCount.count(\"*\") == 1) {\n        return Tokens() + Token(TokenKind.IDENTIFIER, \"CString\")\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 35,
                  "end_line": 36,
                  "label": "var outType = Tokens()\nif (typeMap.contains(oriType)) {",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 37,
                      "end_line": 38,
                      "label": "outType += Token(typeMap[oriType])\n} else {",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 39,
                          "end_line": 40,
                          "label": "outType += Token(TokenKind.UNIT)\n}",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 41,
                              "end_line": 43,
                              "label": "for (_ in 0..pointerCount.count(\"*\")) {\n        outType = quote(CPointer<$(outType)>)\n    }",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 44,
                                  "end_line": 45,
                                  "label": "return outType\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseDotH",
      "type": "function",
      "start_line": 47,
      "end_line": 115,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 47,
          "line": "func parseDotH(dotH: String): Tokens {"
        },
        {
          "lineno": 48,
          "line": "    var outTokens = Tokens()"
        },
        {
          "lineno": 49,
          "line": "    let file = File(dotH, Read)"
        },
        {
          "lineno": 50,
          "line": "    let reader = StringReader(file)"
        },
        {
          "lineno": 51,
          "line": "    var content = reader.readToEnd() //StringReader的分段读取未解决，暂时直接全部读完"
        },
        {
          "lineno": 52,
          "line": "    let commentRegex = Regex(##\"/\\*.*\\*/|//.*(\\n|\\r)|\\*/|/\\*|\\*{2}\\s.*(\\n|\\r)\"##) //移除注释"
        },
        {
          "lineno": 53,
          "line": "    content = commentRegex"
        },
        {
          "lineno": 54,
          "line": "        .matcher(content)"
        },
        {
          "lineno": 55,
          "line": "        .replaceAll(\"\")"
        },
        {
          "lineno": 56,
          "line": "        .replace(\"void(*)(void*)\", \"void*\")"
        },
        {
          "lineno": 57,
          "line": "        .replace(\"int (*callback)(void*,int,char**,char**)\", \"void *\")"
        },
        {
          "lineno": 58,
          "line": "    let funcRegex = Regex(##\"\\w+\\s+\\**\\w+\\s*\\([^)]*\\)\\s*;\"##) //获得函数定义的匹配"
        },
        {
          "lineno": 59,
          "line": "    let funcArr = funcRegex.matcher(content).findAll() ?? Array<MatchData>()"
        },
        {
          "lineno": 60,
          "line": "    for (i in funcArr) {"
        },
        {
          "lineno": 61,
          "line": "        var funcDefine = i.matchStr()"
        },
        {
          "lineno": 62,
          "line": "        let funcDefineArray = funcDefine.split(\"(\")"
        },
        {
          "lineno": 63,
          "line": "        let funcPrefix = funcDefineArray[0].split(\" \")"
        },
        {
          "lineno": 64,
          "line": "        var funcReturn = Tokens()"
        },
        {
          "lineno": 65,
          "line": "        if (typeMap.contains(funcPrefix[0])) {"
        },
        {
          "lineno": 66,
          "line": "            funcReturn += Token(typeMap[funcPrefix[0]])"
        },
        {
          "lineno": 67,
          "line": "        }else{"
        },
        {
          "lineno": 68,
          "line": "            funcReturn += Token(TokenKind.UNIT)"
        },
        {
          "lineno": 69,
          "line": "        }"
        },
        {
          "lineno": 70,
          "line": "        var funcName = funcPrefix[1]"
        },
        {
          "lineno": 71,
          "line": "        if (funcName.contains(\"*\")) { //判断是否可能为字符串"
        },
        {
          "lineno": 72,
          "line": "            funcName = funcName.replace(\"*\", \"\")"
        },
        {
          "lineno": 73,
          "line": "            if (funcPrefix[0] == \"char\") {"
        },
        {
          "lineno": 74,
          "line": "                funcReturn = quote(CString)"
        },
        {
          "lineno": 75,
          "line": "            } else {"
        },
        {
          "lineno": 76,
          "line": "                funcReturn = quote(CPointer<Byte>)"
        },
        {
          "lineno": 77,
          "line": "            }"
        },
        {
          "lineno": 78,
          "line": "        }"
        },
        {
          "lineno": 79,
          "line": "        let paramListStr = funcDefineArray[1]"
        },
        {
          "lineno": 80,
          "line": "        let paramRegex = Regex(##\"(\\w+\\s*\\**|\\w+\\s+\\**\\w+|\\.{3})(\\s*,|\\s*\\))\"##) //匹配到参数列表"
        },
        {
          "lineno": 81,
          "line": "        let paramMatchList = paramRegex.matcher(paramListStr).findAll() ?? Array<MatchData>()"
        },
        {
          "lineno": 82,
          "line": "        let paramList = Array<String>(paramMatchList.size,"
        },
        {
          "lineno": 83,
          "line": "            {i => Regex(##\"\\s*,|\\s*\\)|\\n|\\r\"##).matcher(paramMatchList[i].matchStr()).replace(\"\")}) //移除特殊字符并存入数组"
        },
        {
          "lineno": 84,
          "line": "        var paramsToken = Tokens()"
        },
        {
          "lineno": 85,
          "line": "        for (i in 0..paramList.size) {"
        },
        {
          "lineno": 86,
          "line": "            println(\"${funcName}\\n${paramList}\\n${\"void\" == paramList[i]}\")"
        },
        {
          "lineno": 87,
          "line": "            if (let Some(_) <- Regex(##\"\\w+\\s+\\**\\w+\"##).matches(paramList[i])) { //处理诸如int n的函数参数"
        },
        {
          "lineno": 88,
          "line": "                let paramSplit = paramList[i].split(\" \")"
        },
        {
          "lineno": 89,
          "line": "                let type_u = paramSplit[0].replace(\"*\", \"\")"
        },
        {
          "lineno": 90,
          "line": "                let paramToken = Token(TokenKind.IDENTIFIER, paramSplit[1].replace(\"*\", \"\").replace(\"type\",\"type${i}\"))"
        },
        {
          "lineno": 91,
          "line": "                let typeToken = parseType(type_u, paramList[i])"
        },
        {
          "lineno": 92,
          "line": "                paramsToken += quote($(paramToken): $(typeToken))"
        },
        {
          "lineno": 93,
          "line": "            } else if (\"void\" == paramList[i]) { //处理诸如void的函数参数"
        },
        {
          "lineno": 94,
          "line": "                continue"
        },
        {
          "lineno": 95,
          "line": "            } else if (let Some(_) <- Regex(##\"\\w+\\s*\\**\"##).matches(paramList[i])) { // 处理诸如int*的函数参数"
        },
        {
          "lineno": 96,
          "line": "                let type_u = paramList[i].replace(\"*\", \"\")"
        },
        {
          "lineno": 97,
          "line": "                let paramToken = Token(TokenKind.IDENTIFIER, \"param${i}\")"
        },
        {
          "lineno": 98,
          "line": "                let typeToken = parseType(type_u, paramList[i])"
        },
        {
          "lineno": 99,
          "line": "                paramsToken += quote($(paramToken): $(typeToken))"
        },
        {
          "lineno": 100,
          "line": "            } else if (let Some(_) <- Regex(##\"\\.{3}|va_list\"##).matches(paramList[i])) { //处理诸如...的函数参数"
        },
        {
          "lineno": 101,
          "line": "                paramsToken += Token(TokenKind.ELLIPSIS)"
        },
        {
          "lineno": 102,
          "line": "            } else {"
        },
        {
          "lineno": 103,
          "line": "                println(\"unknown param:${paramList[i]}\")"
        },
        {
          "lineno": 104,
          "line": "            }"
        },
        {
          "lineno": 105,
          "line": "            if (i != paramList.size - 1) {"
        },
        {
          "lineno": 106,
          "line": "                paramsToken += Token(TokenKind.COMMA)"
        },
        {
          "lineno": 107,
          "line": "            }"
        },
        {
          "lineno": 108,
          "line": "        }"
        },
        {
          "lineno": 109,
          "line": "        let nameToken = Token(TokenKind.IDENTIFIER, funcName)"
        },
        {
          "lineno": 110,
          "line": "        outTokens += quote(foreign func $(nameToken)($(paramsToken)): $(funcReturn)"
        },
        {
          "lineno": 111,
          "line": "        )"
        },
        {
          "lineno": 112,
          "line": "    }"
        },
        {
          "lineno": 113,
          "line": "    file.close()"
        },
        {
          "lineno": 114,
          "line": "    outTokens"
        },
        {
          "lineno": 115,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 47,
          "end_line": 60,
          "label": "func parseDotH(dotH: String): Tokens {\n    var outTokens = Tokens()\n    let file = File(dotH, Read)\n    let reader = StringReader(file)\n    var content = reader.readToEnd() //StringReader的分段读取未解决，暂时直接全部读完\n    let commentRegex = Regex(##\"/\\*.*\\*/|//.*(\\n|\\r)|\\*/|/\\*|\\*{2}\\s.*(\\n|\\r)\"##) //移除注释\n    content = commentRegex\n        .matcher(content)\n        .replaceAll(\"\")\n        .replace(\"void(*)(void*)\", \"void*\")\n        .replace(\"int (*callback)(void*,int,char**,char**)\", \"void *\")\n    let funcRegex = Regex(##\"\\w+\\s+\\**\\w+\\s*\\([^)]*\\)\\s*;\"##) //获得函数定义的匹配\n    let funcArr = funcRegex.matcher(content).findAll() ?? Array<MatchData>()\n    for (i in funcArr) {",
          "successors": [
            {
              "id": 2,
              "start_line": 61,
              "end_line": 64,
              "label": "var funcDefine = i.matchStr()\nlet funcDefineArray = funcDefine.split(\"(\")\nlet funcPrefix = funcDefineArray[0].split(\" \")\nvar funcReturn = Tokens()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 65,
                  "end_line": 69,
                  "label": "if (typeMap.contains(funcPrefix[0])) {\n    funcReturn += Token(typeMap[funcPrefix[0]])\n}else{\n    funcReturn += Token(TokenKind.UNIT)\n}",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 70,
                      "end_line": 78,
                      "label": "var funcName = funcPrefix[1]\nif (funcName.contains(\"*\")) { //判断是否可能为字符串\n    funcName = funcName.replace(\"*\", \"\")\n    if (funcPrefix[0] == \"char\") {\n        funcReturn = quote(CString)\n    } else {\n        funcReturn = quote(CPointer<Byte>)\n    }\n}",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 79,
                          "end_line": 114,
                          "label": "let paramListStr = funcDefineArray[1]\nlet paramRegex = Regex(##\"(\\w+\\s*\\**|\\w+\\s+\\**\\w+|\\.{3})(\\s*,|\\s*\\))\"##) //匹配到参数列表\nlet paramMatchList = paramRegex.matcher(paramListStr).findAll() ?? Array<MatchData>()\nlet paramList = Array<String>(paramMatchList.size,\n    {i => Regex(##\"\\s*,|\\s*\\)|\\n|\\r\"##).matcher(paramMatchList[i].matchStr()).replace(\"\")}) //移除特殊字符并存入数组\nvar paramsToken = Tokens()\nfor (i in 0..paramList.size) {\n    println(\"${funcName}\\n${paramList}\\n${\"void\" == paramList[i]}\")\n    if (let Some(_) <- Regex(##\"\\w+\\s+\\**\\w+\"##).matches(paramList[i])) { //处理诸如int n的函数参数\n        let paramSplit = paramList[i].split(\" \")\n        let type_u = paramSplit[0].replace(\"*\", \"\")\n        let paramToken = Token(TokenKind.IDENTIFIER, paramSplit[1].replace(\"*\", \"\").replace(\"type\",\"type${i}\"))\n        let typeToken = parseType(type_u, paramList[i])\n        paramsToken += quote($(paramToken): $(typeToken))\n    } else if (\"void\" == paramList[i]) { //处理诸如void的函数参数\n        continue\n    } else if (let Some(_) <- Regex(##\"\\w+\\s*\\**\"##).matches(paramList[i])) { // 处理诸如int*的函数参数\n        let type_u = paramList[i].replace(\"*\", \"\")\n        let paramToken = Token(TokenKind.IDENTIFIER, \"param${i}\")\n        let typeToken = parseType(type_u, paramList[i])\n        paramsToken += quote($(paramToken): $(typeToken))\n    } else if (let Some(_) <- Regex(##\"\\.{3}|va_list\"##).matches(paramList[i])) { //处理诸如...的函数参数\n        paramsToken += Token(TokenKind.ELLIPSIS)\n    } else {\n        println(\"unknown param:${paramList[i]}\")\n    }\n    if (i != paramList.size - 1) {\n        paramsToken += Token(TokenKind.COMMA)\n    }\n}\nlet nameToken = Token(TokenKind.IDENTIFIER, funcName)\noutTokens += quote(foreign func $(nameToken)($(paramsToken)): $(funcReturn)\n)\nfile.close()\noutTokens",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "include",
      "type": "function",
      "start_line": 117,
      "end_line": 119,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 117,
          "line": "public macro include(input: Tokens): Tokens {"
        },
        {
          "lineno": 118,
          "line": "    parseDotH(input.toString().replace('\"', \"\"))"
        },
        {
          "lineno": 119,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 117,
          "end_line": 119,
          "label": "public macro include(input: Tokens): Tokens {\n    parseDotH(input.toString().replace('\"', \"\"))\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package opds_cj.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.fs.*"
    },
    {
      "lineno": 5,
      "line": "import std.io.*"
    },
    {
      "lineno": 6,
      "line": "import std.regex.*"
    },
    {
      "lineno": 7,
      "line": "import std.collection.HashMap"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "let typeMap = HashMap<String, TokenKind>("
    },
    {
      "lineno": 10,
      "line": "    ["
    },
    {
      "lineno": 11,
      "line": "        (\"void\", TokenKind.UNIT),"
    },
    {
      "lineno": 12,
      "line": "        (\"bool\", TokenKind.BOOLEAN),"
    },
    {
      "lineno": 13,
      "line": "        (\"char\", TokenKind.UINT8),"
    },
    {
      "lineno": 14,
      "line": "        (\"int8_t\", TokenKind.UINT8),"
    },
    {
      "lineno": 15,
      "line": "        (\"uint8_t\", TokenKind.UINT8),"
    },
    {
      "lineno": 16,
      "line": "        (\"int16_t\", TokenKind.INT16),"
    },
    {
      "lineno": 17,
      "line": "        (\"uint16_t\", TokenKind.UINT16),"
    },
    {
      "lineno": 18,
      "line": "        (\"int32_t\", TokenKind.INT32),"
    },
    {
      "lineno": 19,
      "line": "        (\"uint32_t\", TokenKind.UINT32),"
    },
    {
      "lineno": 20,
      "line": "        (\"int64_t\", TokenKind.INT64),"
    },
    {
      "lineno": 21,
      "line": "        (\"uint64_t\", TokenKind.UINT64),"
    },
    {
      "lineno": 22,
      "line": "        (\"ssize_t\", TokenKind.INTNATIVE),"
    },
    {
      "lineno": 23,
      "line": "        (\"size_t\", TokenKind.UINTNATIVE),"
    },
    {
      "lineno": 24,
      "line": "        (\"float\", TokenKind.FLOAT32),"
    },
    {
      "lineno": 25,
      "line": "        (\"double\", TokenKind.FLOAT64), //以上为通用映射表"
    },
    {
      "lineno": 26,
      "line": "        (\"int\", TokenKind.INT32), //根据平台变化"
    },
    {
      "lineno": 27,
      "line": "        (\"sqlite3_int64\", TokenKind.INT64) //以上为当前项目特殊映射"
    },
    {
      "lineno": 28,
      "line": "    ]"
    },
    {
      "lineno": 29,
      "line": ")"
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 116,
      "line": ""
    }
  ],
  "blocks": []
}