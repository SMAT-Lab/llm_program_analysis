{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 31,
  "functions": [],
  "classes": [
    {
      "name": "Result",
      "type": "class",
      "start_line": 3,
      "end_line": 6,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "public enum Result<T, E> {"
        },
        {
          "lineno": 4,
          "line": "    | Ok(T)"
        },
        {
          "lineno": 5,
          "line": "    | Err(E)"
        },
        {
          "lineno": 6,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 3,
          "end_line": 6,
          "label": "public enum Result<T, E> {\n    | Ok(T)\n    | Err(E)\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ResultExt",
      "type": "class",
      "start_line": 10,
      "end_line": 31,
      "functions": [
        {
          "name": "map",
          "type": "function",
          "start_line": 11,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    public func map<U>(f: (T) -> U): Result<U, E> {"
            },
            {
              "lineno": 12,
              "line": "        match (this) {"
            },
            {
              "lineno": 13,
              "line": "            case Ok(v) => Ok(f(v))"
            },
            {
              "lineno": 14,
              "line": "            case Err(e) => Err(e)"
            },
            {
              "lineno": 15,
              "line": "        }"
            },
            {
              "lineno": 16,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 11,
              "end_line": 11,
              "label": "    public func map<U>(f: (T) -> U): Result<U, E> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "        match (this) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "            case Ok(v) => Ok(f(v))",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "            case Err(e) => Err(e)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 15,
              "end_line": 16,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "mapErr",
          "type": "function",
          "start_line": 18,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    public func mapErr<F>(f: (E) -> F): Result<T, F> {"
            },
            {
              "lineno": 19,
              "line": "        match (this) {"
            },
            {
              "lineno": 20,
              "line": "            case Ok(t) => Ok(t)"
            },
            {
              "lineno": 21,
              "line": "            case Err(e) => Err(f(e))"
            },
            {
              "lineno": 22,
              "line": "        }"
            },
            {
              "lineno": 23,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 18,
              "label": "    public func mapErr<F>(f: (E) -> F): Result<T, F> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "        match (this) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 20,
                      "end_line": 20,
                      "label": "            case Ok(t) => Ok(t)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 21,
                      "end_line": 21,
                      "label": "            case Err(e) => Err(f(e))",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 22,
              "end_line": 23,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "andThen",
          "type": "function",
          "start_line": 25,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    public func andThen<U>(f: (T) -> Result<U, E>): Result<U, E> {"
            },
            {
              "lineno": 26,
              "line": "        match (this) {"
            },
            {
              "lineno": 27,
              "line": "            case Ok(v) => f(v)"
            },
            {
              "lineno": 28,
              "line": "            case Err(e) => Err(e)"
            },
            {
              "lineno": 29,
              "line": "        }"
            },
            {
              "lineno": 30,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 25,
              "end_line": 26,
              "label": "    public func andThen<U>(f: (T) -> Result<U, E>): Result<U, E> {\n        match (this) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 27,
                  "end_line": 27,
                  "label": "            case Ok(v) => f(v)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "            case Err(e) => Err(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "extend<T, E> Result<T, E> <: ResultExt {"
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 10,
          "label": "extend<T, E> Result<T, E> <: ResultExt {",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 24,
              "label": "\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 31,
                  "end_line": 31,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package simple_math_interpreter.ext"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "public interface ResultExt {}"
    },
    {
      "lineno": 9,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package simple_math_interpreter.ext",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 8,
          "label": "public interface ResultExt {}",
          "successors": []
        }
      ]
    }
  ]
}