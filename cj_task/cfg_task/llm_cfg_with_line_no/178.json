{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 54,
  "functions": [],
  "classes": [
    {
      "name": "UnpackFilter",
      "type": "class",
      "start_line": 9,
      "end_line": 54,
      "functions": [
        {
          "name": "getBlockLength",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    public func getBlockLength(): Int32 {"
            },
            {
              "lineno": 19,
              "line": "        return BlockLength"
            },
            {
              "lineno": 20,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 19,
              "label": "    public func getBlockLength(): Int32 {\n        return BlockLength",
              "successors": [
                {
                  "id": 2,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setBlockLength",
          "type": "function",
          "start_line": 21,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 21,
              "line": "    public func setBlockLength(blockLength: Int32) {"
            },
            {
              "lineno": 22,
              "line": "        BlockLength = blockLength"
            },
            {
              "lineno": 23,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 21,
              "end_line": 23,
              "label": "    public func setBlockLength(blockLength: Int32) {\n        BlockLength = blockLength\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getBlockStart",
          "type": "function",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 24,
              "line": "    public func getBlockStart(): Int32 {"
            },
            {
              "lineno": 25,
              "line": "        return BlockStart"
            },
            {
              "lineno": 26,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 24,
              "end_line": 25,
              "label": "    public func getBlockStart(): Int32 {\n        return BlockStart",
              "successors": []
            }
          ]
        },
        {
          "name": "setBlockStart",
          "type": "function",
          "start_line": 27,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    public func setBlockStart(blockStart: Int32) {"
            },
            {
              "lineno": 28,
              "line": "        BlockStart = blockStart"
            },
            {
              "lineno": 29,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 27,
              "end_line": 29,
              "label": "    public func setBlockStart(blockStart: Int32) {\n        BlockStart = blockStart\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getExecCount",
          "type": "function",
          "start_line": 30,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 30,
              "line": "    public func getExecCount(): Int32 {"
            },
            {
              "lineno": 31,
              "line": "        return ExecCount"
            },
            {
              "lineno": 32,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 30,
              "end_line": 32,
              "label": "    public func getExecCount(): Int32 {\n        return ExecCount\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "setExecCount",
          "type": "function",
          "start_line": 33,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "    public func setExecCount(execCount: Int32) {"
            },
            {
              "lineno": 34,
              "line": "        ExecCount = execCount"
            },
            {
              "lineno": 35,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 33,
              "end_line": 35,
              "label": "    public func setExecCount(execCount: Int32) {\n        ExecCount = execCount\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "isNextWindow",
          "type": "function",
          "start_line": 36,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 36,
              "line": "    public func isNextWindow(): Bool {"
            },
            {
              "lineno": 37,
              "line": "        return NextWindow"
            },
            {
              "lineno": 38,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 36,
              "end_line": 38,
              "label": "    public func isNextWindow(): Bool {\n        return NextWindow\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "setNextWindow",
          "type": "function",
          "start_line": 39,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    public func setNextWindow( nextWindow: Bool) {"
            },
            {
              "lineno": 40,
              "line": "        NextWindow = nextWindow"
            },
            {
              "lineno": 41,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 39,
              "end_line": 41,
              "label": "    public func setNextWindow( nextWindow: Bool) {\n        NextWindow = nextWindow\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getParentFilter",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    public func getParentFilter() : Int32{"
            },
            {
              "lineno": 43,
              "line": "        return ParentFilter"
            },
            {
              "lineno": 44,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 44,
              "label": "    public func getParentFilter() : Int32{\n        return ParentFilter\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "setParentFilter",
          "type": "function",
          "start_line": 45,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    public func setParentFilter(parentFilter: Int32) {"
            },
            {
              "lineno": 46,
              "line": "        ParentFilter = parentFilter"
            },
            {
              "lineno": 47,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 45,
              "end_line": 47,
              "label": "    public func setParentFilter(parentFilter: Int32) {\n        ParentFilter = parentFilter\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getPrg",
          "type": "function",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    public func getPrg(): VMPreparedProgram {"
            },
            {
              "lineno": 49,
              "line": "        return Prg"
            },
            {
              "lineno": 50,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 48,
              "end_line": 50,
              "label": "    public func getPrg(): VMPreparedProgram {\n        return Prg\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "setPrg",
          "type": "function",
          "start_line": 51,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 51,
              "line": "    public func setPrg(prg: VMPreparedProgram) {"
            },
            {
              "lineno": 52,
              "line": "        Prg = prg"
            },
            {
              "lineno": 53,
              "line": "    }"
            }
          ],
          "blocks": []
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "public class UnpackFilter {"
        },
        {
          "lineno": 10,
          "line": "    private var BlockStart: Int32 = 0"
        },
        {
          "lineno": 11,
          "line": "    private var BlockLength: Int32 = 0"
        },
        {
          "lineno": 12,
          "line": "    private var ExecCount: Int32 = 0"
        },
        {
          "lineno": 13,
          "line": "    private var NextWindow: Bool = false"
        },
        {
          "lineno": 14,
          "line": "    // position of parent filter in Filters array used as prototype for filter"
        },
        {
          "lineno": 15,
          "line": "    // in PrgStack array. Not defined for filters in Filters array."
        },
        {
          "lineno": 16,
          "line": "    private var ParentFilter: Int32 = 0"
        },
        {
          "lineno": 17,
          "line": "    private var Prg :VMPreparedProgram = VMPreparedProgram()"
        },
        {
          "lineno": 54,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 9,
          "end_line": 17,
          "label": "public class UnpackFilter {\n    private var BlockStart: Int32 = 0\n    private var BlockLength: Int32 = 0\n    private var ExecCount: Int32 = 0\n    private var NextWindow: Bool = false\n    // position of parent filter in Filters array used as prototype for filter\n    // in PrgStack array. Not defined for filters in Filters array.\n    private var ParentFilter: Int32 = 0\n    private var Prg :VMPreparedProgram = VMPreparedProgram()",
          "successors": [
            {
              "id": 2,
              "start_line": 54,
              "end_line": 54,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package compress4cj.archivers.rar.unpack"
    },
    {
      "lineno": 2,
      "line": "import std.log.*"
    },
    {
      "lineno": 3,
      "line": "import std.io.*"
    },
    {
      "lineno": 4,
      "line": "import std.fs.*"
    },
    {
      "lineno": 5,
      "line": "import std.collection.*"
    },
    {
      "lineno": 6,
      "line": "import compress4cj.archivers.rar.unpack.decode.Compress"
    },
    {
      "lineno": 7,
      "line": "import compress4cj.utils.internals.URS"
    },
    {
      "lineno": 8,
      "line": "import compress4cj.archivers.rar.unpack.vm.VMPreparedProgram"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "package compress4cj.archivers.rar.unpack\nimport std.log.*\nimport std.io.*\nimport std.fs.*\nimport std.collection.*\nimport compress4cj.archivers.rar.unpack.decode.Compress\nimport compress4cj.utils.internals.URS\nimport compress4cj.archivers.rar.unpack.vm.VMPreparedProgram",
      "successors": []
    }
  ]
}