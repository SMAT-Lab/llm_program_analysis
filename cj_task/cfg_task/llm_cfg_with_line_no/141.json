{
  "name": "mp3tag4cj.mp3tag4cj",
  "type": "CFG",
  "start_line": 1,
  "end_line": 40,
  "functions": [],
  "classes": [
    {
      "name": "ID3v2ObseleteFrame",
      "type": "class",
      "start_line": 2,
      "end_line": 40,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 7,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 7,
              "line": "    public init(buffer: Array<Int8>, offset: Int32) {"
            },
            {
              "lineno": 8,
              "line": "        super(buffer, offset)"
            },
            {
              "lineno": 9,
              "line": "        super.unpackFrame(buffer, offset)"
            },
            {
              "lineno": 10,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 7,
              "end_line": 9,
              "label": "    public init(buffer: Array<Int8>, offset: Int32) {\n        super(buffer, offset)\n        super.unpackFrame(buffer, offset)\n",
              "successors": [
                {
                  "id": 2,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    public init(id: String, data: Array<Int8>) {"
            },
            {
              "lineno": 12,
              "line": "        super(id, data)"
            },
            {
              "lineno": 13,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 11,
              "end_line": 13,
              "label": "    public init(id: String, data: Array<Int8>) {\n        super(id, data)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "unpackHeader",
          "type": "function",
          "start_line": 14,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    protected override func unpackHeader(buffer: Array<Int8>, offset: Int32): Int32 {"
            },
            {
              "lineno": 15,
              "line": "        match (BufferTools.byteBufferToStringIgnoringEncodingIssues("
            },
            {
              "lineno": 16,
              "line": "            buffer,"
            },
            {
              "lineno": 17,
              "line": "            offset + ID_OFFSET,"
            },
            {
              "lineno": 18,
              "line": "            ID_LENGTH"
            },
            {
              "lineno": 19,
              "line": "        )) {"
            },
            {
              "lineno": 20,
              "line": "            case Some(x) => id = x"
            },
            {
              "lineno": 21,
              "line": "            case None => ()"
            },
            {
              "lineno": 22,
              "line": "        }"
            },
            {
              "lineno": 23,
              "line": "        unpackDataLength(buffer, offset)"
            },
            {
              "lineno": 24,
              "line": "        return offset + HEADER_LENGTH"
            },
            {
              "lineno": 25,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 14,
              "end_line": 14,
              "label": " protected override func unpackHeader(buffer: Array<Int8>, offset: Int32): Int32 {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 15,
                  "end_line": 22,
                  "label": " match (BufferTools.byteBufferToStringIgnoringEncodingIssues(\n buffer,\n offset + ID_OFFSET,\n ID_LENGTH\n )) {\n case Some(x) => id = x\n case None => ()\n }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 23,
                      "end_line": 23,
                      "label": " unpackDataLength(buffer, offset)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 24,
                          "end_line": 24,
                          "label": " return offset + HEADER_LENGTH",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "unpackDataLength",
          "type": "function",
          "start_line": 26,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    protected override func unpackDataLength(buffer: Array<Int8>, offset: Int32): Unit {"
            },
            {
              "lineno": 27,
              "line": "        dataLength = BufferTools.unpackInteger("
            },
            {
              "lineno": 28,
              "line": "            Int8(0),"
            },
            {
              "lineno": 29,
              "line": "            buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI)],"
            },
            {
              "lineno": 30,
              "line": "            buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 1],"
            },
            {
              "lineno": 31,
              "line": "            buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 2]"
            },
            {
              "lineno": 32,
              "line": "        )"
            },
            {
              "lineno": 33,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 26,
              "end_line": 33,
              "label": "protected override func unpackDataLength(buffer: Array<Int8>, offset: Int32): Unit {\n    dataLength = BufferTools.unpackInteger(\n        Int8(0),\n        buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI)],\n        buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 1],\n        buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 2]\n    )\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "packFrame",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    public override func packFrame(_: Array<Int8>, _: Int32): Unit {"
            },
            {
              "lineno": 35,
              "line": "        throw NotSupportedException(\"Packing Obselete frames is not supported\")"
            },
            {
              "lineno": 36,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 34,
              "end_line": 35,
              "label": "    public override func packFrame(_: Array<Int8>, _: Int32): Unit {\n        throw NotSupportedException(\"Packing Obselete frames is not supported\")",
              "successors": []
            }
          ]
        },
        {
          "name": "getLength",
          "type": "function",
          "start_line": 37,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 37,
              "line": "    public override func getLength(): Int32 {"
            },
            {
              "lineno": 38,
              "line": "        return dataLength + HEADER_LENGTH"
            },
            {
              "lineno": 39,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 37,
              "end_line": 39,
              "label": "    public override func getLength(): Int32 {\n        return dataLength + HEADER_LENGTH\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public class ID3v2ObseleteFrame <: ID3v2Frame {"
        },
        {
          "lineno": 3,
          "line": "    private static let HEADER_LENGTH: Int32 = 6"
        },
        {
          "lineno": 4,
          "line": "    private static let ID_OFFSET: Int32 = 0"
        },
        {
          "lineno": 5,
          "line": "    private static let ID_LENGTH: Int32 = 3"
        },
        {
          "lineno": 6,
          "line": "    private static let DATA_LENGTH_OFFSET_ZI: Int32 = 3"
        },
        {
          "lineno": 40,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 5,
          "label": "public class ID3v2ObseleteFrame <: ID3v2Frame {\n    private static let HEADER_LENGTH: Int32 = 6\n    private static let ID_OFFSET: Int32 = 0\n    private static let ID_LENGTH: Int32 = 3\n    private static let DATA_LENGTH_OFFSET_ZI: Int32 = 3",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 40,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package mp3tag4cj.mp3tag4cj"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package mp3tag4cj.mp3tag4cj",
      "successors": []
    }
  ]
}