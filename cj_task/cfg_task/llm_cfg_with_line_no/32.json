{
  "name": "cangjie_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 47,
  "functions": [],
  "classes": [
    {
      "name": "Buffer",
      "type": "class",
      "start_line": 5,
      "end_line": 47,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    init(socket: TcpSocket) {"
            },
            {
              "lineno": 12,
              "line": "        this.socket = socket"
            },
            {
              "lineno": 13,
              "line": "        this.buf = Array<Byte>(4096, item: 0)"
            },
            {
              "lineno": 14,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 11,
              "end_line": 14,
              "label": "    init(socket: TcpSocket) {\n        this.socket = socket\n        this.buf = Array<Byte>(4096, item: 0)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readNext",
          "type": "function",
          "start_line": 16,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    public func readNext(need: Int64): Array<Byte> {"
            },
            {
              "lineno": 17,
              "line": "        if (length < need) {"
            },
            {
              "lineno": 18,
              "line": "            fill(need)"
            },
            {
              "lineno": 19,
              "line": "        }"
            },
            {
              "lineno": 20,
              "line": "        "
            },
            {
              "lineno": 21,
              "line": "        let data = buf[idx .. idx + need]"
            },
            {
              "lineno": 22,
              "line": "        idx += need"
            },
            {
              "lineno": 23,
              "line": "        length -= need"
            },
            {
              "lineno": 24,
              "line": ""
            },
            {
              "lineno": 25,
              "line": "        return data"
            },
            {
              "lineno": 26,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 16,
              "end_line": 16,
              "label": "    public func readNext(need: Int64): Array<Byte> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 17,
                  "end_line": 19,
                  "label": "        if (length < need) {\n            fill(need)\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 21,
                      "end_line": 23,
                      "label": "        let data = buf[idx .. idx + need]\n        idx += need\n        length -= need",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 25,
                          "end_line": 25,
                          "label": "        return data",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fill",
          "type": "function",
          "start_line": 28,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public func fill(need: Int64) {"
            },
            {
              "lineno": 29,
              "line": "        if (length > 0 && idx > 0) {"
            },
            {
              "lineno": 30,
              "line": "            buf.copyTo(buf, idx, 0, length - idx)"
            },
            {
              "lineno": 31,
              "line": "        }"
            },
            {
              "lineno": 32,
              "line": "        if (need > buf.size) {"
            },
            {
              "lineno": 33,
              "line": "            grow(need)"
            },
            {
              "lineno": 34,
              "line": "        }"
            },
            {
              "lineno": 35,
              "line": "        idx = 0"
            },
            {
              "lineno": 36,
              "line": "        while (length < need) {"
            },
            {
              "lineno": 37,
              "line": "            var readSize = socket.read(buf[length..])"
            },
            {
              "lineno": 38,
              "line": "            length += readSize"
            },
            {
              "lineno": 39,
              "line": "        }"
            },
            {
              "lineno": 40,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 28,
              "end_line": 28,
              "label": "    public func fill(need: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 29,
                  "end_line": 31,
                  "label": "        if (length > 0 && idx > 0) {\n            buf.copyTo(buf, idx, 0, length - idx)\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 32,
                      "end_line": 34,
                      "label": "        if (need > buf.size) {\n            grow(need)\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 35,
                          "end_line": 35,
                          "label": "        idx = 0",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 36,
                              "end_line": 39,
                              "label": "        while (length < need) {\n            var readSize = socket.read(buf[length..])\n            length += readSize\n        }",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 40,
                                  "end_line": 40,
                                  "label": "    }",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "grow",
          "type": "function",
          "start_line": 42,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    public func grow(need: Int64) {"
            },
            {
              "lineno": 43,
              "line": "        let newBuf = Array<Byte>(need, item: 0)"
            },
            {
              "lineno": 44,
              "line": "        buf.copyTo(newBuf, 0, 0, length)"
            },
            {
              "lineno": 45,
              "line": "        this.buf = newBuf"
            },
            {
              "lineno": 46,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 46,
              "label": "    public func grow(need: Int64) {\n        let newBuf = Array<Byte>(need, item: 0)\n        buf.copyTo(newBuf, 0, 0, length)\n        this.buf = newBuf\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "public class Buffer {"
        },
        {
          "lineno": 6,
          "line": "    private var idx: Int64 = 0"
        },
        {
          "lineno": 7,
          "line": "    private var length: Int64 = 0"
        },
        {
          "lineno": 8,
          "line": "    private var buf: Array<Byte>"
        },
        {
          "lineno": 9,
          "line": "    private let socket: TcpSocket"
        },
        {
          "lineno": 10,
          "line": ""
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 9,
          "label": "public class Buffer {\n    private var idx: Int64 = 0\n    private var length: Int64 = 0\n    private var buf: Array<Byte>\n    private let socket: TcpSocket",
          "successors": [
            {
              "id": 2,
              "start_line": 47,
              "end_line": 47,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package cangjieWeb.mysql"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.net.{TcpSocket}"
    },
    {
      "lineno": 4,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package cangjieWeb.mysql",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\nimport std.net.{TcpSocket}",
          "successors": []
        }
      ]
    }
  ]
}