{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 5,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "main() {"
        },
        {
          "lineno": 6,
          "line": "    let intput: ByteBuffer = ByteBuffer()"
        },
        {
          "lineno": 7,
          "line": "    let str: EncodingDetectorInputStream = EncodingDetectorInputStream(intput)"
        },
        {
          "lineno": 8,
          "line": "    var temp = Array<Byte>(1,repeat:0)"
        },
        {
          "lineno": 9,
          "line": "    try {"
        },
        {
          "lineno": 10,
          "line": "        str.read(temp)"
        },
        {
          "lineno": 11,
          "line": "    } catch(e: Exception) {"
        },
        {
          "lineno": 12,
          "line": "        return 0"
        },
        {
          "lineno": 13,
          "line": "    }"
        },
        {
          "lineno": 14,
          "line": "    try {"
        },
        {
          "lineno": 15,
          "line": "        str.skip(1)"
        },
        {
          "lineno": 16,
          "line": "    } catch(e: Exception) {"
        },
        {
          "lineno": 17,
          "line": "        return 0"
        },
        {
          "lineno": 18,
          "line": "    }"
        },
        {
          "lineno": 19,
          "line": "    return 1"
        },
        {
          "lineno": 20,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 8,
          "label": "main() {\n    let intput: ByteBuffer = ByteBuffer()\n    let str: EncodingDetectorInputStream = EncodingDetectorInputStream(intput)\n    var temp = Array<Byte>(1,repeat:0)",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 10,
              "label": "try {\n        str.read(temp)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 13,
                  "label": "} catch(e: Exception) {\n        return 0\n    }",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 15,
                      "label": "try {\n        str.skip(1)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 16,
                          "end_line": 18,
                          "label": "} catch(e: Exception) {\n        return 0\n    }",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 19,
                              "end_line": 20,
                              "label": "return 1\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// EXEC: cjc %import-path %L %l %f"
    },
    {
      "lineno": 2,
      "line": "// EXEC: ./main"
    },
    {
      "lineno": 3,
      "line": "import chardet4cj.*"
    },
    {
      "lineno": 4,
      "line": "import std.io.*"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "// EXEC: cjc %import-path %L %l %f\n// EXEC: ./main",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 4,
          "label": "import chardet4cj.*\nimport std.io.*",
          "successors": []
        }
      ]
    }
  ]
}