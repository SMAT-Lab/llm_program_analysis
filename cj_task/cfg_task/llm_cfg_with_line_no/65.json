{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 58,
  "functions": [
    {
      "name": "newField",
      "type": "function",
      "start_line": 20,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 20,
          "line": "func newField(varDecl: VarDecl): Tokens {"
        },
        {
          "lineno": 21,
          "line": "    let name = varDecl.identifier"
        },
        {
          "lineno": 22,
          "line": "    // let type_u = varDecl.declType"
        },
        {
          "lineno": 23,
          "line": "    quote("
        },
        {
          "lineno": 24,
          "line": "        w.writeName($(name.value)).writeValue($(name)))"
        },
        {
          "lineno": 25,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 20,
          "end_line": 25,
          "label": "func newField(varDecl: VarDecl): Tokens {\n    let name = varDecl.identifier\n    // let type_u = varDecl.declType\n    quote(\n        w.writeName($(name.value)).writeValue($(name)))\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "newToString",
      "type": "function",
      "start_line": 27,
      "end_line": 45,
      "functions": [],
      "classes": [
        {
          "name": "Series",
          "type": "class",
          "start_line": 33,
          "end_line": 43,
          "functions": [
            {
              "name": "toJson",
              "type": "function",
              "start_line": 34,
              "end_line": 42,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 34,
                  "line": "            public func toJson(): String {"
                },
                {
                  "lineno": 35,
                  "line": "                let stream = ByteBuffer()"
                },
                {
                  "lineno": 36,
                  "line": "                let w = JsonWriter(stream)"
                },
                {
                  "lineno": 37,
                  "line": "                w.startObject()"
                },
                {
                  "lineno": 38,
                  "line": "                $(newToken)"
                },
                {
                  "lineno": 39,
                  "line": "                w.endObject()"
                },
                {
                  "lineno": 40,
                  "line": "                w.flush()"
                },
                {
                  "lineno": 41,
                  "line": "                return String.fromUtf8(readToEnd(stream))"
                },
                {
                  "lineno": 42,
                  "line": "            }"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 34,
                  "end_line": 41,
                  "label": "            public func toJson(): String {\n                let stream = ByteBuffer()\n                let w = JsonWriter(stream)\n                w.startObject()\n                $(newToken)\n                w.endObject()\n                w.flush()\n                return String.fromUtf8(readToEnd(stream))",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "        extend Series {"
            },
            {
              "lineno": 43,
              "line": "        }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 33,
              "end_line": 43,
              "label": "        extend Series {\n        }",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 27,
          "line": "func newToString(varList: ArrayList<VarDecl>): Tokens {"
        },
        {
          "lineno": 28,
          "line": "    var newToken = Tokens()"
        },
        {
          "lineno": 29,
          "line": "    for (i in varList) {"
        },
        {
          "lineno": 30,
          "line": "        newToken += newField(i)"
        },
        {
          "lineno": 31,
          "line": "    }"
        },
        {
          "lineno": 32,
          "line": "    quote("
        },
        {
          "lineno": 44,
          "line": "    )"
        },
        {
          "lineno": 45,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 27,
          "end_line": 28,
          "label": "func newToString(varList: ArrayList<VarDecl>): Tokens {\n    var newToken = Tokens()",
          "successors": [
            {
              "id": 2,
              "start_line": 29,
              "end_line": 31,
              "label": "for (i in varList) {\n        newToken += newField(i)\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 32,
                  "end_line": 44,
                  "label": "quote(\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 45,
                      "end_line": 45,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Json",
      "type": "function",
      "start_line": 47,
      "end_line": 58,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 47,
          "line": "public macro Json(input: Tokens): Tokens {"
        },
        {
          "lineno": 48,
          "line": "    let s: Decl = parseDecl(input)"
        },
        {
          "lineno": 49,
          "line": "    var toString: Tokens"
        },
        {
          "lineno": 50,
          "line": "    var visitor = VarVisitor()"
        },
        {
          "lineno": 51,
          "line": "    match (s) {"
        },
        {
          "lineno": 52,
          "line": "        case d: ClassDecl =>"
        },
        {
          "lineno": 53,
          "line": "            d.traverse(visitor)"
        },
        {
          "lineno": 54,
          "line": "            toString = newToString(visitor.varList)"
        },
        {
          "lineno": 55,
          "line": "        case _ => throw Exception(\"Json only using for Class\")"
        },
        {
          "lineno": 56,
          "line": "    }"
        },
        {
          "lineno": 57,
          "line": "    input + toString"
        },
        {
          "lineno": 58,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 47,
          "end_line": 50,
          "label": "public macro Json(input: Tokens): Tokens {\n    let s: Decl = parseDecl(input)\n    var toString: Tokens\n    var visitor = VarVisitor()",
          "successors": [
            {
              "id": 2,
              "start_line": 51,
              "end_line": 55,
              "label": "match (s) {\n    case d: ClassDecl =>\n        d.traverse(visitor)\n        toString = newToString(visitor.varList)\n    case _ => throw Exception(\"Json only using for Class\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 57,
                  "end_line": 58,
                  "label": "input + toString\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "VarVisitor",
      "type": "class",
      "start_line": 6,
      "end_line": 18,
      "functions": [
        {
          "name": "visit",
          "type": "function",
          "start_line": 8,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    public override func visit(varDecl: VarDecl) {"
            },
            {
              "lineno": 9,
              "line": "        varList.append(varDecl)"
            },
            {
              "lineno": 10,
              "line": "        breakTraverse() // 不会继续遍历 varDecl 的子节点"
            },
            {
              "lineno": 11,
              "line": "        return"
            },
            {
              "lineno": 12,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 8,
              "end_line": 10,
              "label": "    public override func visit(varDecl: VarDecl) {\n        varList.append(varDecl)\n        breakTraverse() // \n        \n",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "        return",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "visit",
          "type": "function",
          "start_line": 14,
          "end_line": 17,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    public override func visit(_: FuncDecl) { //阻止在func函数下查找变量"
            },
            {
              "lineno": 15,
              "line": "        breakTraverse()"
            },
            {
              "lineno": 16,
              "line": "        return"
            },
            {
              "lineno": 17,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 14,
              "end_line": 14,
              "label": "    public override func visit(_: FuncDecl) { //\b623b\b6b62\b5728func\b51fd\b6570\b4e0b\b67e5\b627e\bn53d8\b91cf",
              "successors": [
                {
                  "id": 2,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "        breakTraverse()\n        return",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class VarVisitor <: Visitor {"
        },
        {
          "lineno": 7,
          "line": "    public var varList = ArrayList<VarDecl>()"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 18,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 18,
          "label": "class VarVisitor <: Visitor {\n    public var varList = ArrayList<VarDecl>()\n\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package opds_cj.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.ArrayList"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "macro package opds_cj.macros",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 2,
      "end_line": 3,
      "label": "\nimport std.ast.*",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 4,
      "end_line": 4,
      "label": "import std.collection.ArrayList",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 5,
      "end_line": 5,
      "label": "",
      "successors": []
    },
    {
      "id": 5,
      "start_line": 19,
      "end_line": 19,
      "label": "",
      "successors": []
    },
    {
      "id": 6,
      "start_line": 26,
      "end_line": 26,
      "label": "",
      "successors": []
    },
    {
      "id": 7,
      "start_line": 46,
      "end_line": 46,
      "label": "",
      "successors": []
    }
  ]
}