{
  "name": "cangjie_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 431,
  "functions": [],
  "classes": [
    {
      "name": "MysqlConnection",
      "type": "class",
      "start_line": 7,
      "end_line": 431,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 21,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 21,
              "line": "    init(config: Config) {"
            },
            {
              "lineno": 22,
              "line": "        this.config = config"
            },
            {
              "lineno": 23,
              "line": ""
            },
            {
              "lineno": 24,
              "line": "        // 构造tcpSocket"
            },
            {
              "lineno": 25,
              "line": "        var socket = TcpSocket(IPSocketAddress.parse(config.address))"
            },
            {
              "lineno": 26,
              "line": "        socket.keepAlive = SocketKeepAliveConfig()"
            },
            {
              "lineno": 27,
              "line": "        "
            },
            {
              "lineno": 28,
              "line": "        // 三次握手建立连接"
            },
            {
              "lineno": 29,
              "line": "        socket.connect()"
            },
            {
              "lineno": 30,
              "line": "        this.tcpSocket = socket"
            },
            {
              "lineno": 31,
              "line": "        this.buffer = Buffer(socket)"
            },
            {
              "lineno": 32,
              "line": "        // 处理handshake, mysql server 向 client 发送"
            },
            {
              "lineno": 33,
              "line": "        readInitPacket()"
            },
            {
              "lineno": 34,
              "line": ""
            },
            {
              "lineno": 35,
              "line": "        // Send Client Authentication Packet"
            },
            {
              "lineno": 36,
              "line": "        writeAuthPacket()"
            },
            {
              "lineno": 37,
              "line": "        // handleAuthResult"
            },
            {
              "lineno": 38,
              "line": "        handleAuthResult()"
            },
            {
              "lineno": 39,
              "line": ""
            },
            {
              "lineno": 40,
              "line": "        // get max allowed packet size"
            },
            {
              "lineno": 41,
              "line": "        // let result = getSystemVar(\"max_allowed_packet\")"
            },
            {
              "lineno": 42,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 21,
              "end_line": 42,
              "label": "    init(config: Config) {\n        this.config = config\n\n        // 构造tcpSocket\n        var socket = TcpSocket(IPSocketAddress.parse(config.address))\n        socket.keepAlive = SocketKeepAliveConfig()\n        \n        // 三次握手建立连接\n        socket.connect()\n        this.tcpSocket = socket\n        this.buffer = Buffer(socket)\n        // 处理handshake, mysql server 向 client 发送\n        readInitPacket()\n\n        // Send Client Authentication Packet\n        writeAuthPacket()\n        // handleAuthResult\n        handleAuthResult()\n\n        // get max allowed packet size\n        // let result = getSystemVar(\"max_allowed_packet\")\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getMetaData",
          "type": "function",
          "start_line": 44,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    public func getMetaData(): Map<String, String> {"
            },
            {
              "lineno": 45,
              "line": "        HashMap([])"
            },
            {
              "lineno": 46,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 44,
              "end_line": 46,
              "label": "    public func getMetaData(): Map<String, String> {\n        HashMap([])\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "createTransaction",
          "type": "function",
          "start_line": 47,
          "end_line": 49,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    public func createTransaction():Transaction {"
            },
            {
              "lineno": 48,
              "line": "        return MySqlTransaction()"
            },
            {
              "lineno": 49,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 47,
              "end_line": 48,
              "label": "    public func createTransaction():Transaction {\n        return MySqlTransaction()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 49,
                  "end_line": 49,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "state",
          "type": "function",
          "start_line": 51,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 51,
              "line": "    public prop state: ConnectionState {"
            },
            {
              "lineno": 52,
              "line": "        get() {"
            },
            {
              "lineno": 53,
              "line": "            ConnectionState.Connected"
            },
            {
              "lineno": 54,
              "line": "        }"
            },
            {
              "lineno": 55,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 51,
              "end_line": 55,
              "label": "    public prop state: ConnectionState {\n        get() {\n            ConnectionState.Connected\n        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "close",
          "type": "function",
          "start_line": 57,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "    public func close() {"
            },
            {
              "lineno": 58,
              "line": "        "
            },
            {
              "lineno": 59,
              "line": "    }"
            }
          ],
          "blocks": []
        },
        {
          "name": "isClosed",
          "type": "function",
          "start_line": 61,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 61,
              "line": "    public func isClosed(): Bool {"
            },
            {
              "lineno": 62,
              "line": "        return false"
            },
            {
              "lineno": 63,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 61,
              "end_line": 62,
              "label": "    public func isClosed(): Bool {\n        return false",
              "successors": []
            }
          ]
        },
        {
          "name": "prepareStatement",
          "type": "function",
          "start_line": 65,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    public func prepareStatement(sql: String): Statement {"
            },
            {
              "lineno": 66,
              "line": "        return MySqlStatement(this, sql)"
            },
            {
              "lineno": 67,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 65,
              "end_line": 67,
              "label": "    public func prepareStatement(sql: String): Statement {\n        return MySqlStatement(this, sql)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readInitPacket",
          "type": "function",
          "start_line": 69,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 69,
              "line": "    private func readInitPacket() {"
            },
            {
              "lineno": 70,
              "line": "        let data = readPacket()"
            },
            {
              "lineno": 71,
              "line": "        "
            },
            {
              "lineno": 72,
              "line": "        // 协议版本: 1 字节"
            },
            {
              "lineno": 73,
              "line": "        // 服务器版本: 以 \\0 结尾的字符串"
            },
            {
              "lineno": 74,
              "line": "        // 连接 ID: 4 字节"
            },
            {
              "lineno": 75,
              "line": "        var pos = 1 + ByteArrayUtils.indexByte(data[1..], 0) + 1 + 4 // 11"
            },
            {
              "lineno": 76,
              "line": ""
            },
            {
              "lineno": 77,
              "line": "        // 密码加密部分: 8 字节"
            },
            {
              "lineno": 78,
              "line": "        cipher = cipher.concat(data[pos..pos + 8])"
            },
            {
              "lineno": 79,
              "line": "        // 填充字节: 1 字节（始终为 0x00）"
            },
            {
              "lineno": 80,
              "line": "        pos = pos + 8 + 1 "
            },
            {
              "lineno": 81,
              "line": ""
            },
            {
              "lineno": 82,
              "line": "        // 能力标志（低 2 字节）: 2 字节"
            },
            {
              "lineno": 83,
              "line": "        flags = UInt32(ByteArrayUtils.littleEndianUint16(data[pos .. pos + 2]))"
            },
            {
              "lineno": 84,
              "line": "        pos = pos + 2"
            },
            {
              "lineno": 85,
              "line": ""
            },
            {
              "lineno": 86,
              "line": "        // 字符集: 1 字节"
            },
            {
              "lineno": 87,
              "line": "        charset = data.get(pos).getOrThrow()"
            },
            {
              "lineno": 88,
              "line": "        "
            },
            {
              "lineno": 89,
              "line": "        // 状态标志: 2 字节"
            },
            {
              "lineno": 90,
              "line": "        // 能力标志（高 2 字节）: 2 字节"
            },
            {
              "lineno": 91,
              "line": "        // 认证插件数据长度: 1 字节"
            },
            {
              "lineno": 92,
              "line": "        // 保留字节: 10 字节（全部为 0x00）"
            },
            {
              "lineno": 93,
              "line": "        pos = pos + 1 + 2 + 2 + 1 + 10 // 38"
            },
            {
              "lineno": 94,
              "line": ""
            },
            {
              "lineno": 95,
              "line": "        // 密码加密部分: 可变长度（通常为 12 字节）"
            },
            {
              "lineno": 96,
              "line": "        cipher = cipher.concat(data[pos..pos + 12])"
            },
            {
              "lineno": 97,
              "line": "        pos += 13"
            },
            {
              "lineno": 98,
              "line": ""
            },
            {
              "lineno": 99,
              "line": "        let end = ByteArrayUtils.indexByte(data[pos..], 0)"
            },
            {
              "lineno": 100,
              "line": "        if (end != -1) {"
            },
            {
              "lineno": 101,
              "line": "            plugin = String.fromUtf8(data[pos .. pos + end])"
            },
            {
              "lineno": 102,
              "line": "        }else {"
            },
            {
              "lineno": 103,
              "line": "            plugin = String.fromUtf8(data[pos .. ])"
            },
            {
              "lineno": 104,
              "line": "        }"
            },
            {
              "lineno": 105,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 69,
              "end_line": 99,
              "label": "    private func readInitPacket() {\n        let data = readPacket()\n        \n        // 协议版本: 1 字节\n        // 服务器版本: 以 \\0 结尾的字符串\n        // 连接 ID: 4 字节\n        var pos = 1 + ByteArrayUtils.indexByte(data[1..], 0) + 1 + 4 // 11\n\n        // 密码加密部分: 8 字节\n        cipher = cipher.concat(data[pos..pos + 8])\n        // 填充字节: 1 字节（始终为 0x00）\n        pos = pos + 8 + 1 \n\n        // 能力标志（低 2 字节）: 2 字节\n        flags = UInt32(ByteArrayUtils.littleEndianUint16(data[pos .. pos + 2]))\n        pos = pos + 2\n\n        // 字符集: 1 字节\n        charset = data.get(pos).getOrThrow()\n        \n        // 状态标志: 2 字节\n        // 能力标志（高 2 字节）: 2 字节\n        // 认证插件数据长度: 1 字节\n        // 保留字节: 10 字节（全部为 0x00）\n        pos = pos + 1 + 2 + 2 + 1 + 10 // 38\n\n        // 密码加密部分: 可变长度（通常为 12 字节）\n        cipher = cipher.concat(data[pos..pos + 12])\n        pos += 13\n\n        let end = ByteArrayUtils.indexByte(data[pos..], 0)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 100,
                  "end_line": 104,
                  "label": "        if (end != -1) {\n            plugin = String.fromUtf8(data[pos .. pos + end])\n        }else {\n            plugin = String.fromUtf8(data[pos .. ])\n        }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "writeAuthPacket",
          "type": "function",
          "start_line": 107,
          "end_line": 180,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 107,
              "line": "    private func writeAuthPacket() {"
            },
            {
              "lineno": 108,
              "line": "        var clientFlags: UInt32 = "
            },
            {
              "lineno": 109,
              "line": "\t\t    clientProtocol41 |  "
            },
            {
              "lineno": 110,
              "line": "\t\t\tclientSecureConn | "
            },
            {
              "lineno": 111,
              "line": "\t\t\tclientLongPassword | "
            },
            {
              "lineno": 112,
              "line": "\t\t\tclientTransactions | "
            },
            {
              "lineno": 113,
              "line": "\t\t\tclientLocalFiles |  "
            },
            {
              "lineno": 114,
              "line": "            clientPluginAuth |  "
            },
            {
              "lineno": 115,
              "line": "            clientMultiResults | "
            },
            {
              "lineno": 116,
              "line": "            flags &"
            },
            {
              "lineno": 117,
              "line": "            clientLongFlag "
            },
            {
              "lineno": 118,
              "line": "\t    "
            },
            {
              "lineno": 119,
              "line": ""
            },
            {
              "lineno": 120,
              "line": "        let authResp = ByteArrayUtils.scrambleCachingSha2(cipher, config.password.toArray())"
            },
            {
              "lineno": 121,
              "line": ""
            },
            {
              "lineno": 122,
              "line": "        // 4 长度 + sequence"
            },
            {
              "lineno": 123,
              "line": "        // 4 clientFlags"
            },
            {
              "lineno": 124,
              "line": "        // 4 个空位"
            },
            {
              "lineno": 125,
              "line": "        // 1 charset"
            },
            {
              "lineno": 126,
              "line": "        // 23 空"
            },
            {
              "lineno": 127,
              "line": "        // username"
            },
            {
              "lineno": 128,
              "line": "        // 1 以0结尾"
            },
            {
              "lineno": 129,
              "line": "        // 1 密码长度"
            },
            {
              "lineno": 130,
              "line": "        // 密码"
            },
            {
              "lineno": 131,
              "line": "        // dbname"
            },
            {
              "lineno": 132,
              "line": ""
            },
            {
              "lineno": 133,
              "line": "        let authRespLen = authResp.size"
            },
            {
              "lineno": 134,
              "line": "        let authRespLEI = ByteArrayUtils.appendLengthEncodedInteger(UInt64(authRespLen))"
            },
            {
              "lineno": 135,
              "line": "        if (authRespLEI.size > 1) {"
            },
            {
              "lineno": 136,
              "line": "            clientFlags |= clientPluginAuthLenEncClientData"
            },
            {
              "lineno": 137,
              "line": "        }"
            },
            {
              "lineno": 138,
              "line": "        var pktLen = 4 + 4 + 1 + 23 + config.username.toArray().size + 1 + authRespLEI.size + authResp.size + 21 "
            },
            {
              "lineno": 139,
              "line": "\t    if (config.dbname.size > 0) {"
            },
            {
              "lineno": 140,
              "line": "\t\t    clientFlags |= UInt32(clientConnectWithDB)"
            },
            {
              "lineno": 141,
              "line": "\t\t    pktLen += config.dbname.toArray().size + 1"
            },
            {
              "lineno": 142,
              "line": "\t    }"
            },
            {
              "lineno": 143,
              "line": ""
            },
            {
              "lineno": 144,
              "line": "        let data = Array<Byte>(pktLen + 4, item: UInt8(0))"
            },
            {
              "lineno": 145,
              "line": ""
            },
            {
              "lineno": 146,
              "line": "        data[0] = UInt8(pktLen & 0xff)"
            },
            {
              "lineno": 147,
              "line": "\t    data[1] = UInt8(pktLen >> 8)"
            },
            {
              "lineno": 148,
              "line": "\t    data[2] = UInt8(pktLen >> 16)"
            },
            {
              "lineno": 149,
              "line": "\t    data[3] = sequence"
            },
            {
              "lineno": 150,
              "line": ""
            },
            {
              "lineno": 151,
              "line": "        data[4] = UInt8(clientFlags & 0xff)"
            },
            {
              "lineno": 152,
              "line": "\t    data[5] = UInt8(clientFlags >> 8 & 0xff)"
            },
            {
              "lineno": 153,
              "line": "\t    data[6] = UInt8(clientFlags >> 16 & 0xff)"
            },
            {
              "lineno": 154,
              "line": "\t    data[7] = UInt8(clientFlags >> 24 & 0xff)"
            },
            {
              "lineno": 155,
              "line": ""
            },
            {
              "lineno": 156,
              "line": "        data[12] = charset"
            },
            {
              "lineno": 157,
              "line": ""
            },
            {
              "lineno": 158,
              "line": "        var pos = 13 + 23"
            },
            {
              "lineno": 159,
              "line": ""
            },
            {
              "lineno": 160,
              "line": "        if (config.username.size > 0) {"
            },
            {
              "lineno": 161,
              "line": "            config.username.toArray().copyTo(data, 0, pos, config.username.toArray().size)"
            },
            {
              "lineno": 162,
              "line": "            pos += config.username.toArray().size"
            },
            {
              "lineno": 163,
              "line": "        }"
            },
            {
              "lineno": 164,
              "line": "        pos += 1"
            },
            {
              "lineno": 165,
              "line": ""
            },
            {
              "lineno": 166,
              "line": "        authRespLEI.copyTo(data, 0, pos, authRespLEI.size)"
            },
            {
              "lineno": 167,
              "line": "        pos += authRespLEI.size"
            },
            {
              "lineno": 168,
              "line": ""
            },
            {
              "lineno": 169,
              "line": "        authResp.copyTo(data, 0, pos, authResp.size)"
            },
            {
              "lineno": 170,
              "line": "        pos += authResp.size"
            },
            {
              "lineno": 171,
              "line": ""
            },
            {
              "lineno": 172,
              "line": "        if (config.dbname.size > 0) {"
            },
            {
              "lineno": 173,
              "line": "            config.dbname.toArray().copyTo(data, 0, pos, config.dbname.toArray().size)"
            },
            {
              "lineno": 174,
              "line": "            pos +=  config.dbname.toArray().size"
            },
            {
              "lineno": 175,
              "line": "            pos += 1"
            },
            {
              "lineno": 176,
              "line": "        }"
            },
            {
              "lineno": 177,
              "line": "        plugin.toArray().copyTo(data, 0, pos, plugin.toArray().size)"
            },
            {
              "lineno": 178,
              "line": "        pos += plugin.toArray().size"
            },
            {
              "lineno": 179,
              "line": "        writePacket(data)"
            },
            {
              "lineno": 180,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 107,
              "end_line": 134,
              "label": "    private func writeAuthPacket() {\n        var clientFlags: UInt32 = \n\t\t    clientProtocol41 |  \n\t\t\tclientSecureConn | \n\t\t\tclientLongPassword | \n\t\t\tclientTransactions | \n\t\t\tclientLocalFiles |  \n            clientPluginAuth |  \n            clientMultiResults | \n            flags &\n            clientLongFlag \n\t    \n\n        let authResp = ByteArrayUtils.scrambleCachingSha2(cipher, config.password.toArray())\n\n        // 4 \n        // 4 clientFlags\n        // 4 \n        // 1 charset\n        // 23 \n        // username\n        // 1 \n        // 1 \n        // \n        // dbname\n\n        let authRespLen = authResp.size\n        let authRespLEI = ByteArrayUtils.appendLengthEncodedInteger(UInt64(authRespLen))",
              "successors": [
                {
                  "id": 2,
                  "start_line": 135,
                  "end_line": 137,
                  "label": "        if (authRespLEI.size > 1) {\n            clientFlags |= clientPluginAuthLenEncClientData\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 138,
                      "end_line": 141,
                      "label": "        var pktLen = 4 + 4 + 1 + 23 + config.username.toArray().size + 1 + authRespLEI.size + authResp.size + 21 \n\t    if (config.dbname.size > 0) {\n\t\t    clientFlags |= UInt32(clientConnectWithDB)\n\t\t    pktLen += config.dbname.toArray().size + 1",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 142,
                          "end_line": 144,
                          "label": "\t    }\n\n        let data = Array<Byte>(pktLen + 4, item: UInt8(0))",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 146,
                              "end_line": 149,
                              "label": "        data[0] = UInt8(pktLen & 0xff)\n\t    data[1] = UInt8(pktLen >> 8)\n\t    data[2] = UInt8(pktLen >> 16)\n\t    data[3] = sequence",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 151,
                                  "end_line": 154,
                                  "label": "        data[4] = UInt8(clientFlags & 0xff)\n\t    data[5] = UInt8(clientFlags >> 8 & 0xff)\n\t    data[6] = UInt8(clientFlags >> 16 & 0xff)\n\t    data[7] = UInt8(clientFlags >> 24 & 0xff)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 156,
                                      "end_line": 164,
                                      "label": "        data[12] = charset\n\n        var pos = 13 + 23\n\n        if (config.username.size > 0) {\n            config.username.toArray().copyTo(data, 0, pos, config.username.toArray().size)\n            pos += config.username.toArray().size\n        }\n        pos += 1",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 166,
                                          "end_line": 170,
                                          "label": "        authRespLEI.copyTo(data, 0, pos, authRespLEI.size)\n        pos += authRespLEI.size\n\n        authResp.copyTo(data, 0, pos, authResp.size)\n        pos += authResp.size",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 172,
                                              "end_line": 176,
                                              "label": "        if (config.dbname.size > 0) {\n            config.dbname.toArray().copyTo(data, 0, pos, config.dbname.toArray().size)\n            pos +=  config.dbname.toArray().size\n            pos += 1\n        }",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "start_line": 177,
                                                  "end_line": 180,
                                                  "label": "        plugin.toArray().copyTo(data, 0, pos, plugin.toArray().size)\n        pos += plugin.toArray().size\n        writePacket(data)\n    }",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "handleAuthResult",
          "type": "function",
          "start_line": 182,
          "end_line": 237,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 182,
              "line": "    private func handleAuthResult() {"
            },
            {
              "lineno": 183,
              "line": ""
            },
            {
              "lineno": 184,
              "line": "        var result = readAuthResult()"
            },
            {
              "lineno": 185,
              "line": "        var authData = result[0]"
            },
            {
              "lineno": 186,
              "line": "        var newPlugin = result[1]"
            },
            {
              "lineno": 187,
              "line": "        if (newPlugin != \"\") {"
            },
            {
              "lineno": 188,
              "line": "            if (authData.size > 0) {"
            },
            {
              "lineno": 189,
              "line": "                // cipher = authData"
            },
            {
              "lineno": 190,
              "line": "                authData.copyTo(cipher, 0, 0, cipher.size)"
            },
            {
              "lineno": 191,
              "line": "            } else {"
            },
            {
              "lineno": 192,
              "line": "                authData = cipher"
            },
            {
              "lineno": 193,
              "line": "            }"
            },
            {
              "lineno": 194,
              "line": "            plugin = newPlugin"
            },
            {
              "lineno": 195,
              "line": "            let authResp = ByteArrayUtils.scrambleCachingSha2(authData, config.password.toArray())"
            },
            {
              "lineno": 196,
              "line": "            writeAuthSwitchPacket(authResp)"
            },
            {
              "lineno": 197,
              "line": ""
            },
            {
              "lineno": 198,
              "line": "            result = readAuthResult()"
            },
            {
              "lineno": 199,
              "line": "            authData = result[0]"
            },
            {
              "lineno": 200,
              "line": "            newPlugin = result[1]"
            },
            {
              "lineno": 201,
              "line": "        }"
            },
            {
              "lineno": 202,
              "line": ""
            },
            {
              "lineno": 203,
              "line": "        match(plugin) {"
            },
            {
              "lineno": 204,
              "line": "            case \"caching_sha2_password\" => "
            },
            {
              "lineno": 205,
              "line": "                match(authData.size) {"
            },
            {
              "lineno": 206,
              "line": "                    case 1 =>"
            },
            {
              "lineno": 207,
              "line": "                        match(authData[0]) {"
            },
            {
              "lineno": 208,
              "line": "                            case 4 =>"
            },
            {
              "lineno": 209,
              "line": "                                // request public key from server"
            },
            {
              "lineno": 210,
              "line": "                                let pktLen = 1"
            },
            {
              "lineno": 211,
              "line": "        "
            },
            {
              "lineno": 212,
              "line": "                                let data = Array<Byte>(pktLen + 4, item: UInt8(0))"
            },
            {
              "lineno": 213,
              "line": ""
            },
            {
              "lineno": 214,
              "line": "                                data[0] = UInt8(pktLen & 0xff)"
            },
            {
              "lineno": 215,
              "line": "                                data[1] = UInt8(pktLen >> 8)"
            },
            {
              "lineno": 216,
              "line": "                                data[2] = UInt8(pktLen >> 16)"
            },
            {
              "lineno": 217,
              "line": "                                data[3] = sequence"
            },
            {
              "lineno": 218,
              "line": ""
            },
            {
              "lineno": 219,
              "line": "                                data[4] = cachingSha2PasswordRequestPublicKey"
            },
            {
              "lineno": 220,
              "line": "                                writePacket(data)"
            },
            {
              "lineno": 221,
              "line": ""
            },
            {
              "lineno": 222,
              "line": "                                let publicKeyData = readPacket()"
            },
            {
              "lineno": 223,
              "line": ""
            },
            {
              "lineno": 224,
              "line": "                                sendEncryptedPassword(publicKeyData[1..])"
            },
            {
              "lineno": 225,
              "line": ""
            },
            {
              "lineno": 226,
              "line": "                                readPacket()"
            },
            {
              "lineno": 227,
              "line": "                            case _ =>"
            },
            {
              "lineno": 228,
              "line": "                                println(\"eror or correct but do later\")"
            },
            {
              "lineno": 229,
              "line": "                        }"
            },
            {
              "lineno": 230,
              "line": "                    case _ =>"
            },
            {
              "lineno": 231,
              "line": "                        println(\"error size or correct size but do later \")"
            },
            {
              "lineno": 232,
              "line": "                }"
            },
            {
              "lineno": 233,
              "line": "            case _ => "
            },
            {
              "lineno": 234,
              "line": "                println(\"other, do later\")"
            },
            {
              "lineno": 235,
              "line": "            "
            },
            {
              "lineno": 236,
              "line": "        }"
            },
            {
              "lineno": 237,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 182,
              "end_line": 186,
              "label": "    private func handleAuthResult() {\n\n        var result = readAuthResult()\n        var authData = result[0]\n        var newPlugin = result[1]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 187,
                  "end_line": 201,
                  "label": "        if (newPlugin != \"\") {\n            if (authData.size > 0) {\n                // cipher = authData\n                authData.copyTo(cipher, 0, 0, cipher.size)\n            } else {\n                authData = cipher\n            }\n            plugin = newPlugin\n            let authResp = ByteArrayUtils.scrambleCachingSha2(authData, config.password.toArray())\n            writeAuthSwitchPacket(authResp)\n\n            result = readAuthResult()\n            authData = result[0]\n            newPlugin = result[1]\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 203,
                      "end_line": 236,
                      "label": "        match(plugin) {\n            case \"caching_sha2_password\" => \n                match(authData.size) {\n                    case 1 =>\n                        match(authData[0]) {\n                            case 4 =>\n                                // request public key from server\n                                let pktLen = 1\n        \n                                let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n                                data[0] = UInt8(pktLen & 0xff)\n                                data[1] = UInt8(pktLen >> 8)\n                                data[2] = UInt8(pktLen >> 16)\n                                data[3] = sequence\n\n                                data[4] = cachingSha2PasswordRequestPublicKey\n                                writePacket(data)\n\n                                let publicKeyData = readPacket()\n\n                                sendEncryptedPassword(publicKeyData[1..])\n\n                                readPacket()\n                            case _ =>\n                                println(\"eror or correct but do later\")\n                        }\n                    case _ =>\n                        println(\"error size or correct size but do later \")\n                }\n            case _ => \n                println(\"other, do later\")\n            \n        }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "writeAuthSwitchPacket",
          "type": "function",
          "start_line": 239,
          "end_line": 251,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 239,
              "line": "    private func writeAuthSwitchPacket(authData: Array<Byte>) {"
            },
            {
              "lineno": 240,
              "line": "        let pktLen = authData.size"
            },
            {
              "lineno": 241,
              "line": "        "
            },
            {
              "lineno": 242,
              "line": "        let data = Array<Byte>(pktLen + 4, item: UInt8(0))"
            },
            {
              "lineno": 243,
              "line": ""
            },
            {
              "lineno": 244,
              "line": "        data[0] = UInt8(pktLen & 0xff)"
            },
            {
              "lineno": 245,
              "line": "\t    data[1] = UInt8(pktLen >> 8)"
            },
            {
              "lineno": 246,
              "line": "\t    data[2] = UInt8(pktLen >> 16)"
            },
            {
              "lineno": 247,
              "line": "\t    data[3] = sequence"
            },
            {
              "lineno": 248,
              "line": ""
            },
            {
              "lineno": 249,
              "line": "        authData.copyTo(data, 0, 4, authData.size)"
            },
            {
              "lineno": 250,
              "line": "        writePacket(data)"
            },
            {
              "lineno": 251,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 239,
              "end_line": 251,
              "label": "    private func writeAuthSwitchPacket(authData: Array<Byte>) {\n        let pktLen = authData.size\n        \n        let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n        data[0] = UInt8(pktLen & 0xff)\n\t    data[1] = UInt8(pktLen >> 8)\n\t    data[2] = UInt8(pktLen >> 16)\n\t    data[3] = sequence\n\n        authData.copyTo(data, 0, 4, authData.size)\n        writePacket(data)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readAuthResult",
          "type": "function",
          "start_line": 253,
          "end_line": 276,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 253,
              "line": "    private func readAuthResult() {"
            },
            {
              "lineno": 254,
              "line": "        // let data = fromHexString(data: String)"
            },
            {
              "lineno": 255,
              "line": ""
            },
            {
              "lineno": 256,
              "line": "        let data = readPacket()"
            },
            {
              "lineno": 257,
              "line": "        "
            },
            {
              "lineno": 258,
              "line": "        match(data[0]) {"
            },
            {
              "lineno": 259,
              "line": "            case 1 =>"
            },
            {
              "lineno": 260,
              "line": "                return (data[1..], \"\")"
            },
            {
              "lineno": 261,
              "line": "            case 254 => "
            },
            {
              "lineno": 262,
              "line": "                if (data.size == 1) {"
            },
            {
              "lineno": 263,
              "line": "                    return (Array<Byte>(), \"mysql_old_password\")"
            },
            {
              "lineno": 264,
              "line": "                }"
            },
            {
              "lineno": 265,
              "line": "                let pluginEndIndex = ByteArrayUtils.indexByte(data, 0)"
            },
            {
              "lineno": 266,
              "line": "                if (pluginEndIndex < 0) {"
            },
            {
              "lineno": 267,
              "line": "                    return (Array<Byte>(), \"\")"
            },
            {
              "lineno": 268,
              "line": "                }"
            },
            {
              "lineno": 269,
              "line": "                let plugin = String.fromUtf8(data[1..pluginEndIndex])"
            },
            {
              "lineno": 270,
              "line": "                let authData = data[pluginEndIndex + 1 ..]"
            },
            {
              "lineno": 271,
              "line": "                return (authData, plugin)"
            },
            {
              "lineno": 272,
              "line": "            case _ => "
            },
            {
              "lineno": 273,
              "line": "                println(\"other, do later\")"
            },
            {
              "lineno": 274,
              "line": "                return (Array<Byte>(), \"\")"
            },
            {
              "lineno": 275,
              "line": "        }"
            },
            {
              "lineno": 276,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 253,
              "end_line": 253,
              "label": "    private func readAuthResult() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 254,
                  "end_line": 256,
                  "label": "        // let data = fromHexString(data: String)\n\n        let data = readPacket()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 258,
                      "end_line": 258,
                      "label": "        match(data[0]) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 259,
                          "end_line": 260,
                          "label": "            case 1 =>\n                return (data[1..], \"\")",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 261,
                          "end_line": 271,
                          "label": "            case 254 => \n                if (data.size == 1) {\n                    return (Array<Byte>(), \"mysql_old_password\")\n                }\n                let pluginEndIndex = ByteArrayUtils.indexByte(data, 0)\n                if (pluginEndIndex < 0) {\n                    return (Array<Byte>(), \"\")\n                }\n                let plugin = String.fromUtf8(data[1..pluginEndIndex])\n                let authData = data[pluginEndIndex + 1 ..]\n                return (authData, plugin)",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 272,
                          "end_line": 274,
                          "label": "            case _ => \n                println(\"other, do later\")\n                return (Array<Byte>(), \"\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "sendEncryptedPassword",
          "type": "function",
          "start_line": 278,
          "end_line": 282,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 278,
              "line": "    private func sendEncryptedPassword(publicKey: Array<Byte>) {"
            },
            {
              "lineno": 279,
              "line": "        let encrypted = ByteArrayUtils.scrambleRSA(config.password, publicKey, cipher)"
            },
            {
              "lineno": 280,
              "line": "        (\"encrypted = \" + encrypted.toString())"
            },
            {
              "lineno": 281,
              "line": "        writeAuthSwitchPacket(encrypted)"
            },
            {
              "lineno": 282,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 278,
              "end_line": 278,
              "label": "private func sendEncryptedPassword(publicKey: Array<Byte>) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 279,
                  "end_line": 281,
                  "label": "let encrypted = ByteArrayUtils.scrambleRSA(config.password, publicKey, cipher)\n(\"encrypted = \" + encrypted.toString())\nwriteAuthSwitchPacket(encrypted)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 282,
                      "end_line": 282,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "writeCommandPacketStr",
          "type": "function",
          "start_line": 284,
          "end_line": 299,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 284,
              "line": "    protected func writeCommandPacketStr(command: Byte, sql: String) {"
            },
            {
              "lineno": 285,
              "line": "        sequence = 0"
            },
            {
              "lineno": 286,
              "line": "        let pktLen = 1 + sql.toArray().size"
            },
            {
              "lineno": 287,
              "line": ""
            },
            {
              "lineno": 288,
              "line": "        let data = Array<Byte>(pktLen + 4, item: UInt8(0))"
            },
            {
              "lineno": 289,
              "line": ""
            },
            {
              "lineno": 290,
              "line": "        data[0] = UInt8(pktLen & 0xff)"
            },
            {
              "lineno": 291,
              "line": "\t    data[1] = UInt8(pktLen >> 8)"
            },
            {
              "lineno": 292,
              "line": "\t    data[2] = UInt8(pktLen >> 16)"
            },
            {
              "lineno": 293,
              "line": "\t    data[3] = sequence"
            },
            {
              "lineno": 294,
              "line": ""
            },
            {
              "lineno": 295,
              "line": "        data[4] = command"
            },
            {
              "lineno": 296,
              "line": "        sql.toArray().copyTo(data, 0, 5, sql.toArray().size)"
            },
            {
              "lineno": 297,
              "line": "        writePacket(data)"
            },
            {
              "lineno": 298,
              "line": ""
            },
            {
              "lineno": 299,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 284,
              "end_line": 299,
              "label": "    protected func writeCommandPacketStr(command: Byte, sql: String) {\n        sequence = 0\n        let pktLen = 1 + sql.toArray().size\n\n        let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n        data[0] = UInt8(pktLen & 0xff)\n\t    data[1] = UInt8(pktLen >> 8)\n\t    data[2] = UInt8(pktLen >> 16)\n\t    data[3] = sequence\n\n        data[4] = command\n        sql.toArray().copyTo(data, 0, 5, sql.toArray().size)\n        writePacket(data)\n\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readColumns",
          "type": "function",
          "start_line": 305,
          "end_line": 369,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 305,
              "line": "    protected func readColumns(count: UInt16): ArrayList<MySqlField> {"
            },
            {
              "lineno": 306,
              "line": "        let returnResult = ArrayList<MySqlField>()"
            },
            {
              "lineno": 307,
              "line": "        "
            },
            {
              "lineno": 308,
              "line": "        for(i in 0..count) {"
            },
            {
              "lineno": 309,
              "line": "            let data = readPacket()"
            },
            {
              "lineno": 310,
              "line": "            var pos = 0"
            },
            {
              "lineno": 311,
              "line": "            let mysqlField = MySqlField()"
            },
            {
              "lineno": 312,
              "line": "            "
            },
            {
              "lineno": 313,
              "line": ""
            },
            {
              "lineno": 314,
              "line": "            // catalog"
            },
            {
              "lineno": 315,
              "line": "            var result = ByteArrayUtils.readLengthEncodedString(data)"
            },
            {
              "lineno": 316,
              "line": "            var catalog = String.fromUtf8(result[0])"
            },
            {
              "lineno": 317,
              "line": "            pos += result[2]"
            },
            {
              "lineno": 318,
              "line": ""
            },
            {
              "lineno": 319,
              "line": "            // database"
            },
            {
              "lineno": 320,
              "line": "            result = ByteArrayUtils.readLengthEncodedString(data[pos..])"
            },
            {
              "lineno": 321,
              "line": "            var database = String.fromUtf8(result[0])"
            },
            {
              "lineno": 322,
              "line": "            pos += result[2]"
            },
            {
              "lineno": 323,
              "line": "            // tableName"
            },
            {
              "lineno": 324,
              "line": "            result = ByteArrayUtils.readLengthEncodedString(data[pos..])"
            },
            {
              "lineno": 325,
              "line": "            var tableName = String.fromUtf8(result[0])"
            },
            {
              "lineno": 326,
              "line": "            pos += result[2]"
            },
            {
              "lineno": 327,
              "line": "            mysqlField.setTableName(tableName)"
            },
            {
              "lineno": 328,
              "line": "            "
            },
            {
              "lineno": 329,
              "line": "            // org_table"
            },
            {
              "lineno": 330,
              "line": "            result = ByteArrayUtils.readLengthEncodedString(data[pos..])"
            },
            {
              "lineno": 331,
              "line": "            var orgTableName = String.fromUtf8(result[0])"
            },
            {
              "lineno": 332,
              "line": "            pos += result[2]"
            },
            {
              "lineno": 333,
              "line": ""
            },
            {
              "lineno": 334,
              "line": "            // name"
            },
            {
              "lineno": 335,
              "line": "            result = ByteArrayUtils.readLengthEncodedString(data[pos..])"
            },
            {
              "lineno": 336,
              "line": "            var name = String.fromUtf8(result[0])"
            },
            {
              "lineno": 337,
              "line": "            pos += result[2]"
            },
            {
              "lineno": 338,
              "line": "            mysqlField.setName(name)"
            },
            {
              "lineno": 339,
              "line": ""
            },
            {
              "lineno": 340,
              "line": "            // org_name"
            },
            {
              "lineno": 341,
              "line": "            result = ByteArrayUtils.readLengthEncodedString(data[pos..])"
            },
            {
              "lineno": 342,
              "line": "            var orgName = String.fromUtf8(result[0])"
            },
            {
              "lineno": 343,
              "line": "            pos += result[2]"
            },
            {
              "lineno": 344,
              "line": "            // filter"
            },
            {
              "lineno": 345,
              "line": "            pos ++"
            },
            {
              "lineno": 346,
              "line": ""
            },
            {
              "lineno": 347,
              "line": "            mysqlField.setCharSet(data[pos])"
            },
            {
              "lineno": 348,
              "line": "            pos += 2"
            },
            {
              "lineno": 349,
              "line": ""
            },
            {
              "lineno": 350,
              "line": "            mysqlField.setLength(ByteArrayUtils.littleEndianUint32(data[pos..pos + 4]))"
            },
            {
              "lineno": 351,
              "line": "            pos += 4"
            },
            {
              "lineno": 352,
              "line": ""
            },
            {
              "lineno": 353,
              "line": "            mysqlField.setFieldType(UInt16(data[pos]))"
            },
            {
              "lineno": 354,
              "line": "            pos ++"
            },
            {
              "lineno": 355,
              "line": ""
            },
            {
              "lineno": 356,
              "line": "            mysqlField.setFlags(ByteArrayUtils.littleEndianUint16(data[pos .. pos + 2]))"
            },
            {
              "lineno": 357,
              "line": "            pos += 2"
            },
            {
              "lineno": 358,
              "line": ""
            },
            {
              "lineno": 359,
              "line": "            mysqlField.setDecimals(data[pos])"
            },
            {
              "lineno": 360,
              "line": "            returnResult.append(mysqlField)"
            },
            {
              "lineno": 361,
              "line": "        }"
            },
            {
              "lineno": 362,
              "line": ""
            },
            {
              "lineno": 363,
              "line": "        let data = readPacket()"
            },
            {
              "lineno": 364,
              "line": "        // match(data[0]) {"
            },
            {
              "lineno": 365,
              "line": "        //     case 254 => println(\"read end\")"
            },
            {
              "lineno": 366,
              "line": "        //     case _ => println(\"error, do later\")"
            },
            {
              "lineno": 367,
              "line": "        // }"
            },
            {
              "lineno": 368,
              "line": "        return returnResult"
            },
            {
              "lineno": 369,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 305,
              "end_line": 306,
              "label": "    protected func readColumns(count: UInt16): ArrayList<MySqlField> {\n        let returnResult = ArrayList<MySqlField>()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 308,
                  "end_line": 360,
                  "label": "        for(i in 0..count) {\n            let data = readPacket()\n            var pos = 0\n            let mysqlField = MySqlField()\n            \n            // catalog\n            var result = ByteArrayUtils.readLengthEncodedString(data)\n            var catalog = String.fromUtf8(result[0])\n            pos += result[2]\n\n            // database\n            result = ByteArrayUtils.readLengthEncodedString(data[pos..])\n            var database = String.fromUtf8(result[0])\n            pos += result[2]\n            // tableName\n            result = ByteArrayUtils.readLengthEncodedString(data[pos..])\n            var tableName = String.fromUtf8(result[0])\n            pos += result[2]\n            mysqlField.setTableName(tableName)\n            \n            // org_table\n            result = ByteArrayUtils.readLengthEncodedString(data[pos..])\n            var orgTableName = String.fromUtf8(result[0])\n            pos += result[2]\n\n            // name\n            result = ByteArrayUtils.readLengthEncodedString(data[pos..])\n            var name = String.fromUtf8(result[0])\n            pos += result[2]\n            mysqlField.setName(name)\n\n            // org_name\n            result = ByteArrayUtils.readLengthEncodedString(data[pos..])\n            var orgName = String.fromUtf8(result[0])\n            pos += result[2]\n            // filter\n            pos ++\n\n            mysqlField.setCharSet(data[pos])\n            pos += 2\n\n            mysqlField.setLength(ByteArrayUtils.littleEndianUint32(data[pos..pos + 4]))\n            pos += 4\n\n            mysqlField.setFieldType(UInt16(data[pos]))\n            pos ++\n\n            mysqlField.setFlags(ByteArrayUtils.littleEndianUint16(data[pos .. pos + 2]))\n            pos += 2\n\n            mysqlField.setDecimals(data[pos])\n            returnResult.append(mysqlField)\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 363,
                      "end_line": 368,
                      "label": "        let data = readPacket()\n        // match(data[0]) {\n        //     case 254 => println(\"read end\")\n        //     case _ => println(\"error, do later\")\n        // }\n        return returnResult",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readRows",
          "type": "function",
          "start_line": 371,
          "end_line": 383,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 371,
              "line": "    protected func readRows():ArrayList<Array<Byte>> {"
            },
            {
              "lineno": 372,
              "line": "        let result = ArrayList<Array<Byte>>()"
            },
            {
              "lineno": 373,
              "line": "        while(true) {"
            },
            {
              "lineno": 374,
              "line": "            let data = readPacket()"
            },
            {
              "lineno": 375,
              "line": "            match(data[0]) {"
            },
            {
              "lineno": 376,
              "line": "                case 254 =>"
            },
            {
              "lineno": 377,
              "line": "                    break"
            },
            {
              "lineno": 378,
              "line": "                case _ =>"
            },
            {
              "lineno": 379,
              "line": "                    result.append(data)"
            },
            {
              "lineno": 380,
              "line": "            }"
            },
            {
              "lineno": 381,
              "line": "        }"
            },
            {
              "lineno": 382,
              "line": "        return result"
            },
            {
              "lineno": 383,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 371,
              "end_line": 372,
              "label": "    protected func readRows():ArrayList<Array<Byte>> {\n        let result = ArrayList<Array<Byte>>()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 373,
                  "end_line": 373,
                  "label": "        while(true) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 374,
                      "end_line": 374,
                      "label": "            let data = readPacket()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 375,
                          "end_line": 375,
                          "label": "            match(data[0]) {",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 376,
                              "end_line": 377,
                              "label": "                case 254 =>\n                    break",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 378,
                              "end_line": 379,
                              "label": "                case _ =>\n                    result.append(data)",
                              "successors": [
                                {
                                  "id": 3,
                                  "start_line": 374,
                                  "end_line": 374,
                                  "label": "            let data = readPacket()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 382,
                  "end_line": 382,
                  "label": "        return result",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readPacket",
          "type": "function",
          "start_line": 388,
          "end_line": 402,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 388,
              "line": "    protected func readPacket(): Array<Byte> {"
            },
            {
              "lineno": 389,
              "line": "        let data = buffer.readNext(4)"
            },
            {
              "lineno": 390,
              "line": "        let pktLen = Int64(UInt32(data[0]) | UInt32(data[1])<<8 | UInt32(data[2])<<16)"
            },
            {
              "lineno": 391,
              "line": "        if (data[3] != sequence) {"
            },
            {
              "lineno": 392,
              "line": "            println(\"ERROR sequence NOT EQUAL\")"
            },
            {
              "lineno": 393,
              "line": "        }"
            },
            {
              "lineno": 394,
              "line": "        sequence ++"
            },
            {
              "lineno": 395,
              "line": ""
            },
            {
              "lineno": 396,
              "line": "        let resultData = buffer.readNext(pktLen)"
            },
            {
              "lineno": 397,
              "line": "        if (pktLen < maxPacketSize) {"
            },
            {
              "lineno": 398,
              "line": "            return resultData"
            },
            {
              "lineno": 399,
              "line": "        }"
            },
            {
              "lineno": 400,
              "line": "        let resultData2 = readPacket()"
            },
            {
              "lineno": 401,
              "line": "        return resultData.concat(resultData2)"
            },
            {
              "lineno": 402,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 388,
              "end_line": 390,
              "label": "    protected func readPacket(): Array<Byte> {\n        let data = buffer.readNext(4)\n        let pktLen = Int64(UInt32(data[0]) | UInt32(data[1])<<8 | UInt32(data[2])<<16)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 391,
                  "end_line": 393,
                  "label": "        if (data[3] != sequence) {\n            println(\"ERROR sequence NOT EQUAL\")\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 394,
                      "end_line": 396,
                      "label": "        sequence ++\n\n        let resultData = buffer.readNext(pktLen)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 397,
                          "end_line": 399,
                          "label": "        if (pktLen < maxPacketSize) {\n            return resultData\n        }",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 400,
                              "end_line": 401,
                              "label": "        let resultData2 = readPacket()\n        return resultData.concat(resultData2)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readUntilEOF",
          "type": "function",
          "start_line": 404,
          "end_line": 415,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 404,
              "line": "    protected func readUntilEOF(): Array<Byte> {"
            },
            {
              "lineno": 405,
              "line": "        let result = ArrayList<Byte>()"
            },
            {
              "lineno": 406,
              "line": "        while (true) {"
            },
            {
              "lineno": 407,
              "line": "            let tempData = readPacket()"
            },
            {
              "lineno": 408,
              "line": "            match(tempData[0]) {"
            },
            {
              "lineno": 409,
              "line": "                case 254 => break"
            },
            {
              "lineno": 410,
              "line": "                case 255 => println(\"error happen, do later\")"
            },
            {
              "lineno": 411,
              "line": "                case _ => result.appendAll(tempData)"
            },
            {
              "lineno": 412,
              "line": "            }"
            },
            {
              "lineno": 413,
              "line": "        }"
            },
            {
              "lineno": 414,
              "line": "        return result.toArray()"
            },
            {
              "lineno": 415,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 404,
              "end_line": 405,
              "label": "    protected func readUntilEOF(): Array<Byte> {\n        let result = ArrayList<Byte>()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 406,
                  "end_line": 407,
                  "label": "        while (true) {\n            let tempData = readPacket()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 408,
                      "end_line": 408,
                      "label": "            match(tempData[0]) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 409,
                          "end_line": 409,
                          "label": "                case 254 => break",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 410,
                          "end_line": 410,
                          "label": "                case 255 => println(\"error happen, do later\")",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 406,
                              "end_line": 407,
                              "label": "        while (true) {\n            let tempData = readPacket()",
                              "successors": [
                                {
                                  "id": 3,
                                  "start_line": 408,
                                  "end_line": 408,
                                  "label": "            match(tempData[0]) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "start_line": 411,
                          "end_line": 411,
                          "label": "                case _ => result.appendAll(tempData)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 406,
                              "end_line": 407,
                              "label": "        while (true) {\n            let tempData = readPacket()",
                              "successors": [
                                {
                                  "id": 3,
                                  "start_line": 408,
                                  "end_line": 408,
                                  "label": "            match(tempData[0]) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 414,
                  "end_line": 414,
                  "label": "        return result.toArray()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "writePacket",
          "type": "function",
          "start_line": 417,
          "end_line": 430,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 417,
              "line": "    protected func writePacket(data: Array<Byte>) {"
            },
            {
              "lineno": 418,
              "line": "        // TODO 拆包发送"
            },
            {
              "lineno": 419,
              "line": "        // if (data.size - 4 <= maxWriteSize) {"
            },
            {
              "lineno": 420,
              "line": "        try {"
            },
            {
              "lineno": 421,
              "line": "            this.tcpSocket.write(data)"
            },
            {
              "lineno": 422,
              "line": "            sequence ++"
            },
            {
              "lineno": 423,
              "line": "        } catch (e: SocketException) {"
            },
            {
              "lineno": 424,
              "line": "            println(\"send fail \" + e.message)"
            },
            {
              "lineno": 425,
              "line": "        } finally {"
            },
            {
              "lineno": 426,
              "line": "            // println(\"send success\")"
            },
            {
              "lineno": 427,
              "line": "        }"
            },
            {
              "lineno": 428,
              "line": "        // } "
            },
            {
              "lineno": 429,
              "line": "        // splitPacket(data)"
            },
            {
              "lineno": 430,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 417,
              "end_line": 417,
              "label": "    protected func writePacket(data: Array<Byte>) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 420,
                  "end_line": 420,
                  "label": "        try {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 421,
                      "end_line": 422,
                      "label": "            this.tcpSocket.write(data)\n            sequence ++",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 423,
                          "end_line": 423,
                          "label": "        } catch (e: SocketException) {",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 424,
                              "end_line": 424,
                              "label": "            println(\"send fail \" + e.message)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 425,
                                  "end_line": 425,
                                  "label": "        } finally {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 427,
                                      "end_line": 427,
                                      "label": "        }",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "public class MysqlConnection <: Connection {"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    private let config: Config"
        },
        {
          "lineno": 10,
          "line": "    private let tcpSocket: TcpSocket"
        },
        {
          "lineno": 11,
          "line": "    private let buffer: Buffer"
        },
        {
          "lineno": 12,
          "line": "    protected var sequence: Byte = 0"
        },
        {
          "lineno": 13,
          "line": "    private var cipher: Array<Byte> = Array<Byte>()"
        },
        {
          "lineno": 14,
          "line": "    private var charset: Byte = 0"
        },
        {
          "lineno": 15,
          "line": "    private var flags: UInt32 = 0"
        },
        {
          "lineno": 16,
          "line": "    private var plugin: String = \"\""
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 18,
          "line": "    private var maxPacketAllowed: Int64 = maxPacketSize"
        },
        {
          "lineno": 19,
          "line": "\tprivate var maxWriteSize: Int64 = maxPacketSize - 1"
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 50,
          "line": ""
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 181,
          "line": ""
        },
        {
          "lineno": 238,
          "line": ""
        },
        {
          "lineno": 252,
          "line": ""
        },
        {
          "lineno": 277,
          "line": ""
        },
        {
          "lineno": 283,
          "line": ""
        },
        {
          "lineno": 300,
          "line": ""
        },
        {
          "lineno": 301,
          "line": "    // private func getSystemVar(name: String): Array<Byte> {"
        },
        {
          "lineno": 302,
          "line": ""
        },
        {
          "lineno": 303,
          "line": "    // }"
        },
        {
          "lineno": 304,
          "line": ""
        },
        {
          "lineno": 370,
          "line": ""
        },
        {
          "lineno": 384,
          "line": ""
        },
        {
          "lineno": 385,
          "line": ""
        },
        {
          "lineno": 386,
          "line": ""
        },
        {
          "lineno": 387,
          "line": ""
        },
        {
          "lineno": 403,
          "line": ""
        },
        {
          "lineno": 416,
          "line": ""
        },
        {
          "lineno": 431,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 7,
          "end_line": 20,
          "label": "public class MysqlConnection <: Connection {\n\n    private let config: Config\n    private let tcpSocket: TcpSocket\n    private let buffer: Buffer\n    protected var sequence: Byte = 0\n    private var cipher: Array<Byte> = Array<Byte>()\n    private var charset: Byte = 0\n    private var flags: UInt32 = 0\n    private var plugin: String = \"\"\n\n    private var maxPacketAllowed: Int64 = maxPacketSize\n\tprivate var maxWriteSize: Int64 = maxPacketSize - 1\n",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 301,
          "end_line": 303,
          "label": "    // private func getSystemVar(name: String): Array<Byte> {\n\n    // }",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 431,
          "end_line": 431,
          "label": "}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package cangjieWeb.mysql"
    },
    {
      "lineno": 2,
      "line": "import std.database.sql.{Connection, Transaction, ConnectionState, Statement}"
    },
    {
      "lineno": 3,
      "line": "import std.collection.{Map, HashMap, ArrayList}"
    },
    {
      "lineno": 4,
      "line": "import std.net.{TcpSocket, IPSocketAddress, SocketException, SocketKeepAliveConfig}"
    },
    {
      "lineno": 5,
      "line": "import cangjieWeb.utils.ByteArrayUtils"
    },
    {
      "lineno": 6,
      "line": "import encoding.hex.{toHexString,fromHexString}"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "package cangjieWeb.mysql\nimport std.database.sql.{Connection, Transaction, ConnectionState, Statement}\nimport std.collection.{Map, HashMap, ArrayList}\nimport std.net.{TcpSocket, IPSocketAddress, SocketException, SocketKeepAliveConfig}\nimport cangjieWeb.utils.ByteArrayUtils\nimport encoding.hex.{toHexString,fromHexString}",
      "successors": []
    }
  ]
}