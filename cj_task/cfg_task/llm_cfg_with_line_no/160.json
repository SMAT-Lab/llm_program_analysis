{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 23,
  "functions": [],
  "classes": [
    {
      "name": "CXChildVisitResult",
      "type": "class",
      "start_line": 2,
      "end_line": 23,
      "functions": [
        {
          "name": "ordinal",
          "type": "function",
          "start_line": 6,
          "end_line": 14,
          "functions": [
            {
              "name": "get",
              "type": "function",
              "start_line": 7,
              "end_line": 13,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 7,
                  "line": "        get() {"
                },
                {
                  "lineno": 8,
                  "line": "            match (this) {"
                },
                {
                  "lineno": 9,
                  "line": "                case CXChildVisit_Break => 0"
                },
                {
                  "lineno": 10,
                  "line": "                case CXChildVisit_Continue => 1"
                },
                {
                  "lineno": 11,
                  "line": "                case CXChildVisit_Recurse => 2"
                },
                {
                  "lineno": 12,
                  "line": "            }"
                },
                {
                  "lineno": 13,
                  "line": "        }"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "        get() {",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 8,
                      "end_line": 11,
                      "label": "            match (this) {\\n                case CXChildVisit_Break => 0\\n                case CXChildVisit_Continue => 1\\n                case CXChildVisit_Recurse => 2",
                      "successors": [
                        {
                          "id": 3,
                          "start_line": 12,
                          "end_line": 13,
                          "label": "            }\\n        }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 6,
              "line": "    override public prop ordinal: UInt {"
            },
            {
              "lineno": 14,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 6,
              "end_line": 14,
              "label": "override public prop ordinal;",
              "successors": [
                {}
              ]
            }
          ]
        },
        {
          "name": "fromOrdinal",
          "type": "function",
          "start_line": 15,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 15,
              "line": "    static redef public func fromOrdinal(ordinal: UInt): CXChildVisitResult {"
            },
            {
              "lineno": 16,
              "line": "        match (ordinal) {"
            },
            {
              "lineno": 17,
              "line": "            case 0 => CXChildVisit_Break"
            },
            {
              "lineno": 18,
              "line": "            case 1 => CXChildVisit_Continue"
            },
            {
              "lineno": 19,
              "line": "            case 2 => CXChildVisit_Recurse"
            },
            {
              "lineno": 20,
              "line": "            case invalid => throw IllegalArgumentException(\"Can't create CXChildVisitResult from ${invalid}\")"
            },
            {
              "lineno": 21,
              "line": "        }"
            },
            {
              "lineno": 22,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 15,
              "end_line": 15,
              "label": "    static redef public func fromOrdinal(ordinal: UInt): CXChildVisitResult {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 16,
                  "end_line": 21,
                  "label": "        match (ordinal) {\n            case 0 => CXChildVisit_Break\n            case 1 => CXChildVisit_Continue\n            case 2 => CXChildVisit_Recurse\n            case invalid => throw IllegalArgumentException(\"Can't create CXChildVisitResult from ${invalid}\")\n        }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public enum CXChildVisitResult <: Ordinal<CXChildVisitResult> {"
        },
        {
          "lineno": 3,
          "line": "    CXChildVisit_Break"
        },
        {
          "lineno": 4,
          "line": "    | CXChildVisit_Continue"
        },
        {
          "lineno": 5,
          "line": "    | CXChildVisit_Recurse"
        },
        {
          "lineno": 23,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 5,
          "label": "public enum CXChildVisitResult <: Ordinal<CXChildVisitResult> {\n    CXChildVisit_Break\n    | CXChildVisit_Continue\n    | CXChildVisit_Recurse",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package libclang"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package libclang",
      "successors": []
    }
  ]
}