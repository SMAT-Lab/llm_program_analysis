{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 89,
  "functions": [],
  "classes": [
    {
      "name": "Deque",
      "type": "class",
      "start_line": 2,
      "end_line": 89,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    public init() {"
            },
            {
              "lineno": 9,
              "line": "        size = 0"
            },
            {
              "lineno": 10,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 8,
              "end_line": 10,
              "label": "    public init() {\n        size = 0\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    public init(max_size: Int64) {"
            },
            {
              "lineno": 12,
              "line": "        arr = Array<Any>(max_size * 2, item: 0)"
            },
            {
              "lineno": 13,
              "line": "        size = 0"
            },
            {
              "lineno": 14,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 11,
              "end_line": 14,
              "label": "    public init(max_size: Int64) {\n        arr = Array<Any>(max_size * 2, item: 0)\n        size = 0\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 15,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 15,
              "line": "    public init(initArr: Array<T>) {"
            },
            {
              "lineno": 16,
              "line": "        size = initArr.size"
            },
            {
              "lineno": 17,
              "line": "        tail = size - 1"
            },
            {
              "lineno": 18,
              "line": "        for (i in 0..arr.size) {"
            },
            {
              "lineno": 19,
              "line": "            this.arr[i + 1000001] = initArr[i]"
            },
            {
              "lineno": 20,
              "line": "        }"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 15,
              "end_line": 17,
              "label": "    public init(initArr: Array<T>) {\n        size = initArr.size\n        tail = size - 1",
              "successors": [
                {
                  "id": 2,
                  "start_line": 18,
                  "end_line": 20,
                  "label": "        for (i in 0..arr.size) {\n            this.arr[i + 1000001] = initArr[i]\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 21,
                      "end_line": 21,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    public init(maxSize: Int64, initArr: Array<T>) {"
            },
            {
              "lineno": 23,
              "line": "        arr = Array<Any>(maxSize, item: 0)"
            },
            {
              "lineno": 24,
              "line": "        size = initArr.size"
            },
            {
              "lineno": 25,
              "line": "        tail += size"
            },
            {
              "lineno": 26,
              "line": "        for (i in 0..arr.size) {"
            },
            {
              "lineno": 27,
              "line": "            this.arr[i + 1000001] = initArr[i]"
            },
            {
              "lineno": 28,
              "line": "        }"
            },
            {
              "lineno": 29,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 25,
              "label": "public init(maxSize: Int64, initArr: Array<T>) {\n    arr = Array<Any>(maxSize, item: 0)\n    size = initArr.size\n    tail += size",
              "successors": [
                {
                  "id": 2,
                  "start_line": 26,
                  "end_line": 28,
                  "label": "for (i in 0..arr.size) {\n    this.arr[i + 1000001] = initArr[i]\n}",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 29,
                      "end_line": 29,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "pushBack",
          "type": "function",
          "start_line": 30,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 30,
              "line": "    public func pushBack(val: T) {"
            },
            {
              "lineno": 31,
              "line": "        this.tail++"
            },
            {
              "lineno": 32,
              "line": "        arr[tail] = val"
            },
            {
              "lineno": 33,
              "line": "        this.size++"
            },
            {
              "lineno": 34,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 30,
              "end_line": 34,
              "label": "    public func pushBack(val: T) {\n        this.tail++\n        arr[tail] = val\n        this.size++\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "popBack",
          "type": "function",
          "start_line": 35,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    public func popBack() {"
            },
            {
              "lineno": 36,
              "line": "        if (size == 0) {"
            },
            {
              "lineno": 37,
              "line": "            try {"
            },
            {
              "lineno": 38,
              "line": "                var exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")"
            },
            {
              "lineno": 39,
              "line": "                throw (exc)"
            },
            {
              "lineno": 40,
              "line": "            } catch (exc: IndexOutOfBoundsException) {"
            },
            {
              "lineno": 41,
              "line": "                println(\"${exc}\");"
            },
            {
              "lineno": 42,
              "line": "            }"
            },
            {
              "lineno": 43,
              "line": "        } else {"
            },
            {
              "lineno": 44,
              "line": "            this.arr[tail] = 0"
            },
            {
              "lineno": 45,
              "line": "            this.tail--"
            },
            {
              "lineno": 46,
              "line": "            this.size--"
            },
            {
              "lineno": 47,
              "line": "        }"
            },
            {
              "lineno": 48,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 35,
              "end_line": 35,
              "label": "    public func popBack() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 36,
                  "end_line": 36,
                  "label": "        if (size == 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 37,
                      "end_line": 39,
                      "label": "            try {\n                var exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")\n                throw (exc)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 40,
                          "end_line": 42,
                          "label": "            } catch (exc: IndexOutOfBoundsException) {\n                println(\"${exc}\");\n            }",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 43,
                      "end_line": 46,
                      "label": "        } else {\n            this.arr[tail] = 0\n            this.tail--\n            this.size--",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "pushFront",
          "type": "function",
          "start_line": 49,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    public func pushFront(val: T) {"
            },
            {
              "lineno": 50,
              "line": "        if (this.head == 0) {"
            },
            {
              "lineno": 51,
              "line": "            try {"
            },
            {
              "lineno": 52,
              "line": "                throw IndexOutOfBoundsException(\"There are too many elements in the front end of the deque\")"
            },
            {
              "lineno": 53,
              "line": "            } catch (exc: IndexOutOfBoundsException) {"
            },
            {
              "lineno": 54,
              "line": "                println(\"${exc}\")"
            },
            {
              "lineno": 55,
              "line": "            }"
            },
            {
              "lineno": 56,
              "line": "        } else {"
            },
            {
              "lineno": 57,
              "line": "            this.head--"
            },
            {
              "lineno": 58,
              "line": "            this.arr[head] = val"
            },
            {
              "lineno": 59,
              "line": "            this.size++"
            },
            {
              "lineno": 60,
              "line": "        }"
            },
            {
              "lineno": 61,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 49,
              "label": "    public func pushFront(val: T) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 50,
                  "end_line": 50,
                  "label": "        if (this.head == 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 51,
                      "end_line": 55,
                      "label": "            try {\n                throw IndexOutOfBoundsException(\"There are too many elements in the front end of the deque\")\n            } catch (exc: IndexOutOfBoundsException) {\n                println(\"${exc}\")\n            }",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 56,
                      "end_line": 60,
                      "label": "        } else {\n            this.head--\n            this.arr[head] = val\n            this.size++\n        }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "popFront",
          "type": "function",
          "start_line": 62,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    public func popFront()"
            },
            {
              "lineno": 63,
              "line": "    {"
            },
            {
              "lineno": 64,
              "line": "        if (size == 0) {"
            },
            {
              "lineno": 65,
              "line": "            try {"
            },
            {
              "lineno": 66,
              "line": "                var exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")"
            },
            {
              "lineno": 67,
              "line": "                throw (exc)"
            },
            {
              "lineno": 68,
              "line": "            } catch (exc: IndexOutOfBoundsException) {"
            },
            {
              "lineno": 69,
              "line": "                println(\"${exc}\");"
            },
            {
              "lineno": 70,
              "line": "            }"
            },
            {
              "lineno": 71,
              "line": "        } else {"
            },
            {
              "lineno": 72,
              "line": "            this.arr[head] = 0"
            },
            {
              "lineno": 73,
              "line": "            this.head++"
            },
            {
              "lineno": 74,
              "line": "            this.size--"
            },
            {
              "lineno": 75,
              "line": "        }"
            },
            {
              "lineno": 76,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 62,
              "end_line": 62,
              "label": "    public func popFront()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 63,
                  "end_line": 64,
                  "label": "    {\n        if (size == 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 65,
                      "end_line": 70,
                      "label": "            try {\n                var exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")\n                throw (exc)\n            } catch (exc: IndexOutOfBoundsException) {\n                println(\"${exc}\");\n            }",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 71,
                      "end_line": 75,
                      "label": "        } else {\n            this.arr[head] = 0\n            this.head++\n            this.size--\n        }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "front",
          "type": "function",
          "start_line": 77,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 77,
              "line": "    public func front() {"
            },
            {
              "lineno": 78,
              "line": "        return arr[head]"
            },
            {
              "lineno": 79,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 77,
              "end_line": 78,
              "label": "    public func front() {\n        return arr[head]",
              "successors": []
            }
          ]
        },
        {
          "name": "back",
          "type": "function",
          "start_line": 80,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 80,
              "line": "    public func back() {"
            },
            {
              "lineno": 81,
              "line": "        return arr[tail]"
            },
            {
              "lineno": 82,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 80,
              "end_line": 80,
              "label": "    public func back() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 81,
                  "end_line": 81,
                  "label": "        return arr[tail]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "empty",
          "type": "function",
          "start_line": 83,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 83,
              "line": "    public func empty(): Bool {"
            },
            {
              "lineno": 84,
              "line": "        return (this.size == 0)"
            },
            {
              "lineno": 85,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 83,
              "end_line": 85,
              "label": "    public func empty(): Bool {\n        return (this.size == 0)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "operator[]",
          "type": "function",
          "start_line": 86,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 86,
              "line": "    public operator func [](i: Int64) {"
            },
            {
              "lineno": 87,
              "line": "        return arr[i+1000001]"
            },
            {
              "lineno": 88,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 86,
              "end_line": 87,
              "label": "    public operator func [](i: Int64) {\n        return arr[i+1000001]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 88,
                  "end_line": 88,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public class Deque<T> {"
        },
        {
          "lineno": 3,
          "line": "    var arr: Array<Any> = Array<Any>(2000000, item: 0)"
        },
        {
          "lineno": 4,
          "line": "    //numbers of value"
        },
        {
          "lineno": 5,
          "line": "    public var size: Int64 = 0"
        },
        {
          "lineno": 6,
          "line": "    var head: Int64 = 1000001"
        },
        {
          "lineno": 7,
          "line": "    var tail: Int64 = 1000000"
        },
        {
          "lineno": 89,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 7,
          "label": "public class Deque<T> {\n    var arr: Array<Any> = Array<Any>(2000000, item: 0)\n    //numbers of value\n    public var size: Int64 = 0\n    var head: Int64 = 1000001\n    var tail: Int64 = 1000000",
          "successors": [
            {
              "id": 2,
              "start_line": 89,
              "end_line": 89,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "//已知限制：无法拓展空间"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "//已知限制：无法拓展空间",
      "successors": []
    }
  ]
}