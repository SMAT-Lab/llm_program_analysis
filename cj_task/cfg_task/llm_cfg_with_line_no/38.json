{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 60,
  "functions": [],
  "classes": [
    {
      "name": "MysqlQueryResult",
      "type": "class",
      "start_line": 5,
      "end_line": 60,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    init(columns: ArrayList<MySqlField>, rows: ArrayList<Array<Byte>>) {"
            },
            {
              "lineno": 15,
              "line": "        this.columns = columns"
            },
            {
              "lineno": 16,
              "line": "        this.rows = rows"
            },
            {
              "lineno": 17,
              "line": "        this.nullBitMapEndPos = (this.columns.size + 7) / 8 + nullBitMapStartPos"
            },
            {
              "lineno": 18,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 14,
              "end_line": 18,
              "label": "    init(columns: ArrayList<MySqlField>, rows: ArrayList<Array<Byte>>) {\n        this.columns = columns\n        this.rows = rows\n        this.nullBitMapEndPos = (this.columns.size + 7) / 8 + nullBitMapStartPos\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "columnInfos",
          "type": "function",
          "start_line": 21,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 21,
              "line": "   public prop columnInfos: Array<ColumnInfo> {"
            },
            {
              "lineno": 22,
              "line": "        get() {"
            },
            {
              "lineno": 23,
              "line": "            return ArrayList<ColumnInfo>().toArray()"
            },
            {
              "lineno": 24,
              "line": "        }"
            },
            {
              "lineno": 25,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 21,
              "end_line": 21,
              "label": "   public prop columnInfos: Array<ColumnInfo> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 22,
                  "end_line": 23,
                  "label": "        get() {\n            return ArrayList<ColumnInfo>().toArray()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 24,
                      "end_line": 25,
                      "label": "        }\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "next",
          "type": "function",
          "start_line": 26,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    public func next(values: Array<SqlDbType>): Bool {"
            },
            {
              "lineno": 27,
              "line": "        tempRowPos = nullBitMapStartPos + 1"
            },
            {
              "lineno": 28,
              "line": "        if (tempRowsIndex < rows.size) {"
            },
            {
              "lineno": 29,
              "line": "            for(i in 0 .. values.size) {"
            },
            {
              "lineno": 30,
              "line": "                fillData(values[i])"
            },
            {
              "lineno": 31,
              "line": "            }"
            },
            {
              "lineno": 32,
              "line": "            tempRowsIndex ++"
            },
            {
              "lineno": 33,
              "line": "            return true"
            },
            {
              "lineno": 34,
              "line": "        }"
            },
            {
              "lineno": 35,
              "line": "        return false"
            },
            {
              "lineno": 36,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 26,
              "end_line": 27,
              "label": "    public func next(values: Array<SqlDbType>): Bool {\n        tempRowPos = nullBitMapStartPos + 1",
              "successors": [
                {
                  "id": 2,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "        if (tempRowsIndex < rows.size) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 29,
                      "end_line": 31,
                      "label": "            for(i in 0 .. values.size) {\n                fillData(values[i])\n            }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 32,
                          "end_line": 33,
                          "label": "            tempRowsIndex ++\n            return true",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 35,
                  "end_line": 35,
                  "label": "        return false",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "close",
          "type": "function",
          "start_line": 38,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    public func close() {"
            },
            {
              "lineno": 39,
              "line": "        "
            },
            {
              "lineno": 40,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 38,
              "end_line": 40,
              "label": "    public func close() {\n        \n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "isClosed",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    public func isClosed(): Bool {"
            },
            {
              "lineno": 43,
              "line": "        return false"
            },
            {
              "lineno": 44,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 43,
              "label": "    public func isClosed(): Bool {\n        return false",
              "successors": [
                {
                  "id": 2,
                  "start_line": 44,
                  "end_line": 44,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fillData",
          "type": "function",
          "start_line": 46,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 46,
              "line": "    private func fillData(value: SqlDbType) {"
            },
            {
              "lineno": 47,
              "line": "            match (value) {"
            },
            {
              "lineno": 48,
              "line": "                case v: SqlInteger\t=> "
            },
            {
              "lineno": 49,
              "line": "                    let number = ByteArrayUtils.littleEndianUint32(rows[tempRowsIndex][tempRowPos..])"
            },
            {
              "lineno": 50,
              "line": "                    v.value = Int32(number)"
            },
            {
              "lineno": 51,
              "line": "                    tempRowPos += 4"
            },
            {
              "lineno": 52,
              "line": "                case v: SqlVarchar => "
            },
            {
              "lineno": 53,
              "line": "                    let (s, isNull, n) = ByteArrayUtils.readLengthEncodedString(rows[tempRowsIndex][tempRowPos..])"
            },
            {
              "lineno": 54,
              "line": "                    v.value = String.fromUtf8(s)"
            },
            {
              "lineno": 55,
              "line": "                    tempRowPos += n"
            },
            {
              "lineno": 56,
              "line": "                case _ =>"
            },
            {
              "lineno": 57,
              "line": "                    println(\"unsupport Type\")"
            },
            {
              "lineno": 58,
              "line": "            }"
            },
            {
              "lineno": 59,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 46,
              "end_line": 46,
              "label": "    private func fillData(value: SqlDbType) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 47,
                  "end_line": 47,
                  "label": "            match (value) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 48,
                      "end_line": 51,
                      "label": "                case v: SqlInteger\t=> \n                    let number = ByteArrayUtils.littleEndianUint32(rows[tempRowsIndex][tempRowPos..])\n                    v.value = Int32(number)\n                    tempRowPos += 4",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 52,
                      "end_line": 55,
                      "label": "                case v: SqlVarchar => \n                    let (s, isNull, n) = ByteArrayUtils.readLengthEncodedString(rows[tempRowsIndex][tempRowPos..])\n                    v.value = String.fromUtf8(s)\n                    tempRowPos += n",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 56,
                      "end_line": 57,
                      "label": "                case _ =>\n                    println(\"unsupport Type\")",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 58,
              "end_line": 59,
              "label": "            }\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "public class MysqlQueryResult <: QueryResult {"
        },
        {
          "lineno": 6,
          "line": ""
        },
        {
          "lineno": 7,
          "line": "    private let columns: ArrayList<MySqlField>"
        },
        {
          "lineno": 8,
          "line": "    private let rows: ArrayList<Array<Byte>>"
        },
        {
          "lineno": 9,
          "line": "    private var tempRowsIndex = 0"
        },
        {
          "lineno": 10,
          "line": "    private var nullBitMapStartPos = 1"
        },
        {
          "lineno": 11,
          "line": "    private var nullBitMapEndPos = 0"
        },
        {
          "lineno": 12,
          "line": "    private var tempRowPos = 0"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 60,
          "label": "public class MysqlQueryResult <: QueryResult {\n\n    private let columns: ArrayList<MySqlField>\n    private let rows: ArrayList<Array<Byte>>\n    private var tempRowsIndex = 0\n    private var nullBitMapStartPos = 1\n    private var nullBitMapEndPos = 0\n    private var tempRowPos = 0\n\n\n\n\n\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package cangjieWeb.mysql"
    },
    {
      "lineno": 2,
      "line": "import std.database.sql.{QueryResult, ColumnInfo, SqlDbType, SqlInteger, SqlVarchar}"
    },
    {
      "lineno": 3,
      "line": "import std.collection.{ArrayList}"
    },
    {
      "lineno": 4,
      "line": "import cangjieWeb.utils.ByteArrayUtils"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "package cangjieWeb.mysql\nimport std.database.sql.{QueryResult, ColumnInfo, SqlDbType, SqlInteger, SqlVarchar}\nimport std.collection.{ArrayList}\nimport cangjieWeb.utils.ByteArrayUtils",
      "successors": []
    }
  ]
}