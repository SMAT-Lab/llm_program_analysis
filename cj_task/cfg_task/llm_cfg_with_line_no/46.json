{
  "name": "simple_math_interpreter",
  "type": "CFG",
  "start_line": 1,
  "end_line": 200,
  "functions": [
    {
      "name": "tokensFunc",
      "type": "function",
      "start_line": 69,
      "end_line": 71,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 69,
          "line": "func tokensFunc(input: List<Rune>): Option<(List<Token>, List<Rune>)> {"
        },
        {
          "lineno": 70,
          "line": "    tokens.parseFunc(input)"
        },
        {
          "lineno": 71,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 69,
          "end_line": 69,
          "label": "func tokensFunc(input: List<Rune>): Option<(List<Token>, List<Rune>)> {",
          "successors": [
            {
              "id": 2,
              "start_line": 70,
              "end_line": 70,
              "label": "    tokens.parseFunc(input)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 71,
                  "end_line": 71,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "atomicFunc",
      "type": "function",
      "start_line": 162,
      "end_line": 165,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 162,
          "line": "func atomicFunc(input: List<Token>): Option<(Expression, List<Token>)> {"
        },
        {
          "lineno": 163,
          "line": "    let expression = Combinator(expressionFunc)"
        },
        {
          "lineno": 164,
          "line": "    lparen.and(expression).and(rparen).map {t => t[0][1]}.or(eNumber).parseFunc(input)"
        },
        {
          "lineno": 165,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 162,
          "end_line": 165,
          "label": "func atomicFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let expression = Combinator(expressionFunc)\n    lparen.and(expression).and(rparen).map {t => t[0][1]}.or(eNumber).parseFunc(input)\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "combineFunc",
      "type": "function",
      "start_line": 167,
      "end_line": 180,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 167,
          "line": "func combineFunc(input: List<Token>): Option<(Expression, List<Token>)> {"
        },
        {
          "lineno": 168,
          "line": "    let atomic = Combinator(atomicFunc)"
        },
        {
          "lineno": 169,
          "line": "    atomic.and(multiply.or(divide).and(atomic).many(0)).map {"
        },
        {
          "lineno": 170,
          "line": "        t => t[1].reduce("
        },
        {
          "lineno": 171,
          "line": "            {"
        },
        {
          "lineno": 172,
          "line": "                acc, x => match ((acc, x)) {"
        },
        {
          "lineno": 173,
          "line": "                    case (e1, (Multiply, e2)) => Multiply(e1, e2)"
        },
        {
          "lineno": 174,
          "line": "                    case (e1, (_, e2)) => Divide(e1, e2)"
        },
        {
          "lineno": 175,
          "line": "                }"
        },
        {
          "lineno": 176,
          "line": "            },"
        },
        {
          "lineno": 177,
          "line": "            t[0]"
        },
        {
          "lineno": 178,
          "line": "        )"
        },
        {
          "lineno": 179,
          "line": "    }.parseFunc(input)"
        },
        {
          "lineno": 180,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 167,
          "end_line": 168,
          "label": "func combineFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let atomic = Combinator(atomicFunc)",
          "successors": [
            {
              "id": 2,
              "start_line": 169,
              "end_line": 172,
              "label": "atomic.and(multiply.or(divide).and(atomic).many(0)).map {\n    t => t[1].reduce(\n        {\n            acc, x => match ((acc, x)) {",
              "successors": [
                {
                  "id": 3,
                  "start_line": 173,
                  "end_line": 175,
                  "label": "case (e1, (Multiply, e2)) => Multiply(e1, e2)\ncase (e1, (_, e2)) => Divide(e1, e2)\n}",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 176,
                      "end_line": 179,
                      "label": "},\nt[0]\n)\n}.parseFunc(input)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "expressionFunc",
      "type": "function",
      "start_line": 182,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 182,
          "line": "func expressionFunc(input: List<Token>): Option<(Expression, List<Token>)> {"
        },
        {
          "lineno": 183,
          "line": "    let combine = Combinator(combineFunc)"
        },
        {
          "lineno": 184,
          "line": "    combine.and(plus.or(minus).and(combine).many(0)).map {"
        },
        {
          "lineno": 185,
          "line": "        t => t[1].reduce("
        },
        {
          "lineno": 186,
          "line": "            {"
        },
        {
          "lineno": 187,
          "line": "                acc, x => match ((acc, x)) {"
        },
        {
          "lineno": 188,
          "line": "                    case (e1, (Plus, e2)) => Plus(e1, e2)"
        },
        {
          "lineno": 189,
          "line": "                    case (e1, (_, e2)) => Minus(e1, e2)"
        },
        {
          "lineno": 190,
          "line": "                }"
        },
        {
          "lineno": 191,
          "line": "            },"
        },
        {
          "lineno": 192,
          "line": "            t[0]"
        },
        {
          "lineno": 193,
          "line": "        )"
        },
        {
          "lineno": 194,
          "line": "    }.parseFunc(input)"
        },
        {
          "lineno": 195,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 182,
          "end_line": 184,
          "label": "func expressionFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let combine = Combinator(combineFunc)\n    combine.and(plus.or(minus).and(combine).many(0)).map {",
          "successors": [
            {
              "id": 2,
              "start_line": 185,
              "end_line": 193,
              "label": "t => t[1].reduce(\n        {\n            acc, x => match ((acc, x)) {\n                case (e1, (Plus, e2)) => Plus(e1, e2)\n                case (e1, (_, e2)) => Minus(e1, e2)\n            }\n        },\n        t[0]\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 194,
                  "end_line": 194,
                  "label": "}.parseFunc(input)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 195,
                      "end_line": 195,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "eval",
      "type": "function",
      "start_line": 197,
      "end_line": 200,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 197,
          "line": "public func eval(str: String): Result<Int64, String> {"
        },
        {
          "lineno": 198,
          "line": "    let runes = List<Rune>.fromArray(str.trimAscii().toRuneArray())"
        },
        {
          "lineno": 199,
          "line": "    Token.fromRunes(runes).andThen(Expression.fromTokens).map {e => e.eval()}"
        },
        {
          "lineno": 200,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 197,
          "end_line": 200,
          "label": "public func eval(str: String): Result<Int64, String> {\n    let runes = List<Rune>.fromArray(str.trimAscii().toRuneArray())\n    Token.fromRunes(runes).andThen(Expression.fromTokens).map {e => e.eval()}\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Token",
      "type": "class",
      "start_line": 6,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "enum Token {"
        },
        {
          "lineno": 7,
          "line": "    | Value(Int)"
        },
        {
          "lineno": 8,
          "line": "    | LParen"
        },
        {
          "lineno": 9,
          "line": "    | RParen"
        },
        {
          "lineno": 10,
          "line": "    | Plus"
        },
        {
          "lineno": 11,
          "line": "    | Minus"
        },
        {
          "lineno": 12,
          "line": "    | Multiply"
        },
        {
          "lineno": 13,
          "line": "    | Divide"
        },
        {
          "lineno": 14,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 14,
          "label": "enum Token {\n    | Value(Int)\n    | LParen\n    | RParen\n    | Plus\n    | Minus\n    | Multiply\n    | Divide\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Token",
      "type": "class",
      "start_line": 16,
      "end_line": 23,
      "functions": [
        {
          "name": "fromRunes",
          "type": "function",
          "start_line": 17,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    static func fromRunes(runes: List<Rune>): Result<List<Token>, String> {"
            },
            {
              "lineno": 18,
              "line": "        match (tokensFunc(runes).map {t => t[0]}) {"
            },
            {
              "lineno": 19,
              "line": "            case Some(l) => Ok(l)"
            },
            {
              "lineno": 20,
              "line": "            case None => Err(\"Invalid Input!\")"
            },
            {
              "lineno": 21,
              "line": "        }"
            },
            {
              "lineno": 22,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 17,
              "end_line": 17,
              "label": "static func fromRunes(runes: List<Rune>): Result<List<Token>, String> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 18,
                  "end_line": 21,
                  "label": "match (tokensFunc(runes).map {t => t[0]}) {\n            case Some(l) => Ok(l)\n            case None => Err(\"Invalid Input!\")\n        }",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 22,
              "end_line": 22,
              "label": "}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "extend Token {"
        },
        {
          "lineno": 23,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 23,
          "label": "extend Token {\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Token",
      "type": "class",
      "start_line": 25,
      "end_line": 37,
      "functions": [
        {
          "name": "toString",
          "type": "function",
          "start_line": 26,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    public func toString() {"
            },
            {
              "lineno": 27,
              "line": "        match (this) {"
            },
            {
              "lineno": 28,
              "line": "            case Value(n) => n.toString()"
            },
            {
              "lineno": 29,
              "line": "            case LParen => \"(\""
            },
            {
              "lineno": 30,
              "line": "            case RParen => \")\""
            },
            {
              "lineno": 31,
              "line": "            case Plus => \"+\""
            },
            {
              "lineno": 32,
              "line": "            case Minus => \"-\""
            },
            {
              "lineno": 33,
              "line": "            case Multiply => \"*\""
            },
            {
              "lineno": 34,
              "line": "            case Divide => \"/\""
            },
            {
              "lineno": 35,
              "line": "        }"
            },
            {
              "lineno": 36,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 26,
              "end_line": 26,
              "label": "    public func toString() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 27,
                  "end_line": 35,
                  "label": "        match (this) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 28,
                      "end_line": 28,
                      "label": "            case Value(n) => n.toString()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 29,
                      "end_line": 29,
                      "label": "            case LParen => \"(\"",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 30,
                      "end_line": 30,
                      "label": "            case RParen => \")\"",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 31,
                      "end_line": 31,
                      "label": "            case Plus => \"+\"",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "start_line": 32,
                      "end_line": 32,
                      "label": "            case Minus => \"-\"",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "start_line": 33,
                      "end_line": 33,
                      "label": "            case Multiply => \"*\"",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "start_line": 34,
                      "end_line": 34,
                      "label": "            case Divide => \"/\"",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 10,
              "start_line": 36,
              "end_line": 36,
              "label": "    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 25,
          "line": "extend Token <: ToString {"
        },
        {
          "lineno": 37,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 25,
          "end_line": 25,
          "label": "extend Token <: ToString {",
          "successors": [
            {
              "id": 2,
              "start_line": 37,
              "end_line": 37,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Expression",
      "type": "class",
      "start_line": 73,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 73,
          "line": "enum Expression {"
        },
        {
          "lineno": 74,
          "line": "    | Number(Int)"
        },
        {
          "lineno": 75,
          "line": "    | Plus(Expression, Expression)"
        },
        {
          "lineno": 76,
          "line": "    | Minus(Expression, Expression)"
        },
        {
          "lineno": 77,
          "line": "    | Multiply(Expression, Expression)"
        },
        {
          "lineno": 78,
          "line": "    | Divide(Expression, Expression)"
        },
        {
          "lineno": 79,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 73,
          "end_line": 79,
          "label": "enum Expression {\n    | Number(Int)\n    | Plus(Expression, Expression)\n    | Minus(Expression, Expression)\n    | Multiply(Expression, Expression)\n    | Divide(Expression, Expression)\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Expression",
      "type": "class",
      "start_line": 81,
      "end_line": 88,
      "functions": [
        {
          "name": "fromTokens",
          "type": "function",
          "start_line": 82,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 82,
              "line": "    static func fromTokens(tokens: List<Token>): Result<Expression, String> {"
            },
            {
              "lineno": 83,
              "line": "        match (expressionFunc(tokens).map {t => t[0]}) {"
            },
            {
              "lineno": 84,
              "line": "            case Some(e) => Ok(e)"
            },
            {
              "lineno": 85,
              "line": "            case None => Err(\"Invalid Expression!\")"
            },
            {
              "lineno": 86,
              "line": "        }"
            },
            {
              "lineno": 87,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 82,
              "end_line": 83,
              "label": "    static func fromTokens(tokens: List<Token>): Result<Expression, String> {\n        match (expressionFunc(tokens).map {t => t[0]}) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 84,
                  "end_line": 84,
                  "label": "            case Some(e) => Ok(e)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 85,
                  "end_line": 85,
                  "label": "            case None => Err(\"Invalid Expression!\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 86,
              "end_line": 87,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 81,
          "line": "extend Expression {"
        },
        {
          "lineno": 88,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 81,
          "end_line": 88,
          "label": "extend Expression {\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Expression",
      "type": "class",
      "start_line": 90,
      "end_line": 100,
      "functions": [
        {
          "name": "eval",
          "type": "function",
          "start_line": 91,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 91,
              "line": "    func eval(): Int64 {"
            },
            {
              "lineno": 92,
              "line": "        match (this) {"
            },
            {
              "lineno": 93,
              "line": "            case Number(n) => n"
            },
            {
              "lineno": 94,
              "line": "            case Plus(e1, e2) => e1.eval() + e2.eval()"
            },
            {
              "lineno": 95,
              "line": "            case Minus(e1, e2) => e1.eval() - e2.eval()"
            },
            {
              "lineno": 96,
              "line": "            case Multiply(e1, e2) => e1.eval() * e2.eval()"
            },
            {
              "lineno": 97,
              "line": "            case Divide(e1, e2) => e1.eval() / e2.eval()"
            },
            {
              "lineno": 98,
              "line": "        }"
            },
            {
              "lineno": 99,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 91,
              "end_line": 92,
              "label": "    func eval(): Int64 {\n        match (this) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 93,
                  "end_line": 93,
                  "label": "            case Number(n) => n",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 94,
                  "end_line": 94,
                  "label": "            case Plus(e1, e2) => e1.eval() + e2.eval()",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 95,
                  "end_line": 95,
                  "label": "            case Minus(e1, e2) => e1.eval() - e2.eval()",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 96,
                  "end_line": 96,
                  "label": "            case Multiply(e1, e2) => e1.eval() * e2.eval()",
                  "successors": []
                },
                {
                  "id": 6,
                  "start_line": 97,
                  "end_line": 97,
                  "label": "            case Divide(e1, e2) => e1.eval() / e2.eval()",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "start_line": 98,
              "end_line": 99,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 90,
          "line": "extend Expression {"
        },
        {
          "lineno": 100,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 90,
          "end_line": 100,
          "label": "extend Expression {\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Expression",
      "type": "class",
      "start_line": 102,
      "end_line": 112,
      "functions": [
        {
          "name": "toString",
          "type": "function",
          "start_line": 103,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 103,
              "line": "    public func toString(): String {"
            },
            {
              "lineno": 104,
              "line": "        match (this) {"
            },
            {
              "lineno": 105,
              "line": "            case Number(n) => \"${n}\""
            },
            {
              "lineno": 106,
              "line": "            case Plus(e1, e2) => \"(+ ${e1} ${e2})\""
            },
            {
              "lineno": 107,
              "line": "            case Minus(e1, e2) => \"(- ${e1} ${e2})\""
            },
            {
              "lineno": 108,
              "line": "            case Multiply(e1, e2) => \"(* ${e1} ${e2})\""
            },
            {
              "lineno": 109,
              "line": "            case Divide(e1, e2) => \"(/ ${e1} ${e2})\""
            },
            {
              "lineno": 110,
              "line": "        }"
            },
            {
              "lineno": 111,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 103,
              "end_line": 104,
              "label": "    public func toString(): String {\n        match (this) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 105,
                  "end_line": 105,
                  "label": "            case Number(n) => \"${n}\"",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 106,
                  "end_line": 106,
                  "label": "            case Plus(e1, e2) => \"(+ ${e1} ${e2})\"",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 107,
                  "end_line": 107,
                  "label": "            case Minus(e1, e2) => \"(- ${e1} ${e2})\"",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 108,
                  "end_line": 108,
                  "label": "            case Multiply(e1, e2) => \"(* ${e1} ${e2})\"",
                  "successors": []
                },
                {
                  "id": 6,
                  "start_line": 109,
                  "end_line": 109,
                  "label": "            case Divide(e1, e2) => \"(/ ${e1} ${e2})\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "start_line": 110,
              "end_line": 111,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 102,
          "line": "extend Expression <: ToString {"
        },
        {
          "lineno": 112,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 102,
          "end_line": 112,
          "label": "extend Expression <: ToString {\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package simple_math_interpreter"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.convert.*"
    },
    {
      "lineno": 4,
      "line": "import simple_math_interpreter.ext.*"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 39,
      "line": "let symbol = Combinator<Rune, Rune>.make {"
    },
    {
      "lineno": 40,
      "line": "    ch => match (ch) {"
    },
    {
      "lineno": 41,
      "line": "        case r'+' | r'-' | r'*' | r'/' | r'(' | r')' => true"
    },
    {
      "lineno": 42,
      "line": "        case _ => false"
    },
    {
      "lineno": 43,
      "line": "    }"
    },
    {
      "lineno": 44,
      "line": "}.map {"
    },
    {
      "lineno": 45,
      "line": "    ch: Rune => match (ch) {"
    },
    {
      "lineno": 46,
      "line": "        case '+' => Plus"
    },
    {
      "lineno": 47,
      "line": "        case '-' => Minus"
    },
    {
      "lineno": 48,
      "line": "        case '*' => Multiply"
    },
    {
      "lineno": 49,
      "line": "        case '/' => Divide"
    },
    {
      "lineno": 50,
      "line": "        case '(' => LParen"
    },
    {
      "lineno": 51,
      "line": "        case ')' => RParen"
    },
    {
      "lineno": 52,
      "line": "        case _ => throw Exception()"
    },
    {
      "lineno": 53,
      "line": "    }"
    },
    {
      "lineno": 54,
      "line": "}"
    },
    {
      "lineno": 55,
      "line": "let whiteSpace = Combinator<Rune, Rune>.make {ch => ch == r' '}"
    },
    {
      "lineno": 56,
      "line": "let number = Combinator<Rune, Rune>.make {"
    },
    {
      "lineno": 57,
      "line": "    ch => match (Int64.tryParse(ch.toString())) {"
    },
    {
      "lineno": 58,
      "line": "        case Some(n) where n >= 0 && n <= 9 => true"
    },
    {
      "lineno": 59,
      "line": "        case _ => false"
    },
    {
      "lineno": 60,
      "line": "    }"
    },
    {
      "lineno": 61,
      "line": "}.map {ch => Int64.parse(ch.toString())}"
    },
    {
      "lineno": 62,
      "line": "let value = number.many(1).map {"
    },
    {
      "lineno": 63,
      "line": "    l => l.reduce<Int64>({acc, x => acc * 10 + x}, 0)"
    },
    {
      "lineno": 64,
      "line": "}.map {v => Value(v)}"
    },
    {
      "lineno": 65,
      "line": "let tokenAndSpace = value.or(symbol).and(whiteSpace.many(1)).map {s: (Token, List<Rune>) => s[0]}"
    },
    {
      "lineno": 66,
      "line": "let token = value.or(symbol)"
    },
    {
      "lineno": 67,
      "line": "let tokens = tokenAndSpace.or(token).many(1)"
    },
    {
      "lineno": 68,
      "line": ""
    },
    {
      "lineno": 72,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 89,
      "line": ""
    },
    {
      "lineno": 101,
      "line": ""
    },
    {
      "lineno": 113,
      "line": ""
    },
    {
      "lineno": 114,
      "line": "let eNumber = Combinator<Token, Token>.make {"
    },
    {
      "lineno": 115,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 116,
      "line": "        case Value(_) => true"
    },
    {
      "lineno": 117,
      "line": "        case _ => false"
    },
    {
      "lineno": 118,
      "line": "    }"
    },
    {
      "lineno": 119,
      "line": "}.map {"
    },
    {
      "lineno": 120,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 121,
      "line": "        case Value(i) => Number(i)"
    },
    {
      "lineno": 122,
      "line": "        case _ => throw Exception()"
    },
    {
      "lineno": 123,
      "line": "    }"
    },
    {
      "lineno": 124,
      "line": "}"
    },
    {
      "lineno": 125,
      "line": "let lparen = Combinator<Token, Token>.make {"
    },
    {
      "lineno": 126,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 127,
      "line": "        case LParen => true"
    },
    {
      "lineno": 128,
      "line": "        case _ => false"
    },
    {
      "lineno": 129,
      "line": "    }"
    },
    {
      "lineno": 130,
      "line": "}"
    },
    {
      "lineno": 131,
      "line": "let rparen = Combinator<Token, Token>.make {"
    },
    {
      "lineno": 132,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 133,
      "line": "        case RParen => true"
    },
    {
      "lineno": 134,
      "line": "        case _ => false"
    },
    {
      "lineno": 135,
      "line": "    }"
    },
    {
      "lineno": 136,
      "line": "}"
    },
    {
      "lineno": 137,
      "line": "let plus = Combinator<Token, Token>.make {"
    },
    {
      "lineno": 138,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 139,
      "line": "        case Plus => true"
    },
    {
      "lineno": 140,
      "line": "        case _ => false"
    },
    {
      "lineno": 141,
      "line": "    }"
    },
    {
      "lineno": 142,
      "line": "}"
    },
    {
      "lineno": 143,
      "line": "let minus = Combinator<Token, Token>.make {"
    },
    {
      "lineno": 144,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 145,
      "line": "        case Minus => true"
    },
    {
      "lineno": 146,
      "line": "        case _ => false"
    },
    {
      "lineno": 147,
      "line": "    }"
    },
    {
      "lineno": 148,
      "line": "}"
    },
    {
      "lineno": 149,
      "line": "let multiply = Combinator<Token, Token>.make {"
    },
    {
      "lineno": 150,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 151,
      "line": "        case Multiply => true"
    },
    {
      "lineno": 152,
      "line": "        case _ => false"
    },
    {
      "lineno": 153,
      "line": "    }"
    },
    {
      "lineno": 154,
      "line": "}"
    },
    {
      "lineno": 155,
      "line": "let divide = Combinator<Token, Token>.make {"
    },
    {
      "lineno": 156,
      "line": "    token => match (token) {"
    },
    {
      "lineno": 157,
      "line": "        case Divide => true"
    },
    {
      "lineno": 158,
      "line": "        case _ => false"
    },
    {
      "lineno": 159,
      "line": "    }"
    },
    {
      "lineno": 160,
      "line": "}"
    },
    {
      "lineno": 161,
      "line": ""
    },
    {
      "lineno": 166,
      "line": ""
    },
    {
      "lineno": 181,
      "line": ""
    },
    {
      "lineno": 196,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package simple_math_interpreter",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 4,
          "label": "import std.convert.*\nimport simple_math_interpreter.ext.*",
          "successors": [
            {
              "id": 3,
              "start_line": 39,
              "end_line": 44,
              "label": "let symbol = Combinator<Rune, Rune>.make {\n    ch => match (ch) {\n        case r'+' | r'-' | r'*' | r'/' | r'(' | r')' => true\n        case _ => false\n    }\n}.map {",
              "successors": [
                {
                  "id": 4,
                  "start_line": 45,
                  "end_line": 54,
                  "label": "    ch: Rune => match (ch) {\n        case '+' => Plus\n        case '-' => Minus\n        case '*' => Multiply\n        case '/' => Divide\n        case '(' => LParen\n        case ')' => RParen\n        case _ => throw Exception()\n    }",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 55,
                      "end_line": 55,
                      "label": "let whiteSpace = Combinator<Rune, Rune>.make {ch => ch == r' '}",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 56,
                          "end_line": 61,
                          "label": "let number = Combinator<Rune, Rune>.make {\n    ch => match (Int64.tryParse(ch.toString())) {\n        case Some(n) where n >= 0 && n <= 9 => true\n        case _ => false\n    }\n}.map {ch => Int64.parse(ch.toString())}",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 62,
                              "end_line": 64,
                              "label": "let value = number.many(1).map {\n    l => l.reduce<Int64>({acc, x => acc * 10 + x}, 0)\n}.map {v => Value(v)}",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 65,
                                  "end_line": 66,
                                  "label": "let tokenAndSpace = value.or(symbol).and(whiteSpace.many(1)).map {s: (Token, List<Rune>) => s[0]}\nlet token = value.or(symbol)",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 67,
                                      "end_line": 67,
                                      "label": "let tokens = tokenAndSpace.or(token).many(1)",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 114,
                                          "end_line": 119,
                                          "label": "let eNumber = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Value(_) => true\n        case _ => false\n    }\n}.map {",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "start_line": 120,
                                              "end_line": 124,
                                              "label": "    token => match (token) {\n        case Value(i) => Number(i)\n        case _ => throw Exception()\n    }",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "start_line": 125,
                                                  "end_line": 130,
                                                  "label": "let lparen = Combinator<Token, Token>.make {\n    token => match (token) {\n        case LParen => true\n        case _ => false\n    }\n}",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "start_line": 131,
                                                      "end_line": 136,
                                                      "label": "let rparen = Combinator<Token, Token>.make {\n    token => match (token) {\n        case RParen => true\n        case _ => false\n    }\n}",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "start_line": 137,
                                                          "end_line": 142,
                                                          "label": "let plus = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Plus => true\n        case _ => false\n    }\n}",
                                                          "successors": [
                                                            {
                                                              "id": 15,
                                                              "start_line": 143,
                                                              "end_line": 148,
                                                              "label": "let minus = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Minus => true\n        case _ => false\n    }\n}",
                                                              "successors": [
                                                                {
                                                                  "id": 16,
                                                                  "start_line": 149,
                                                                  "end_line": 154,
                                                                  "label": "let multiply = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Multiply => true\n        case _ => false\n    }\n}",
                                                                  "successors": [
                                                                    {
                                                                      "id": 17,
                                                                      "start_line": 155,
                                                                      "end_line": 160,
                                                                      "label": "let divide = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Divide => true\n        case _ => false\n    }\n}",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}