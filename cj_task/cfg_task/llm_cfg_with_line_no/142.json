{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 48,
  "functions": [
    {
      "name": "CursorQueryDataInternalCreate",
      "type": "function",
      "start_line": 2,
      "end_line": 4,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "protected func CursorQueryDataInternalCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>): CursorQuery<E> where E <: EntityType {"
        },
        {
          "lineno": 3,
          "line": "    return CursorQueryDataCreate<E>(dao, sql, initialValues, -1, -1)"
        },
        {
          "lineno": 4,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 4,
          "label": "protected func CursorQueryDataInternalCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>): CursorQuery<E> where E <: EntityType {\n    return CursorQueryDataCreate<E>(dao, sql, initialValues, -1, -1)\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "CursorQueryDataCreate",
      "type": "function",
      "start_line": 5,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "protected func CursorQueryDataCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64): CursorQuery<E> where E <: EntityType  {"
        },
        {
          "lineno": 6,
          "line": "    let queryData = CursorQueryData<E>(dao, sql, initialValues, limitPosition,"
        },
        {
          "lineno": 7,
          "line": "            offsetPosition)"
        },
        {
          "lineno": 8,
          "line": "    return queryData.forCurrentThread()"
        },
        {
          "lineno": 9,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 8,
          "label": "protected func CursorQueryDataCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64): CursorQuery<E> where E <: EntityType  {\n    let queryData = CursorQueryData<E>(dao, sql, initialValues, limitPosition,\n            offsetPosition)\n    return queryData.forCurrentThread()",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 9,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "CursorQueryData",
      "type": "class",
      "start_line": 10,
      "end_line": 21,
      "functions": [
        {
          "name": "createQuery",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    protected func createQuery(): CursorQuery<T> {"
            },
            {
              "lineno": 19,
              "line": "        CursorQuery<T>(this, this.dao, this.sql, this.initialValues, limitPosition, offsetPosition)"
            },
            {
              "lineno": 20,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 20,
              "label": "    protected func createQuery(): CursorQuery<T> {\n        CursorQuery<T>(this, this.dao, this.sql, this.initialValues, limitPosition, offsetPosition)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "public class CursorQueryData<T> <: AbstractQueryData<T, CursorQuery<T>> where T <: EntityType {"
        },
        {
          "lineno": 11,
          "line": "    private let limitPosition: Int64"
        },
        {
          "lineno": 12,
          "line": "    private let offsetPosition: Int64"
        },
        {
          "lineno": 13,
          "line": "    protected init(dao: IAbstractDao,sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {"
        },
        {
          "lineno": 14,
          "line": "        super(dao, sql, initialValues)"
        },
        {
          "lineno": 15,
          "line": "        this.limitPosition = limitPosition"
        },
        {
          "lineno": 16,
          "line": "        this.offsetPosition = offsetPosition"
        },
        {
          "lineno": 17,
          "line": "    }"
        },
        {
          "lineno": 21,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 17,
          "label": "public class CursorQueryData<T> <: AbstractQueryData<T, CursorQuery<T>> where T <: EntityType {\n    private let limitPosition: Int64\n    private let offsetPosition: Int64\n    protected init(dao: IAbstractDao,sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {\n        super(dao, sql, initialValues)\n        this.limitPosition = limitPosition\n        this.offsetPosition = offsetPosition\n    }",
          "successors": [
            {
              "id": 2,
              "start_line": 21,
              "end_line": 21,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "CursorQuery",
      "type": "class",
      "start_line": 22,
      "end_line": 48,
      "functions": [
        {
          "name": "forCurrentThread",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public func forCurrentThread(): CursorQuery<T> {"
            },
            {
              "lineno": 29,
              "line": "        return queryData.forCurrentThread(this)"
            },
            {
              "lineno": 30,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 28,
              "end_line": 30,
              "label": "    public func forCurrentThread(): CursorQuery<T> {\n        return queryData.forCurrentThread(this)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "query",
          "type": "function",
          "start_line": 31,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 31,
              "line": "    public func query(): ResultSet {"
            },
            {
              "lineno": 32,
              "line": "        checkThread()"
            },
            {
              "lineno": 33,
              "line": "        return match (sql) {"
            },
            {
              "lineno": 34,
              "line": "            case SQL(v) => dao.getDatabase().querySql(v, bindArgs: parameters)"
            },
            {
              "lineno": 35,
              "line": "            case PREDICATES(v) => dao.getDatabase().query(v.rdbPredicates, [])"
            },
            {
              "lineno": 36,
              "line": "        }"
            },
            {
              "lineno": 37,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 31,
              "end_line": 32,
              "label": "    public func query(): ResultSet {\n        checkThread()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 33,
                  "end_line": 33,
                  "label": "        return match (sql) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 34,
                      "end_line": 34,
                      "label": "            case SQL(v) => dao.getDatabase().querySql(v, bindArgs: parameters)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 35,
                      "end_line": 35,
                      "label": "            case PREDICATES(v) => dao.getDatabase().query(v.rdbPredicates, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setParameter",
          "type": "function",
          "start_line": 39,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    public override func setParameter(index: Int64, parameter: ValueType ): AbstractQueryWithLimit<T> {"
            },
            {
              "lineno": 40,
              "line": "        return super.setParameter(index, parameter)"
            },
            {
              "lineno": 41,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 39,
              "end_line": 40,
              "label": "    public override func setParameter(index: Int64, parameter: ValueType ): AbstractQueryWithLimit<T> {\n        return super.setParameter(index, parameter)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 41,
                  "end_line": 41,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setParameter",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    public override func setParameter(index: Int64, parameter: ?DateTime): AbstractQuery<T> {"
            },
            {
              "lineno": 43,
              "line": "        return super.setParameter(index, parameter)"
            },
            {
              "lineno": 44,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 43,
              "label": "    public override func setParameter(index: Int64, parameter: ?DateTime): AbstractQuery<T> {\n        return super.setParameter(index, parameter)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 44,
                  "end_line": 44,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setParameter",
          "type": "function",
          "start_line": 45,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    public override func setParameter(index: Int64, parameter: ?Bool): AbstractQuery<T> {"
            },
            {
              "lineno": 46,
              "line": "        return super.setParameter(index, parameter)"
            },
            {
              "lineno": 47,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 45,
              "end_line": 47,
              "label": "    public override func setParameter(index: Int64, parameter: ?Bool): AbstractQuery<T> {\n        return super.setParameter(index, parameter)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "public class CursorQuery<T> <: AbstractQueryWithLimit<T> where T <: EntityType {"
        },
        {
          "lineno": 23,
          "line": "    private let queryData: CursorQueryData<T>"
        },
        {
          "lineno": 24,
          "line": "    init(queryData: CursorQueryData<T>, dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {"
        },
        {
          "lineno": 25,
          "line": "        super(dao, sql, initialValues, limitPosition, offsetPosition)"
        },
        {
          "lineno": 26,
          "line": "        this.queryData = queryData"
        },
        {
          "lineno": 27,
          "line": "    }"
        },
        {
          "lineno": 38,
          "line": "    // copy setParameter methods to allow easy chaining"
        },
        {
          "lineno": 48,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 27,
          "label": "public class CursorQuery<T> <: AbstractQueryWithLimit<T> where T <: EntityType {\n    private let queryData: CursorQueryData<T>\n    init(queryData: CursorQueryData<T>, dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {\n        super(dao, sql, initialValues, limitPosition, offsetPosition)\n        this.queryData = queryData\n    }",
          "successors": [
            {
              "id": 2,
              "start_line": 38,
              "end_line": 38,
              "label": "// copy setParameter methods to allow easy chaining",
              "successors": [
                {
                  "id": 3,
                  "start_line": 48,
                  "end_line": 48,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package dataorm4cj"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package dataorm4cj",
      "successors": []
    }
  ]
}