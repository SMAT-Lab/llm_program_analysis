{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 110,
  "functions": [],
  "classes": [
    {
      "name": "EAN13Reader",
      "type": "class",
      "start_line": 2,
      "end_line": 58,
      "functions": [
        {
          "name": "decodeMiddle",
          "type": "function",
          "start_line": 5,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 5,
              "line": "    protected func decodeMiddle("
            },
            {
              "lineno": 6,
              "line": "        row: BitArray,"
            },
            {
              "lineno": 7,
              "line": "        startRange: Array<Int64>,"
            },
            {
              "lineno": 8,
              "line": "        resultString: StringBuilder"
            },
            {
              "lineno": 9,
              "line": "    ): Int64 {"
            },
            {
              "lineno": 10,
              "line": "        let counters = decodeMiddleCounters"
            },
            {
              "lineno": 11,
              "line": "        counters[0] = 0"
            },
            {
              "lineno": 12,
              "line": "        counters[1] = 0"
            },
            {
              "lineno": 13,
              "line": "        counters[2] = 0"
            },
            {
              "lineno": 14,
              "line": "        counters[3] = 0"
            },
            {
              "lineno": 15,
              "line": "        let end = row.size"
            },
            {
              "lineno": 16,
              "line": "        var rowOffset = startRange[1]"
            },
            {
              "lineno": 17,
              "line": "        var lgPatternFound = 0"
            },
            {
              "lineno": 18,
              "line": "        for (x in 0..6) {"
            },
            {
              "lineno": 19,
              "line": "            if (rowOffset >= end) {"
            },
            {
              "lineno": 20,
              "line": "                break"
            },
            {
              "lineno": 21,
              "line": "            }"
            },
            {
              "lineno": 22,
              "line": "            let bestMatch = decodeDigit(row, counters, rowOffset, L_AND_G_PATTERNS)"
            },
            {
              "lineno": 23,
              "line": "            resultString.append(Char(UInt32('0') + UInt32(bestMatch % 10)))"
            },
            {
              "lineno": 24,
              "line": "            for (counter in counters) {"
            },
            {
              "lineno": 25,
              "line": "                rowOffset += counter"
            },
            {
              "lineno": 26,
              "line": "            }"
            },
            {
              "lineno": 27,
              "line": "            if (bestMatch >= 10) {"
            },
            {
              "lineno": 28,
              "line": "                lgPatternFound |= 1 << (5 - x)"
            },
            {
              "lineno": 29,
              "line": "            }"
            },
            {
              "lineno": 30,
              "line": "        }"
            },
            {
              "lineno": 31,
              "line": "        determineFirstDigit(resultString, lgPatternFound)"
            },
            {
              "lineno": 32,
              "line": "        let middleRange = findGuardPattern(row, rowOffset, true, MIDDLE_PATTERN)"
            },
            {
              "lineno": 33,
              "line": "        rowOffset = middleRange[1]"
            },
            {
              "lineno": 34,
              "line": "        for (x in 0..6) {"
            },
            {
              "lineno": 35,
              "line": "            if (rowOffset >= end) {"
            },
            {
              "lineno": 36,
              "line": "                break"
            },
            {
              "lineno": 37,
              "line": "            }"
            },
            {
              "lineno": 38,
              "line": "            let bestMatch = decodeDigit(row, counters, rowOffset, L_PATTERNS)"
            },
            {
              "lineno": 39,
              "line": "            resultString.append(Char(UInt32('0') + UInt32(bestMatch)))"
            },
            {
              "lineno": 40,
              "line": "            for (counter in counters) {"
            },
            {
              "lineno": 41,
              "line": "                rowOffset += counter"
            },
            {
              "lineno": 42,
              "line": "            }"
            },
            {
              "lineno": 43,
              "line": "        }"
            },
            {
              "lineno": 44,
              "line": "        rowOffset"
            },
            {
              "lineno": 45,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 5,
              "end_line": 17,
              "label": "    protected func decodeMiddle(\n        row: BitArray,\n        startRange: Array<Int64>,\n        resultString: StringBuilder\n    ): Int64 {\n        let counters = decodeMiddleCounters\n        counters[0] = 0\n        counters[1] = 0\n        counters[2] = 0\n        counters[3] = 0\n        let end = row.size\n        var rowOffset = startRange[1]\n        var lgPatternFound = 0",
              "successors": [
                {
                  "id": 2,
                  "start_line": 18,
                  "end_line": 30,
                  "label": "        for (x in 0..6) {\n            if (rowOffset >= end) {\n                break\n            }\n            let bestMatch = decodeDigit(row, counters, rowOffset, L_AND_G_PATTERNS)\n            resultString.append(Char(UInt32('0') + UInt32(bestMatch % 10)))\n            for (counter in counters) {\n                rowOffset += counter\n            }\n            if (bestMatch >= 10) {\n                lgPatternFound |= 1 << (5 - x)\n            }\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 31,
                      "end_line": 33,
                      "label": "        determineFirstDigit(resultString, lgPatternFound)\n        let middleRange = findGuardPattern(row, rowOffset, true, MIDDLE_PATTERN)\n        rowOffset = middleRange[1]",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 34,
                          "end_line": 43,
                          "label": "        for (x in 0..6) {\n            if (rowOffset >= end) {\n                break\n            }\n            let bestMatch = decodeDigit(row, counters, rowOffset, L_PATTERNS)\n            resultString.append(Char(UInt32('0') + UInt32(bestMatch)))\n            for (counter in counters) {\n                rowOffset += counter\n            }\n        }",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 44,
                              "end_line": 45,
                              "label": "        rowOffset\n    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getBarcodeFormat",
          "type": "function",
          "start_line": 46,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 46,
              "line": "    func getBarcodeFormat(): BarcodeFormat {"
            },
            {
              "lineno": 47,
              "line": "        return BarcodeFormat.EAN_13"
            },
            {
              "lineno": 48,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 46,
              "end_line": 48,
              "label": "    func getBarcodeFormat(): BarcodeFormat {\n        return BarcodeFormat.EAN_13\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "determineFirstDigit",
          "type": "function",
          "start_line": 49,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    static func determineFirstDigit(resultString: StringBuilder, lgPatternFound: Int64) {"
            },
            {
              "lineno": 50,
              "line": "        for (d in 0..10) {"
            },
            {
              "lineno": 51,
              "line": "            if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {"
            },
            {
              "lineno": 52,
              "line": "                resultString.insert(0, Char(UInt32('0') + UInt32(d)))"
            },
            {
              "lineno": 53,
              "line": "                return"
            },
            {
              "lineno": 54,
              "line": "            }"
            },
            {
              "lineno": 55,
              "line": "        }"
            },
            {
              "lineno": 56,
              "line": "        throw NotFoundException()"
            },
            {
              "lineno": 57,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 49,
              "label": "static func determineFirstDigit(resultString: StringBuilder, lgPatternFound: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 50,
                  "end_line": 50,
                  "label": "for (d in 0..10) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 51,
                      "end_line": 51,
                      "label": "if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 52,
                          "end_line": 53,
                          "label": "resultString.insert(0, Char(UInt32('0') + UInt32(d)))\nreturn",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 54,
                      "end_line": 54,
                      "label": "}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 55,
                  "end_line": 56,
                  "label": "}\nthrow NotFoundException()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public class EAN13Reader <: UPCEANReader {"
        },
        {
          "lineno": 3,
          "line": "    static let FIRST_DIGIT_ENCODINGS = [0x00, 0x0B, 0x0D, 0xE, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1A]"
        },
        {
          "lineno": 4,
          "line": "    let decodeMiddleCounters: Array<Int64> = Array<Int64>(4, item: 0)"
        },
        {
          "lineno": 58,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 4,
          "label": "public class EAN13Reader <: UPCEANReader {\n    static let FIRST_DIGIT_ENCODINGS = [0x00, 0x0B, 0x0D, 0xE, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1A]\n    let decodeMiddleCounters: Array<Int64> = Array<Int64>(4, item: 0)",
          "successors": [
            {
              "id": 2,
              "start_line": 58,
              "end_line": 58,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "EAN13Writer",
      "type": "class",
      "start_line": 59,
      "end_line": 110,
      "functions": [
        {
          "name": "getSupportedWriteFormats",
          "type": "function",
          "start_line": 65,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    protected override func getSupportedWriteFormats(): ?HashSet<BarcodeFormat> {"
            },
            {
              "lineno": 66,
              "line": "        HashSet<BarcodeFormat>([BarcodeFormat.EAN_13])"
            },
            {
              "lineno": 67,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 65,
              "end_line": 67,
              "label": "    protected override func getSupportedWriteFormats(): ?HashSet<BarcodeFormat> {\n        HashSet<BarcodeFormat>([BarcodeFormat.EAN_13])\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "encode",
          "type": "function",
          "start_line": 68,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 68,
              "line": "    public func encode(oContents: String): Array<Bool> {"
            },
            {
              "lineno": 69,
              "line": "        var contents = oContents"
            },
            {
              "lineno": 70,
              "line": "        let length = contents.size"
            },
            {
              "lineno": 71,
              "line": "        match (length) {"
            },
            {
              "lineno": 72,
              "line": "            case 12 =>"
            },
            {
              "lineno": 73,
              "line": "                let check = try {"
            },
            {
              "lineno": 74,
              "line": "                    UPCEANReader.getStandardUPCEANChecksum(contents)"
            },
            {
              "lineno": 75,
              "line": "                } catch (e: FormatException) {"
            },
            {
              "lineno": 76,
              "line": "                    throw IllegalArgumentException(e.toString())"
            },
            {
              "lineno": 77,
              "line": "                }"
            },
            {
              "lineno": 78,
              "line": "                contents = \"${contents}${check}\""
            },
            {
              "lineno": 79,
              "line": "            case 13 =>"
            },
            {
              "lineno": 80,
              "line": "                try {"
            },
            {
              "lineno": 81,
              "line": "                    if (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {"
            },
            {
              "lineno": 82,
              "line": "                        throw IllegalArgumentException(\"Contents do not pass checksum\")"
            },
            {
              "lineno": 83,
              "line": "                    }"
            },
            {
              "lineno": 84,
              "line": "                } catch (_: FormatException) {"
            },
            {
              "lineno": 85,
              "line": "                    throw IllegalArgumentException(\"Illegal contents\")"
            },
            {
              "lineno": 86,
              "line": "                }"
            },
            {
              "lineno": 87,
              "line": "            case _ =>"
            },
            {
              "lineno": 88,
              "line": "                throw IllegalArgumentException(\"Requested contents should be 12 or 13 digits long, but got ${length}\")"
            },
            {
              "lineno": 89,
              "line": "        }"
            },
            {
              "lineno": 90,
              "line": "        checkNumeric(contents)"
            },
            {
              "lineno": 91,
              "line": "        let firstDigit = charDigit(contents.charAt(0), 10)"
            },
            {
              "lineno": 92,
              "line": "        let parities = EAN13Reader.FIRST_DIGIT_ENCODINGS[firstDigit]"
            },
            {
              "lineno": 93,
              "line": "        let result = Array<Bool>(CODE_WIDTH, item: false)"
            },
            {
              "lineno": 94,
              "line": "        var pos = appendPattern(result, 0, UPCEANReader.START_END_PATTERN, true)"
            },
            {
              "lineno": 95,
              "line": "        for (i in 1..7) {"
            },
            {
              "lineno": 96,
              "line": "            var digit = charDigit(contents.charAt(i), 10)"
            },
            {
              "lineno": 97,
              "line": "            if ((parities >> (6 - i) & 1) == 1) {"
            },
            {
              "lineno": 98,
              "line": "                digit += 10"
            },
            {
              "lineno": 99,
              "line": "            }"
            },
            {
              "lineno": 100,
              "line": "            pos += appendPattern(result, pos, UPCEANReader.L_AND_G_PATTERNS[digit], false)"
            },
            {
              "lineno": 101,
              "line": "        }"
            },
            {
              "lineno": 102,
              "line": "        pos += appendPattern(result, pos, UPCEANReader.MIDDLE_PATTERN, false)"
            },
            {
              "lineno": 103,
              "line": "        for (i in 7..13) {"
            },
            {
              "lineno": 104,
              "line": "            let digit = charDigit(contents.charAt(i), 10)"
            },
            {
              "lineno": 105,
              "line": "            pos += appendPattern(result, pos, UPCEANReader.L_PATTERNS[digit], true)"
            },
            {
              "lineno": 106,
              "line": "        }"
            },
            {
              "lineno": 107,
              "line": "        appendPattern(result, pos, UPCEANReader.START_END_PATTERN, true)"
            },
            {
              "lineno": 108,
              "line": "        result"
            },
            {
              "lineno": 109,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 68,
              "end_line": 70,
              "label": "    public func encode(oContents: String): Array<Bool> {\n        var contents = oContents\n        let length = contents.size",
              "successors": [
                {
                  "id": 2,
                  "start_line": 71,
                  "end_line": 71,
                  "label": "        match (length) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 72,
                      "end_line": 78,
                      "label": "            case 12 =>\n                let check = try {\n                    UPCEANReader.getStandardUPCEANChecksum(contents)\n                } catch (e: FormatException) {\n                    throw IllegalArgumentException(e.toString())\n                }\n                contents = \"${contents}${check}\"",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 79,
                      "end_line": 86,
                      "label": "            case 13 =>\n                try {\n                    if (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\n                        throw IllegalArgumentException(\"Contents do not pass checksum\")\n                    }\n                } catch (_: FormatException) {\n                    throw IllegalArgumentException(\"Illegal contents\")\n                }",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 87,
                      "end_line": 88,
                      "label": "            case _ =>\n                throw IllegalArgumentException(\"Requested contents should be 12 or 13 digits long, but got ${length}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 89,
              "end_line": 108,
              "label": "        }\n        checkNumeric(contents)\n        let firstDigit = charDigit(contents.charAt(0), 10)\n        let parities = EAN13Reader.FIRST_DIGIT_ENCODINGS[firstDigit]\n        let result = Array<Bool>(CODE_WIDTH, item: false)\n        var pos = appendPattern(result, 0, UPCEANReader.START_END_PATTERN, true)\n        for (i in 1..7) {\n            var digit = charDigit(contents.charAt(i), 10)\n            if ((parities >> (6 - i) & 1) == 1) {\n                digit += 10\n            }\n            pos += appendPattern(result, pos, UPCEANReader.L_AND_G_PATTERNS[digit], false)\n        }\n        pos += appendPattern(result, pos, UPCEANReader.MIDDLE_PATTERN, false)\n        for (i in 7..13) {\n            let digit = charDigit(contents.charAt(i), 10)\n            pos += appendPattern(result, pos, UPCEANReader.L_PATTERNS[digit], true)\n        }\n        appendPattern(result, pos, UPCEANReader.START_END_PATTERN, true)\n        result\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 59,
          "line": "public class EAN13Writer <: UPCEANWriter {"
        },
        {
          "lineno": 60,
          "line": "    static let CODE_WIDTH = 3 + // start guard"
        },
        {
          "lineno": 61,
          "line": "    (7 * 6) + // left bars"
        },
        {
          "lineno": 62,
          "line": "    5 + // middle guard"
        },
        {
          "lineno": 63,
          "line": "    (7 * 6) + // right bars"
        },
        {
          "lineno": 64,
          "line": "    3"
        },
        {
          "lineno": 110,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 59,
          "end_line": 64,
          "label": "public class EAN13Writer <: UPCEANWriter {\n    static let CODE_WIDTH = 3 + // start guard\n    (7 * 6) + // left bars\n    5 + // middle guard\n    (7 * 6) + // right bars\n    3",
          "successors": [
            {
              "id": 2,
              "start_line": 110,
              "end_line": 110,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package barcode"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package barcode",
      "successors": []
    }
  ]
}