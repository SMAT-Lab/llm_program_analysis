{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 177,
  "functions": [],
  "classes": [
    {
      "name": "H2Config",
      "type": "class",
      "start_line": 9,
      "end_line": 150,
      "functions": [
        {
          "name": "HEADER_TABLE_SIZE",
          "type": "function",
          "start_line": 16,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    public mut prop HEADER_TABLE_SIZE: Int64 {"
            },
            {
              "lineno": 17,
              "line": "        get() {"
            },
            {
              "lineno": 18,
              "line": "            return headerTableSize"
            },
            {
              "lineno": 19,
              "line": "        }"
            },
            {
              "lineno": 20,
              "line": "        set(v) {"
            },
            {
              "lineno": 21,
              "line": "            if (v > 0) {"
            },
            {
              "lineno": 22,
              "line": "                headerTableSize = v"
            },
            {
              "lineno": 23,
              "line": "            } else {"
            },
            {
              "lineno": 24,
              "line": "                throw Exception()"
            },
            {
              "lineno": 25,
              "line": "            }"
            },
            {
              "lineno": 26,
              "line": "        }"
            },
            {
              "lineno": 27,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 16,
              "end_line": 16,
              "label": "    public mut prop HEADER_TABLE_SIZE: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 17,
                  "end_line": 18,
                  "label": "        get() {\n            return headerTableSize",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 20,
                  "end_line": 21,
                  "label": "        set(v) {\n            if (v > 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "                headerTableSize = v",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 26,
                          "end_line": 26,
                          "label": "        }",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 23,
                      "end_line": 24,
                      "label": "            } else {\n                throw Exception()",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 26,
                          "end_line": 26,
                          "label": "        }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "ENABLE_PUSH",
          "type": "function",
          "start_line": 28,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public mut prop ENABLE_PUSH: Int64 {"
            },
            {
              "lineno": 29,
              "line": "        get () {"
            },
            {
              "lineno": 30,
              "line": "            return enablePush"
            },
            {
              "lineno": 31,
              "line": "        }"
            },
            {
              "lineno": 32,
              "line": "        set (v) {"
            },
            {
              "lineno": 33,
              "line": "            if (v == 0 || v == 1) {"
            },
            {
              "lineno": 34,
              "line": "                enablePush = v"
            },
            {
              "lineno": 35,
              "line": "            } else {"
            },
            {
              "lineno": 36,
              "line": "                throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")  //"
            },
            {
              "lineno": 37,
              "line": "            }"
            },
            {
              "lineno": 38,
              "line": "        }"
            },
            {
              "lineno": 39,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 28,
              "end_line": 32,
              "label": "    public mut prop ENABLE_PUSH: Int64 {\n        get () {\n            return enablePush\n        }\n        set (v) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 33,
                  "end_line": 34,
                  "label": "            if (v == 0 || v == 1) {\n                enablePush = v",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 35,
                      "end_line": 37,
                      "label": "            } else {\n                throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")  //\n            }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "MAX_CONCURRENT_STREAMS",
          "type": "function",
          "start_line": 41,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    public mut prop MAX_CONCURRENT_STREAMS: Int64 {"
            },
            {
              "lineno": 42,
              "line": "        get () {"
            },
            {
              "lineno": 43,
              "line": "            return maxConcurrentStreams"
            },
            {
              "lineno": 44,
              "line": "        }"
            },
            {
              "lineno": 45,
              "line": "        set (v) {"
            },
            {
              "lineno": 46,
              "line": "            if (v >= 0) {"
            },
            {
              "lineno": 47,
              "line": "                maxConcurrentStreams = v"
            },
            {
              "lineno": 48,
              "line": "            } else {"
            },
            {
              "lineno": 49,
              "line": "                throw ProtocolErrorException()"
            },
            {
              "lineno": 50,
              "line": "            }"
            },
            {
              "lineno": 51,
              "line": "        }"
            },
            {
              "lineno": 52,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 41,
              "end_line": 46,
              "label": "    public mut prop MAX_CONCURRENT_STREAMS: Int64 {\n        get () {\n            return maxConcurrentStreams\n        }\n        set (v) {\n            if (v >= 0) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 47,
                  "end_line": 47,
                  "label": "                maxConcurrentStreams = v",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 50,
                      "end_line": 51,
                      "label": "            }\n        }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 48,
                  "end_line": 49,
                  "label": "            } else {\n                throw ProtocolErrorException()",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 50,
                      "end_line": 51,
                      "label": "            }\n        }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "INITIAL_WINDOW_SIZE",
          "type": "function",
          "start_line": 53,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 53,
              "line": "    public mut prop INITIAL_WINDOW_SIZE: Int64 {"
            },
            {
              "lineno": 54,
              "line": "        get () {"
            },
            {
              "lineno": 55,
              "line": "            return initialWindowSize"
            },
            {
              "lineno": 56,
              "line": "        }"
            },
            {
              "lineno": 57,
              "line": "        set (v) {"
            },
            {
              "lineno": 58,
              "line": "            if (v >= 0 && v <= Int64(Int32.Max)) {"
            },
            {
              "lineno": 59,
              "line": "                initialWindowSize = v"
            },
            {
              "lineno": 60,
              "line": "            } else {"
            },
            {
              "lineno": 61,
              "line": "                throw FlowControlErrorException()"
            },
            {
              "lineno": 62,
              "line": "            }"
            },
            {
              "lineno": 63,
              "line": "        }"
            },
            {
              "lineno": 64,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 53,
              "end_line": 54,
              "label": "    public mut prop INITIAL_WINDOW_SIZE: Int64 {\n        get () {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 55,
                  "end_line": 55,
                  "label": "            return initialWindowSize",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 56,
                  "end_line": 63,
                  "label": "        }\n        set (v) {\n            if (v >= 0 && v <= Int64(Int32.Max)) {\n                initialWindowSize = v\n            } else {\n                throw FlowControlErrorException()\n            }\n        }",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 58,
                      "end_line": 59,
                      "label": "            if (v >= 0 && v <= Int64(Int32.Max)) {\n                initialWindowSize = v",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 63,
                          "end_line": 63,
                          "label": "        }",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 60,
                      "end_line": 61,
                      "label": "            } else {\n                throw FlowControlErrorException()",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 63,
                          "end_line": 63,
                          "label": "        }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "MAX_FRAME_SIZE",
          "type": "function",
          "start_line": 65,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    public mut prop MAX_FRAME_SIZE: Int64 {"
            },
            {
              "lineno": 66,
              "line": "        get () {"
            },
            {
              "lineno": 67,
              "line": "            return maxFrameSize"
            },
            {
              "lineno": 68,
              "line": "        }"
            },
            {
              "lineno": 69,
              "line": "        set (v) {"
            },
            {
              "lineno": 70,
              "line": "            if (v > 16777215 || v < 16384) {"
            },
            {
              "lineno": 71,
              "line": "                throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")"
            },
            {
              "lineno": 72,
              "line": "            }"
            },
            {
              "lineno": 73,
              "line": "            maxFrameSize = v"
            },
            {
              "lineno": 74,
              "line": "        }"
            },
            {
              "lineno": 75,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 65,
              "end_line": 69,
              "label": "    public mut prop MAX_FRAME_SIZE: Int64 {\n        get () {\n            return maxFrameSize\n        }\n        set (v) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 70,
                  "end_line": 72,
                  "label": "            if (v > 16777215 || v < 16384) {\n                throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")\n            }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 73,
                      "end_line": 74,
                      "label": "            maxFrameSize = v\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 75,
                          "end_line": 75,
                          "label": "    }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "MAX_HEADER_LIST_SIZE",
          "type": "function",
          "start_line": 76,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 76,
              "line": "    public mut prop MAX_HEADER_LIST_SIZE: Int64 {"
            },
            {
              "lineno": 77,
              "line": "        get () {"
            },
            {
              "lineno": 78,
              "line": "            return maxHeaderListSize"
            },
            {
              "lineno": 79,
              "line": "        }"
            },
            {
              "lineno": 80,
              "line": "        set (v) {"
            },
            {
              "lineno": 81,
              "line": "            if (v > 0) {"
            },
            {
              "lineno": 82,
              "line": "                maxHeaderListSize = v"
            },
            {
              "lineno": 83,
              "line": "            } else {"
            },
            {
              "lineno": 84,
              "line": "                throw ProtocolErrorException()"
            },
            {
              "lineno": 85,
              "line": "            }"
            },
            {
              "lineno": 86,
              "line": "        }"
            },
            {
              "lineno": 87,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 76,
              "end_line": 76,
              "label": "    public mut prop MAX_HEADER_LIST_SIZE: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 77,
                  "end_line": 78,
                  "label": "        get () {\n            return maxHeaderListSize",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 80,
                  "end_line": 81,
                  "label": "        set (v) {\n            if (v > 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 82,
                      "end_line": 82,
                      "label": "                maxHeaderListSize = v",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 83,
                      "end_line": 84,
                      "label": "            } else {\n                throw ProtocolErrorException()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 88,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 88,
              "line": "    public init (){"
            },
            {
              "lineno": 89,
              "line": "        this.headerTableSize = initialHeaderTableSize"
            },
            {
              "lineno": 90,
              "line": "        this.enablePush = 1"
            },
            {
              "lineno": 91,
              "line": "        this.maxConcurrentStreams = defaultMaxConcurrentStreams"
            },
            {
              "lineno": 92,
              "line": "        this.initialWindowSize = globalinitialWindowSize"
            },
            {
              "lineno": 93,
              "line": "        this.maxFrameSize = initialMaxFrameSize"
            },
            {
              "lineno": 94,
              "line": "        this.maxHeaderListSize = initialMaxHeadListSize"
            },
            {
              "lineno": 95,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 88,
              "end_line": 95,
              "label": "public init (){\n        this.headerTableSize = initialHeaderTableSize\n        this.enablePush = 1\n        this.maxConcurrentStreams = defaultMaxConcurrentStreams\n        this.initialWindowSize = globalinitialWindowSize\n        this.maxFrameSize = initialMaxFrameSize\n        this.maxHeaderListSize = initialMaxHeadListSize\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 96,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 96,
              "line": "    public init(headerTableSize: Int64, enablePush: Int64, maxConcurrentStreams: Int64, initialWindowSize: Int64, maxFrameSize: Int64, maxHeaderListSize: Int64) {"
            },
            {
              "lineno": 97,
              "line": "        this.headerTableSize = if (headerTableSize > 0) {"
            },
            {
              "lineno": 98,
              "line": "            headerTableSize"
            },
            {
              "lineno": 99,
              "line": "        } else {"
            },
            {
              "lineno": 100,
              "line": "            throw Exception()"
            },
            {
              "lineno": 101,
              "line": "        }"
            },
            {
              "lineno": 102,
              "line": "        this.enablePush = if (enablePush == 0 || enablePush == 1) {"
            },
            {
              "lineno": 103,
              "line": "            enablePush"
            },
            {
              "lineno": 104,
              "line": "        } else {"
            },
            {
              "lineno": 105,
              "line": "            throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")  //"
            },
            {
              "lineno": 106,
              "line": "        }"
            },
            {
              "lineno": 107,
              "line": "        this.maxConcurrentStreams = if (maxConcurrentStreams >= 0) {"
            },
            {
              "lineno": 108,
              "line": "            maxConcurrentStreams"
            },
            {
              "lineno": 109,
              "line": "        } else {"
            },
            {
              "lineno": 110,
              "line": "            throw ProtocolErrorException()"
            },
            {
              "lineno": 111,
              "line": "        }"
            },
            {
              "lineno": 112,
              "line": "        this.initialWindowSize = if (initialWindowSize >= 0 && initialWindowSize <= Int64(Int32.Max)) {"
            },
            {
              "lineno": 113,
              "line": "            initialWindowSize"
            },
            {
              "lineno": 114,
              "line": "        } else {"
            },
            {
              "lineno": 115,
              "line": "            throw FlowControlErrorException()"
            },
            {
              "lineno": 116,
              "line": "        }"
            },
            {
              "lineno": 117,
              "line": "        this.maxFrameSize = if (maxFrameSize > 16777215 || maxFrameSize < 16384) {"
            },
            {
              "lineno": 118,
              "line": "            throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")"
            },
            {
              "lineno": 119,
              "line": "        }else {"
            },
            {
              "lineno": 120,
              "line": "            maxFrameSize"
            },
            {
              "lineno": 121,
              "line": "        }"
            },
            {
              "lineno": 122,
              "line": "        this.maxHeaderListSize = if (maxHeaderListSize > 0) {"
            },
            {
              "lineno": 123,
              "line": "            maxHeaderListSize"
            },
            {
              "lineno": 124,
              "line": "        } else {"
            },
            {
              "lineno": 125,
              "line": "            throw ProtocolErrorException()"
            },
            {
              "lineno": 126,
              "line": "        }"
            },
            {
              "lineno": 127,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 96,
              "end_line": 96,
              "label": "    public init(headerTableSize: Int64, enablePush: Int64, maxConcurrentStreams: Int64, initialWindowSize: Int64, maxFrameSize: Int64, maxHeaderListSize: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 97,
                  "end_line": 100,
                  "label": "        this.headerTableSize = if (headerTableSize > 0) {\n            headerTableSize\n        } else {\n            throw Exception()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 101,
                      "end_line": 101,
                      "label": "        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 102,
                          "end_line": 105,
                          "label": "        this.enablePush = if (enablePush == 0 || enablePush == 1) {\n            enablePush\n        } else {\n            throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")  //",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 106,
                              "end_line": 106,
                              "label": "        }",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 107,
                                  "end_line": 110,
                                  "label": "        this.maxConcurrentStreams = if (maxConcurrentStreams >= 0) {\n            maxConcurrentStreams\n        } else {\n            throw ProtocolErrorException()",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 111,
                                      "end_line": 111,
                                      "label": "        }",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 112,
                                          "end_line": 115,
                                          "label": "        this.initialWindowSize = if (initialWindowSize >= 0 && initialWindowSize <= Int64(Int32.Max)) {\n            initialWindowSize\n        } else {\n            throw FlowControlErrorException()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 116,
                                              "end_line": 116,
                                              "label": "        }",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "start_line": 117,
                                                  "end_line": 118,
                                                  "label": "        this.maxFrameSize = if (maxFrameSize > 16777215 || maxFrameSize < 16384) {\n            throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "start_line": 119,
                                                      "end_line": 121,
                                                      "label": "        }else {\n            maxFrameSize\n        }",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "start_line": 122,
                                                          "end_line": 125,
                                                          "label": "        this.maxHeaderListSize = if (maxHeaderListSize > 0) {\n            maxHeaderListSize\n        } else {\n            throw ProtocolErrorException()",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "start_line": 126,
                                                              "end_line": 127,
                                                              "label": "        }\n    }",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "[] operator",
          "type": "function",
          "start_line": 128,
          "end_line": 138,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 128,
              "line": "    public operator func [](key: Int64, value!: Int64): Unit{"
            },
            {
              "lineno": 129,
              "line": "        match (key) {"
            },
            {
              "lineno": 130,
              "line": "            case 0x01 => this.HEADER_TABLE_SIZE = value"
            },
            {
              "lineno": 131,
              "line": "            case 0x02 => this.ENABLE_PUSH = value"
            },
            {
              "lineno": 132,
              "line": "            case 0x03 => this.MAX_CONCURRENT_STREAMS = value"
            },
            {
              "lineno": 133,
              "line": "            case 0x04 => this.INITIAL_WINDOW_SIZE = value"
            },
            {
              "lineno": 134,
              "line": "            case 0x05 => this.MAX_FRAME_SIZE = value"
            },
            {
              "lineno": 135,
              "line": "            case 0x06 => this.MAX_HEADER_LIST_SIZE = value"
            },
            {
              "lineno": 136,
              "line": "            case _ => throw ProtocolErrorException()"
            },
            {
              "lineno": 137,
              "line": "        }"
            },
            {
              "lineno": 138,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 128,
              "end_line": 129,
              "label": "    public operator func [](key: Int64, value!: Int64): Unit{\n        match (key) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 130,
                  "end_line": 130,
                  "label": "            case 0x01 => this.HEADER_TABLE_SIZE = value",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 131,
                  "end_line": 131,
                  "label": "            case 0x02 => this.ENABLE_PUSH = value",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 132,
                  "end_line": 132,
                  "label": "            case 0x03 => this.MAX_CONCURRENT_STREAMS = value",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 133,
                  "end_line": 133,
                  "label": "            case 0x04 => this.INITIAL_WINDOW_SIZE = value",
                  "successors": []
                },
                {
                  "id": 6,
                  "start_line": 134,
                  "end_line": 134,
                  "label": "            case 0x05 => this.MAX_FRAME_SIZE = value",
                  "successors": []
                },
                {
                  "id": 7,
                  "start_line": 135,
                  "end_line": 135,
                  "label": "            case 0x06 => this.MAX_HEADER_LIST_SIZE = value",
                  "successors": []
                },
                {
                  "id": 8,
                  "start_line": 136,
                  "end_line": 136,
                  "label": "            case _ => throw ProtocolErrorException()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "[] operator",
          "type": "function",
          "start_line": 139,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 139,
              "line": "    public operator func [](key: Int64): Int64 {"
            },
            {
              "lineno": 140,
              "line": "        return match (key) {"
            },
            {
              "lineno": 141,
              "line": "            case 0x01 => this.HEADER_TABLE_SIZE"
            },
            {
              "lineno": 142,
              "line": "            case 0x02 => this.ENABLE_PUSH"
            },
            {
              "lineno": 143,
              "line": "            case 0x03 => this.MAX_CONCURRENT_STREAMS"
            },
            {
              "lineno": 144,
              "line": "            case 0x04 => this.INITIAL_WINDOW_SIZE"
            },
            {
              "lineno": 145,
              "line": "            case 0x05 => this.MAX_FRAME_SIZE"
            },
            {
              "lineno": 146,
              "line": "            case 0x06 => this.MAX_HEADER_LIST_SIZE"
            },
            {
              "lineno": 147,
              "line": "            case _ => throw ProtocolErrorException()"
            },
            {
              "lineno": 148,
              "line": "        }"
            },
            {
              "lineno": 149,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 139,
              "end_line": 139,
              "label": "    public operator func [](key: Int64): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 140,
                  "end_line": 141,
                  "label": "        return match (key) {\n            case 0x01 => this.HEADER_TABLE_SIZE",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 142,
                      "end_line": 142,
                      "label": "            case 0x02 => this.ENABLE_PUSH",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 143,
                      "end_line": 143,
                      "label": "            case 0x03 => this.MAX_CONCURRENT_STREAMS",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 144,
                      "end_line": 144,
                      "label": "            case 0x04 => this.INITIAL_WINDOW_SIZE",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 145,
                      "end_line": 145,
                      "label": "            case 0x05 => this.MAX_FRAME_SIZE",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "start_line": 146,
                      "end_line": 146,
                      "label": "            case 0x06 => this.MAX_HEADER_LIST_SIZE",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "start_line": 147,
                      "end_line": 147,
                      "label": "            case _ => throw ProtocolErrorException()",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 148,
              "end_line": 149,
              "label": "        }\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "public class H2Config {"
        },
        {
          "lineno": 10,
          "line": "    private var headerTableSize: Int64"
        },
        {
          "lineno": 11,
          "line": "    private var enablePush: Int64"
        },
        {
          "lineno": 12,
          "line": "    private var maxConcurrentStreams: Int64"
        },
        {
          "lineno": 13,
          "line": "    private var initialWindowSize: Int64"
        },
        {
          "lineno": 14,
          "line": "    private var maxFrameSize: Int64"
        },
        {
          "lineno": 15,
          "line": "    private var maxHeaderListSize: Int64"
        },
        {
          "lineno": 40,
          "line": "    // The value of 0 is prohibit the creation of new streams"
        },
        {
          "lineno": 150,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 9,
          "end_line": 150,
          "label": "public class H2Config {\n    private var headerTableSize: Int64\n    private var enablePush: Int64\n    private var maxConcurrentStreams: Int64\n    private var initialWindowSize: Int64\n    private var maxFrameSize: Int64\n    private var maxHeaderListSize: Int64\n    // The value of 0 is prohibit the creation of new streams\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ProtocolErrorException",
      "type": "class",
      "start_line": 152,
      "end_line": 159,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 153,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 153,
              "line": "    public init(){"
            },
            {
              "lineno": 154,
              "line": "        super()"
            },
            {
              "lineno": 155,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 153,
              "end_line": 155,
              "label": "    public init(){\n        super()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 156,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 156,
              "line": "    public init(string: String) {"
            },
            {
              "lineno": 157,
              "line": "        super(\"ProtocolErrorException: ${string}\")"
            },
            {
              "lineno": 158,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 156,
              "end_line": 158,
              "label": "    public init(string: String) {\n        super(\"ProtocolErrorException: ${string}\")\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 152,
          "line": "public class ProtocolErrorException <: Exception {"
        },
        {
          "lineno": 159,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 152,
          "end_line": 152,
          "label": "public class ProtocolErrorException <: Exception {",
          "successors": [
            {
              "id": 2,
              "start_line": 159,
              "end_line": 159,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "FlowControlErrorException",
      "type": "class",
      "start_line": 161,
      "end_line": 168,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 162,
          "end_line": 164,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 162,
              "line": "    public init(){"
            },
            {
              "lineno": 163,
              "line": "        super()"
            },
            {
              "lineno": 164,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 162,
              "end_line": 164,
              "label": "    public init(){\n        super()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 165,
          "end_line": 167,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 165,
              "line": "    public init(string: String) {"
            },
            {
              "lineno": 166,
              "line": "        super(\"FlowControlErrorException: ${string}\")"
            },
            {
              "lineno": 167,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 165,
              "end_line": 167,
              "label": "    public init(string: String) {\n        super(\"FlowControlErrorException: ${string}\")\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 161,
          "line": "public class FlowControlErrorException <: Exception {"
        },
        {
          "lineno": 168,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 161,
          "end_line": 161,
          "label": "public class FlowControlErrorException <: Exception {",
          "successors": [
            {
              "id": 2,
              "start_line": 168,
              "end_line": 168,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "FrameSizeErrorException",
      "type": "class",
      "start_line": 170,
      "end_line": 177,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 171,
          "end_line": 173,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 171,
              "line": "    public init(){"
            },
            {
              "lineno": 172,
              "line": "        super()"
            },
            {
              "lineno": 173,
              "line": "    }"
            }
          ],
          "blocks": []
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 174,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 174,
              "line": "    public init(string: String) {"
            },
            {
              "lineno": 175,
              "line": "        super(\"FrameSizeErrorException: ${string}\")"
            },
            {
              "lineno": 176,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 174,
              "end_line": 176,
              "label": "    public init(string: String) {\n        super(\"FrameSizeErrorException: ${string}\")\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 170,
          "line": "public class FrameSizeErrorException <: Exception {"
        },
        {
          "lineno": 177,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 170,
          "end_line": 177,
          "label": "public class FrameSizeErrorException <: Exception {\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package rpc4cj.http2.proto"
    },
    {
      "lineno": 2,
      "line": "internal import std.log.*"
    },
    {
      "lineno": 3,
      "line": "let initialHeaderTableSize: Int64 = 4096"
    },
    {
      "lineno": 4,
      "line": "let initEnablePush: Int64 = 0"
    },
    {
      "lineno": 5,
      "line": "let defaultMaxConcurrentStreams = 100"
    },
    {
      "lineno": 6,
      "line": "let globalinitialWindowSize: Int64 = 65535 // 6.9.2 Initial Flow Control Window Size"
    },
    {
      "lineno": 7,
      "line": "let initialMaxFrameSize: Int64 = 16384"
    },
    {
      "lineno": 8,
      "line": "let initialMaxHeadListSize = 1048896"
    },
    {
      "lineno": 151,
      "line": "// PROTOCOL_ERROR"
    },
    {
      "lineno": 160,
      "line": "// FLOW_CONTROL_ERROR"
    },
    {
      "lineno": 169,
      "line": "// FRAME_SIZE_ERROR"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "package rpc4cj.http2.proto\ninternal import std.log.*\nlet initialHeaderTableSize: Int64 = 4096\nlet initEnablePush: Int64 = 0\nlet defaultMaxConcurrentStreams = 100\nlet globalinitialWindowSize: Int64 = 65535 // 6.9.2 Initial Flow Control Window Size\nlet initialMaxFrameSize: Int64 = 16384\nlet initialMaxHeadListSize = 1048896",
      "successors": [
        {
          "id": 2,
          "start_line": 151,
          "end_line": 151,
          "label": "// PROTOCOL_ERROR",
          "successors": [
            {
              "id": 3,
              "start_line": 160,
              "end_line": 160,
              "label": "// FLOW_CONTROL_ERROR",
              "successors": [
                {
                  "id": 4,
                  "start_line": 169,
                  "end_line": 169,
                  "label": "// FRAME_SIZE_ERROR",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}