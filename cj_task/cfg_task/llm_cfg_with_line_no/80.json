{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 176,
  "functions": [
    {
      "name": "pathLoad",
      "type": "function",
      "start_line": 10,
      "end_line": 176,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "public func pathLoad(): PathMap {"
        },
        {
          "lineno": 11,
          "line": "    var pathMap = PathMap("
        },
        {
          "lineno": 12,
          "line": "        \"/opds/v2/libraries\","
        },
        {
          "lineno": 13,
          "line": "        {"
        },
        {
          "lineno": 14,
          "line": "            httpContext =>"
        },
        {
          "lineno": 15,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 16,
          "line": "            var cataLog = CataLog(host: host)"
        },
        {
          "lineno": 17,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 18,
          "line": "            httpContext.responseBuilder.body(cataLog.toJson())"
        },
        {
          "lineno": 19,
          "line": "        }"
        },
        {
          "lineno": 20,
          "line": "    )"
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 22,
          "line": "    pathMap.add("
        },
        {
          "lineno": 23,
          "line": "        \"/opds/v2/libraries/browse\","
        },
        {
          "lineno": 24,
          "line": "        {"
        },
        {
          "lineno": 25,
          "line": "            httpContext =>"
        },
        {
          "lineno": 26,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 27,
          "line": "            var publisher = \"\""
        },
        {
          "lineno": 28,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 29,
          "line": "                case Some(x) => publisher = x.trimStart(\"publisher=\")"
        },
        {
          "lineno": 30,
          "line": "                case None => ()"
        },
        {
          "lineno": 31,
          "line": "            }"
        },
        {
          "lineno": 32,
          "line": "            var brower = Brower(host: host, publisher: publisher)"
        },
        {
          "lineno": 33,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 34,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 35,
          "line": "        }"
        },
        {
          "lineno": 36,
          "line": "    )"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    pathMap.add("
        },
        {
          "lineno": 39,
          "line": "        \"/opds/v2/libraries/:id/browse\","
        },
        {
          "lineno": 40,
          "line": "        {"
        },
        {
          "lineno": 41,
          "line": "            httpContext =>"
        },
        {
          "lineno": 42,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 43,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 44,
          "line": "            var publisher = \"\""
        },
        {
          "lineno": 45,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 46,
          "line": "                case Some(x) => publisher = x.trimStart(\"publisher=\")"
        },
        {
          "lineno": 47,
          "line": "                case None => ()"
        },
        {
          "lineno": 48,
          "line": "            }"
        },
        {
          "lineno": 49,
          "line": "            var brower = Brower(id, host: host, publisher: publisher)"
        },
        {
          "lineno": 50,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 51,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 52,
          "line": "        }"
        },
        {
          "lineno": 53,
          "line": "    )"
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 55,
          "line": "    pathMap.add("
        },
        {
          "lineno": 56,
          "line": "        \"/opds/v2/libraries/:id\","
        },
        {
          "lineno": 57,
          "line": "        {"
        },
        {
          "lineno": 58,
          "line": "            httpContext =>"
        },
        {
          "lineno": 59,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 60,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 61,
          "line": "            var brower = LibrariesDetail(host: host, id: id)"
        },
        {
          "lineno": 62,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 63,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 64,
          "line": "        }"
        },
        {
          "lineno": 65,
          "line": "    )"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    pathMap.add("
        },
        {
          "lineno": 68,
          "line": "        \"/opds/v2/libraries/keep-reading\","
        },
        {
          "lineno": 69,
          "line": "        {"
        },
        {
          "lineno": 70,
          "line": "            httpContext =>"
        },
        {
          "lineno": 71,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 72,
          "line": "            var page = 0"
        },
        {
          "lineno": 73,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 74,
          "line": "                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))"
        },
        {
          "lineno": 75,
          "line": "                case None => ()"
        },
        {
          "lineno": 76,
          "line": "            }"
        },
        {
          "lineno": 77,
          "line": "            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))"
        },
        {
          "lineno": 78,
          "line": "            if (user.id == \"\") {"
        },
        {
          "lineno": 79,
          "line": "                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())"
        },
        {
          "lineno": 80,
          "line": "                return"
        },
        {
          "lineno": 81,
          "line": "            }"
        },
        {
          "lineno": 82,
          "line": "            var brower = Reading(host: host, userID: user.id, page: page)"
        },
        {
          "lineno": 83,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 84,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 85,
          "line": "        }"
        },
        {
          "lineno": 86,
          "line": "    )"
        },
        {
          "lineno": 87,
          "line": ""
        },
        {
          "lineno": 88,
          "line": "    pathMap.add("
        },
        {
          "lineno": 89,
          "line": "        \"/opds/v2/libraries/:id/keep-reading\","
        },
        {
          "lineno": 90,
          "line": "        {"
        },
        {
          "lineno": 91,
          "line": "            httpContext =>"
        },
        {
          "lineno": 92,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 93,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 94,
          "line": "            var page = 0"
        },
        {
          "lineno": 95,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 96,
          "line": "                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))"
        },
        {
          "lineno": 97,
          "line": "                case None => ()"
        },
        {
          "lineno": 98,
          "line": "            }"
        },
        {
          "lineno": 99,
          "line": "            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))"
        },
        {
          "lineno": 100,
          "line": "            if (user.id == \"\") {"
        },
        {
          "lineno": 101,
          "line": "                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())"
        },
        {
          "lineno": 102,
          "line": "                return"
        },
        {
          "lineno": 103,
          "line": "            }"
        },
        {
          "lineno": 104,
          "line": "            var brower = Reading(id, host: host, userID: user.id, page: page)"
        },
        {
          "lineno": 105,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 106,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 107,
          "line": "        }"
        },
        {
          "lineno": 108,
          "line": "    )"
        },
        {
          "lineno": 109,
          "line": ""
        },
        {
          "lineno": 110,
          "line": "    pathMap.add("
        },
        {
          "lineno": 111,
          "line": "        \"/opds/v2/libraries/:id/books/latest\","
        },
        {
          "lineno": 112,
          "line": "        {"
        },
        {
          "lineno": 113,
          "line": "            httpContext =>"
        },
        {
          "lineno": 114,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 115,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 116,
          "line": "            var page = 0"
        },
        {
          "lineno": 117,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 118,
          "line": "                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))"
        },
        {
          "lineno": 119,
          "line": "                case None => ()"
        },
        {
          "lineno": 120,
          "line": "            }"
        },
        {
          "lineno": 121,
          "line": "            var brower = Latest(id, host: host, page: page)"
        },
        {
          "lineno": 122,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 123,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 124,
          "line": "        }"
        },
        {
          "lineno": 125,
          "line": "    )"
        },
        {
          "lineno": 126,
          "line": ""
        },
        {
          "lineno": 127,
          "line": "    pathMap.add("
        },
        {
          "lineno": 128,
          "line": "        \"/opds/v2/libraries/books/latest\","
        },
        {
          "lineno": 129,
          "line": "        {"
        },
        {
          "lineno": 130,
          "line": "            httpContext =>"
        },
        {
          "lineno": 131,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 132,
          "line": "            var page = 0"
        },
        {
          "lineno": 133,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 134,
          "line": "                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))"
        },
        {
          "lineno": 135,
          "line": "                case None => ()"
        },
        {
          "lineno": 136,
          "line": "            }"
        },
        {
          "lineno": 137,
          "line": "            var brower = Latest(host: host, page: page)"
        },
        {
          "lineno": 138,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 139,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 140,
          "line": "        }"
        },
        {
          "lineno": 141,
          "line": "    )"
        },
        {
          "lineno": 142,
          "line": ""
        },
        {
          "lineno": 143,
          "line": "    pathMap.add("
        },
        {
          "lineno": 144,
          "line": "        \"/opds/v2/libraries/:id/series/latest\","
        },
        {
          "lineno": 145,
          "line": "        {"
        },
        {
          "lineno": 146,
          "line": "            httpContext =>"
        },
        {
          "lineno": 147,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 148,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 149,
          "line": "            var page = 0"
        },
        {
          "lineno": 150,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 151,
          "line": "                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))"
        },
        {
          "lineno": 152,
          "line": "                case None => ()"
        },
        {
          "lineno": 153,
          "line": "            }"
        },
        {
          "lineno": 154,
          "line": "            var brower = Series(id, host: host, page: page)"
        },
        {
          "lineno": 155,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 156,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 157,
          "line": "        }"
        },
        {
          "lineno": 158,
          "line": "    )"
        },
        {
          "lineno": 159,
          "line": ""
        },
        {
          "lineno": 160,
          "line": "    pathMap.add("
        },
        {
          "lineno": 161,
          "line": "        \"/opds/v2/libraries/series/latest\","
        },
        {
          "lineno": 162,
          "line": "        {"
        },
        {
          "lineno": 163,
          "line": "            httpContext =>"
        },
        {
          "lineno": 164,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 165,
          "line": "            var page = 0"
        },
        {
          "lineno": 166,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 167,
          "line": "                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))"
        },
        {
          "lineno": 168,
          "line": "                case None => ()"
        },
        {
          "lineno": 169,
          "line": "            }"
        },
        {
          "lineno": 170,
          "line": "            var brower = Series(host: host, page: page)"
        },
        {
          "lineno": 171,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 172,
          "line": "            httpContext.responseBuilder.body(brower.toJson())"
        },
        {
          "lineno": 173,
          "line": "        }"
        },
        {
          "lineno": 174,
          "line": "    )"
        },
        {
          "lineno": 175,
          "line": "    return pathMap"
        },
        {
          "lineno": 176,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 20,
          "label": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/opds/v2/libraries\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var cataLog = CataLog(host: host)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(cataLog.toJson())\n        }\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 22,
              "end_line": 36,
              "label": "pathMap.add(\n        \"/opds/v2/libraries/browse\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var publisher = \"\"\n            match (httpContext.request.url.query) {\n                case Some(x) => publisher = x.trimStart(\"publisher=\")\n                case None => ()\n            }\n            var brower = Brower(host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 38,
                  "end_line": 53,
                  "label": "pathMap.add(\n        \"/opds/v2/libraries/:id/browse\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var publisher = \"\"\n            match (httpContext.request.url.query) {\n                case Some(x) => publisher = x.trimStart(\"publisher=\")\n                case None => ()\n            }\n            var brower = Brower(id, host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 55,
                      "end_line": 65,
                      "label": "pathMap.add(\n        \"/opds/v2/libraries/:id\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var brower = LibrariesDetail(host: host, id: id)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 67,
                          "end_line": 87,
                          "label": "pathMap.add(\n        \"/opds/v2/libraries/keep-reading\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n            if (user.id == \"\") {\n                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())\n                return\n            }\n            var brower = Reading(host: host, userID: user.id, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 88,
                              "end_line": 109,
                              "label": "pathMap.add(\n        \"/opds/v2/libraries/:id/keep-reading\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n            if (user.id == \"\") {\n                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())\n                return\n            }\n            var brower = Reading(id, host: host, userID: user.id, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 110,
                                  "end_line": 125,
                                  "label": "pathMap.add(\n        \"/opds/v2/libraries/:id/books/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Latest(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 127,
                                      "end_line": 141,
                                      "label": "pathMap.add(\n        \"/opds/v2/libraries/books/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Latest(host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 143,
                                          "end_line": 158,
                                          "label": "pathMap.add(\n        \"/opds/v2/libraries/:id/series/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Series(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 160,
                                              "end_line": 174,
                                              "label": "pathMap.add(\n        \"/opds/v2/libraries/series/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Series(host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package opds_cj.path.opds.v2.libraries"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import net.http.*"
    },
    {
      "lineno": 4,
      "line": "import opds_cj.router.PathMap"
    },
    {
      "lineno": 5,
      "line": "internal import std.{collection.*, time.*, convert.*, io.ByteBuffer, io.readToEnd}"
    },
    {
      "lineno": 6,
      "line": "internal import opds_cj.config.baseConfig"
    },
    {
      "lineno": 7,
      "line": "internal import opds_cj.data_stru.*"
    },
    {
      "lineno": 8,
      "line": "internal import encoding.{url.*, json.stream.*}"
    },
    {
      "lineno": 9,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 9,
      "label": "package opds_cj.path.opds.v2.libraries\n\nimport net.http.*\nimport opds_cj.router.PathMap\ninternal import std.{collection.*, time.*, convert.*, io.ByteBuffer, io.readToEnd}\ninternal import opds_cj.config.baseConfig\ninternal import opds_cj.data_stru.*\ninternal import encoding.{url.*, json.stream.*}\n",
      "successors": []
    }
  ]
}