{
  "name": "HelperTests",
  "type": "CFG",
  "start_line": 11,
  "end_line": 116,
  "functions": [],
  "classes": [
    {
      "name": "HelperTests",
      "type": "class",
      "start_line": 11,
      "end_line": 116,
      "functions": [
        {
          "name": "basic",
          "type": "function",
          "start_line": 13,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    func basic() {"
            },
            {
              "lineno": 14,
              "line": "        let a: Bool = true"
            },
            {
              "lineno": 15,
              "line": "        let i8: Int8 = 1"
            },
            {
              "lineno": 16,
              "line": "        let i16: Int16 = 2"
            },
            {
              "lineno": 17,
              "line": "        let i32: Int32 = 3"
            },
            {
              "lineno": 18,
              "line": "        let i64: Int64 = 4"
            },
            {
              "lineno": 19,
              "line": "        let ina: IntNative = 5"
            },
            {
              "lineno": 20,
              "line": "        let u8: UInt8 = 6"
            },
            {
              "lineno": 21,
              "line": "        let u16: UInt16 = 7"
            },
            {
              "lineno": 22,
              "line": "        let u32: UInt32 = 8"
            },
            {
              "lineno": 23,
              "line": "        let u64: UInt64 = 9"
            },
            {
              "lineno": 24,
              "line": "        let una: UIntNative = 10 "
            },
            {
              "lineno": 25,
              "line": "        let f16: Float16 = 0.5"
            },
            {
              "lineno": 26,
              "line": "        let f32: Float32 = 0.25"
            },
            {
              "lineno": 27,
              "line": "        let f64: Float64 = 0.125"
            },
            {
              "lineno": 28,
              "line": "        let s: String = \"hello\""
            },
            {
              "lineno": 29,
              "line": ""
            },
            {
              "lineno": 30,
              "line": "        assertJson(castJsonValue(a), JsonBool(true))"
            },
            {
              "lineno": 31,
              "line": "        assertJson(castJsonValue(i8), JsonInt(1))"
            },
            {
              "lineno": 32,
              "line": "        assertJson(castJsonValue(i16), JsonInt(2))"
            },
            {
              "lineno": 33,
              "line": "        assertJson(castJsonValue(i32), JsonInt(3))"
            },
            {
              "lineno": 34,
              "line": "        assertJson(castJsonValue(i64), JsonInt(4))"
            },
            {
              "lineno": 35,
              "line": "        assertJson(castJsonValue(ina), JsonInt(5))"
            },
            {
              "lineno": 36,
              "line": "        assertJson(castJsonValue(u8), JsonInt(6))"
            },
            {
              "lineno": 37,
              "line": "        assertJson(castJsonValue(u16), JsonInt(7))"
            },
            {
              "lineno": 38,
              "line": "        assertJson(castJsonValue(u32), JsonInt(8))"
            },
            {
              "lineno": 39,
              "line": "        assertJson(castJsonValue(u64), JsonInt(9))"
            },
            {
              "lineno": 40,
              "line": "        assertJson(castJsonValue(una), JsonInt(10))"
            },
            {
              "lineno": 41,
              "line": "        assertJson(castJsonValue(f16), JsonFloat(0.5))"
            },
            {
              "lineno": 42,
              "line": "        assertJson(castJsonValue(f32), JsonFloat(0.25))"
            },
            {
              "lineno": 43,
              "line": "        assertJson(castJsonValue(f64), JsonFloat(0.125))"
            },
            {
              "lineno": 44,
              "line": "        assertJson(castJsonValue(s), JsonString(\"hello\"))"
            },
            {
              "lineno": 45,
              "line": ""
            },
            {
              "lineno": 46,
              "line": "        assertJson(a.toJsonValue(), JsonBool(true))"
            },
            {
              "lineno": 47,
              "line": "        assertJson(i8.toJsonValue(), JsonInt(1))"
            },
            {
              "lineno": 48,
              "line": "        assertJson(i16.toJsonValue(), JsonInt(2))"
            },
            {
              "lineno": 49,
              "line": "        assertJson(i32.toJsonValue(), JsonInt(3))"
            },
            {
              "lineno": 50,
              "line": "        assertJson(i64.toJsonValue(), JsonInt(4))"
            },
            {
              "lineno": 51,
              "line": "        assertJson(ina.toJsonValue(), JsonInt(5))"
            },
            {
              "lineno": 52,
              "line": "        assertJson(u8.toJsonValue(), JsonInt(6))"
            },
            {
              "lineno": 53,
              "line": "        assertJson(u16.toJsonValue(), JsonInt(7))"
            },
            {
              "lineno": 54,
              "line": "        assertJson(u32.toJsonValue(), JsonInt(8))"
            },
            {
              "lineno": 55,
              "line": "        assertJson(u64.toJsonValue(), JsonInt(9))"
            },
            {
              "lineno": 56,
              "line": "        assertJson(una.toJsonValue(), JsonInt(10))"
            },
            {
              "lineno": 57,
              "line": "        assertJson(f16.toJsonValue(), JsonFloat(0.5))"
            },
            {
              "lineno": 58,
              "line": "        assertJson(f32.toJsonValue(), JsonFloat(0.25))"
            },
            {
              "lineno": 59,
              "line": "        assertJson(f64.toJsonValue(), JsonFloat(0.125))"
            },
            {
              "lineno": 60,
              "line": "        assertJson(s.toJsonValue(), JsonString(\"hello\"))"
            },
            {
              "lineno": 61,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 60,
              "label": "    func basic() {\n        let a: Bool = true\n        let i8: Int8 = 1\n        let i16: Int16 = 2\n        let i32: Int32 = 3\n        let i64: Int64 = 4\n        let ina: IntNative = 5\n        let u8: UInt8 = 6\n        let u16: UInt16 = 7\n        let u32: UInt32 = 8\n        let u64: UInt64 = 9\n        let una: UIntNative = 10 \n        let f16: Float16 = 0.5\n        let f32: Float32 = 0.25\n        let f64: Float64 = 0.125\n        let s: String = \"hello\"\n        \n        assertJson(castJsonValue(a), JsonBool(true))\n        assertJson(castJsonValue(i8), JsonInt(1))\n        assertJson(castJsonValue(i16), JsonInt(2))\n        assertJson(castJsonValue(i32), JsonInt(3))\n        assertJson(castJsonValue(i64), JsonInt(4))\n        assertJson(castJsonValue(ina), JsonInt(5))\n        assertJson(castJsonValue(u8), JsonInt(6))\n        assertJson(castJsonValue(u16), JsonInt(7))\n        assertJson(castJsonValue(u32), JsonInt(8))\n        assertJson(castJsonValue(u64), JsonInt(9))\n        assertJson(castJsonValue(una), JsonInt(10))\n        assertJson(castJsonValue(f16), JsonFloat(0.5))\n        assertJson(castJsonValue(f32), JsonFloat(0.25))\n        assertJson(castJsonValue(f64), JsonFloat(0.125))\n        assertJson(castJsonValue(s), JsonString(\"hello\"))\n        \n        assertJson(a.toJsonValue(), JsonBool(true))\n        assertJson(i8.toJsonValue(), JsonInt(1))\n        assertJson(i16.toJsonValue(), JsonInt(2))\n        assertJson(i32.toJsonValue(), JsonInt(3))\n        assertJson(i64.toJsonValue(), JsonInt(4))\n        assertJson(ina.toJsonValue(), JsonInt(5))\n        assertJson(u8.toJsonValue(), JsonInt(6))\n        assertJson(u16.toJsonValue(), JsonInt(7))\n        assertJson(u32.toJsonValue(), JsonInt(8))\n        assertJson(u64.toJsonValue(), JsonInt(9))\n        assertJson(una.toJsonValue(), JsonInt(10))\n        assertJson(f16.toJsonValue(), JsonFloat(0.5))\n        assertJson(f32.toJsonValue(), JsonFloat(0.25))\n        assertJson(f64.toJsonValue(), JsonFloat(0.125))\n        assertJson(s.toJsonValue(), JsonString(\"hello\"))",
              "successors": []
            }
          ]
        },
        {
          "name": "tojson",
          "type": "function",
          "start_line": 64,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 64,
              "line": "    func tojson() {"
            },
            {
              "lineno": 65,
              "line": "        let t = DataModelInt(233)"
            },
            {
              "lineno": 66,
              "line": "        assertJson(castJsonValue(t), JsonInt(233))"
            },
            {
              "lineno": 67,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 64,
              "end_line": 67,
              "label": "    func tojson() {\n        let t = DataModelInt(233)\n        assertJson(castJsonValue(t), JsonInt(233))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "jsonValue",
          "type": "function",
          "start_line": 70,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 70,
              "line": "    func jsonValue() {"
            },
            {
              "lineno": 71,
              "line": "        let a = JsonInt(1)"
            },
            {
              "lineno": 72,
              "line": "        let b = JsonFloat(1.0)"
            },
            {
              "lineno": 73,
              "line": "        let c = JsonBool(true)"
            },
            {
              "lineno": 74,
              "line": "        let d = JsonString(\"hello\")"
            },
            {
              "lineno": 75,
              "line": "        let e = JsonNull()"
            },
            {
              "lineno": 76,
              "line": ""
            },
            {
              "lineno": 77,
              "line": "        assertJson(castJsonValue(a), a)"
            },
            {
              "lineno": 78,
              "line": "        assertJson(castJsonValue(b), b)"
            },
            {
              "lineno": 79,
              "line": "        assertJson(castJsonValue(c), c)"
            },
            {
              "lineno": 80,
              "line": "        assertJson(castJsonValue(d), d)"
            },
            {
              "lineno": 81,
              "line": "        assertJson(castJsonValue(e), e)"
            },
            {
              "lineno": 82,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 70,
              "end_line": 81,
              "label": "    func jsonValue() {\n        let a = JsonInt(1)\n        let b = JsonFloat(1.0)\n        let c = JsonBool(true)\n        let d = JsonString(\"hello\")\n        let e = JsonNull()\n\n        assertJson(castJsonValue(a), a)\n        assertJson(castJsonValue(b), b)\n        assertJson(castJsonValue(c), c)\n        assertJson(castJsonValue(d), d)\n        assertJson(castJsonValue(e), e)",
              "successors": []
            }
          ]
        },
        {
          "name": "list",
          "type": "function",
          "start_line": 85,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 85,
              "line": "    func list() {"
            },
            {
              "lineno": 86,
              "line": "        let a = [1, 2, 3]"
            },
            {
              "lineno": 87,
              "line": "        let b = ArrayList([1, 2, 3])"
            },
            {
              "lineno": 88,
              "line": "        let c = LinkedList([1, 2, 3])"
            },
            {
              "lineno": 89,
              "line": ""
            },
            {
              "lineno": 90,
              "line": "        let target = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])"
            },
            {
              "lineno": 91,
              "line": ""
            },
            {
              "lineno": 92,
              "line": "        assertJson(castJsonValue(a), target)"
            },
            {
              "lineno": 93,
              "line": "        assertJson(castJsonValue(b), target)"
            },
            {
              "lineno": 94,
              "line": "        assertJson(castJsonValue(c), target)"
            },
            {
              "lineno": 95,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 85,
              "end_line": 95,
              "label": "    func list() {\n        let a = [1, 2, 3]\n        let b = ArrayList([1, 2, 3])\n        let c = LinkedList([1, 2, 3])\n\n        let target = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])\n\n        assertJson(castJsonValue(a), target)\n        assertJson(castJsonValue(b), target)\n        assertJson(castJsonValue(c), target)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "map",
          "type": "function",
          "start_line": 98,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 98,
              "line": "    func map() {"
            },
            {
              "lineno": 99,
              "line": "        let a = TreeMap([(\"a\", 1), (\"b\", 2), (\"c\", 3)])"
            },
            {
              "lineno": 100,
              "line": "        let target = JsonObject()"
            },
            {
              "lineno": 101,
              "line": "        target.put(\"a\", JsonInt(1))"
            },
            {
              "lineno": 102,
              "line": "        target.put(\"b\", JsonInt(2))"
            },
            {
              "lineno": 103,
              "line": "        target.put(\"c\", JsonInt(3))"
            },
            {
              "lineno": 104,
              "line": ""
            },
            {
              "lineno": 105,
              "line": "        assertJson(castJsonValue(a), target)"
            },
            {
              "lineno": 106,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 98,
              "end_line": 103,
              "label": "    func map() {\n        let a = TreeMap([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n        let target = JsonObject()\n        target.put(\"a\", JsonInt(1))\n        target.put(\"b\", JsonInt(2))\n        target.put(\"c\", JsonInt(3))",
              "successors": [
                {
                  "id": 2,
                  "start_line": 105,
                  "end_line": 105,
                  "label": "        assertJson(castJsonValue(a), target)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "option",
          "type": "function",
          "start_line": 109,
          "end_line": 115,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 109,
              "line": "    func option() {"
            },
            {
              "lineno": 110,
              "line": "        let a: Option<Int> = Some(1)"
            },
            {
              "lineno": 111,
              "line": "        let b: Option<Int> = None"
            },
            {
              "lineno": 112,
              "line": ""
            },
            {
              "lineno": 113,
              "line": "        assertJson(castJsonValue(a), JsonInt(1))"
            },
            {
              "lineno": 114,
              "line": "        assertJson(castJsonValue(b), JsonNull())"
            },
            {
              "lineno": 115,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 109,
              "end_line": 115,
              "label": "    func option() {\n        let a: Option<Int> = Some(1)\n        let b: Option<Int> = None\n\n        assertJson(castJsonValue(a), JsonInt(1))\n        assertJson(castJsonValue(b), JsonNull())\n    }",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class HelperTests {"
        },
        {
          "lineno": 12,
          "line": "    @TestCase"
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    @TestCase"
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    @TestCase"
        },
        {
          "lineno": 83,
          "line": ""
        },
        {
          "lineno": 84,
          "line": "    @TestCase"
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 97,
          "line": "    @TestCase"
        },
        {
          "lineno": 107,
          "line": ""
        },
        {
          "lineno": 108,
          "line": "    @TestCase"
        },
        {
          "lineno": 116,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 116,
          "label": "class HelperTests {\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n\n    @TestCase\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [],
  "blocks": []
}