{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 26,
  "functions": [],
  "classes": [
    {
      "name": "StructValDeclTransfromGenerator",
      "type": "class",
      "start_line": 6,
      "end_line": 26,
      "functions": [
        {
          "name": "generate",
          "type": "function",
          "start_line": 8,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    public func generate(context: Context): Unit {"
            },
            {
              "lineno": 9,
              "line": "        for (decl in context.valDecls) {"
            },
            {
              "lineno": 10,
              "line": "            match (decl.declType) {"
            },
            {
              "lineno": 11,
              "line": "                case t: PrefixType =>"
            },
            {
              "lineno": 12,
              "line": "                    var reval = t.baseType.toTokens()"
            },
            {
              "lineno": 13,
              "line": "                    for (op in t.prefixOps) {"
            },
            {
              "lineno": 14,
              "line": "                        if (op.kind == TokenKind.QUEST) {"
            },
            {
              "lineno": 15,
              "line": "                            reval = quote(Option<$(reval)>)    "
            },
            {
              "lineno": 16,
              "line": "                        } else {"
            },
            {
              "lineno": 17,
              "line": "                            diagReport(DiagReportLevel.ERROR, op.toTokens(), \"不支持的标识\", \"仅支持问号\")"
            },
            {
              "lineno": 18,
              "line": "                            throw Exception(\"不支持的标识\")"
            },
            {
              "lineno": 19,
              "line": "                        }"
            },
            {
              "lineno": 20,
              "line": "                    }"
            },
            {
              "lineno": 21,
              "line": "                    decl.declType = RefType(reval.toTokens())"
            },
            {
              "lineno": 22,
              "line": "                case _ => continue"
            },
            {
              "lineno": 23,
              "line": "            }"
            },
            {
              "lineno": 24,
              "line": "        }"
            },
            {
              "lineno": 25,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 8,
              "end_line": 8,
              "label": "    public func generate(context: Context): Unit {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "        for (decl in context.valDecls) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "            match (decl.declType) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 11,
                          "end_line": 12,
                          "label": "                case t: PrefixType =>\n                    var reval = t.baseType.toTokens()",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 13,
                              "end_line": 13,
                              "label": "                    for (op in t.prefixOps) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 14,
                                  "end_line": 15,
                                  "label": "                        if (op.kind == TokenKind.QUEST) {\n                            reval = quote(Option<$(reval)>)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 16,
                                      "end_line": 20,
                                      "label": "                        } else {\n                            diagReport(DiagReportLevel.ERROR, op.toTokens(), \"不支持的标识\", \"仅支持问号\")\n                            throw Exception(\"不支持的标识\")\n                        }\n                    }",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 21,
                                          "end_line": 21,
                                          "label": "                    decl.declType = RefType(reval.toTokens())",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 22,
                                              "end_line": 22,
                                              "label": "                case _ => continue",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class StructValDeclTransfromGenerator <: Generator {"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 26,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 6,
          "label": "class StructValDeclTransfromGenerator <: Generator {",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 7,
              "label": "",
              "successors": [
                {
                  "id": 3,
                  "start_line": 26,
                  "end_line": 26,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package Macro_JsonSerializable.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "// 将属性中 ?T 转换为 Option<T>"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "macro package Macro_JsonSerializable.macros",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\nimport std.ast.*",
          "successors": [
            {
              "id": 3,
              "start_line": 4,
              "end_line": 5,
              "label": "\n// 将属性中 ?T 转换为 Option<T>",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}