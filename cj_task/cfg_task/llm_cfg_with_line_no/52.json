{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 306,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 270,
      "end_line": 306,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 270,
          "line": "main() {"
        },
        {
          "lineno": 271,
          "line": "    let cube = Cube()"
        },
        {
          "lineno": 272,
          "line": "    cube.print()"
        },
        {
          "lineno": 273,
          "line": "    // 1.基本操作"
        },
        {
          "lineno": 274,
          "line": "    for (r in [F, B, L, R, U, D]) {"
        },
        {
          "lineno": 275,
          "line": "        cube.transform(r) // 原子操作"
        },
        {
          "lineno": 276,
          "line": "    }"
        },
        {
          "lineno": 277,
          "line": "    Cube().transform(F * R * I(F * R)) // 复合操作"
        },
        {
          "lineno": 278,
          "line": ""
        },
        {
          "lineno": 279,
          "line": "    // 2.置换的阶数"
        },
        {
          "lineno": 280,
          "line": "    // FFRR 是 2,3 阶置换的组合，其最小公倍数是 6，重复 6 次两类置换都会还原"
        },
        {
          "lineno": 281,
          "line": "    Cube().transform((F * F * R * R) ** 6)"
        },
        {
          "lineno": 282,
          "line": "    // FULLR 是 3,4,6,9,18 阶置换的组合，同理可得其阶数为 36"
        },
        {
          "lineno": 283,
          "line": "    Cube().transform((F * U * L * L * R) ** 36)"
        },
        {
          "lineno": 284,
          "line": "    Cube().transform((F * F * L * L * B * R) ** 90)"
        },
        {
          "lineno": 285,
          "line": ""
        },
        {
          "lineno": 286,
          "line": "    // 3.相似变换 UGU⁻¹"
        },
        {
          "lineno": 287,
          "line": "    // 已知 R⁻¹DRFDF⁻¹ 可以翻转 FUR 角块"
        },
        {
          "lineno": 288,
          "line": "    let G = I(R) * D * R * F * D * I(F)"
        },
        {
          "lineno": 289,
          "line": "    Cube().transform(G)"
        },
        {
          "lineno": 290,
          "line": "    // 为了翻转 BUR 角块，可以先执行 U 把 BUR 换到 FUR 位置，然后执行 G 翻转 FUR，最后执行 U⁻¹ 恢复 BUR 位置"
        },
        {
          "lineno": 291,
          "line": "    let H = U * G * I(U)"
        },
        {
          "lineno": 292,
          "line": "    Cube().transform(H)"
        },
        {
          "lineno": 293,
          "line": ""
        },
        {
          "lineno": 294,
          "line": "    // 4.组合子变换 MU⁻¹M⁻¹U"
        },
        {
          "lineno": 295,
          "line": "    // 已知 RL⁻¹FFLR⁻¹D⁻¹RL⁻¹FLR⁻¹ 可以保持顶面其他方块不变、仅翻转 UF 棱块，但下面两层会被打乱"
        },
        {
          "lineno": 296,
          "line": "    let M = R * I(L) * F * F * L * I(R) * I(D) * R * I(L) * F * L * I(R)"
        },
        {
          "lineno": 297,
          "line": "    Cube().transform(M)"
        },
        {
          "lineno": 298,
          "line": "    // 为了同时翻转 UF 和 UL，可以先执行 M 翻转 UF，然后执行 U⁻¹ 把 UL 换到 UF 位置"
        },
        {
          "lineno": 299,
          "line": "    // 再执行 M⁻¹ 翻转 UL 并还原下面两层，最后执行 U 恢复 UF 和 UL 位置，这样整个魔方仅有 UF 和 UL 被翻转"
        },
        {
          "lineno": 300,
          "line": "    let N = M * I(U) * I(M) * U"
        },
        {
          "lineno": 301,
          "line": "    Cube().transform(N)"
        },
        {
          "lineno": 302,
          "line": "    // 在此基础上，如果我们想同时翻转 UL 和 UR，可以按组合子思想执行 NUN⁻¹U⁻¹"
        },
        {
          "lineno": 303,
          "line": "    let P = N * U * I(N) * I(U)"
        },
        {
          "lineno": 304,
          "line": "    Cube().transform(P)"
        },
        {
          "lineno": 305,
          "line": "    ()"
        },
        {
          "lineno": 306,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 270,
          "end_line": 275,
          "label": "main() {\n    let cube = Cube()\n    cube.print()\n    // 1.\n基本操作\n    for (r in [F, B, L, R, U, D]) {\n        cube.transform(r) // 原子操作\n    }",
          "successors": [
            {
              "id": 2,
              "start_line": 277,
              "end_line": 277,
              "label": "Cube().transform(F * R * I(F * R)) // 复合操作",
              "successors": [
                {
                  "id": 3,
                  "start_line": 279,
                  "end_line": 281,
                  "label": "// 2.\n置换的阶数\n// FFRR 是 2,3 阶置换的组合，其最小公倍数是 6，重复 6 次两类置换都会还原\nCube().transform((F * F * R * R) ** 6)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 283,
                      "end_line": 284,
                      "label": "Cube().transform((F * U * L * L * R) ** 36)\nCube().transform((F * F * L * L * B * R) ** 90)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 286,
                          "end_line": 289,
                          "label": "// 3.\n相似变换 UGU⁻¹\n// 已知 R⁻¹DRFDF⁻¹ 可以翻转 FUR 角块\nlet G = I(R) * D * R * F * D * I(F)\nCube().transform(G)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 291,
                              "end_line": 292,
                              "label": "// 为了翻转 BUR 角块，可以先执行 U 把 BUR 换到 FUR 位置，然后执行 G 翻转 FUR，最后执行 U⁻¹ 恢复 BUR 位置\nlet H = U * G * I(U)\nCube().transform(H)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 294,
                                  "end_line": 297,
                                  "label": "// 4.\n组合子变换 MU⁻¹M⁻¹U\n// 已知 RL⁻¹FFLR⁻¹D⁻¹RL⁻¹FLR⁻¹ 可以保持顶面其它方块不变、仅翻转 UF 棱块，但下面两层会被打乱\nlet M = R * I(L) * F * F * L * I(R) * I(D) * R * I(L) * F * L * I(R)\nCube().transform(M)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 300,
                                      "end_line": 301,
                                      "label": "// 为了同时翻转 UF 和 UL，可以先执行 M 翻转 UF，然后执行 U⁻¹ 把 UL 换到 UF 位置\n// 再执行 M⁻¹ 翻转 UL 并还原下面两层，最后执行 U 恢复 UF 和 UL 位置，这样整个魔方仅有 UF 和 UL 被翻转\nlet N = M * I(U) * I(M) * U\nCube().transform(N)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 303,
                                          "end_line": 304,
                                          "label": "// 在此基础上，如果我们想同时翻转 UL 和 UR，可以按组合子思想执行 NUN⁻¹U⁻¹\nlet P = N * U * I(N) * I(U)\nCube().transform(P)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 305,
                                              "end_line": 306,
                                              "label": "()\n}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Rotation",
      "type": "enum",
      "start_line": 10,
      "end_line": 65,
      "functions": [
        {
          "name": "*",
          "type": "function",
          "start_line": 17,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    public operator func *(that: Rotation): Rotation {"
            },
            {
              "lineno": 18,
              "line": "        match (this) {"
            },
            {
              "lineno": 19,
              "line": "            case X(x1, x2) => X(x1, X(x2, that)) // 按此顺序分解重组，使得递归时按从左到右的顺序执行变换"
            },
            {
              "lineno": 20,
              "line": "            case _ => X(this, that)"
            },
            {
              "lineno": 21,
              "line": "        }"
            },
            {
              "lineno": 22,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 17,
              "end_line": 17,
              "label": "    public operator func *(that: Rotation): Rotation {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 18,
                  "end_line": 21,
                  "label": "        match (this) {\n            case X(x1, x2) => X(x1, X(x2, that)) // 按此顺序分解重组，使得递归时按从左到右的顺序执行变换\n            case _ => X(this, that)\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "**",
          "type": "function",
          "start_line": 25,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    public operator func **(exp: UInt32): Rotation {"
            },
            {
              "lineno": 26,
              "line": "        var result = this"
            },
            {
              "lineno": 27,
              "line": "        for (_ in 0..(exp - 1)) {"
            },
            {
              "lineno": 28,
              "line": "            result = result * this"
            },
            {
              "lineno": 29,
              "line": "        }"
            },
            {
              "lineno": 30,
              "line": "        return result"
            },
            {
              "lineno": 31,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 25,
              "end_line": 26,
              "label": "    public operator func **(exp: UInt32): Rotation {\n        var result = this",
              "successors": [
                {
                  "id": 2,
                  "start_line": 27,
                  "end_line": 29,
                  "label": "        for (_ in 0..(exp - 1)) {\n            result = result * this\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 30,
                      "end_line": 30,
                      "label": "        return result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "text",
          "type": "function",
          "start_line": 34,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    private func text(inv: Bool): String {"
            },
            {
              "lineno": 35,
              "line": "        let exp = if (inv) { \"⁻¹\" } else { \"\" }"
            },
            {
              "lineno": 36,
              "line": "        match (this) {"
            },
            {
              "lineno": 37,
              "line": "            case F => \"F${exp}\" case B => \"B${exp}\" case L => \"L${exp}\""
            },
            {
              "lineno": 38,
              "line": "            case R => \"R${exp}\" case U => \"U${exp}\" case D => \"D${exp}\""
            },
            {
              "lineno": 39,
              "line": "            case I(r) => r.text(!inv)"
            },
            {
              "lineno": 40,
              "line": "            case X(x1, x2) =>"
            },
            {
              "lineno": 41,
              "line": "                if (inv) { // 逆变换需要反序"
            },
            {
              "lineno": 42,
              "line": "                    x2.text(inv) + x1.text(inv)"
            },
            {
              "lineno": 43,
              "line": "                } else {"
            },
            {
              "lineno": 44,
              "line": "                    x1.text(inv) + x2.text(inv)"
            },
            {
              "lineno": 45,
              "line": "                }"
            },
            {
              "lineno": 46,
              "line": "        }"
            },
            {
              "lineno": 47,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 34,
              "end_line": 34,
              "label": "    private func text(inv: Bool): String {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 35,
                  "end_line": 35,
                  "label": "        let exp = if (inv) { \"⁻¹\" } else { \"\" }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 36,
                      "end_line": 36,
                      "label": "        match (this) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 37,
                          "end_line": 38,
                          "label": "            case F => \"F${exp}\" case B => \"B${exp}\" case L => \"L${exp}\"\n            case R => \"R${exp}\" case U => \"U${exp}\" case D => \"D${exp}\"",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 39,
                          "end_line": 39,
                          "label": "            case I(r) => r.text(!inv)",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 40,
                          "end_line": 43,
                          "label": "            case X(x1, x2) =>\n                if (inv) { // 逆变换需要反序\n                    x2.text(inv) + x1.text(inv)",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 44,
                              "end_line": 44,
                              "label": "                    x1.text(inv) + x2.text(inv)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 45,
              "end_line": 47,
              "label": "                }\n        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 49,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    public func toString(): String {"
            },
            {
              "lineno": 50,
              "line": "        text(false)"
            },
            {
              "lineno": 51,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 50,
              "label": "    public func toString(): String {\n        text(false)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 51,
                  "end_line": 51,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "hashCode",
          "type": "function",
          "start_line": 54,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    public func hashCode(): Int64 {"
            },
            {
              "lineno": 55,
              "line": "        this.toString().hashCode()"
            },
            {
              "lineno": 56,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 54,
              "end_line": 56,
              "label": "    public func hashCode(): Int64 {\n        this.toString().hashCode()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 58,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    public operator func ==(that: Rotation): Bool {"
            },
            {
              "lineno": 59,
              "line": "        this.toString() == that.toString()"
            },
            {
              "lineno": 60,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 58,
              "end_line": 60,
              "label": "    public operator func ==(that: Rotation): Bool {\n        this.toString() == that.toString()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 62,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    public operator func !=(that: Rotation): Bool {"
            },
            {
              "lineno": 63,
              "line": "        this.toString() != that.toString()"
            },
            {
              "lineno": 64,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 62,
              "end_line": 64,
              "label": "    public operator func !=(that: Rotation): Bool {\n        this.toString() != that.toString()\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "enum Rotation <: ToString & Hashable & Equatable<Rotation> {"
        },
        {
          "lineno": 11,
          "line": "    // 在魔方研究中，通常用 Front/Back/Left/Right/Up/Down 表示六个面以及对应的原子操作，即正对此面顺时针旋转 90 度"
        },
        {
          "lineno": 12,
          "line": "    F | B | L | R | U | D"
        },
        {
          "lineno": 13,
          "line": "      | X(Rotation, Rotation) // 仓颉支持 enum 构造器和递归定义，此处 X 用于组织复合旋转操作"
        },
        {
          "lineno": 14,
          "line": "      | I(Rotation) // I(r) 用于表示 r 的逆变换，即正对 r 面逆时针旋转 90 度"
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 16,
          "line": "    // enum 中也可以定义成员函数，这里我们重载 * 运算符以实现旋转操作的组合，由此可生成一个置换群"
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    // 重载 ** 运算符实现幂运算，以便表示和验证高阶置换操作，如 (F*F*L*L*B*R)**90 会让魔方回归初态"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    // 实现 ToString 接口以便打印和调试此代数系统"
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 53,
          "line": "    // 下面实现 Hashable 和 Equatable 接口，以便 Rotation 作为 HashMap 的 Key"
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 65,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 65,
          "label": "enum Rotation <: ToString & Hashable & Equatable<Rotation> {\n    // \n5728\n2826}\n    F | B | L | R | U | D\n      | X(Rotation, Rotation) // \n3243\n    // \n4\n5\n    // \n5323\n    // \n3\n    // \n561\n    }\n 0",
          "successors": []
        }
      ]
    },
    {
      "name": "Index",
      "type": "enum",
      "start_line": 70,
      "end_line": 86,
      "functions": [
        {
          "name": "-",
          "type": "function",
          "start_line": 73,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 73,
              "line": "    public operator func -(): Index {"
            },
            {
              "lineno": 74,
              "line": "        match (this) {"
            },
            {
              "lineno": 75,
              "line": "            case Inv(v) => v"
            },
            {
              "lineno": 76,
              "line": "            case _ => Inv(this)"
            },
            {
              "lineno": 77,
              "line": "        }"
            },
            {
              "lineno": 78,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 73,
              "end_line": 74,
              "label": "    public operator func -(): Index {\n        match (this) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 75,
                  "end_line": 75,
                  "label": "            case Inv(v) => v",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 76,
                  "end_line": 76,
                  "label": "            case _ => Inv(this)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 80,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 80,
              "line": "    public func value(): Index {"
            },
            {
              "lineno": 81,
              "line": "        match (this) {"
            },
            {
              "lineno": 82,
              "line": "            case Inv(v) => v"
            },
            {
              "lineno": 83,
              "line": "            case _ => this"
            },
            {
              "lineno": 84,
              "line": "        }"
            },
            {
              "lineno": 85,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 80,
              "end_line": 81,
              "label": "public func value(): Index {\n    match (this) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 82,
                  "end_line": 82,
                  "label": "case Inv(v) => v",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 83,
                  "end_line": 83,
                  "label": "case _ => this",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 84,
              "end_line": 85,
              "label": "}\n}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 70,
          "line": "enum Index {"
        },
        {
          "lineno": 71,
          "line": "    Row(Int64) | Col(Int64) | Inv(Index)"
        },
        {
          "lineno": 72,
          "line": "    // 用于标记向量倒置"
        },
        {
          "lineno": 79,
          "line": "    // 去掉 Inv 符号"
        },
        {
          "lineno": 86,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 70,
          "end_line": 86,
          "label": "enum Index {\n    Row(Int64) | Col(Int64) | Inv(Index)\n    // 用于标记向量倒置\n    // 去掉 Inv 符号\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Matrix",
      "type": "extend",
      "start_line": 88,
      "end_line": 134,
      "functions": [
        {
          "name": "create",
          "type": "function",
          "start_line": 90,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 90,
              "line": "    public static func create(face: Face) {"
            },
            {
              "lineno": 91,
              "line": "        Matrix(3, { i =>"
            },
            {
              "lineno": 92,
              "line": "            Vector(3, { j => (face, 3 * i + j + 1)})"
            },
            {
              "lineno": 93,
              "line": "        })"
            },
            {
              "lineno": 94,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 90,
              "end_line": 94,
              "label": "    public static func create(face: Face) {\n        Matrix(3, { i =>\n            Vector(3, { j => (face, 3 * i + j + 1)})\n        })\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "[]",
          "type": "function",
          "start_line": 97,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "    public operator func [](index: Index): Vector {"
            },
            {
              "lineno": 98,
              "line": "        match (index) {"
            },
            {
              "lineno": 99,
              "line": "            case Row(r) => this[r].clone()"
            },
            {
              "lineno": 100,
              "line": "            case Col(c) => Vector(this.size, { i => this[i][c] })"
            },
            {
              "lineno": 101,
              "line": "            case Inv(i) => this[i] // 应用场景需要，取值时忽略符号、不做倒置"
            },
            {
              "lineno": 102,
              "line": "        }"
            },
            {
              "lineno": 103,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 97,
              "end_line": 97,
              "label": "    public operator func [](index: Index): Vector {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 98,
                  "end_line": 98,
                  "label": "        match (index) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 99,
                      "end_line": 99,
                      "label": "            case Row(r) => this[r].clone()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 100,
                      "end_line": 100,
                      "label": "            case Col(c) => Vector(this.size, { i => this[i][c] })",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 101,
                      "end_line": 101,
                      "label": "            case Inv(i) => this[i] // 应用场景需要，取值时忽略符号、不做倒置",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 106,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 106,
              "line": "    public func set(index: Index, value: Vector): Unit {"
            },
            {
              "lineno": 107,
              "line": "        match (index) {"
            },
            {
              "lineno": 108,
              "line": "            case Row(r) => this[r] = value"
            },
            {
              "lineno": 109,
              "line": "            case Col(c) =>"
            },
            {
              "lineno": 110,
              "line": "                for (i in 0..value.size) {"
            },
            {
              "lineno": 111,
              "line": "                    this[i][c] = value[i]"
            },
            {
              "lineno": 112,
              "line": "                }"
            },
            {
              "lineno": 113,
              "line": "            case Inv(i) => // 赋值时根据 index 符号做倒置"
            },
            {
              "lineno": 114,
              "line": "                value.reverse()"
            },
            {
              "lineno": 115,
              "line": "                this.set(i, value)"
            },
            {
              "lineno": 116,
              "line": "        }"
            },
            {
              "lineno": 117,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 106,
              "end_line": 107,
              "label": "    public func set(index: Index, value: Vector): Unit {\n        match (index) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 108,
                  "end_line": 108,
                  "label": "            case Row(r) => this[r] = value",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 109,
                  "end_line": 112,
                  "label": "            case Col(c) =>\n                for (i in 0..value.size) {\n                    this[i][c] = value[i]\n                }",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 113,
                  "end_line": 115,
                  "label": "            case Inv(i) => // 赋值时根据 index 符号做倒置\n                value.reverse()\n                this.set(i, value)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "print",
          "type": "function",
          "start_line": 120,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 120,
              "line": "    public func print(row: Int64) {"
            },
            {
              "lineno": 121,
              "line": "        for ((face, id) in this[row]) {"
            },
            {
              "lineno": 122,
              "line": "            print(\"${face}${id} \")"
            },
            {
              "lineno": 123,
              "line": "        }"
            },
            {
              "lineno": 124,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 120,
              "end_line": 120,
              "label": "    public func print(row: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 121,
                  "end_line": 123,
                  "label": "        for ((face, id) in this[row]) {\n            print(\"${face}${id} \")\n        }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "print",
          "type": "function",
          "start_line": 127,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 127,
              "line": "    public func print() {"
            },
            {
              "lineno": 128,
              "line": "        for (row in 0..this.size) {"
            },
            {
              "lineno": 129,
              "line": "            print(\"         \")"
            },
            {
              "lineno": 130,
              "line": "            print(row)"
            },
            {
              "lineno": 131,
              "line": "            println()"
            },
            {
              "lineno": 132,
              "line": "        }"
            },
            {
              "lineno": 133,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 127,
              "end_line": 127,
              "label": "    public func print() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 128,
                  "end_line": 132,
                  "label": "        for (row in 0..this.size) {\n            print(\"         \")\n            print(row)\n            println()\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 133,
                      "end_line": 133,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 88,
          "line": "extend Matrix {"
        },
        {
          "lineno": 89,
          "line": "    // 给指定的魔方面创建初始矩阵"
        },
        {
          "lineno": 95,
          "line": ""
        },
        {
          "lineno": 96,
          "line": "    // 获取矩阵的行或列"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 105,
          "line": "    // 给矩阵的行或列赋值"
        },
        {
          "lineno": 118,
          "line": ""
        },
        {
          "lineno": 119,
          "line": "    // 打印矩阵的一行"
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 126,
          "line": "    // 打印整个矩阵"
        },
        {
          "lineno": 134,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 88,
          "end_line": 134,
          "label": "extend Matrix {\n    // 给指定的魔方面创建初始矩阵\n    \n    // 获取矩阵的行或列\n    \n    // 给矩阵的行或列赋值\n    \n    // 打印矩阵的一行\n    \n    // 打印整个矩阵\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Int64",
      "type": "extend",
      "start_line": 137,
      "end_line": 144,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 137,
          "line": "extend Int64 {"
        },
        {
          "lineno": 138,
          "line": "    public prop r: Index {"
        },
        {
          "lineno": 139,
          "line": "        get() { Index.Row(this) }"
        },
        {
          "lineno": 140,
          "line": "    }"
        },
        {
          "lineno": 141,
          "line": "    public prop c: Index {"
        },
        {
          "lineno": 142,
          "line": "        get() { Index.Col(this) }"
        },
        {
          "lineno": 143,
          "line": "    }"
        },
        {
          "lineno": 144,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 137,
          "end_line": 144,
          "label": "extend Int64 {\n    public prop r: Index {\n        get() { Index.Row(this) }\n    }\n    public prop c: Index {\n        get() { Index.Col(this) }\n    }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Permutation",
      "type": "extend",
      "start_line": 149,
      "end_line": 165,
      "functions": [
        {
          "name": "inverse",
          "type": "function",
          "start_line": 151,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 151,
              "line": "    public func inverse() {"
            },
            {
              "lineno": 152,
              "line": "        let perm = this.clone()"
            },
            {
              "lineno": 153,
              "line": "        for (i in 0..perm.size) {"
            },
            {
              "lineno": 154,
              "line": "            let j = (i + 1) % perm.size"
            },
            {
              "lineno": 155,
              "line": "            let (face, index) = this[i] // 解构元组"
            },
            {
              "lineno": 156,
              "line": "            if (let Inv(_) <- this[j][1]) { // if-let 模式匹配"
            },
            {
              "lineno": 157,
              "line": "                perm[i] = (face, -(index.value()))"
            },
            {
              "lineno": 158,
              "line": "            } else {"
            },
            {
              "lineno": 159,
              "line": "                perm[i] = (face, index.value())"
            },
            {
              "lineno": 160,
              "line": "            }"
            },
            {
              "lineno": 161,
              "line": "        }"
            },
            {
              "lineno": 162,
              "line": "        perm.reverse()"
            },
            {
              "lineno": 163,
              "line": "        return perm"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 151,
              "end_line": 151,
              "label": "    public func inverse() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 152,
                  "end_line": 152,
                  "label": "        let perm = this.clone()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 153,
                      "end_line": 153,
                      "label": "        for (i in 0..perm.size) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 154,
                          "end_line": 155,
                          "label": "            let j = (i + 1) % perm.size\n            let (face, index) = this[i] // 解构元组",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 156,
                              "end_line": 156,
                              "label": "            if (let Inv(_) <- this[j][1]) { // if-let 模式匹配",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 157,
                                  "end_line": 157,
                                  "label": "                perm[i] = (face, -(index.value()))",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 160,
                                      "end_line": 160,
                                      "label": "            }",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 161,
                                          "end_line": 161,
                                          "label": "        }",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 162,
                                              "end_line": 163,
                                              "label": "        perm.reverse()\n        return perm",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "start_line": 158,
                              "end_line": 159,
                              "label": "            } else {\n                perm[i] = (face, index.value())",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 160,
                                  "end_line": 160,
                                  "label": "            }",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 161,
                                      "end_line": 161,
                                      "label": "        }",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 162,
                                          "end_line": 163,
                                          "label": "        perm.reverse()\n        return perm",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 149,
          "line": "extend Permutation {"
        },
        {
          "lineno": 150,
          "line": "    // 获取当前置换的逆变换"
        },
        {
          "lineno": 164,
          "line": "    }"
        },
        {
          "lineno": 165,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 149,
          "end_line": 149,
          "label": "extend Permutation {",
          "successors": [
            {
              "id": 2,
              "start_line": 150,
              "end_line": 164,
              "label": "    // \n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 165,
                  "end_line": 165,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Cube",
      "type": "class",
      "start_line": 167,
      "end_line": 268,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 172,
          "end_line": 174,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 172,
              "line": "    public init() {"
            },
            {
              "lineno": 173,
              "line": "        reset()"
            },
            {
              "lineno": 174,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 172,
              "end_line": 172,
              "label": "public init() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 173,
                  "end_line": 173,
                  "label": "reset()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 174,
                      "end_line": 174,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 176,
          "end_line": 184,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 176,
              "line": "    static init() {"
            },
            {
              "lineno": 177,
              "line": "        // 每个面顺时针转动 90 度时，相邻四面的置换关系"
            },
            {
              "lineno": 178,
              "line": "        permutation[F] = [(L, 2.c), (U, -2.r), (R, 0.c), (D, -0.r)]"
            },
            {
              "lineno": 179,
              "line": "        permutation[B] = [(L, -0.c), (D, 2.r), (R, -2.c), (U, 0.r)]"
            },
            {
              "lineno": 180,
              "line": "        permutation[L] = [(U, 0.c), (F, 0.c), (D, 0.c), (B, 0.c)]"
            },
            {
              "lineno": 181,
              "line": "        permutation[R] = [(B, 2.c), (D, 2.c), (F, 2.c), (U, 2.c)]"
            },
            {
              "lineno": 182,
              "line": "        permutation[U] = [(L, 0.r), (B, -2.r), (R, -0.r), (F, 0.r)]"
            },
            {
              "lineno": 183,
              "line": "        permutation[D] = [(R, 2.r), (B, -0.r), (L, -2.r), (F, 2.r)]"
            },
            {
              "lineno": 184,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 176,
              "end_line": 184,
              "label": "    static init() {\n        // \\\\u6bcf\\u4e2a\\u9762\\u987a\\u65f6\\u9488\\u8f6c\\u52a8 90 \\u5ea6\\u65f6\\uff0c\\u76f8\\u90bb\\u56db\\u9762\\u7684\\u7f6e\\u6362\\u5173\\u7cfb\n        permutation[F] = [(L, 2.c), (U, -2.r), (R, 0.c), (D, -0.r)]\n        permutation[B] = [(L, -0.c), (D, 2.r), (R, -2.c), (U, 0.r)]\n        permutation[L] = [(U, 0.c), (F, 0.c), (D, 0.c), (B, 0.c)]\n        permutation[R] = [(B, 2.c), (D, 2.c), (F, 2.c), (U, 2.c)]\n        permutation[U] = [(L, 0.r), (B, -2.r), (R, -0.r), (F, 0.r)]\n        permutation[D] = [(R, 2.r), (B, -0.r), (L, -2.r), (F, 2.r)]\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "start_line": 186,
          "end_line": 191,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 186,
              "line": "    public func reset() {"
            },
            {
              "lineno": 187,
              "line": "        history = ArrayList<Rotation>()"
            },
            {
              "lineno": 188,
              "line": "        for (face in [F, B, L, R, U, D]) {"
            },
            {
              "lineno": 189,
              "line": "            data[face] = Matrix.create(face)"
            },
            {
              "lineno": 190,
              "line": "        }"
            },
            {
              "lineno": 191,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 186,
              "end_line": 186,
              "label": "    public func reset() {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 187,
                  "end_line": 187,
                  "label": "        history = ArrayList<Rotation>()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 188,
                      "end_line": 190,
                      "label": "        for (face in [F, B, L, R, U, D]) {\n            data[face] = Matrix.create(face)\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 191,
                          "end_line": 191,
                          "label": "    }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "rotate",
          "type": "function",
          "start_line": 195,
          "end_line": 210,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 195,
              "line": "    private func rotate(face: Face, inverse: Bool) {"
            },
            {
              "lineno": 196,
              "line": "        const N = 3"
            },
            {
              "lineno": 197,
              "line": "        let matrix = Matrix.create(face)"
            },
            {
              "lineno": 198,
              "line": "        let map = if (inverse) {"
            },
            {
              "lineno": 199,
              "line": "            { i: Int64, j: Int64 => (N - 1 - j, i) }"
            },
            {
              "lineno": 200,
              "line": "        } else {"
            },
            {
              "lineno": 201,
              "line": "            { i: Int64, j: Int64 => (j, N - 1 - i) }"
            },
            {
              "lineno": 202,
              "line": "        }"
            },
            {
              "lineno": 203,
              "line": "        for (i in 0..N) {"
            },
            {
              "lineno": 204,
              "line": "            for (j in 0..N) {"
            },
            {
              "lineno": 205,
              "line": "                let (u, v) = map(i, j)"
            },
            {
              "lineno": 206,
              "line": "                matrix[u][v] = data[face][i][j]"
            },
            {
              "lineno": 207,
              "line": "            }"
            },
            {
              "lineno": 208,
              "line": "        }"
            },
            {
              "lineno": 209,
              "line": "        data[face] = matrix"
            },
            {
              "lineno": 210,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 195,
              "end_line": 197,
              "label": "    private func rotate(face: Face, inverse: Bool) {\n        const N = 3\n        let matrix = Matrix.create(face)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 198,
                  "end_line": 202,
                  "label": "        let map = if (inverse) {\n            { i: Int64, j: Int64 => (N - 1 - j, i) }\n        } else {\n            { i: Int64, j: Int64 => (j, N - 1 - i) }\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 203,
                      "end_line": 208,
                      "label": "        for (i in 0..N) {\n            for (j in 0..N) {\n                let (u, v) = map(i, j)\n                matrix[u][v] = data[face][i][j]\n            }\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 209,
                          "end_line": 209,
                          "label": "        data[face] = matrix",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 210,
                              "end_line": 210,
                              "label": "    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "permute",
          "type": "function",
          "start_line": 213,
          "end_line": 224,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 213,
              "line": "    private func permute(perm: Permutation, inverse: Bool) {"
            },
            {
              "lineno": 214,
              "line": "        let p = if (inverse) { perm.inverse() } else { perm.clone() }"
            },
            {
              "lineno": 215,
              "line": "        p.reverse()"
            },
            {
              "lineno": 216,
              "line": "        var (lastFace, lastIndex) = p[0]"
            },
            {
              "lineno": 217,
              "line": "        let vector = data[lastFace][lastIndex]"
            },
            {
              "lineno": 218,
              "line": "        for (i in 1..p.size) {"
            },
            {
              "lineno": 219,
              "line": "            let (face, index) = p[i]"
            },
            {
              "lineno": 220,
              "line": "            data[lastFace].set(lastIndex, data[face][index])"
            },
            {
              "lineno": 221,
              "line": "            (lastFace, lastIndex) = (face, index)"
            },
            {
              "lineno": 222,
              "line": "        }"
            },
            {
              "lineno": 223,
              "line": "        data[lastFace].set(lastIndex, vector)"
            },
            {
              "lineno": 224,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 213,
              "end_line": 213,
              "label": "    private func permute(perm: Permutation, inverse: Bool) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 214,
                  "end_line": 214,
                  "label": "        let p = if (inverse) { perm.inverse() } else { perm.clone() }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 215,
                      "end_line": 215,
                      "label": "        p.reverse()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 216,
                          "end_line": 217,
                          "label": "        var (lastFace, lastIndex) = p[0]\n        let vector = data[lastFace][lastIndex]",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 218,
                              "end_line": 222,
                              "label": "        for (i in 1..p.size) {\n            let (face, index) = p[i]\n            data[lastFace].set(lastIndex, data[face][index])\n            (lastFace, lastIndex) = (face, index)\n        }",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 223,
                                  "end_line": 223,
                                  "label": "        data[lastFace].set(lastIndex, vector)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 224,
                                      "end_line": 224,
                                      "label": "    }",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "transform",
          "type": "function",
          "start_line": 227,
          "end_line": 242,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 227,
              "line": "    private func transform(rotation: Rotation, inverse: Bool): Unit {"
            },
            {
              "lineno": 228,
              "line": "        match (rotation) {"
            },
            {
              "lineno": 229,
              "line": "            case I(r) => transform(r, !inverse)"
            },
            {
              "lineno": 230,
              "line": "            case X(r1, r2) => // 对复合操作进行递归分解"
            },
            {
              "lineno": 231,
              "line": "                if (inverse) { // 逆变换需要反序"
            },
            {
              "lineno": 232,
              "line": "                    transform(r2, inverse)"
            },
            {
              "lineno": 233,
              "line": "                    transform(r1, inverse)"
            },
            {
              "lineno": 234,
              "line": "                } else {"
            },
            {
              "lineno": 235,
              "line": "                    transform(r1, inverse)"
            },
            {
              "lineno": 236,
              "line": "                    transform(r2, inverse)"
            },
            {
              "lineno": 237,
              "line": "                }"
            },
            {
              "lineno": 238,
              "line": "            case _ => // 各原子操作对应面先旋转 90 度，然后对相邻四个面执行置换操作"
            },
            {
              "lineno": 239,
              "line": "                rotate(rotation, inverse)"
            },
            {
              "lineno": 240,
              "line": "                permute(permutation[rotation], inverse)"
            },
            {
              "lineno": 241,
              "line": "        }"
            },
            {
              "lineno": 242,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 227,
              "end_line": 228,
              "label": "    private func transform(rotation: Rotation, inverse: Bool): Unit {\n        match (rotation) {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 229,
                  "end_line": 229,
                  "label": "            case I(r) => transform(r, !inverse)",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 241,
                      "end_line": 242,
                      "label": "        }\n    }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "start_line": 230,
                  "end_line": 230,
                  "label": "            case X(r1, r2) => // 对复合操作进行递归分解",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 231,
                      "end_line": 234,
                      "label": "                if (inverse) { // 逆变换需要反序\n                    transform(r2, inverse)\n                    transform(r1, inverse)\n                } else {",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 235,
                          "end_line": 236,
                          "label": "                    transform(r1, inverse)\n                    transform(r2, inverse)",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 241,
                              "end_line": 242,
                              "label": "        }\n    }",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "start_line": 237,
                          "end_line": 237,
                          "label": "                }",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 241,
                              "end_line": 242,
                              "label": "        }\n    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 238,
                  "end_line": 240,
                  "label": "            case _ => // 各原子操作对应面先旋转 90 度，然后对相邻四个面执行置换操作\n                rotate(rotation, inverse)\n                permute(permutation[rotation], inverse)",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 241,
                      "end_line": 242,
                      "label": "        }\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "transform",
          "type": "function",
          "start_line": 244,
          "end_line": 249,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 244,
              "line": "    public func transform(rotation: Rotation) {"
            },
            {
              "lineno": 245,
              "line": "        transform(rotation, false)"
            },
            {
              "lineno": 246,
              "line": "        history.append(rotation)"
            },
            {
              "lineno": 247,
              "line": "        print()"
            },
            {
              "lineno": 248,
              "line": "        return this"
            },
            {
              "lineno": 249,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 244,
              "end_line": 248,
              "label": "    public func transform(rotation: Rotation) {\n        transform(rotation, false)\n        history.append(rotation)\n        print()\n        return this",
              "successors": []
            }
          ]
        },
        {
          "name": "print",
          "type": "function",
          "start_line": 251,
          "end_line": 267,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 251,
              "line": "    public func print() {"
            },
            {
              "lineno": 252,
              "line": "        var prompt = \">> \""
            },
            {
              "lineno": 253,
              "line": "        for (rotation in history) {"
            },
            {
              "lineno": 254,
              "line": "            prompt += rotation.toString()"
            },
            {
              "lineno": 255,
              "line": "        }"
            },
            {
              "lineno": 256,
              "line": "        println(prompt)"
            },
            {
              "lineno": 257,
              "line": "        data[U].print()"
            },
            {
              "lineno": 258,
              "line": "        for (i in 0..3) {"
            },
            {
              "lineno": 259,
              "line": "            for (face in [L, F, R]) {"
            },
            {
              "lineno": 260,
              "line": "                data[face].print(i)"
            },
            {
              "lineno": 261,
              "line": "            }"
            },
            {
              "lineno": 262,
              "line": "            println()"
            },
            {
              "lineno": 263,
              "line": "        }"
            },
            {
              "lineno": 264,
              "line": "        data[D].print()"
            },
            {
              "lineno": 265,
              "line": "        data[B].print()"
            },
            {
              "lineno": 266,
              "line": "        println()"
            },
            {
              "lineno": 267,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 251,
              "end_line": 252,
              "label": "    public func print() {\n        var prompt = \">> \"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 253,
                  "end_line": 255,
                  "label": "        for (rotation in history) {\n            prompt += rotation.toString()\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 256,
                      "end_line": 266,
                      "label": "        println(prompt)\n        data[U].print()\n        for (i in 0..3) {\n            for (face in [L, F, R]) {\n                data[face].print(i)\n            }\n            println()\n        }\n        data[D].print()\n        data[B].print()\n        println()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 167,
          "line": "class Cube {"
        },
        {
          "lineno": 168,
          "line": "    public let data = HashMap<Face, Matrix>()"
        },
        {
          "lineno": 169,
          "line": "    private var history = ArrayList<Rotation>()"
        },
        {
          "lineno": 170,
          "line": "    private static let permutation = HashMap<Face, Permutation>()"
        },
        {
          "lineno": 171,
          "line": ""
        },
        {
          "lineno": 175,
          "line": ""
        },
        {
          "lineno": 185,
          "line": ""
        },
        {
          "lineno": 192,
          "line": ""
        },
        {
          "lineno": 193,
          "line": "    // 对指定面上的矩阵旋转 90 度，inverse = true 代表逆时针方向"
        },
        {
          "lineno": 194,
          "line": "    // 此操作不影响其他面，要配合邻边置换操作才能完成魔方的实际转动"
        },
        {
          "lineno": 211,
          "line": ""
        },
        {
          "lineno": 212,
          "line": "    // 实现各面行/列之间的置换操作，输入是一个置换序列"
        },
        {
          "lineno": 225,
          "line": ""
        },
        {
          "lineno": 226,
          "line": "    // 在魔方上按序执行 rotation 中定义的操作序列"
        },
        {
          "lineno": 243,
          "line": ""
        },
        {
          "lineno": 250,
          "line": ""
        },
        {
          "lineno": 268,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 167,
          "end_line": 268,
          "label": "class Cube {\n    public let data = HashMap<Face, Matrix>()\n    private var history = ArrayList<Rotation>()\n    private static let permutation = HashMap<Face, Permutation>()\n\n\n\n    // 对指定面上的矩阵旋转 90 度，inverse = true 代表逆时针方向\n    // 此操作不影响其他面，要配合邻边置换操作才完成魔方的实际转动\n\n    // 实现各面行/列之间的置换操作，输入是一个置换序列\n\n    // 在魔方上按序执行 rotation 中定义的操作序列\n\n\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "/**"
    },
    {
      "lineno": 2,
      "line": " * 示例场景：用仓颉语言表达魔方置换群，并进行模拟验证"
    },
    {
      "lineno": 3,
      "line": " *         本例体现了仓颉在代数/符号演算方面的定制能力，以及语言的易用性和灵活性等"
    },
    {
      "lineno": 4,
      "line": " * 涉及特性：enum/构造器/递归定义/模式匹配，操作符重载，接口，类型别名，递归调用，"
    },
    {
      "lineno": 5,
      "line": " *         class，tuple，Array，HashMap，for-in/Range，if-let，lambda"
    },
    {
      "lineno": 6,
      "line": " * 仓颉语言团队 刘俊杰 2024/7/25"
    },
    {
      "lineno": 7,
      "line": " */ "
    },
    {
      "lineno": 8,
      "line": "import std.collection.*"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 66,
      "line": ""
    },
    {
      "lineno": 67,
      "line": "type Face = Rotation"
    },
    {
      "lineno": 68,
      "line": "type Vector = Array<(Face, Int64)>"
    },
    {
      "lineno": 69,
      "line": "type Matrix = Array<Vector>"
    },
    {
      "lineno": 87,
      "line": ""
    },
    {
      "lineno": 135,
      "line": ""
    },
    {
      "lineno": 136,
      "line": "// 直接用以上 enum 表示行列索引还不够优雅，我们为整型扩展两个属性，让索引数值可以直接标记行列"
    },
    {
      "lineno": 145,
      "line": ""
    },
    {
      "lineno": 146,
      "line": "// Permutation 可以表示一个置换序列"
    },
    {
      "lineno": 147,
      "line": "// 如 [(L, 2.c), (U, -0.r)] 表示 L 面第三列和 U 面第一行之间的轮换，且前者在换到后者时需要倒置"
    },
    {
      "lineno": 148,
      "line": "type Permutation = Array<(Face, Index)>"
    },
    {
      "lineno": 166,
      "line": ""
    },
    {
      "lineno": 269,
      "line": ""
    }
  ],
  "blocks": []
}