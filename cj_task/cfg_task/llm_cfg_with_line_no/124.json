{
  "name": "enum_enhance_macro",
  "type": "CFG",
  "start_line": 1,
  "end_line": 104,
  "functions": [
    {
      "name": "EquatableEnum",
      "type": "function",
      "start_line": 6,
      "end_line": 104,
      "functions": [
        {
          "name": "hashCode",
          "type": "function",
          "start_line": 50,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    let hashCode = FuncDecl("
            },
            {
              "lineno": 51,
              "line": "        quote("
            },
            {
              "lineno": 52,
              "line": "            "
            },
            {
              "lineno": 53,
              "line": "        public func hashCode(): Int64 {"
            },
            {
              "lineno": 54,
              "line": "            $block"
            },
            {
              "lineno": 55,
              "line": "        }))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 50,
              "end_line": 55,
              "label": "    let hashCode = FuncDecl(\n        quote(\n            \n        public func hashCode(): Int64 {\n            $block\n        }))",
              "successors": []
            }
          ]
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 57,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "    let equal = FuncDecl("
            },
            {
              "lineno": 58,
              "line": "        quote("
            },
            {
              "lineno": 59,
              "line": "        public operator func ==(that: $(enumm.identifier)): Bool {"
            },
            {
              "lineno": 60,
              "line": "            this.hashCode() == that.hashCode()"
            },
            {
              "lineno": 61,
              "line": "        })"
            },
            {
              "lineno": 62,
              "line": "    )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 57,
              "end_line": 62,
              "label": "    let equal = FuncDecl(\n        quote(\n        public operator func ==(that: $(enumm.identifier)): Bool {\n            this.hashCode() == that.hashCode()\n        })\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 64,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 64,
              "line": "    let notEqual = FuncDecl("
            },
            {
              "lineno": 65,
              "line": "        quote("
            },
            {
              "lineno": 66,
              "line": "        public operator func !=(that: $(enumm.identifier)): Bool {"
            },
            {
              "lineno": 67,
              "line": "            this.hashCode() != that.hashCode()"
            },
            {
              "lineno": 68,
              "line": "        })"
            },
            {
              "lineno": 69,
              "line": "    )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 64,
              "end_line": 69,
              "label": "    let notEqual = FuncDecl(\n        quote(\n        public operator func !=(that: $(enumm.identifier)): Bool {\n            this.hashCode() != that.hashCode()\n        })\n    )",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public macro EquatableEnum(input: Tokens): Tokens {"
        },
        {
          "lineno": 7,
          "line": "    let enumm = EnumDecl(input)"
        },
        {
          "lineno": 8,
          "line": "    // match表达式"
        },
        {
          "lineno": 9,
          "line": "    let hashMatchExpr = MatchExpr()"
        },
        {
          "lineno": 10,
          "line": "    hashMatchExpr.selector = RefExpr(quote(this))"
        },
        {
          "lineno": 11,
          "line": "    hashMatchExpr.lParen = Token(TokenKind.LPAREN)"
        },
        {
          "lineno": 12,
          "line": "    hashMatchExpr.rParen = Token(TokenKind.RPAREN)"
        },
        {
          "lineno": 13,
          "line": "    // 基础类型无嵌套参数构造器"
        },
        {
          "lineno": 14,
          "line": "    let noNestedPrimConstr = enumm.constructors |>"
        },
        {
          "lineno": 15,
          "line": "        filter {"
        },
        {
          "lineno": 16,
          "line": "        i: Constructor => i.typeArguments |>"
        },
        {
          "lineno": 17,
          "line": "            all {"
        },
        {
          "lineno": 18,
          "line": "            i: TypeNode => match (i) {"
        },
        {
          "lineno": 19,
          "line": "                case a: PrimitiveType => true"
        },
        {
          "lineno": 20,
          "line": "                case _ => throw ASTException(\"All args of Constructor shall be primitive type\")"
        },
        {
          "lineno": 21,
          "line": "            }"
        },
        {
          "lineno": 22,
          "line": "        }"
        },
        {
          "lineno": 23,
          "line": "    }"
        },
        {
          "lineno": 24,
          "line": "    // 构造case"
        },
        {
          "lineno": 25,
          "line": "    let noNestedPrimCases = ArrayList<MatchCase>()"
        },
        {
          "lineno": 26,
          "line": "    var hashIndex = 0i64"
        },
        {
          "lineno": 27,
          "line": "    for (constr in noNestedPrimConstr) {"
        },
        {
          "lineno": 28,
          "line": "        let matchCase = MatchCase()"
        },
        {
          "lineno": 29,
          "line": "        let blockNodes = matchCase.block.nodes"
        },
        {
          "lineno": 30,
          "line": "        let enumPatt = EnumPattern()"
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "        blockNodes.append(VarDecl(quote(var hasher = DefaultHasher(res: $(hashIndex)))))"
        },
        {
          "lineno": 33,
          "line": "        enumPatt.constructor = parseExpr(constr.identifier.toTokens())"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 35,
          "line": "        for (item in constr.typeArguments |> enumerate) {"
        },
        {
          "lineno": 36,
          "line": "            let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())"
        },
        {
          "lineno": 37,
          "line": "            enumPatt.patterns.append(TypePattern(quote($(id): $(item[1]))))"
        },
        {
          "lineno": 38,
          "line": "            blockNodes.append(CallExpr(quote(hasher.write($(id)))))"
        },
        {
          "lineno": 39,
          "line": "        }"
        },
        {
          "lineno": 40,
          "line": "        blockNodes.append(CallExpr(quote(hasher.finish())))"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "        matchCase.patterns.append(enumPatt)"
        },
        {
          "lineno": 43,
          "line": "        noNestedPrimCases.append(matchCase)"
        },
        {
          "lineno": 44,
          "line": "        hashIndex++"
        },
        {
          "lineno": 45,
          "line": "    }"
        },
        {
          "lineno": 46,
          "line": "    noNestedPrimCases.iterator().forEach {i => hashMatchExpr.matchCases.append(i)}"
        },
        {
          "lineno": 47,
          "line": "    // hashCode函数"
        },
        {
          "lineno": 48,
          "line": "    let block = Block()"
        },
        {
          "lineno": 49,
          "line": "    block.nodes.append(hashMatchExpr)"
        },
        {
          "lineno": 56,
          "line": "    // == 函数"
        },
        {
          "lineno": 63,
          "line": "    // != 函数"
        },
        {
          "lineno": 70,
          "line": "    // 将函数加入枚举"
        },
        {
          "lineno": 71,
          "line": "    let funcs = ArrayList<String>()"
        },
        {
          "lineno": 72,
          "line": "    for (decl in enumm.decls) {"
        },
        {
          "lineno": 73,
          "line": "        match (decl) {"
        },
        {
          "lineno": 74,
          "line": "            // case d: FuncDecl => funcSet.put(d.identifier.toTokens().toString())"
        },
        {
          "lineno": 75,
          "line": "            case d: FuncDecl => funcs.append(d.identifier.value)"
        },
        {
          "lineno": 76,
          "line": "            case _ => ()"
        },
        {
          "lineno": 77,
          "line": "        }"
        },
        {
          "lineno": 78,
          "line": "    }"
        },
        {
          "lineno": 79,
          "line": "    if (!funcs.contains(\"hashCode\")) {"
        },
        {
          "lineno": 80,
          "line": "        enumm.decls.append(hashCode)"
        },
        {
          "lineno": 81,
          "line": "    }"
        },
        {
          "lineno": 82,
          "line": "    if (!funcs.contains(\"==\")) {"
        },
        {
          "lineno": 83,
          "line": "        enumm.decls.append(equal)"
        },
        {
          "lineno": 84,
          "line": "    }"
        },
        {
          "lineno": 85,
          "line": "    if (!funcs.contains(\"!=\")) {"
        },
        {
          "lineno": 86,
          "line": "        enumm.decls.append(notEqual)"
        },
        {
          "lineno": 87,
          "line": "    }"
        },
        {
          "lineno": 88,
          "line": "    // 继承接口"
        },
        {
          "lineno": 89,
          "line": "    let intfs = ArrayList<String>()"
        },
        {
          "lineno": 90,
          "line": "    for (i in enumm.superTypes) {"
        },
        {
          "lineno": 91,
          "line": "        match (i) {"
        },
        {
          "lineno": 92,
          "line": "            case r: RefType => intfs.append(r.toTokens().toString())"
        },
        {
          "lineno": 93,
          "line": "            case r: TypeNode => ()"
        },
        {
          "lineno": 94,
          "line": "        }"
        },
        {
          "lineno": 95,
          "line": "    }"
        },
        {
          "lineno": 96,
          "line": "    if (!intfs.contains(\"Hashable\")) {"
        },
        {
          "lineno": 97,
          "line": "        enumm.superTypes.append(RefType(quote(Hashable)))"
        },
        {
          "lineno": 98,
          "line": "    }"
        },
        {
          "lineno": 99,
          "line": "    if (!intfs.contains(\"Equatable\")) {"
        },
        {
          "lineno": 100,
          "line": "        enumm.superTypes.append(RefType(quote(Equatable<$(enumm.identifier)>)))"
        },
        {
          "lineno": 101,
          "line": "    }"
        },
        {
          "lineno": 102,
          "line": ""
        },
        {
          "lineno": 103,
          "line": "    enumm.toTokens()"
        },
        {
          "lineno": 104,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 10,
          "label": "public macro EquatableEnum(input: Tokens): Tokens {\n    let enumm = EnumDecl(input)\n    // match表达式\n    let hashMatchExpr = MatchExpr()\n    hashMatchExpr.selector = RefExpr(quote(this))",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 12,
              "label": "hashMatchExpr.lParen = Token(TokenKind.LPAREN)\n    hashMatchExpr.rParen = Token(TokenKind.RPAREN)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 14,
                  "end_line": 23,
                  "label": "let noNestedPrimConstr = enumm.constructors |>\n        filter {\n        i: Constructor => i.typeArguments |>\n            all {\n            i: TypeNode => match (i) {\n                case a: PrimitiveType => true\n                case _ => throw ASTException(\"All args of Constructor shall be primitive type\")\n            }\n        }\n    }",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 25,
                      "end_line": 26,
                      "label": "let noNestedPrimCases = ArrayList<MatchCase>()\n    var hashIndex = 0i64",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 27,
                          "end_line": 45,
                          "label": "for (constr in noNestedPrimConstr) {\n        let matchCase = MatchCase()\n        let blockNodes = matchCase.block.nodes\n        let enumPatt = EnumPattern()\n\n        blockNodes.append(VarDecl(quote(var hasher = DefaultHasher(res: $(hashIndex)))))\n        enumPatt.constructor = parseExpr(constr.identifier.toTokens())\n\n        for (item in constr.typeArguments |> enumerate) {\n            let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())\n            enumPatt.patterns.append(TypePattern(quote($(id): $(item[1]))))\n            blockNodes.append(CallExpr(quote(hasher.write($(id)))))\n        }\n        blockNodes.append(CallExpr(quote(hasher.finish())))\n\n        matchCase.patterns.append(enumPatt)\n        noNestedPrimCases.append(matchCase)\n        hashIndex++\n    }",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 46,
                              "end_line": 49,
                              "label": "noNestedPrimCases.iterator().forEach {i => hashMatchExpr.matchCases.append(i)}\n    // hashCode函数\n    let block = Block()\n    block.nodes.append(hashMatchExpr)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 71,
                                  "end_line": 88,
                                  "label": "let funcs = ArrayList<String>()\n    for (decl in enumm.decls) {\n        match (decl) {\n            // case d: FuncDecl => funcSet.put(d.identifier.toTokens().toString())\n            case d: FuncDecl => funcs.append(d.identifier.value)\n            case _ => ()\n        }\n    }\n    if (!funcs.contains(\"hashCode\")) {\n        enumm.decls.append(hashCode)\n    }\n    if (!funcs.contains(\"==\")) {\n        enumm.decls.append(equal)\n    }\n    if (!funcs.contains(\"!=\")) {\n        enumm.decls.append(notEqual)\n    }\n    // 继承接口",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 89,
                                      "end_line": 101,
                                      "label": "let intfs = ArrayList<String>()\n    for (i in enumm.superTypes) {\n        match (i) {\n            case r: RefType => intfs.append(r.toTokens().toString())\n            case r: TypeNode => ()\n        }\n    }\n    if (!intfs.contains(\"Hashable\")) {\n        enumm.superTypes.append(RefType(quote(Hashable)))\n    }\n    if (!intfs.contains(\"Equatable\")) {\n        enumm.superTypes.append(RefType(quote(Equatable<$(enumm.identifier)>)))\n    }",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 103,
                                          "end_line": 104,
                                          "label": "enumm.toTokens()\n}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package enum_enhance"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.{ArrayList, enumerate, filter, all}"
    },
    {
      "lineno": 5,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "macro package enum_enhance",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 4,
          "label": "\nimport std.ast.*\nimport std.collection.{ArrayList, enumerate, filter, all}",
          "successors": []
        }
      ]
    }
  ]
}