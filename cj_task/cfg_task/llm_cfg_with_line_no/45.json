{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 37,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 13,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "main() {"
        },
        {
          "lineno": 14,
          "line": "    let socket = TcpSocket(IP, PORT)"
        },
        {
          "lineno": 15,
          "line": "    socket.connect()"
        },
        {
          "lineno": 16,
          "line": "    // 读取服务器发来的消息"
        },
        {
          "lineno": 17,
          "line": "    spawn {"
        },
        {
          "lineno": 18,
          "line": "        while (!g_quit) {"
        },
        {
          "lineno": 19,
          "line": "            let data = Array<Byte>(BUFFER_SIZE, repeat: 0)"
        },
        {
          "lineno": 20,
          "line": "            var count = 0"
        },
        {
          "lineno": 21,
          "line": "            // 如果对端正常关闭连接，不会抛出异常，read 返回 0"
        },
        {
          "lineno": 22,
          "line": "            try { count = socket.read(data) } catch (e: SocketException) {"
        },
        {
          "lineno": 23,
          "line": "                g_quit = true"
        },
        {
          "lineno": 24,
          "line": "            }"
        },
        {
          "lineno": 25,
          "line": "            if (g_quit || count == 0) { break }"
        },
        {
          "lineno": 26,
          "line": "            println(String.fromUtf8(data))"
        },
        {
          "lineno": 27,
          "line": "        }"
        },
        {
          "lineno": 28,
          "line": "    }"
        },
        {
          "lineno": 29,
          "line": "    // 向服务器发送消息"
        },
        {
          "lineno": 30,
          "line": "    while (!g_quit) {"
        },
        {
          "lineno": 31,
          "line": "        let input = Console.stdIn.readln().getOrDefault {\"\\n\"}"
        },
        {
          "lineno": 32,
          "line": "        try { socket.write(input.toArray()) } catch (e: SocketException) {"
        },
        {
          "lineno": 33,
          "line": "            g_quit = true"
        },
        {
          "lineno": 34,
          "line": "        }"
        },
        {
          "lineno": 35,
          "line": "    }"
        },
        {
          "lineno": 36,
          "line": "    socket.close()"
        },
        {
          "lineno": 37,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 13,
          "end_line": 13,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "start_line": 14,
              "end_line": 15,
              "label": "    let socket = TcpSocket(IP, PORT)\n    socket.connect()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 17,
                  "end_line": 28,
                  "label": "    spawn {\n        while (!g_quit) {\n            let data = Array<Byte>(BUFFER_SIZE, repeat: 0)\n            var count = 0\n            try { count = socket.read(data) } catch (e: SocketException) {\n                g_quit = true\n            }\n            if (g_quit || count == 0) { break }\n            println(String.fromUtf8(data))\n        }\n    }",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 30,
                      "end_line": 35,
                      "label": "    while (!g_quit) {\n        let input = Console.stdIn.readln().getOrDefault {\"\\n\"}\n        try { socket.write(input.toArray()) } catch (e: SocketException) {\n            g_quit = true\n        }\n    }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 36,
                          "end_line": 36,
                          "label": "    socket.close()",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 37,
                              "end_line": 37,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 群聊程序-客户端"
    },
    {
      "lineno": 2,
      "line": "// 仓颉语言团队 刘俊杰 2024/10/21"
    },
    {
      "lineno": 3,
      "line": "import std.net.*"
    },
    {
      "lineno": 4,
      "line": "import std.time.*"
    },
    {
      "lineno": 5,
      "line": "import std.sync.*"
    },
    {
      "lineno": 6,
      "line": "import std.console.*"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "const IP = \"127.0.0.1\""
    },
    {
      "lineno": 9,
      "line": "const PORT: UInt16 = 24621"
    },
    {
      "lineno": 10,
      "line": "const BUFFER_SIZE = 1024"
    },
    {
      "lineno": 11,
      "line": "var g_quit = false"
    },
    {
      "lineno": 12,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "// 群聊程序-客户端\n// 仓颉语言团队 刘俊杰 2024/10/21\nimport std.net.*\nimport std.time.*\nimport std.sync.*\nimport std.console.*\n\nconst IP = \"127.0.0.1\"\nconst PORT: UInt16 = 24621\nconst BUFFER_SIZE = 1024\nvar g_quit = false\n",
      "successors": []
    }
  ]
}