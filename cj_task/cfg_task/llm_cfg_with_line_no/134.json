{
  "name": "silo_spirit_dao_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 129,
  "functions": [],
  "classes": [
    {
      "name": "SiloSpiritDao",
      "type": "class",
      "start_line": 10,
      "end_line": 129,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    public init(configuration: GlobalConfiguration, sqlRunner: SqlRunner, connection: Connection,"
            },
            {
              "lineno": 15,
              "line": "        closeFun!: () -> Unit = {=>}) {"
            },
            {
              "lineno": 16,
              "line": "        super(configuration)"
            },
            {
              "lineno": 17,
              "line": "        this.sqlRunner = sqlRunner"
            },
            {
              "lineno": 18,
              "line": "        this.connection = connection"
            },
            {
              "lineno": 19,
              "line": "        this.closeFun = closeFun"
            },
            {
              "lineno": 20,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 14,
              "end_line": 20,
              "label": "    public init(configuration: GlobalConfiguration, sqlRunner: SqlRunner, connection: Connection,\n        closeFun!: () -> Unit = {=>}) {\n        super(configuration)\n        this.sqlRunner = sqlRunner\n        this.connection = connection\n        this.closeFun = closeFun\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "select",
          "type": "function",
          "start_line": 21,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 21,
              "line": "    public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): ArrayList<Reflectable> {"
            },
            {
              "lineno": 22,
              "line": "        try {"
            },
            {
              "lineno": 23,
              "line": "            let sqlStatement = getSqlStatement(sqlID)"
            },
            {
              "lineno": 24,
              "line": "            sqlRunner.query(sqlStatement, inputParam, clazz)"
            },
            {
              "lineno": 25,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 26,
              "line": "            throw wrapException(e)"
            },
            {
              "lineno": 27,
              "line": "        } finally {"
            },
            {
              "lineno": 28,
              "line": "            ExceptionContext.close()"
            },
            {
              "lineno": 29,
              "line": "            closeFun()"
            },
            {
              "lineno": 30,
              "line": "        }"
            },
            {
              "lineno": 31,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 21,
              "end_line": 21,
              "label": "    public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): ArrayList<Reflectable> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 22,
                  "end_line": 25,
                  "label": "        try {\n            let sqlStatement = getSqlStatement(sqlID)\n            sqlRunner.query(sqlStatement, inputParam, clazz)\n        } catch (e: Exception) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 26,
                      "end_line": 26,
                      "label": "            throw wrapException(e)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 27,
                  "end_line": 30,
                  "label": "        } finally {\n            ExceptionContext.close()\n            closeFun()\n        }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "selectCursor",
          "type": "function",
          "start_line": 32,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    public func selectCursor(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): Cursor<Reflectable> {"
            },
            {
              "lineno": 33,
              "line": "        try {"
            },
            {
              "lineno": 34,
              "line": "            let sqlStatement = getSqlStatement(sqlID)"
            },
            {
              "lineno": 35,
              "line": "            sqlRunner.queryCursor(sqlStatement, inputParam, clazz)"
            },
            {
              "lineno": 36,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 37,
              "line": "            throw wrapException(e)"
            },
            {
              "lineno": 38,
              "line": "        } finally {"
            },
            {
              "lineno": 39,
              "line": "            ExceptionContext.close()"
            },
            {
              "lineno": 40,
              "line": "            closeFun()"
            },
            {
              "lineno": 41,
              "line": "        }"
            },
            {
              "lineno": 42,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 32,
              "end_line": 34,
              "label": "public func selectCursor(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): Cursor<Reflectable> {\n    try {\n        let sqlStatement = getSqlStatement(sqlID)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 35,
                  "end_line": 35,
                  "label": "sqlRunner.queryCursor(sqlStatement, inputParam, clazz)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 36,
                      "end_line": 37,
                      "label": "catch (e: Exception) {\n    throw wrapException(e)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 38,
                          "end_line": 40,
                          "label": "finally {\n    ExceptionContext.close()\n    closeFun()",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 38,
                      "end_line": 40,
                      "label": "finally {\n    ExceptionContext.close()\n    closeFun()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "select",
          "type": "function",
          "start_line": 43,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 43,
              "line": "    public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class,"
            },
            {
              "lineno": 44,
              "line": "        resultItemCallback: (Reflectable) -> Bool): Unit {"
            },
            {
              "lineno": 45,
              "line": "        try {"
            },
            {
              "lineno": 46,
              "line": "            let sqlStatement = getSqlStatement(sqlID)"
            },
            {
              "lineno": 47,
              "line": "            sqlRunner.query(sqlStatement, inputParam, clazz, resultItemCallback)"
            },
            {
              "lineno": 48,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 49,
              "line": "            throw wrapException(e)"
            },
            {
              "lineno": 50,
              "line": "        } finally {"
            },
            {
              "lineno": 51,
              "line": "            ExceptionContext.close()"
            },
            {
              "lineno": 52,
              "line": "            closeFun()"
            },
            {
              "lineno": 53,
              "line": "        }"
            },
            {
              "lineno": 54,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 43,
              "end_line": 44,
              "label": "public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class,\n    resultItemCallback: (Reflectable) -> Bool): Unit {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 45,
                  "end_line": 47,
                  "label": "try {\n    let sqlStatement = getSqlStatement(sqlID)\n    sqlRunner.query(sqlStatement, inputParam, clazz, resultItemCallback)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 48,
                      "end_line": 49,
                      "label": "catch (e: Exception) {\n    throw wrapException(e)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 50,
                          "end_line": 52,
                          "label": "finally {\n    ExceptionContext.close()\n    closeFun()",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 53,
                              "end_line": 54,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 50,
                      "end_line": 52,
                      "label": "finally {\n    ExceptionContext.close()\n    closeFun()",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 53,
                          "end_line": 54,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "execute",
          "type": "function",
          "start_line": 55,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    public func execute(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): Any {"
            },
            {
              "lineno": 56,
              "line": "        try {"
            },
            {
              "lineno": 57,
              "line": "            let sqlStatement = getSqlStatement(sqlID)"
            },
            {
              "lineno": 58,
              "line": "            let updateResult = sqlRunner.update(sqlStatement, inputParam)"
            },
            {
              "lineno": 59,
              "line": "            return adaptUpdateResult(updateResult, clazz)"
            },
            {
              "lineno": 60,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 61,
              "line": "            throw wrapException(e)"
            },
            {
              "lineno": 62,
              "line": "        } finally {"
            },
            {
              "lineno": 63,
              "line": "            ExceptionContext.close()"
            },
            {
              "lineno": 64,
              "line": "            closeFun()"
            },
            {
              "lineno": 65,
              "line": "        }"
            },
            {
              "lineno": 66,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 55,
              "end_line": 55,
              "label": "    public func execute(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): Any {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 56,
                  "end_line": 56,
                  "label": "        try {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 57,
                      "end_line": 59,
                      "label": "            let sqlStatement = getSqlStatement(sqlID)\n            let updateResult = sqlRunner.update(sqlStatement, inputParam)\n            return adaptUpdateResult(updateResult, clazz)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 60,
                      "end_line": 61,
                      "label": "        } catch (e: Exception) {\n            throw wrapException(e)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 62,
                      "end_line": 65,
                      "label": "        } finally {\n            ExceptionContext.close()\n            closeFun()\n        }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "batchExecute",
          "type": "function",
          "start_line": 67,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    public func batchExecute(sqlID: String, inputParam: Option<Reflectable>, _: Class): Any {"
            },
            {
              "lineno": 68,
              "line": "        try {"
            },
            {
              "lineno": 69,
              "line": "            let sqlStatement = getSqlStatement(sqlID)"
            },
            {
              "lineno": 70,
              "line": "            sqlRunner.batchUpdate(sqlStatement, inputParam)"
            },
            {
              "lineno": 71,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 72,
              "line": "            throw wrapException(e)"
            },
            {
              "lineno": 73,
              "line": "        } finally {"
            },
            {
              "lineno": 74,
              "line": "            ExceptionContext.close()"
            },
            {
              "lineno": 75,
              "line": "            closeFun()"
            },
            {
              "lineno": 76,
              "line": "        }"
            },
            {
              "lineno": 77,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 67,
              "end_line": 67,
              "label": "    public func batchExecute(sqlID: String, inputParam: Option<Reflectable>, _: Class): Any {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 68,
                  "end_line": 70,
                  "label": "        try {\n            let sqlStatement = getSqlStatement(sqlID)\n            sqlRunner.batchUpdate(sqlStatement, inputParam)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 71,
                      "end_line": 72,
                      "label": "        } catch (e: Exception) {\n            throw wrapException(e)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 73,
                      "end_line": 75,
                      "label": "        } finally {\n            ExceptionContext.close()\n            closeFun()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "commit",
          "type": "function",
          "start_line": 78,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 78,
              "line": "    public func commit(): Unit {"
            },
            {
              "lineno": 79,
              "line": "        sqlRunner.commit()"
            },
            {
              "lineno": 80,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 78,
              "end_line": 78,
              "label": "    public func commit(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 79,
                  "end_line": 79,
                  "label": "        sqlRunner.commit()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 80,
                      "end_line": 80,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "rollback",
          "type": "function",
          "start_line": 81,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 81,
              "line": "    public func rollback(): Unit {"
            },
            {
              "lineno": 82,
              "line": "        sqlRunner.rollback()"
            },
            {
              "lineno": 83,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 81,
              "end_line": 82,
              "label": "    public func rollback(): Unit {\n        sqlRunner.rollback()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 83,
                  "end_line": 83,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "beginTransaction",
          "type": "function",
          "start_line": 84,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 84,
              "line": "    public func beginTransaction(): Unit {"
            },
            {
              "lineno": 85,
              "line": "        sqlRunner.beginTransaction()"
            },
            {
              "lineno": 86,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 84,
              "end_line": 86,
              "label": "    public func beginTransaction(): Unit {\n        sqlRunner.beginTransaction()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "close",
          "type": "function",
          "start_line": 87,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 87,
              "line": "    public func close(): Unit {"
            },
            {
              "lineno": 88,
              "line": "        sqlRunner.close()"
            },
            {
              "lineno": 89,
              "line": "        connection.close()"
            },
            {
              "lineno": 90,
              "line": "        closeFlag = true"
            },
            {
              "lineno": 91,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 87,
              "end_line": 91,
              "label": "    public func close(): Unit {\n        sqlRunner.close()\n        connection.close()\n        closeFlag = true\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "adaptUpdateResult",
          "type": "function",
          "start_line": 92,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 92,
              "line": "    private func adaptUpdateResult(updateResult: Int64, clazz: Class): Any {"
            },
            {
              "lineno": 93,
              "line": "        let instance = clazz.newInstance()"
            },
            {
              "lineno": 94,
              "line": "        if (instance is Bool) {"
            },
            {
              "lineno": 95,
              "line": "            if (updateResult > 0) {"
            },
            {
              "lineno": 96,
              "line": "                return true"
            },
            {
              "lineno": 97,
              "line": "            }"
            },
            {
              "lineno": 98,
              "line": "            return false"
            },
            {
              "lineno": 99,
              "line": "        }"
            },
            {
              "lineno": 100,
              "line": "        return convertNumberToType(updateResult, clazz)"
            },
            {
              "lineno": 101,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 92,
              "end_line": 92,
              "label": "private func adaptUpdateResult(updateResult: Int64, clazz: Class): Any {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 93,
                  "end_line": 93,
                  "label": "let instance = clazz.newInstance()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 94,
                      "end_line": 94,
                      "label": "if (instance is Bool) {",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 95,
                          "end_line": 95,
                          "label": "if (updateResult > 0) {",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 96,
                              "end_line": 96,
                              "label": "return true",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 98,
                              "end_line": 98,
                              "label": "return false",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "start_line": 100,
                          "end_line": 100,
                          "label": "return convertNumberToType(updateResult, clazz)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "convertNumberToType",
          "type": "function",
          "start_line": 102,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 102,
              "line": "    private func convertNumberToType(number: Int64, clazz: Class): Any {"
            },
            {
              "lineno": 103,
              "line": "        match (clazz.getName()) {"
            },
            {
              "lineno": 104,
              "line": "            case \"Int64\" => Int64(number)"
            },
            {
              "lineno": 105,
              "line": "            case \"Int32\" => Int32(number)"
            },
            {
              "lineno": 106,
              "line": "            case \"Int16\" => Int16(number)"
            },
            {
              "lineno": 107,
              "line": "            case \"Int8\" => Int8(number)"
            },
            {
              "lineno": 108,
              "line": "            case \"IntNative\" => IntNative(number)"
            },
            {
              "lineno": 109,
              "line": "            case \"UInt64\" => UInt64(number)"
            },
            {
              "lineno": 110,
              "line": "            case \"UInt32\" => UInt32(number)"
            },
            {
              "lineno": 111,
              "line": "            case \"UInt16\" => UInt16(number)"
            },
            {
              "lineno": 112,
              "line": "            case \"UInt8\" => UInt8(number)"
            },
            {
              "lineno": 113,
              "line": "            case \"UIntNative\" => UIntNative(number)"
            },
            {
              "lineno": 114,
              "line": "            case \"Float64\" => Float64(number)"
            },
            {
              "lineno": 115,
              "line": "            case \"Float32\" => Float32(number)"
            },
            {
              "lineno": 116,
              "line": "            case \"Float16\" => Float16(number)"
            },
            {
              "lineno": 117,
              "line": "            case \"Char\" => Char(number)"
            },
            {
              "lineno": 118,
              "line": "            case \"Bool\" => number != 0"
            },
            {
              "lineno": 119,
              "line": "            case \"String\" => \"${number}\""
            },
            {
              "lineno": 120,
              "line": "            case _ => throw ResultHandleException("
            },
            {
              "lineno": 121,
              "line": "                \"update sql result only support Bool and numberic type, not support ${clazz.getName()}, please change it\""
            },
            {
              "lineno": 122,
              "line": "            )"
            },
            {
              "lineno": 123,
              "line": "        }"
            },
            {
              "lineno": 124,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 102,
              "end_line": 102,
              "label": "    private func convertNumberToType(number: Int64, clazz: Class): Any {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 103,
                  "end_line": 103,
                  "label": "        match (clazz.getName()) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 104,
                      "end_line": 119,
                      "label": "            case \"Int64\" => Int64(number)\n            case \"Int32\" => Int32(number)\n            case \"Int16\" => Int16(number)\n            case \"Int8\" => Int8(number)\n            case \"IntNative\" => IntNative(number)\n            case \"UInt64\" => UInt64(number)\n            case \"UInt32\" => UInt32(number)\n            case \"UInt16\" => UInt16(number)\n            case \"UInt8\" => UInt8(number)\n            case \"UIntNative\" => UIntNative(number)\n            case \"Float64\" => Float64(number)\n            case \"Float32\" => Float32(number)\n            case \"Float16\" => Float16(number)\n            case \"Char\" => Char(number)\n            case \"Bool\" => number != 0\n            case \"String\" => \"${number}\"",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 120,
                          "end_line": 122,
                          "label": "            case _ => throw ResultHandleException(\n                \"update sql result only support Bool and numberic type, not support ${clazz.getName()}, please change it\"\n            )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 123,
                              "end_line": 123,
                              "label": "        }",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 124,
                                  "end_line": 124,
                                  "label": "    }",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "flushStatements",
          "type": "function",
          "start_line": 125,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 125,
              "line": "    public func flushStatements(): Int64 {"
            },
            {
              "lineno": 126,
              "line": "        var result = sqlRunner.flushStatements()"
            },
            {
              "lineno": 127,
              "line": "        return result"
            },
            {
              "lineno": 128,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 125,
              "end_line": 127,
              "label": "    public func flushStatements(): Int64 {\n        var result = sqlRunner.flushStatements()\n        return result",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "public class SiloSpiritDao <: Dao {"
        },
        {
          "lineno": 11,
          "line": "    let sqlRunner: SqlRunner"
        },
        {
          "lineno": 12,
          "line": "    let connection: Connection"
        },
        {
          "lineno": 13,
          "line": "    public var closeFun: () -> Unit = { => }"
        },
        {
          "lineno": 129,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 13,
          "label": "public class SiloSpiritDao <: Dao {\n    let sqlRunner: SqlRunner\n    let connection: Connection\n    public var closeFun: () -> Unit = { => }",
          "successors": [
            {
              "id": 2,
              "start_line": 129,
              "end_line": 129,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package silo.spirit.dao"
    },
    {
      "lineno": 2,
      "line": "from std import collection.*"
    },
    {
      "lineno": 3,
      "line": "from std import database.sql.Connection"
    },
    {
      "lineno": 4,
      "line": "from cangjie_spirit import spirit.session.Dao"
    },
    {
      "lineno": 5,
      "line": "from cangjie_spirit import spirit.runner.SqlRunner"
    },
    {
      "lineno": 6,
      "line": "from cangjie_spirit import spirit.exception.{ExceptionContext, wrapException, ResultHandleException}"
    },
    {
      "lineno": 7,
      "line": "from cangjie_spirit import spirit.cursor.{Cursor, ProxyCursor, DefaultCursor}"
    },
    {
      "lineno": 8,
      "line": "from cangjie_spirit import spirit.configuration.GlobalConfiguration"
    },
    {
      "lineno": 9,
      "line": "from crystal import reflection.{Reflectable, Class}"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 9,
      "label": "package silo.spirit.dao\nfrom std import collection.*\nfrom std import database.sql.Connection\nfrom cangjie_spirit import spirit.session.Dao\nfrom cangjie_spirit import spirit.runner.SqlRunner\nfrom cangjie_spirit import spirit.exception.{ExceptionContext, wrapException, ResultHandleException}\nfrom cangjie_spirit import spirit.cursor.{Cursor, ProxyCursor, DefaultCursor}\nfrom cangjie_spirit import spirit.configuration.GlobalConfiguration\nfrom crystal import reflection.{Reflectable, Class}",
      "successors": []
    }
  ]
}