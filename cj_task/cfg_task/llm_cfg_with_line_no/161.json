{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 238,
  "functions": [],
  "classes": [
    {
      "name": "Base64",
      "type": "class",
      "start_line": 8,
      "end_line": 238,
      "functions": [
        {
          "name": "convertCharToByte(c: Int64): Byte",
          "type": "function",
          "start_line": 87,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 87,
              "line": "    private static func convertCharToByte(c: Int64): Byte {"
            },
            {
              "lineno": 88,
              "line": "        convertCharToByte(toBase64[c])"
            },
            {
              "lineno": 89,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 87,
              "end_line": 89,
              "label": "    private static func convertCharToByte(c: Int64): Byte {\n        convertCharToByte(toBase64[c])\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "convertCharToByte(c: Char): Byte",
          "type": "function",
          "start_line": 90,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 90,
              "line": "    private static func convertCharToByte(c: Char): Byte {"
            },
            {
              "lineno": 91,
              "line": "        UInt8(UInt32(c))"
            },
            {
              "lineno": 92,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 90,
              "end_line": 92,
              "label": "    private static func convertCharToByte(c: Char): Byte {\n        UInt8(UInt32(c))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "encode(data: Array<Byte>): ByteArrayStream",
          "type": "function",
          "start_line": 93,
          "end_line": 98,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 93,
              "line": "    private static func encode(data: Array<Byte>): ByteArrayStream {"
            },
            {
              "lineno": 94,
              "line": "        let bytes = ByteArrayStream()"
            },
            {
              "lineno": 95,
              "line": "        let input: InputStream = ByteCollectionInputStream(data)"
            },
            {
              "lineno": 96,
              "line": "        encode(input, bytes)"
            },
            {
              "lineno": 97,
              "line": "        bytes"
            },
            {
              "lineno": 98,
              "line": "    }"
            }
          ],
          "blocks": []
        },
        {
          "name": "encode(input: InputStream, output: OutputStream): Unit",
          "type": "function",
          "start_line": 99,
          "end_line": 146,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 99,
              "line": "    public static func encode(input: InputStream, output: OutputStream): Unit {"
            },
            {
              "lineno": 100,
              "line": "        let bufout = BufferedOutputStream(output)"
            },
            {
              "lineno": 101,
              "line": "        let bufsize = 128"
            },
            {
              "lineno": 102,
              "line": "        var buf = Array<Byte>(bufsize, item: 0)"
            },
            {
              "lineno": 103,
              "line": "        var enc = Array<Byte>(4, item: 0)"
            },
            {
              "lineno": 104,
              "line": "        var resultLen = 0"
            },
            {
              "lineno": 105,
              "line": "        var tmp = 0"
            },
            {
              "lineno": 106,
              "line": "        var bufLen = input.read(buf)"
            },
            {
              "lineno": 107,
              "line": "        while (bufLen > 0) {"
            },
            {
              "lineno": 108,
              "line": "            var i = 0"
            },
            {
              "lineno": 109,
              "line": "            while (i < bufLen) {"
            },
            {
              "lineno": 110,
              "line": "                var b = buf[i]"
            },
            {
              "lineno": 111,
              "line": "                match (resultLen % 4) {"
            },
            {
              "lineno": 112,
              "line": "                    case 0 =>"
            },
            {
              "lineno": 113,
              "line": "                        enc[0] = convertCharToByte(Int64(b) >> 2)"
            },
            {
              "lineno": 114,
              "line": "                        tmp = Int64(b << 6) >> 2"
            },
            {
              "lineno": 115,
              "line": "                        resultLen++"
            },
            {
              "lineno": 116,
              "line": "                    case 1 =>"
            },
            {
              "lineno": 117,
              "line": "                        enc[1] = convertCharToByte(tmp | (Int64(b) >> 4))"
            },
            {
              "lineno": 118,
              "line": "                        tmp == Int64(b << 4) >> 2"
            },
            {
              "lineno": 119,
              "line": "                        resultLen++"
            },
            {
              "lineno": 120,
              "line": "                    case 2 =>"
            },
            {
              "lineno": 121,
              "line": "                        enc[2] = convertCharToByte(tmp | (Int64(b) >> 6))"
            },
            {
              "lineno": 122,
              "line": "                        tmp == Int64(b << 2) >> 2"
            },
            {
              "lineno": 123,
              "line": "                        enc[3] = convertCharToByte(tmp)"
            },
            {
              "lineno": 124,
              "line": "                        bufout.write(enc)"
            },
            {
              "lineno": 125,
              "line": "                        resultLen += 2"
            },
            {
              "lineno": 126,
              "line": "                    case _ => throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")"
            },
            {
              "lineno": 127,
              "line": "                }"
            },
            {
              "lineno": 128,
              "line": "                i++"
            },
            {
              "lineno": 129,
              "line": "            }"
            },
            {
              "lineno": 130,
              "line": "            bufLen = input.read(buf)"
            },
            {
              "lineno": 131,
              "line": "        }"
            },
            {
              "lineno": 132,
              "line": "        match (resultLen % 4) {"
            },
            {
              "lineno": 133,
              "line": "            case 0 => ()"
            },
            {
              "lineno": 134,
              "line": "            case 1 =>"
            },
            {
              "lineno": 135,
              "line": "                enc[1] = convertCharToByte(tmp)"
            },
            {
              "lineno": 136,
              "line": "                enc[2] = tailSymbol"
            },
            {
              "lineno": 137,
              "line": "                enc[3] = tailSymbol"
            },
            {
              "lineno": 138,
              "line": "                bufout.write(enc)"
            },
            {
              "lineno": 139,
              "line": "            case 2 =>"
            },
            {
              "lineno": 140,
              "line": "                enc[2] = convertCharToByte(tmp)"
            },
            {
              "lineno": 141,
              "line": "                enc[3] = tailSymbol"
            },
            {
              "lineno": 142,
              "line": "                bufout.write(enc)"
            },
            {
              "lineno": 143,
              "line": "            case _ => throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")"
            },
            {
              "lineno": 144,
              "line": "        }"
            },
            {
              "lineno": 145,
              "line": "        bufout.flush()"
            },
            {
              "lineno": 146,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 99,
              "end_line": 106,
              "label": "public static func encode(input: InputStream, output: OutputStream): Unit {\n    let bufout = BufferedOutputStream(output)\n    let bufsize = 128\n    var buf = Array<Byte>(bufsize, item: 0)\n    var enc = Array<Byte>(4, item: 0)\n    var resultLen = 0\n    var tmp = 0\n    var bufLen = input.read(buf)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 107,
                  "end_line": 129,
                  "label": "while (bufLen > 0) {\n    var i = 0\n    while (i < bufLen) {\n        var b = buf[i]\n        match (resultLen % 4) {\n            case 0 =>\n                enc[0] = convertCharToByte(Int64(b) >> 2)\n                tmp = Int64(b << 6) >> 2\n                resultLen++\n            case 1 =>\n                enc[1] = convertCharToByte(tmp | (Int64(b) >> 4))\n                tmp == Int64(b << 4) >> 2\n                resultLen++\n            case 2 =>\n                enc[2] = convertCharToByte(tmp | (Int64(b) >> 6))\n                tmp == Int64(b << 2) >> 2\n                enc[3] = convertCharToByte(tmp)\n                bufout.write(enc)\n                resultLen += 2\n            case _ =>\n                throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")\n        }\n        i++\n    }\n    bufLen = input.read(buf)\n}",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 130,
                      "end_line": 132,
                      "label": "bufLen = input.read(buf)\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 132,
                  "end_line": 144,
                  "label": "match (resultLen % 4) {\n    case 0 => ()\n    case 1 =>\n        enc[1] = convertCharToByte(tmp)\n        enc[2] = tailSymbol\n        enc[3] = tailSymbol\n        bufout.write(enc)\n    case 2 =>\n        enc[2] = convertCharToByte(tmp)\n        enc[3] = tailSymbol\n        bufout.write(enc)\n    case _ =>\n        throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")\n}",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 145,
                  "end_line": 146,
                  "label": "bufout.flush()\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "charsetEncode(data: String, charset: Charset): Array<Byte>",
          "type": "function",
          "start_line": 147,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 147,
              "line": "    private static func charsetEncode(data: String, charset: Charset): Array<Byte> {"
            },
            {
              "lineno": 148,
              "line": "        charset.newEncoder().encode(data)"
            },
            {
              "lineno": 149,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 147,
              "end_line": 149,
              "label": "    private static func charsetEncode(data: String, charset: Charset): Array<Byte> {\n        charset.newEncoder().encode(data)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "charsetDecode(data: Array<Byte>, charset: Charset): String",
          "type": "function",
          "start_line": 150,
          "end_line": 152,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 150,
              "line": "    private static func charsetDecode(data: Array<Byte>, charset: Charset): String {"
            },
            {
              "lineno": 151,
              "line": "        charset.newDecoder().decode(data)"
            },
            {
              "lineno": 152,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 150,
              "end_line": 150,
              "label": "    private static func charsetDecode(data: Array<Byte>, charset: Charset): String {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 151,
                  "end_line": 152,
                  "label": "        charset.newDecoder().decode(data)\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "encodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit",
          "type": "function",
          "start_line": 153,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 153,
              "line": "    public static func encodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {"
            },
            {
              "lineno": 154,
              "line": "        encode(ByteCollectionInputStream(data), output)"
            },
            {
              "lineno": 155,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 153,
              "end_line": 155,
              "label": "    public static func encodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {\n        encode(ByteCollectionInputStream(data), output)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToBytes(data: Array<Byte>): Array<Byte>",
          "type": "function",
          "start_line": 156,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 156,
              "line": "    public static func encodeToBytes(data: Array<Byte>): Array<Byte> {"
            },
            {
              "lineno": 157,
              "line": "        encode(data).readToEnd()"
            },
            {
              "lineno": 158,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 156,
              "end_line": 158,
              "label": "    public static func encodeToBytes(data: Array<Byte>): Array<Byte> {\n        encode(data).readToEnd()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToString(data: Array<Byte>): String",
          "type": "function",
          "start_line": 159,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 159,
              "line": "    public static func encodeToString(data: Array<Byte>): String {"
            },
            {
              "lineno": 160,
              "line": "        String.fromUtf8(encodeToBytes(data))"
            },
            {
              "lineno": 161,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 159,
              "end_line": 161,
              "label": "    public static func encodeToString(data: Array<Byte>): String {\n        String.fromUtf8(encodeToBytes(data))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToOutputStream(data: String, output: OutputStream, charset!: Charset = Charsets.UTF8): Unit",
          "type": "function",
          "start_line": 162,
          "end_line": 164,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 162,
              "line": "    public static func encodeToOutputStream(data: String, output: OutputStream, charset!: Charset = Charsets.UTF8): Unit {"
            },
            {
              "lineno": 163,
              "line": "        encodeToOutputStream(charsetEncode(data, charset), output)"
            },
            {
              "lineno": 164,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 162,
              "end_line": 164,
              "label": "    public static func encodeToOutputStream(data: String, output: OutputStream, charset!: Charset = Charsets.UTF8): Unit {\n        encodeToOutputStream(charsetEncode(data, charset), output)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToBytes(data: String, charset!: Charset = Charsets.UTF8): Array<Byte>",
          "type": "function",
          "start_line": 165,
          "end_line": 167,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 165,
              "line": "    public static func encodeToBytes(data: String, charset!: Charset = Charsets.UTF8): Array<Byte> {"
            },
            {
              "lineno": 166,
              "line": "        encodeToBytes(charsetEncode(data, charset))"
            },
            {
              "lineno": 167,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 165,
              "end_line": 167,
              "label": "    public static func encodeToBytes(data: String, charset!: Charset = Charsets.UTF8): Array<Byte> {\n        encodeToBytes(charsetEncode(data, charset))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToString(data: String, charset!: Charset = Charsets.UTF8): String",
          "type": "function",
          "start_line": 168,
          "end_line": 170,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 168,
              "line": "    public static func encodeToString(data: String, charset!: Charset = Charsets.UTF8): String {"
            },
            {
              "lineno": 169,
              "line": "        String.fromUtf8(encodeToBytes(data, charset: charset))"
            },
            {
              "lineno": 170,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 168,
              "end_line": 170,
              "label": "    public static func encodeToString(data: String, charset!: Charset = Charsets.UTF8): String {\n        String.fromUtf8(encodeToBytes(data, charset: charset))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "decode(data: Array<Byte>): ByteArrayStream",
          "type": "function",
          "start_line": 171,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 171,
              "line": "    private static func decode(data: Array<Byte>): ByteArrayStream {"
            },
            {
              "lineno": 172,
              "line": "        let bytes = ByteArrayStream()"
            },
            {
              "lineno": 173,
              "line": "        let input: InputStream = ByteCollectionInputStream(data)"
            },
            {
              "lineno": 174,
              "line": "        decode(input, bytes)"
            },
            {
              "lineno": 175,
              "line": "        bytes"
            },
            {
              "lineno": 176,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 171,
              "end_line": 171,
              "label": "    private static func decode(data: Array<Byte>): ByteArrayStream {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 172,
                  "end_line": 175,
                  "label": "        let bytes = ByteArrayStream()\n        let input: InputStream = ByteCollectionInputStream(data)\n        decode(input, bytes)\n        bytes",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "decode(input: InputStream, output: OutputStream): Unit",
          "type": "function",
          "start_line": 177,
          "end_line": 219,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 177,
              "line": "    public static func decode(input: InputStream, output: OutputStream): Unit {"
            },
            {
              "lineno": 178,
              "line": "        let bufout = BufferedOutputStream(output)"
            },
            {
              "lineno": 179,
              "line": "        let bufsize = 128"
            },
            {
              "lineno": 180,
              "line": "        var buf = Array<Byte>(bufsize, item: 0)"
            },
            {
              "lineno": 181,
              "line": "        var dec = Array<Byte>(3, item: 0)"
            },
            {
              "lineno": 182,
              "line": "        var resultLen = 0"
            },
            {
              "lineno": 183,
              "line": "        var bufLen = input.read(buf)"
            },
            {
              "lineno": 184,
              "line": "        while (bufLen > 0) {"
            },
            {
              "lineno": 185,
              "line": "            var i = 0"
            },
            {
              "lineno": 186,
              "line": "            while (i < bufLen) {"
            },
            {
              "lineno": 187,
              "line": "                var b = buf[i]"
            },
            {
              "lineno": 188,
              "line": "                if (b == tailSymbol) {"
            },
            {
              "lineno": 189,
              "line": "                    let mod = resultLen % 4"
            },
            {
              "lineno": 190,
              "line": "                    if (i + 1 == bufLen && mod == 2) {"
            },
            {
              "lineno": 191,
              "line": "                        input.read(Array<Byte>(1, item: 0))"
            },
            {
              "lineno": 192,
              "line": "                    }"
            },
            {
              "lineno": 193,
              "line": "                    if (mod != 3) {"
            },
            {
              "lineno": 194,
              "line": "                        bufout.write(dec.slice(0, 3 - mod))"
            },
            {
              "lineno": 195,
              "line": "                    }"
            },
            {
              "lineno": 196,
              "line": "                    bufout.flush()"
            },
            {
              "lineno": 197,
              "line": "                    return"
            },
            {
              "lineno": 198,
              "line": "                }"
            },
            {
              "lineno": 199,
              "line": "                let idx = fromBase64[b]"
            },
            {
              "lineno": 200,
              "line": "                match (resultLen % 4) {"
            },
            {
              "lineno": 201,
              "line": "                    case 0 => dec[0] = idx << 2"
            },
            {
              "lineno": 202,
              "line": "                    case 1 =>"
            },
            {
              "lineno": 203,
              "line": "                        dec[0] |= idx >> 4"
            },
            {
              "lineno": 204,
              "line": "                        dec[1] = idx << 4"
            },
            {
              "lineno": 205,
              "line": "                    case 2 =>"
            },
            {
              "lineno": 206,
              "line": "                        dec[1] |= idx >> 2"
            },
            {
              "lineno": 207,
              "line": "                        dec[2] = idx << 6"
            },
            {
              "lineno": 208,
              "line": "                    case 3 =>"
            },
            {
              "lineno": 209,
              "line": "                        dec[2] |= idx"
            },
            {
              "lineno": 210,
              "line": "                        bufout.write(dec)"
            },
            {
              "lineno": 211,
              "line": "                    case _ => throw UnreachableException()"
            },
            {
              "lineno": 212,
              "line": "                }"
            },
            {
              "lineno": 213,
              "line": "                i++"
            },
            {
              "lineno": 214,
              "line": "                resultLen++"
            },
            {
              "lineno": 215,
              "line": "            }"
            },
            {
              "lineno": 216,
              "line": "            bufLen = input.read(buf)"
            },
            {
              "lineno": 217,
              "line": "        }"
            },
            {
              "lineno": 218,
              "line": "        bufout.flush()"
            },
            {
              "lineno": 219,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 177,
              "end_line": 183,
              "label": "    public static func decode(input: InputStream, output: OutputStream): Unit {\n        let bufout = BufferedOutputStream(output)\n        let bufsize = 128\n        var buf = Array<Byte>(bufsize, item: 0)\n        var dec = Array<Byte>(3, item: 0)\n        var resultLen = 0\n        var bufLen = input.read(buf)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 184,
                  "end_line": 184,
                  "label": "        while (bufLen > 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 185,
                      "end_line": 185,
                      "label": "            var i = 0",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 186,
                          "end_line": 186,
                          "label": "            while (i < bufLen) {",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 187,
                              "end_line": 187,
                              "label": "                var b = buf[i]",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 188,
                                  "end_line": 188,
                                  "label": "                if (b == tailSymbol) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 189,
                                      "end_line": 195,
                                      "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 196,
                                          "end_line": 197,
                                          "label": "                    bufout.flush()\n                    return",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 9,
                                      "start_line": 199,
                                      "end_line": 199,
                                      "label": "                } else {\n                let idx = fromBase64[b]",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 200,
                                          "end_line": 212,
                                          "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "start_line": 213,
                                              "end_line": 214,
                                              "label": "                i++\n                resultLen++",
                                              "successors": [
                                                {
                                                  "id": 4,
                                                  "start_line": 186,
                                                  "end_line": 186,
                                                  "label": "            while (i < bufLen) {",
                                                  "successors": [
                                                    {
                                                      "id": 5,
                                                      "start_line": 187,
                                                      "end_line": 187,
                                                      "label": "                var b = buf[i]",
                                                      "successors": [
                                                        {
                                                          "id": 6,
                                                          "start_line": 188,
                                                          "end_line": 188,
                                                          "label": "                if (b == tailSymbol) {",
                                                          "successors": [
                                                            {
                                                              "id": 7,
                                                              "start_line": 189,
                                                              "end_line": 195,
                                                              "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                                              "successors": [
                                                                {
                                                                  "id": 8,
                                                                  "start_line": 196,
                                                                  "end_line": 197,
                                                                  "label": "                    bufout.flush()\n                    return",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "id": 9,
                                                              "start_line": 199,
                                                              "end_line": 199,
                                                              "label": "                } else {\n                let idx = fromBase64[b]",
                                                              "successors": [
                                                                {
                                                                  "id": 10,
                                                                  "start_line": 200,
                                                                  "end_line": 212,
                                                                  "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                                                  "successors": [
                                                                    {
                                                                      "id": 11,
                                                                      "start_line": 213,
                                                                      "end_line": 214,
                                                                      "label": "                i++\n                resultLen++",
                                                                      "successors": [
                                                                        {
                                                                          "id": 4,
                                                                          "start_line": 186,
                                                                          "end_line": 186,
                                                                          "label": "            while (i < bufLen) {",
                                                                          "successors": [
                                                                            {
                                                                              "id": 5,
                                                                              "start_line": 187,
                                                                              "end_line": 187,
                                                                              "label": "                var b = buf[i]",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 6,
                                                                                  "start_line": 188,
                                                                                  "end_line": 188,
                                                                                  "label": "                if (b == tailSymbol) {",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 7,
                                                                                      "start_line": 189,
                                                                                      "end_line": 195,
                                                                                      "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 8,
                                                                                          "start_line": 196,
                                                                                          "end_line": 197,
                                                                                          "label": "                    bufout.flush()\n                    return",
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "id": 9,
                                                                                      "start_line": 199,
                                                                                      "end_line": 199,
                                                                                      "label": "                } else {\n                let idx = fromBase64[b]",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 10,
                                                                                          "start_line": 200,
                                                                                          "end_line": 212,
                                                                                          "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 11,
                                                                                              "start_line": 213,
                                                                                              "end_line": 214,
                                                                                              "label": "                i++\n                resultLen++",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 4,
                                                                                                  "start_line": 186,
                                                                                                  "end_line": 186,
                                                                                                  "label": "            while (i < bufLen) {",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 5,
                                                                                                      "start_line": 187,
                                                                                                      "end_line": 187,
                                                                                                      "label": "                var b = buf[i]",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 6,
                                                                                                          "start_line": 188,
                                                                                                          "end_line": 188,
                                                                                                          "label": "                if (b == tailSymbol) {",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 7,
                                                                                                              "start_line": 189,
                                                                                                              "end_line": 195,
                                                                                                              "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 8,
                                                                                                                  "start_line": 196,
                                                                                                                  "end_line": 197,
                                                                                                                  "label": "                    bufout.flush()\n                    return",
                                                                                                                  "successors": []
                                                                                                                }
                                                                                                              ]
                                                                                                            },
                                                                                                            {
                                                                                                              "id": 9,
                                                                                                              "start_line": 199,
                                                                                                              "end_line": 199,
                                                                                                              "label": "                } else {\n                let idx = fromBase64[b]",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 10,
                                                                                                                  "start_line": 200,
                                                                                                                  "end_line": 212,
                                                                                                                  "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 11,
                                                                                                                      "start_line": 213,
                                                                                                                      "end_line": 214,
                                                                                                                      "label": "                i++\n                resultLen++",
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "id": 4,
                                                                                                                          "start_line": 186,
                                                                                                                          "end_line": 186,
                                                                                                                          "label": "            while (i < bufLen) {",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 5,
                                                                                                                              "start_line": 187,
                                                                                                                              "end_line": 187,
                                                                                                                              "label": "                var b = buf[i]",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 6,
                                                                                                                                  "start_line": 188,
                                                                                                                                  "end_line": 188,
                                                                                                                                  "label": "                if (b == tailSymbol) {",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 7,
                                                                                                                                      "start_line": 189,
                                                                                                                                      "end_line": 195,
                                                                                                                                      "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 8,
                                                                                                                                          "start_line": 196,
                                                                                                                                          "end_line": 197,
                                                                                                                                          "label": "                    bufout.flush()\n                    return",
                                                                                                                                          "successors": []
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    },
                                                                                                                                    {
                                                                                                                                      "id": 9,
                                                                                                                                      "start_line": 199,
                                                                                                                                      "end_line": 199,
                                                                                                                                      "label": "                } else {\n                let idx = fromBase64[b]",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 10,
                                                                                                                                          "start_line": 200,
                                                                                                                                          "end_line": 212,
                                                                                                                                          "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "id": 11,
                                                                                                                                              "start_line": 213,
                                                                                                                                              "end_line": 214,
                                                                                                                                              "label": "                i++\n                resultLen++",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 4,
                                                                                                                                                  "start_line": 186,
                                                                                                                                                  "end_line": 186,
                                                                                                                                                  "label": "            while (i < bufLen) {",
                                                                                                                                                  "successors": []
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                          "id": 12,
                                                                                                                          "start_line": 215,
                                                                                                                          "end_line": 216,
                                                                                                                          "label": "            }\n            bufLen = input.read(buf)",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 2,
                                                                                                                              "start_line": 184,
                                                                                                                              "end_line": 184,
                                                                                                                              "label": "        while (bufLen > 0) {",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 3,
                                                                                                                                  "start_line": 185,
                                                                                                                                  "end_line": 185,
                                                                                                                                  "label": "            var i = 0",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 4,
                                                                                                                                      "start_line": 186,
                                                                                                                                      "end_line": 186,
                                                                                                                                      "label": "            while (i < bufLen) {",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 5,
                                                                                                                                          "start_line": 187,
                                                                                                                                          "end_line": 187,
                                                                                                                                          "label": "                var b = buf[i]",
                                                                                                                                          "successors": [
                                                                                                                                            {
                                                                                                                                              "id": 6,
                                                                                                                                              "start_line": 188,
                                                                                                                                              "end_line": 188,
                                                                                                                                              "label": "                if (b == tailSymbol) {",
                                                                                                                                              "successors": [
                                                                                                                                                {
                                                                                                                                                  "id": 7,
                                                                                                                                                  "start_line": 189,
                                                                                                                                                  "end_line": 195,
                                                                                                                                                  "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                                                                                                                                  "successors": [
                                                                                                                                                    {
                                                                                                                                                      "id": 8,
                                                                                                                                                      "start_line": 196,
                                                                                                                                                      "end_line": 197,
                                                                                                                                                      "label": "                    bufout.flush()\n                    return",
                                                                                                                                                      "successors": []
                                                                                                                                                    }
                                                                                                                                                  ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                  "id": 9,
                                                                                                                                                  "start_line": 199,
                                                                                                                                                  "end_line": 199,
                                                                                                                                                  "label": "                } else {\n                let idx = fromBase64[b]",
                                                                                                                                                  "successors": [
                                                                                                                                                    {
                                                                                                                                                      "id": 10,
                                                                                                                                                      "start_line": 200,
                                                                                                                                                      "end_line": 212,
                                                                                                                                                      "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                                                                                                                                      "successors": [
                                                                                                                                                        {
                                                                                                                                                          "id": 11,
                                                                                                                                                          "start_line": 213,
                                                                                                                                                          "end_line": 214,
                                                                                                                                                          "label": "                i++\n                resultLen++",
                                                                                                                                                          "successors": [
                                                                                                                                                            {
                                                                                                                                                              "id": 4,
                                                                                                                                                              "start_line": 186,
                                                                                                                                                              "end_line": 186,
                                                                                                                                                              "label": "            while (i < bufLen) {",
                                                                                                                                                              "successors": [
                                                                                                                                                                {
                                                                                                                                                                  "id": 5,
                                                                                                                                                                  "start_line": 187,
                                                                                                                                                                  "end_line": 187,
                                                                                                                                                                  "label": "                var b = buf[i]",
                                                                                                                                                                  "successors": [
                                                                                                                                                                    {
                                                                                                                                                                      "id": 6,
                                                                                                                                                                      "start_line": 188,
                                                                                                                                                                      "end_line": 188,
                                                                                                                                                                      "label": "                if (b == tailSymbol) {",
                                                                                                                                                                      "successors": [
                                                                                                                                                                        {
                                                                                                                                                                          "id": 7,
                                                                                                                                                                          "start_line": 189,
                                                                                                                                                                          "end_line": 195,
                                                                                                                                                                          "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                                                                                                                                                          "successors": [
                                                                                                                                                                            {
                                                                                                                                                                              "id": 8,
                                                                                                                                                                              "start_line": 196,
                                                                                                                                                                              "end_line": 197,
                                                                                                                                                                              "label": "                    bufout.flush()\n                    return",
                                                                                                                                                                              "successors": []
                                                                                                                                                                            }
                                                                                                                                                                          ]
                                                                                                                                                                        },
                                                                                                                                                                        {
                                                                                                                                                                          "id": 9,
                                                                                                                                                                          "start_line": 199,
                                                                                                                                                                          "end_line": 199,
                                                                                                                                                                          "label": "                } else {\n                let idx = fromBase64[b]",
                                                                                                                                                                          "successors": [
                                                                                                                                                                            {
                                                                                                                                                                              "id": 10,
                                                                                                                                                                              "start_line": 200,
                                                                                                                                                                              "end_line": 212,
                                                                                                                                                                              "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                                                                                                                                                              "successors": [
                                                                                                                                                                                {
                                                                                                                                                                                  "id": 11,
                                                                                                                                                                                  "start_line": 213,
                                                                                                                                                                                  "end_line": 214,
                                                                                                                                                                                  "label": "                i++\n                resultLen++",
                                                                                                                                                                                  "successors": [
                                                                                                                                                                                    {
                                                                                                                                                                                      "id": 4,
                                                                                                                                                                                      "start_line": 186,
                                                                                                                                                                                      "end_line": 186,
                                                                                                                                                                                      "label": "            while (i < bufLen) {",
                                                                                                                                                                                      "successors": [
                                                                                                                                                                                        {
                                                                                                                                                                                          "id": 5,
                                                                                                                                                                                          "start_line": 187,
                                                                                                                                                                                          "end_line": 187,
                                                                                                                                                                                          "label": "                var b = buf[i]",
                                                                                                                                                                                          "successors": [
                                                                                                                                                                                            {
                                                                                                                                                                                              "id": 6,
                                                                                                                                                                                              "start_line": 188,
                                                                                                                                                                                              "end_line": 188,
                                                                                                                                                                                              "label": "                if (b == tailSymbol) {",
                                                                                                                                                                                              "successors": [
                                                                                                                                                                                                {
                                                                                                                                                                                                  "id": 7,
                                                                                                                                                                                                  "start_line": 189,
                                                                                                                                                                                                  "end_line": 195,
                                                                                                                                                                                                  "label": "                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }",
                                                                                                                                                                                                  "successors": [
                                                                                                                                                                                                    {
                                                                                                                                                                                                      "id": 8,
                                                                                                                                                                                                      "start_line": 196,
                                                                                                                                                                                                      "end_line": 197,
                                                                                                                                                                                                      "label": "                    bufout.flush()\n                    return",
                                                                                                                                                                                                      "successors": []
                                                                                                                                                                                                    }
                                                                                                                                                                                                  ]
                                                                                                                                                                                                },
                                                                                                                                                                                                {
                                                                                                                                                                                                  "id": 9,
                                                                                                                                                                                                  "start_line": 199,
                                                                                                                                                                                                  "end_line": 199,
                                                                                                                                                                                                  "label": "                } else {\n                let idx = fromBase64[b]",
                                                                                                                                                                                                  "successors": [
                                                                                                                                                                                                    {
                                                                                                                                                                                                      "id": 10,
                                                                                                                                                                                                      "start_line": 200,
                                                                                                                                                                                                      "end_line": 212,
                                                                                                                                                                                                      "label": "                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }",
                                                                                                                                                                                                      "successors": [
                                                                                                                                                                                                        {
                                                                                                                                                                                                          "id": 11,
                                                                                                                                                                                                          "start_line": 213,
                                                                                                                                                                                                          "end_line": 214,
                                                                                                                                                                                                          "label": "                i++\n                resultLen++",
                                                                                                                                                                                                          "successors": [
                                                                                                                                                                                                            {
                                                                                                                                                                                                              "id": 4,
                                                                                                                                                                                                              "start_line": 186,
                                                                                                                                                                                                              "end_line": 186,
                                                                                                                                                                                                              "label": "            while (i < bufLen) {",
                                                                                                                                                                                                              "successors": []
                                                                                                                                                                                                            }
                                                                                                                                                                                                          ]
                                                                                                                                                                                                        }
                                                                                                                                                                                                      ]
                                                                                                                                                                                                    }
                                                                                                                                                                                                  ]
                                                                                                                                                                                                }
                                                                                                                                                                                              ]
                                                                                                                                                                                            }
                                                                                                                                                                                          ]
                                                                                                                                                                                        }
                                                                                                                                                                                      ]
                                                                                                                                                                                    },
                                                                                                                                                                                    {
                                                                                                                                                                                      "id": 12,
                                                                                                                                                                                      "start_line": 215,
                                                                                                                                                                                      "end_line": 216,
                                                                                                                                                                                      "label": "            }\n            bufLen = input.read(buf)",
                                                                                                                                                                                      "successors": [
                                                                                                                                                                                        {
                                                                                                                                                                                          "id": 2,
                                                                                                                                                                                          "start_line": 184,
                                                                                                                                                                                          "end_line": 184,
                                                                                                                                                                                          "label": "        while (bufLen > 0) {",
                                                                                                                                                                                          "successors": [
                                                                                                                                                                                            {
                                                                                                                                                                                              "id": 3,
                                                                                                                                                                                              "start_line": 185,
                                                                                                                                                                                              "end_line": 185,
                                                                                                                                                                                              "label": "            var i = 0",
                                                                                                                                                                                              "successors": [
                                                                                                                                                                                                {
                                                                                                                                                                                                  "id": 4,
                                                                                                                                                                                                  "start_line": 186,
                                                                                                                                                                                                  "end_line": 186,
                                                                                                                                                                                                  "label": "            while (i < bufLen) {",
                                                                                                                                                                                                  "successors": []
                                                                                                                                                                                                }
                                                                                                                                                                                              ]
                                                                                                                                                                                            }
                                                                                                                                                                                          ]
                                                                                                                                                                                        }
                                                                                                                                                                                      ]
                                                                                                                                                                                    },
                                                                                                                                                                                    {
                                                                                                                                                                                      "id": 13,
                                                                                                                                                                                      "start_line": 217,
                                                                                                                                                                                      "end_line": 218,
                                                                                                                                                                                      "label": "        }\n        bufout.flush()",
                                                                                                                                                                                      "successors": [
                                                                                                                                                                                        {
                                                                                                                                                                                          "id": 14,
                                                                                                                                                                                          "start_line": 219,
                                                                                                                                                                                          "end_line": 219,
                                                                                                                                                                                          "label": "    }",
                                                                                                                                                                                          "successors": []
                                                                                                                                                                                        }
                                                                                                                                                                                      ]
                                                                                                                                                                                    }
                                                                                                                                                                                  ]
                                                                                                                                                                                }
                                                                                                                                                                              ]
                                                                                                                                                                            }
                                                                                                                                                                          ]
                                                                                                                                                                        }
                                                                                                                                                                      ]
                                                                                                                                                                    }
                                                                                                                                                                  ]
                                                                                                                                                                }
                                                                                                                                                              ]
                                                                                                                                                            }
                                                                                                                                                          ]
                                                                                                                                                        }
                                                                                                                                                      ]
                                                                                                                                                    }
                                                                                                                                                  ]
                                                                                                                                                }
                                                                                                                                              ]
                                                                                                                                            }
                                                                                                                                          ]
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "decodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit",
          "type": "function",
          "start_line": 220,
          "end_line": 222,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 220,
              "line": "    public static func decodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {"
            },
            {
              "lineno": 221,
              "line": "        decode(ByteCollectionInputStream(data), output)"
            },
            {
              "lineno": 222,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 220,
              "end_line": 221,
              "label": "    public static func decodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {\n        decode(ByteCollectionInputStream(data), output)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 222,
                  "end_line": 222,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "decodeToBytes(data: Array<Byte>): Array<Byte>",
          "type": "function",
          "start_line": 223,
          "end_line": 225,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 223,
              "line": "    public static func decodeToBytes(data: Array<Byte>): Array<Byte> {"
            },
            {
              "lineno": 224,
              "line": "        decode(data).readToEnd()"
            },
            {
              "lineno": 225,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 223,
              "end_line": 223,
              "label": "    public static func decodeToBytes(data: Array<Byte>): Array<Byte> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 224,
                  "end_line": 225,
                  "label": "        decode(data).readToEnd()\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "decodeToString(data: Array<Byte>, charset!: Charset = Charsets.UTF8): String",
          "type": "function",
          "start_line": 226,
          "end_line": 228,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 226,
              "line": "    public static func decodeToString(data: Array<Byte>, charset!: Charset = Charsets.UTF8): String {"
            },
            {
              "lineno": 227,
              "line": "        charsetDecode(decodeToBytes(data), charset)"
            },
            {
              "lineno": 228,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 226,
              "end_line": 228,
              "label": "    public static func decodeToString(data: Array<Byte>, charset!: Charset = Charsets.UTF8): String {\n        charsetDecode(decodeToBytes(data), charset)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "decodeToOutputStream(data: String, output: OutputStream): Unit",
          "type": "function",
          "start_line": 229,
          "end_line": 231,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 229,
              "line": "    public static func decodeToOutputStream(data: String, output: OutputStream): Unit {"
            },
            {
              "lineno": 230,
              "line": "        decodeToOutputStream(data.toArray(), output)"
            },
            {
              "lineno": 231,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 229,
              "end_line": 231,
              "label": "    public static func decodeToOutputStream(data: String, output: OutputStream): Unit {\n        decodeToOutputStream(data.toArray(), output)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "decodeToBytes(data: String): Array<Byte>",
          "type": "function",
          "start_line": 232,
          "end_line": 234,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 232,
              "line": "    public static func decodeToBytes(data: String): Array<Byte> {"
            },
            {
              "lineno": 233,
              "line": "        decodeToBytes(data.toArray())"
            },
            {
              "lineno": 234,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 232,
              "end_line": 232,
              "label": "    public static func decodeToBytes(data: String): Array<Byte> {",
              "successors": [
                {
                  "id": 2,
                  "start_line": 233,
                  "end_line": 233,
                  "label": "        decodeToBytes(data.toArray())",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 234,
                      "end_line": 234,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "decodeToString(data: String, charset!: Charset = Charsets.UTF8): String",
          "type": "function",
          "start_line": 235,
          "end_line": 237,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 235,
              "line": "    public static func decodeToString(data: String, charset!: Charset = Charsets.UTF8): String {"
            },
            {
              "lineno": 236,
              "line": "        charsetDecode(decodeToBytes(data), charset)"
            },
            {
              "lineno": 237,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 235,
              "end_line": 237,
              "label": "    public static func decodeToString(data: String, charset!: Charset = Charsets.UTF8): String {\n        charsetDecode(decodeToBytes(data), charset)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "public class Base64 {"
        },
        {
          "lineno": 9,
          "line": "    private static let tailSymbol = convertCharToByte('=')"
        },
        {
          "lineno": 10,
          "line": "    private static let toBase64 = ["
        },
        {
          "lineno": 11,
          "line": "        'A',"
        },
        {
          "lineno": 12,
          "line": "        'B',"
        },
        {
          "lineno": 13,
          "line": "        'C',"
        },
        {
          "lineno": 14,
          "line": "        'D',"
        },
        {
          "lineno": 15,
          "line": "        'E',"
        },
        {
          "lineno": 16,
          "line": "        'F',"
        },
        {
          "lineno": 17,
          "line": "        'G',"
        },
        {
          "lineno": 18,
          "line": "        'H',"
        },
        {
          "lineno": 19,
          "line": "        'I',"
        },
        {
          "lineno": 20,
          "line": "        'J',"
        },
        {
          "lineno": 21,
          "line": "        'K',"
        },
        {
          "lineno": 22,
          "line": "        'L',"
        },
        {
          "lineno": 23,
          "line": "        'M',"
        },
        {
          "lineno": 24,
          "line": "        'N',"
        },
        {
          "lineno": 25,
          "line": "        'O',"
        },
        {
          "lineno": 26,
          "line": "        'P',"
        },
        {
          "lineno": 27,
          "line": "        'Q',"
        },
        {
          "lineno": 28,
          "line": "        'R',"
        },
        {
          "lineno": 29,
          "line": "        'S',"
        },
        {
          "lineno": 30,
          "line": "        'T',"
        },
        {
          "lineno": 31,
          "line": "        'U',"
        },
        {
          "lineno": 32,
          "line": "        'V',"
        },
        {
          "lineno": 33,
          "line": "        'W',"
        },
        {
          "lineno": 34,
          "line": "        'X',"
        },
        {
          "lineno": 35,
          "line": "        'Y',"
        },
        {
          "lineno": 36,
          "line": "        'Z',"
        },
        {
          "lineno": 37,
          "line": "        'a',"
        },
        {
          "lineno": 38,
          "line": "        'b',"
        },
        {
          "lineno": 39,
          "line": "        'c',"
        },
        {
          "lineno": 40,
          "line": "        'd',"
        },
        {
          "lineno": 41,
          "line": "        'e',"
        },
        {
          "lineno": 42,
          "line": "        'f',"
        },
        {
          "lineno": 43,
          "line": "        'g',"
        },
        {
          "lineno": 44,
          "line": "        'h',"
        },
        {
          "lineno": 45,
          "line": "        'i',"
        },
        {
          "lineno": 46,
          "line": "        'j',"
        },
        {
          "lineno": 47,
          "line": "        'k',"
        },
        {
          "lineno": 48,
          "line": "        'l',"
        },
        {
          "lineno": 49,
          "line": "        'm',"
        },
        {
          "lineno": 50,
          "line": "        'n',"
        },
        {
          "lineno": 51,
          "line": "        'o',"
        },
        {
          "lineno": 52,
          "line": "        'p',"
        },
        {
          "lineno": 53,
          "line": "        'q',"
        },
        {
          "lineno": 54,
          "line": "        'r',"
        },
        {
          "lineno": 55,
          "line": "        's',"
        },
        {
          "lineno": 56,
          "line": "        't',"
        },
        {
          "lineno": 57,
          "line": "        'u',"
        },
        {
          "lineno": 58,
          "line": "        'v',"
        },
        {
          "lineno": 59,
          "line": "        'w',"
        },
        {
          "lineno": 60,
          "line": "        'x',"
        },
        {
          "lineno": 61,
          "line": "        'y',"
        },
        {
          "lineno": 62,
          "line": "        'z',"
        },
        {
          "lineno": 63,
          "line": "        '0',"
        },
        {
          "lineno": 64,
          "line": "        '1',"
        },
        {
          "lineno": 65,
          "line": "        '2',"
        },
        {
          "lineno": 66,
          "line": "        '3',"
        },
        {
          "lineno": 67,
          "line": "        '4',"
        },
        {
          "lineno": 68,
          "line": "        '5',"
        },
        {
          "lineno": 69,
          "line": "        '6',"
        },
        {
          "lineno": 70,
          "line": "        '7',"
        },
        {
          "lineno": 71,
          "line": "        '8',"
        },
        {
          "lineno": 72,
          "line": "        '9',"
        },
        {
          "lineno": 73,
          "line": "        '+',"
        },
        {
          "lineno": 74,
          "line": "        '/'"
        },
        {
          "lineno": 75,
          "line": "    ]"
        },
        {
          "lineno": 76,
          "line": "    private static let fromBase64: Map<Byte, Byte> = {"
        },
        {
          "lineno": 77,
          "line": "         =>"
        },
        {
          "lineno": 78,
          "line": "        let map = HashMap<Byte, Byte>()"
        },
        {
          "lineno": 79,
          "line": "        var i = 0"
        },
        {
          "lineno": 80,
          "line": "        let size = toBase64.size"
        },
        {
          "lineno": 81,
          "line": "        while (i < size) {"
        },
        {
          "lineno": 82,
          "line": "            map[convertCharToByte(i)] = UInt8(i)"
        },
        {
          "lineno": 83,
          "line": "            i++"
        },
        {
          "lineno": 84,
          "line": "        }"
        },
        {
          "lineno": 85,
          "line": "        map"
        },
        {
          "lineno": 86,
          "line": "    }()"
        },
        {
          "lineno": 238,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 9,
          "label": "public class Base64 {\n    private static let tailSymbol = convertCharToByte('=')",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 75,
              "label": "private static let toBase64 = [\n        'A',\n        'B',\n        ...\n        '9',\n        '+',\n        '/'     \n    ]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 76,
                  "end_line": 86,
                  "label": "private static let fromBase64: Map<Byte, Byte> = {\n         =>\n        let map = HashMap<Byte, Byte>()\n        var i = 0\n        let size = toBase64.size\n        while (i < size) {\n            map[convertCharToByte(i)] = UInt8(i)\n            i++\n        }\n        map\n    }()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 238,
                      "end_line": 238,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package util"
    },
    {
      "lineno": 2,
      "line": "from std import io.{ByteArrayStream, OutputStream, InputStream, BufferedOutputStream}"
    },
    {
      "lineno": 3,
      "line": "from std import collection.{HashMap, Map}"
    },
    {
      "lineno": 4,
      "line": "from charset import charset.*"
    },
    {
      "lineno": 5,
      "line": "from charset import charset.encoding.*"
    },
    {
      "lineno": 6,
      "line": "import base.exception.UnreachableException"
    },
    {
      "lineno": 7,
      "line": "import io.ByteCollectionInputStream"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "package util\nfrom std import io.{ByteArrayStream, OutputStream, InputStream, BufferedOutputStream}\nfrom std import collection.{HashMap, Map}\nfrom charset import charset.*\nfrom charset import charset.encoding.*\nimport base.exception.UnreachableException\nimport io.ByteCollectionInputStream",
      "successors": []
    }
  ]
}