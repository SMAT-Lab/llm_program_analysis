{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [
    {
      "name": "pathLoad",
      "type": "function",
      "start_line": 38,
      "end_line": 57,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 38,
          "line": "public func pathLoad(): PathMap {"
        },
        {
          "lineno": 39,
          "line": "    var pathMap = PathMap("
        },
        {
          "lineno": 40,
          "line": "        \"/opds/v2/series/:id\","
        },
        {
          "lineno": 41,
          "line": "        {"
        },
        {
          "lineno": 42,
          "line": "            httpContext =>"
        },
        {
          "lineno": 43,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 44,
          "line": "            let id = httpContext.request.url.path.split(\"/\")[4]"
        },
        {
          "lineno": 45,
          "line": "            var page = 0"
        },
        {
          "lineno": 46,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 47,
          "line": "                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))"
        },
        {
          "lineno": 48,
          "line": "                case None => ()"
        },
        {
          "lineno": 49,
          "line": "            }"
        },
        {
          "lineno": 50,
          "line": "            var cataLog = Series(id, host: host, page: page)"
        },
        {
          "lineno": 51,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 52,
          "line": "            httpContext.responseBuilder.body(cataLog.toJson())"
        },
        {
          "lineno": 53,
          "line": "        }"
        },
        {
          "lineno": 54,
          "line": "    )"
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 56,
          "line": "    return pathMap"
        },
        {
          "lineno": 57,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 38,
          "end_line": 45,
          "label": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/opds/v2/series/:id\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.path.split(\"/\")[4]\n            var page = 0",
          "successors": [
            {
              "id": 2,
              "start_line": 46,
              "end_line": 49,
              "label": "match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 50,
                  "end_line": 52,
                  "label": "var cataLog = Series(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(cataLog.toJson())",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 53,
                      "end_line": 56,
                      "label": "        }\n    )\n\n    return pathMap",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 57,
                          "end_line": 57,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Series",
      "type": "class",
      "start_line": 10,
      "end_line": 36,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    public init(id: String, host!: String = \"127.0.0.1\", page!: Int64 = 0) {"
            },
            {
              "lineno": 15,
              "line": "        let series = BookSeries.fromId(id)"
            },
            {
              "lineno": 16,
              "line": "        metadata = Metadata(series.name, itemsPerPage: 20, currentPage: page + 1,"
            },
            {
              "lineno": 17,
              "line": "            numberOfItems: BookSeries.getCount(id: id), modified: series.lastModifiedDate)"
            },
            {
              "lineno": 18,
              "line": "        metadata.addBookDesc(id)"
            },
            {
              "lineno": 19,
              "line": "        links = Links(host, \"series/${id}\", page: page)"
            },
            {
              "lineno": 20,
              "line": "        var obj = Books.formDatabase(baseConfig.database, page: page + 1, count: 20, seriesId: id)"
            },
            {
              "lineno": 21,
              "line": "        for (i in obj) {"
            },
            {
              "lineno": 22,
              "line": "            publications.append(Publication(i, host))"
            },
            {
              "lineno": 23,
              "line": "        }"
            },
            {
              "lineno": 24,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 14,
              "end_line": 20,
              "label": "    public init(id: String, host!: String = \"127.0.0.1\", page!: Int64 = 0) {\n        let series = BookSeries.fromId(id)\n        metadata = Metadata(series.name, itemsPerPage: 20, currentPage: page + 1,\n            numberOfItems: BookSeries.getCount(id: id), modified: series.lastModifiedDate)\n        metadata.addBookDesc(id)\n        links = Links(host, \"series/${id}\", page: page)\n        var obj = Books.formDatabase(baseConfig.database, page: page + 1, count: 20, seriesId: id)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 23,
                  "label": "        for (i in obj) {\n            publications.append(Publication(i, host))\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 24,
                      "end_line": 24,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 25,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    public func toJson(): String {"
            },
            {
              "lineno": 26,
              "line": "        let stream = ByteBuffer()"
            },
            {
              "lineno": 27,
              "line": "        let w = JsonWriter(stream)"
            },
            {
              "lineno": 28,
              "line": "        w.startObject()"
            },
            {
              "lineno": 29,
              "line": "        w.writeName(\"metadata\").writeValue(metadata)"
            },
            {
              "lineno": 30,
              "line": "        w.writeName(\"links\").writeValue(links)"
            },
            {
              "lineno": 31,
              "line": "        w.writeName(\"publications\").writeValue<ArrayList<Publication>>(publications)"
            },
            {
              "lineno": 32,
              "line": "        w.endObject()"
            },
            {
              "lineno": 33,
              "line": "        w.flush()"
            },
            {
              "lineno": 34,
              "line": "        return String.fromUtf8(readToEnd(stream))"
            },
            {
              "lineno": 35,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 25,
              "end_line": 34,
              "label": "    public func toJson(): String {\n        let stream = ByteBuffer()\n        let w = JsonWriter(stream)\n        w.startObject()\n        w.writeName(\"metadata\").writeValue(metadata)\n        w.writeName(\"links\").writeValue(links)\n        w.writeName(\"publications\").writeValue<ArrayList<Publication>>(publications)\n        w.endObject()\n        w.flush()\n        return String.fromUtf8(readToEnd(stream))",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "class Series {"
        },
        {
          "lineno": 11,
          "line": "    var metadata: Metadata"
        },
        {
          "lineno": 12,
          "line": "    var links: Links"
        },
        {
          "lineno": 13,
          "line": "    var publications: ArrayList<Publication> = ArrayList<Publication>()"
        },
        {
          "lineno": 36,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 13,
          "label": "class Series {\n    var metadata: Metadata\n    var links: Links\n    var publications: ArrayList<Publication> = ArrayList<Publication>()",
          "successors": [
            {
              "id": 2,
              "start_line": 36,
              "end_line": 36,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package opds_cj.path.opds.v2.series"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import net.http.*"
    },
    {
      "lineno": 4,
      "line": "import encoding.json.stream.*"
    },
    {
      "lineno": 5,
      "line": "import std.{io.ByteBuffer, io.readToEnd, collection.*, convert.*}"
    },
    {
      "lineno": 6,
      "line": "import opds_cj.config.baseConfig"
    },
    {
      "lineno": 7,
      "line": "import opds_cj.router.PathMap"
    },
    {
      "lineno": 8,
      "line": "import opds_cj.data_stru.*"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "package opds_cj.path.opds.v2.series",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 8,
          "label": "import net.http.*\nimport encoding.json.stream.*\nimport std.{io.ByteBuffer, io.readToEnd, collection.*, convert.*}\nimport opds_cj.config.baseConfig\nimport opds_cj.router.PathMap\nimport opds_cj.data_stru.*",
          "successors": []
        }
      ]
    }
  ]
}