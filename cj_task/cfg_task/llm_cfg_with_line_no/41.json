{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 4,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "unsafe main() {"
        },
        {
          "lineno": 5,
          "line": "    let instance = GetModuleHandleA(EMPTY_STRING)"
        },
        {
          "lineno": 6,
          "line": "    // 注册窗口类"
        },
        {
          "lineno": 7,
          "line": "    let className = LibC.mallocCString('Cangjie Window')"
        },
        {
          "lineno": 8,
          "line": "    var windowClass = WNDCLASSEX(lpszClassName: className,"
        },
        {
          "lineno": 9,
          "line": "        hInstance: instance,"
        },
        {
          "lineno": 10,
          "line": "        lpfnWndProc: onMessage,"
        },
        {
          "lineno": 11,
          "line": "        hbrBackground: CreateSolidBrush(0x0095D6C0) // 中国传统色 欧碧"
        },
        {
          "lineno": 12,
          "line": "    )"
        },
        {
          "lineno": 13,
          "line": "    if (RegisterClassExA(inout windowClass) == 0) {"
        },
        {
          "lineno": 14,
          "line": "        println('RegisterClass Failed: ${GetLastError()}')"
        },
        {
          "lineno": 15,
          "line": "        return"
        },
        {
          "lineno": 16,
          "line": "    }"
        },
        {
          "lineno": 17,
          "line": "    // 创建窗口实例"
        },
        {
          "lineno": 18,
          "line": "    let windowName = LibC.mallocCString('Cangjie')"
        },
        {
          "lineno": 19,
          "line": "    let window = CreateWindowExA("
        },
        {
          "lineno": 20,
          "line": "        0,                                   // 扩展样式"
        },
        {
          "lineno": 21,
          "line": "        className,                           // 窗口类名"
        },
        {
          "lineno": 22,
          "line": "        windowName,                          // 窗口标题"
        },
        {
          "lineno": 23,
          "line": "        WS_OVERLAPPEDWINDOW,                 // 窗口风格"
        },
        {
          "lineno": 24,
          "line": "        CW_USEDEFAULT, CW_USEDEFAULT,        // 窗口位置"
        },
        {
          "lineno": 25,
          "line": "        640, 480,                            // 窗口大小"
        },
        {
          "lineno": 26,
          "line": "        NULL,                                // 父窗口句柄"
        },
        {
          "lineno": 27,
          "line": "        NULL,                                // 菜单句柄"
        },
        {
          "lineno": 28,
          "line": "        instance,                            // 实例句柄"
        },
        {
          "lineno": 29,
          "line": "        NULL                                 // 附加参数"
        },
        {
          "lineno": 30,
          "line": "    )"
        },
        {
          "lineno": 31,
          "line": "    if (window.isNull()) {"
        },
        {
          "lineno": 32,
          "line": "        println('CreateWindow Failed: ${GetLastError()}')"
        },
        {
          "lineno": 33,
          "line": "        return"
        },
        {
          "lineno": 34,
          "line": "    }"
        },
        {
          "lineno": 35,
          "line": "    // 显示窗口"
        },
        {
          "lineno": 36,
          "line": "    ShowWindow(window, SW_SHOWNORMAL)"
        },
        {
          "lineno": 37,
          "line": "    UpdateWindow(window)"
        },
        {
          "lineno": 38,
          "line": "    // 启动消息循环"
        },
        {
          "lineno": 39,
          "line": "    var message = MSG()"
        },
        {
          "lineno": 40,
          "line": "    while (GetMessageA(inout message, NULL, 0, 0)) {"
        },
        {
          "lineno": 41,
          "line": "        TranslateMessage(inout message)"
        },
        {
          "lineno": 42,
          "line": "        DispatchMessageA(inout message)"
        },
        {
          "lineno": 43,
          "line": "    }"
        },
        {
          "lineno": 44,
          "line": "    // 退出消息循环"
        },
        {
          "lineno": 45,
          "line": "    println('Out of Message Loop')"
        },
        {
          "lineno": 46,
          "line": "    LibC.free(className)"
        },
        {
          "lineno": 47,
          "line": "    LibC.free(windowName)"
        },
        {
          "lineno": 48,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 12,
          "label": "unsafe main() {\n    let instance = GetModuleHandleA(EMPTY_STRING)\n    // \\\\u6ce8\\u518c\\u7a97\\u53e3\\u7c7b\n    let className = LibC.mallocCString('Cangjie Window')\n    var windowClass = WNDCLASSEX(lpszClassName: className,\n        hInstance: instance,\n        lpfnWndProc: onMessage,\n        hbrBackground: CreateSolidBrush(0x0095D6C0) // \\\\u4e2d\\u56fd\\u4f20\\u7edf\\u8272 \\\\u6b27\\u78a7\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 16,
              "label": "if (RegisterClassExA(inout windowClass) == 0) {\n        println('RegisterClass Failed: ${GetLastError()}')\n        return\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 18,
                  "end_line": 30,
                  "label": "let windowName = LibC.mallocCString('Cangjie')\n    let window = CreateWindowExA(\n        0,                                   // \\\\u6269\\u5c55\\u6837\\u5f0f\n        className,                           // \\\\u7a97\\u53e3\\u7c7b\\u540d\n        windowName,                          // \\\\u7a97\\u53e3\\u6807\\u9898\n        WS_OVERLAPPEDWINDOW,                 // \\\\u7a97\\u53e3\\u98ce\\u683c\n        CW_USEDEFAULT, CW_USEDEFAULT,        // \\\\u7a97\\u53e3\\u4f4d\\u7f6e\n        640, 480,                            // \\\\u7a97\\u53e3\\u5927\\u5c0f\n        NULL,                                // \\\\u7236\\u7a97\\u53e3\\u53e5\\u67c4\n        NULL,                                // \\\\u83dc\\u5355\\u53e5\\u67c4\n        instance,                            // \\\\u5b9e\\u4f8b\\u53e5\\u67c4\n        NULL                                 // \\\\u9644\\u52a0\\u53c2\\u6570\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 31,
                      "end_line": 34,
                      "label": "if (window.isNull()) {\n        println('CreateWindow Failed: ${GetLastError()}')\n        return\n    }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 36,
                          "end_line": 37,
                          "label": "ShowWindow(window, SW_SHOWNORMAL)\n    UpdateWindow(window)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 39,
                              "end_line": 43,
                              "label": "var message = MSG()\n    while (GetMessageA(inout message, NULL, 0, 0)) {\n        TranslateMessage(inout message)\n        DispatchMessageA(inout message)\n    }",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 45,
                                  "end_line": 48,
                                  "label": "println('Out of Message Loop')\n    LibC.free(className)\n    LibC.free(windowName)\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "onMessage",
      "type": "function",
      "start_line": 52,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 52,
          "line": "func onMessage(hWnd: Handle, msg: UInt32, wParam: UIntNative, lParam: UIntNative): Int64 {"
        },
        {
          "lineno": 53,
          "line": "    var result = 0"
        },
        {
          "lineno": 54,
          "line": "    const VK_ESCAPE: UInt16 = 0x1B"
        },
        {
          "lineno": 55,
          "line": "    if (msg == WM_KEYDOWN && wParam == UIntNative(VK_ESCAPE)) {"
        },
        {
          "lineno": 56,
          "line": "        unsafe { DestroyWindow(hWnd) }"
        },
        {
          "lineno": 57,
          "line": "    } else if (msg == WM_DESTROY) {"
        },
        {
          "lineno": 58,
          "line": "        unsafe { PostQuitMessage(0) }"
        },
        {
          "lineno": 59,
          "line": "    }"
        },
        {
          "lineno": 60,
          "line": "    result = unsafe { DefWindowProcA(hWnd, msg, wParam, lParam) }"
        },
        {
          "lineno": 61,
          "line": "    return result"
        },
        {
          "lineno": 62,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 52,
          "end_line": 54,
          "label": "func onMessage(hWnd: Handle, msg: UInt32, wParam: UIntNative, lParam: UIntNative): Int64 {\n    var result = 0\n    const VK_ESCAPE: UInt16 = 0x1B",
          "successors": [
            {
              "id": 2,
              "start_line": 55,
              "end_line": 56,
              "label": "if (msg == WM_KEYDOWN && wParam == UIntNative(VK_ESCAPE)) {\n        unsafe { DestroyWindow(hWnd) }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 57,
                  "end_line": 58,
                  "label": "} else if (msg == WM_DESTROY) {\n        unsafe { PostQuitMessage(0) }",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 60,
                      "end_line": 61,
                      "label": "result = unsafe { DefWindowProcA(hWnd, msg, wParam, lParam) }\n    return result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 测试 Windows API"
    },
    {
      "lineno": 2,
      "line": "// 仓颉语言团队 刘俊杰 2024.11.04"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": "@C"
    },
    {
      "lineno": 51,
      "line": "@CallingConv[STDCALL]"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "// 测试 Windows API\n// 仓颉语言团队 刘俊杰 2024.11.04\n",
      "successors": [
        {
          "id": 2,
          "start_line": 49,
          "end_line": 51,
          "label": "@C\n@CallingConv[STDCALL]\n",
          "successors": []
        }
      ]
    }
  ]
}