{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 18,
  "functions": [
    {
      "name": "findInterface",
      "type": "function",
      "start_line": 6,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "func findInterface(name: String, decl: StructDecl): Bool {"
        },
        {
          "lineno": 7,
          "line": "    for (sp in decl.superTypes) {"
        },
        {
          "lineno": 8,
          "line": "        match (sp) {"
        },
        {
          "lineno": 9,
          "line": "            case rt: RefType => if (rt.identifier.value == name) {"
        },
        {
          "lineno": 10,
          "line": "                return true"
        },
        {
          "lineno": 11,
          "line": "            } else {"
        },
        {
          "lineno": 12,
          "line": "                continue"
        },
        {
          "lineno": 13,
          "line": "            }"
        },
        {
          "lineno": 14,
          "line": "            case _ => continue"
        },
        {
          "lineno": 15,
          "line": "        }"
        },
        {
          "lineno": 16,
          "line": "    }"
        },
        {
          "lineno": 17,
          "line": "    return false"
        },
        {
          "lineno": 18,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 7,
          "label": "func findInterface(name: String, decl: StructDecl): Bool {\n    for (sp in decl.superTypes) {",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 10,
              "label": "match (sp) {\n    case rt: RefType => if (rt.identifier.value == name) {\n        return true",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 12,
                  "label": "} else {\n    continue",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "case _ => continue",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 15,
                          "end_line": 16,
                          "label": "}\n}",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 17,
                              "end_line": 17,
                              "label": "return false",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package Macro_JsonSerializable.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "// 工具方法，查找结构体是否需要实现某个接口"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "macro package Macro_JsonSerializable.macros",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 2,
      "end_line": 2,
      "label": "",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 3,
      "end_line": 3,
      "label": "import std.ast.*",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 4,
      "end_line": 4,
      "label": "",
      "successors": []
    },
    {
      "id": 5,
      "start_line": 5,
      "end_line": 5,
      "label": "// 工具方法，查找结构体是否需要实现某个接口",
      "successors": []
    }
  ]
}