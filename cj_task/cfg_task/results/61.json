{
  "edge_analysis": {
    "static_total": 2,
    "llm_total": 4,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] public init(authStr:Option<String>) { ... => [Target] case Some(x) => auth = x.trimStart(\"Basic \")",
      "Edge 1: [Source] public init(authStr:Option<String>) { ... => [Target] case None => return\n        }\n        let decode = String.fromUtf8(fromBase64String(auth).getOrThrow()).split(\":\")\n        this.email = decode[0]\n        this.password = decode[1]\n        this.id = getID(this.email)\n    }"
    ],
    "extra_blocks": [
      "Edge 0: [Source] package opds_cj.data_stru\\n\\nimport encoding.base64.* => [Target] import opds_cj.sqlite.*\\nimport opds_cj.config.baseConfig",
      "Edge 1: [Source] public init(authStr:Option<String>){\\n var auth:String=\"\"\\nmatch(authStr){\\n case Some(x) => auth = x.trimStart(\"Basic \")\\n case None => return => [Target] }\\nlet decode = String.fromUtf8(fromBase64String(auth).getOrThrow()).split(\":\")\\nthis.email = decode[0]\\nthis.password = decode[1]\\nthis.id = getID(this.email)",
      "Edge 2: [Source] func getID(email:String):String{\\n var sql = \"SELECT ID FROM USER WHERE EMAIL='${email}';\"\\n var ppDb: CPointer<CPointer<Unit>> = sqlOpen(baseConfig.database)\\n var ppStmt = sqlPrepare(ppDb, sql)\\n var id = \"\" => [Target] while (sqlStep(ppStmt) != SQLITE_DONE) {\\n id = sqlColumnText(ppStmt, 0)\\n }",
      "Edge 3: [Source] while (sqlStep(ppStmt) != SQLITE_DONE) {\\n id = sqlColumnText(ppStmt, 0)\\n } => [Target] sqlFinalize(ppStmt)\\n sqlClose(ppDb)\\n return id"
    ]
  }
}