{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 10,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] public func GetSymbolShapeHintNum(result: SymbolShapeHint): Int64 {\\n match (result) { => [Target] case FORCE_NONE => return 0;",
      "Edge 1: [Source] public func GetSymbolShapeHintNum(result: SymbolShapeHint): Int64 {\\n match (result) { => [Target] case FORCE_SQUARE => return 1;",
      "Edge 2: [Source] public func GetSymbolShapeHintNum(result: SymbolShapeHint): Int64 {\\n match (result) { => [Target] case FORCE_RECTANGLE => return 2;",
      "Edge 3: [Source] public operator func ==(right: SymbolShapeHint): Bool {\\n if (GetSymbolShapeHintNum(right) == GetSymbolShapeHintNum(this)) { => [Target] true;",
      "Edge 4: [Source] public operator func ==(right: SymbolShapeHint): Bool {\\n if (GetSymbolShapeHintNum(right) == GetSymbolShapeHintNum(this)) { => [Target] } else {\\n false;",
      "Edge 5: [Source] public operator func !=(right: SymbolShapeHint): Bool {\\n if (GetSymbolShapeHintNum(right) != GetSymbolShapeHintNum(this)) { => [Target] true;",
      "Edge 6: [Source] public operator func !=(right: SymbolShapeHint): Bool {\\n if (GetSymbolShapeHintNum(right) != GetSymbolShapeHintNum(this)) { => [Target] false;",
      "Edge 7: [Source] public func toString() {\\n match (this) { => [Target] case FORCE_NONE => \"FORCE_NONE\"",
      "Edge 8: [Source] public func toString() {\\n match (this) { => [Target] case FORCE_SQUARE => \"FORCE_SQUARE\"",
      "Edge 9: [Source] public func toString() {\\n match (this) { => [Target] case FORCE_RECTANGLE => \"FORCE_RECTANGLE\""
    ]
  }
}