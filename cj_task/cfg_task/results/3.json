{
  "edge_analysis": {
    "static_total": 32,
    "llm_total": 29,
    "matched_edges": {
      "exact_matches": 27,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.9310344827586207,
      "recall": 0.84375,
      "f1_score": 0.8857142857142857
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => if (let Some((expr, next)) <- safeParseExprFragment(t, start)) {\n            let exprTokens = expr.toTokens()\n            if (exprTokens.size > 1) {\n                return (quote(castJsonValue($(expr))), next)\n            }\n            let first = exprTokens[0]\n            match (first.kind) {",
      "Edge 13: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ObjectValue => i++\n                    state = JsonState.ObjectComma\n                    continue",
      "Edge 19: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.RSQUARE => match (state) {",
      "Edge 20: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ArrayStart => return (quote(JsonArray()), i + 1)",
      "Edge 21: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ArrayValue | JsonState.ArrayComma => tokens.append(quote(\n                            return $(ident);\n                        ))\n                    return (wrap(tokens), i + 1)",
      "Edge 22: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RSQUARE in parseArray\",\n                        \"Unexpected state\")\n                    throw Exception(\"Unexpected state for RSQUARE in parseArray\")\n            }",
      "Edge 26: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => match (state) {"
    ],
    "extra_blocks": [
      "Edge 0: [Source] package json_cj.impl\\nimport std.ast.*\\nimport std.collection.ArrayList\\nimport json_cj.helper.* => [Target] enum JsonState {\\n | Initial\\n | ObjectStart\\n | ObjectKey\\n | ObjectColon\\n | ObjectValue\\n | ObjectComma\\n | ArrayStart\\n | ArrayValue\\n | ArrayComma\\n | PartEnd\\n | End\\n}",
      "Edge 1: [Source] func safeParseExprFragment(t: Tokens, start: Int64): Option<(Expr, Int64)> { => [Target] try {\\n let (expr, next) = parseExprFragment(t, startFrom: start)\\n return Some((expr, next))",
      "Edge 2: [Source] func safeParseExprFragment(t: Tokens, start: Int64): Option<(Expr, Int64)> { => [Target] catch (e: ParseASTException) {\\n return None",
      "Edge 7: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) {\\nlet ident = getIdent(\"jsonCjObject\")\\n let tokens = quote(\\n let $(ident) = JsonObject();\\n )\\n var i = start\\n var state = JsonState.ObjectStart => [Target] while (i < t.size) {",
      "Edge 8: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) {\\nlet ident = getIdent(\"jsonCjObject\")\\n let tokens = quote(\\n let $(ident) = JsonObject();\\n )\\n var i = start\\n var state = JsonState.ObjectStart => [Target] diagReport(DiagReportLevel.ERROR, t, \"No closing curly bracket\", \"No closing curly bracket\")\\n throw Exception(\"No closing curly bracket\")",
      "Edge 18: [Source] case TokenKind.COMMA => match (state) {\\n case JsonState.ObjectValue =>\\n i++\\n state = JsonState.ObjectComma\\n continue => [Target] while (i < t.size) {",
      "Edge 19: [Source] case TokenKind.STRING_LITERAL => match (state) {\\n case JsonState.ObjectStart | JsonState.ObjectComma =>\\n let key = cur.value\\n i++\\n if (t[i].kind != TokenKind.COLON) {\\n diagReport(DiagReportLevel.ERROR, t, \"No colon in object\", \"No colon\")\\n throw Exception(\"No colon in object\")\\n }\\n i++\\n let (value, next) = parseValue(t, i)\\n i = next\\n state = JsonState.ObjectValue\\n tokens.append(quote(\\n $(ident).put($(key), $(value));\\n ))\\n continue => [Target] while (i < t.size) {",
      "Edge 22: [Source] protected func jsonTransform(input: Tokens): Tokens {\\n let t = Tokens()\\n \\n for (ti in input) {\\nif (let TokenKind.NL <- ti.kind) {\\n continue => [Target] }\\n t.append(ti)\\n }",
      "Edge 23: [Source] }\\n t.append(ti)\\n } => [Target] let ret = Tokens()\\nif (t.size == 0) {\\n return quote(())",
      "Edge 24: [Source] let ret = Tokens()\\nif (t.size == 0) {\\n return quote(()) => [Target] }\\n\\n let cur = t[0]\\n let cv = cur.value\\n match (cur.kind) {"
    ]
  }
}