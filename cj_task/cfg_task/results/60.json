{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 10,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] public func distribute(path: String): HttpRequestHandler {\\n if (routerMap.contains(path)) { => [Target] return routerMap[path]\\n }",
      "Edge 1: [Source] return routerMap[path]\\n } => [Target] for ((routerPath, handler) in routerMap) {",
      "Edge 2: [Source] for ((routerPath, handler) in routerMap) { => [Target] var fail = false\\n var partPath = path.trimEnd(\"/\").split(\"/\")\\n var partRouterPath = routerPath.trimEnd(\"/\").split(\"/\")\\n if (partPath.size != partRouterPath.size) {",
      "Edge 3: [Source] var fail = false\\n var partPath = path.trimEnd(\"/\").split(\"/\")\\n var partRouterPath = routerPath.trimEnd(\"/\").split(\"/\")\\n if (partPath.size != partRouterPath.size) { => [Target] continue\\n }",
      "Edge 4: [Source] continue\\n } => [Target] for (i in 0..partPath.size) {",
      "Edge 5: [Source] for (i in 0..partPath.size) { => [Target] if (partRouterPath[i].startsWith(\":\")) {\\n continue\\n }",
      "Edge 6: [Source] if (partRouterPath[i].startsWith(\":\")) {\\n continue\\n } => [Target] if (partPath[i] != partRouterPath[i]) {\\n fail = true\\n break\\n }",
      "Edge 7: [Source] if (partPath[i] != partRouterPath[i]) {\\n fail = true\\n break\\n } => [Target] }\\n if (!fail) {\\n return handler\\n }",
      "Edge 8: [Source] }\\n if (!fail) {\\n return handler\\n } => [Target] }\\n return NotFoundHandler()",
      "Edge 9: [Source] public func add(path: String, handler: (HttpContext) -> Unit): Unit {\\n this.paths.put(path, handler) => [Target] }"
    ]
  }
}