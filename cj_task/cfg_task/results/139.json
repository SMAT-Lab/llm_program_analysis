{
  "edge_analysis": {
    "static_total": 8,
    "llm_total": 15,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 8
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "public func sendRequest(id: String, request: Request): Unit { ... => [Target] case Some(v) => doSomeThingRequestBody(v,id)",
      "public func sendRequest(id: String, request: Request): Unit { ... => [Target] case _ => ()\n        }\n        let headers = request.getHeaders()\n        for(header in headers){\n            let name: String = header[0]\n            let nameUpper = name.toAsciiUpper();\n            let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();\n            let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();\n            if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {\n                continue\n            }\n            let arrayList: ArrayList<String> = header[1]\n            if(arrayList.size>0){\n                if(arrayList.size == 1){\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());\n                }else{\n                    var strBuilder = StringBuilder();\n                    for(str in arrayList){\n                        strBuilder.append(str).append(\",\")\n                    }\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());\n                }\n            }\n        }\n    }",
      "public func sendResponse(id: String, response: Response): Unit { ... => [Target] case Some(v) => doSomeThingResponseBody(v,id)",
      "public func sendResponse(id: String, response: Response): Unit { ... => [Target] case _ => ()\n        }\n        logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\n        let headers = response.getHeaders()\n        for(header in headers){\n                let name: String = header[0]\n                let arrayList : ArrayList<String> = header[1]\n                if(arrayList.size > 0){\n                    if(arrayList.size == 1){\n                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);\n                    }else{\n                        var strBuilder = StringBuilder();\n                        for(str in arrayList){\n                            strBuilder.append(str).append(\",\")\n                        }\n                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);\n                    }\n                }\n            }\n    }",
      "private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case Some(m) => \"${m}\"",
      "private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case None => \"\"\n         }\n         let contentLength = body.getContentLength()\n         if (contentLength != -1) {\n                fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());\n         }\n        fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)\n         let inputStream = body.get()\n         let bas = inputStream as ByteArrayStream\n         match(bas){",
      "private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case Some(v) => doSomeThingRequestBodyLog(v,id)",
      "private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case _ => ()\n         }\n    }"
    ],
    "extra_blocks": [
      "public func sendRequest(id: String, request: Request): Unit {\\n fastLog(id, MessageType.REQUEST_METHOD(\"RQM\"), request.getMethod());\\n let url = request.getUrl().toString();\\n fastLog(id, MessageType.REQUEST_URL(\"RQU\"),url);\\n let nowSjc = Time.now().unixNano()\\n fastLog(id, MessageType.REQUEST_TIME(\"RQT\"), Time.now().toString());\\n let copy = request.newBuilder().build();\\n match(copy.getBody()){\\n case Some(v) => doSomeThingRequestBody(v,id)\\n case _ => ()\\n } => [Target] let headers = request.getHeaders()\\n for(header in headers){\\n let name: String = header[0]\\n let nameUpper = name.toAsciiUpper();\\n let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();\\n let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();\\n if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {\\n continue\\n }\\n let arrayList: ArrayList<String> = header[1]\\n if(arrayList.size>0){\\n if(arrayList.size == 1){\\n fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());\\n }else{\\n var strBuilder = StringBuilder();\\n for(str in arrayList){\\n strBuilder.append(str).append(\",\")\\n }\\n fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());\\n }\\n }\\n }",
      "public func sendResponse(id: String, response: Response): Unit {\\nlet optionBody: Option<ResponseBody> = response.getBody() => [Target] match(optionBody){\\n case Some(v) => doSomeThingResponseBody(v,id)\\n case _ => ()",
      "public func sendResponse(id: String, response: Response): Unit {\\nlet optionBody: Option<ResponseBody> = response.getBody() => [Target] logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\\nlet headers = response.getHeaders()\\nfor(header in headers){",
      "logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\\nlet headers = response.getHeaders()\\nfor(header in headers){ => [Target] let name: String = header[0]\\nlet arrayList : ArrayList<String> = header[1]\\nif(arrayList.size > 0){",
      "let name: String = header[0]\\nlet arrayList : ArrayList<String> = header[1]\\nif(arrayList.size > 0){ => [Target] if(arrayList.size == 1){\\nlogWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);",
      "let name: String = header[0]\\nlet arrayList : ArrayList<String> = header[1}\\nif(arrayList.size > 0){ => [Target] else{\\nvar strBuilder = StringBuilder();\\nfor(str in arrayList){\\nstrBuilder.append(str).append(\",\")\\n}\\nlogWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);\\n}",
      "private func doSomeThingResponseBody(body : ResponseBody,id: String): Unit {\\n let source = body.getString() //Array<UInt8>\\n let sourceSize = source.size\\n var strResponse = \"\" => [Target] if(sourceSize<BODY_BUFFER_SIZE){\\n strResponse = source.substring(0,sourceSize)\\n largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);",
      "private func doSomeThingResponseBody(body : ResponseBody,id: String): Unit {\\n let source = body.getString() //Array<UInt8>\\n let sourceSize = source.size\\n var strResponse = \"\" => [Target] }else{\\n strResponse = source.substring(0,BODY_BUFFER_SIZE)\\n largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);",
      "private func doSomeThingRequestBody(body : RequestBody,id: String): Unit {\\n let mediaType = match(body.contentType()) {\\n case Some(m) => \"${m}\"\\n case None => \"\"\\n } => [Target] let contentLength = body.getContentLength()\\n if (contentLength != -1) {\\n fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());\\n }",
      "let contentLength = body.getContentLength()\\n if (contentLength != -1) {\\n fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());\\n } => [Target] fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)\\n let inputStream = body.get()\\n let bas = inputStream as ByteArrayStream",
      "fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)\\n let inputStream = body.get()\\n let bas = inputStream as ByteArrayStream => [Target] match(bas){\\n case Some(v) => doSomeThingRequestBodyLog(v,id)\\n case _ => ()\\n }\\n }",
      "private func largeLog(id: String, mType: MessageType, content: String): Unit {\\n let contentLength = content.size\\nif (contentLength > LOG_LENGTH) { => [Target] let parts = contentLength / LOG_LENGTH\\n for (i in 0..parts) {\\nlet start = i * LOG_LENGTH\\n var end = start + LOG_LENGTH\\n if (end > contentLength) {",
      "private func largeLog(id: String, mType: MessageType, content: String): Unit {\\n let contentLength = content.size\\nif (contentLength > LOG_LENGTH) { => [Target] } else {\\n logWithHandler(id, mType, content, 0);",
      "let parts = contentLength / LOG_LENGTH\\n for (i in 0..parts) {\\nlet start = i * LOG_LENGTH\\n var end = start + LOG_LENGTH\\n if (end > contentLength) { => [Target] let printLength = contentLength+LOG_LENGTH-end\\n logWithHandler(id, mType, content.substring(start, printLength), parts);\\n}else{\\n let printLength = LOG_LENGTH\\n logWithHandler(id, mType, content.substring(start, LOG_LENGTH), parts);",
      "let printLength = contentLength+LOG_LENGTH-end\\n logWithHandler(id, mType, content.substring(start, printLength), parts);\\n}else{\\n let printLength = LOG_LENGTH\\n logWithHandler(id, mType, content.substring(start, LOG_LENGTH), parts); => [Target] if (end > contentLength) {"
    ]
  }
}