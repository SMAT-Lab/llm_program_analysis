{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 4,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] main() {\\n let connectionString = \"root:12345678@tcp(10.200.1.164:3306)/admin-api\"\\n let opts = [\\n (\"cachePrepStmts\", \"true\")\\n ]\\n let drv = DriverManager.getDriver(\"mysql\") ?? return\\n let ds = drv.open(connectionString, opts)\\n let connection = ds.connect()\\nlet deleteTable = \"\"\"\\n drop table if exists `sys_dept`;\\n \"\"\"\\n let deleteTableStatement = connection.prepareStatement(deleteTable)\\n let deleteTableParams = ArrayList<SqlDbType>()\\n let deleteTableResult = deleteTableStatement.update(deleteTableParams.toArray())\\n println(\"delete table sys_dept if exists success\") => [Target] let createTable = \"\"\"\\n CREATE TABLE `sys_dept` (\\n `id` int NOT NULL AUTO_INCREMENT COMMENT '\\\\u4e3b\\u952e',\\n `parent_id` int NOT NULL COMMENT '\\\\u7236id',\\n `dept_type` int NOT NULL COMMENT '\\\\u90e8\\u95e8\\u7c7b\\u578b\\uff081->\\u516c\\u53f8, 2->\\u4e2d\\u5fc3\\uff0c3->\\u90e8\\u95e8\\uff09',\\n `dept_name` varchar(30) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT '\\\\u90e8\\u95e8\\u540d\\u79f0',\\n `dept_status` int NOT NULL DEFAULT '1' COMMENT '\\\\u90e8\\u95e8\\u72b6\\u6001\\uff081->\\u6b63\\u5e38 2->\\u505c\\u7528\\uff09',\\n PRIMARY KEY (`id`) USING BTREE,\\n UNIQUE KEY `dept_name` (`dept_name`) USING BTREE\\n ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin ROW_FORMAT=DYNAMIC COMMENT='\\u90e8\\u95e8\\u8868';\"\"\"\\n\\n let createTableStatement = connection.prepareStatement(createTable)\\n let createTableParams= ArrayList<SqlDbType>()\\n let createTableResult = createTableStatement.update(createTableParams.toArray())\\n println(\"create table sys_dept success\")\\nlet insertTableStatement = connection.prepareStatement(\"INSERT INTO sys_dept(parent_id, dept_type, dept_name, dept_status) VALUES(?,?,?,?);\")\\n var companyUpdateResult = insertTableStatement.update(SqlInteger(0), SqlInteger(1), SqlVarchar(\"cangjie company\"), SqlInteger(1))\\n var heNanUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"henan center\"), SqlInteger(1))\\n var zheJiangUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"zhejiang center\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development1\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development2\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development1\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development2\"), SqlInteger(1))\\n println(\"insert into table sys_dept, 7 rows\")",
      "Edge 1: [Source] let createTable = \"\"\"\\n CREATE TABLE `sys_dept` (\\n `id` int NOT NULL AUTO_INCREMENT COMMENT '\\\\u4e3b\\u952e',\\n `parent_id` int NOT NULL COMMENT '\\\\u7236id',\\n `dept_type` int NOT NULL COMMENT '\\\\u90e8\\u95e8\\u7c7b\\u578b\\uff081->\\u516c\\u53f8, 2->\\u4e2d\\u5fc3\\uff0c3->\\u90e8\\u95e8\\uff09',\\n `dept_name` varchar(30) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT '\\\\u90e8\\u95e8\\u540d\\u79f0',\\n `dept_status` int NOT NULL DEFAULT '1' COMMENT '\\\\u90e8\\u95e8\\u72b6\\u6001\\uff081->\\u6b63\\u5e38 2->\\u505c\\u7528\\uff09',\\n PRIMARY KEY (`id`) USING BTREE,\\n UNIQUE KEY `dept_name` (`dept_name`) USING BTREE\\n ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin ROW_FORMAT=DYNAMIC COMMENT='\\u90e8\\u95e8\\u8868';\"\"\"\\n\\n let createTableStatement = connection.prepareStatement(createTable)\\n let createTableParams= ArrayList<SqlDbType>()\\n let createTableResult = createTableStatement.update(createTableParams.toArray())\\n println(\"create table sys_dept success\")\\nlet insertTableStatement = connection.prepareStatement(\"INSERT INTO sys_dept(parent_id, dept_type, dept_name, dept_status) VALUES(?,?,?,?);\")\\n var companyUpdateResult = insertTableStatement.update(SqlInteger(0), SqlInteger(1), SqlVarchar(\"cangjie company\"), SqlInteger(1))\\n var heNanUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"henan center\"), SqlInteger(1))\\n var zheJiangUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"zhejiang center\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development1\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development2\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development1\"), SqlInteger(1))\\n insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development2\"), SqlInteger(1))\\n println(\"insert into table sys_dept, 7 rows\") => [Target] let id = SqlInteger(0)\\n let parentId = SqlInteger(0)\\n let deptType = SqlInteger(0)\\n let deptName = SqlVarchar(\"\")\\n let deptStatus = SqlInteger(0)\\n\\n let statement = connection.prepareStatement(\"select * from `sys_dept`;\")\\n let param = ArrayList<SqlDbType>()\\n let queryResult = statement.query(param.toArray())\\n var tempIndex = 1\\n println(\"query sys_dept all data\")\\n while(queryResult.next(id, parentId, deptType, deptName, deptStatus)) {\\nprintln(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + \\n \"deptType = ${deptType.value}, deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\"\\n )\\n tempIndex ++",
      "Edge 2: [Source] let id = SqlInteger(0)\\n let parentId = SqlInteger(0)\\n let deptType = SqlInteger(0)\\n let deptName = SqlVarchar(\"\")\\n let deptStatus = SqlInteger(0)\\n\\n let statement = connection.prepareStatement(\"select * from `sys_dept`;\")\\n let param = ArrayList<SqlDbType>()\\n let queryResult = statement.query(param.toArray())\\n var tempIndex = 1\\n println(\"query sys_dept all data\")\\n while(queryResult.next(id, parentId, deptType, deptName, deptStatus)) {\\nprintln(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + \\n \"deptType = ${deptType.value}, deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\"\\n )\\n tempIndex ++ => [Target] }\\ntempIndex = 1\\n println(\"query sys_dept where dept_type = 2\")\\n let statement2 = connection.prepareStatement(\"select * from sys_dept where dept_type = ?;\")\\n param.append(SqlBigInt(2))\\n let queryResult2 = statement2.query(param.toArray())\\n while(queryResult2.next(id, parentId, deptType, deptName, deptStatus)) {\\n println(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + \\n \"deptType = ${deptType.value}, deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\"\\n )\\n tempIndex ++",
      "Edge 3: [Source] }\\ntempIndex = 1\\n println(\"query sys_dept where dept_type = 2\")\\n let statement2 = connection.prepareStatement(\"select * from sys_dept where dept_type = ?;\")\\n param.append(SqlBigInt(2))\\n let queryResult2 = statement2.query(param.toArray())\\n while(queryResult2.next(id, parentId, deptType, deptName, deptStatus)) {\\n println(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + \\n \"deptType = ${deptType.value}, deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\"\\n )\\n tempIndex ++ => [Target] }\\n}"
    ]
  }
}