{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 5,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] public class RawIO {\\n public let shortBuff = Array<Byte>(2, repeat: 0)\\n public let intBuff = Array<Byte>(4, repeat: 0)\\n public let longBuff = Array<Byte>(8, repeat: 0)\\n@OverflowWrapping => [Target] @OverflowWrapping\\n@OverflowWrapping",
      "Edge 1: [Source] @OverflowWrapping\\n@OverflowWrapping => [Target] }",
      "Edge 2: [Source] public func readLongLittleEndian(array: Array<Byte>, pos: Int64) {\\n if (array.size - pos < 8) {\\n resetBytes(longBuff)\\n } => [Target] ArrayCopy(array, pos, longBuff, 0, min(array.size - pos, 8))\\n var temp = 0\\n temp |= Int64(longBuff[7] & 0xff)\\n temp <<= 8\\n temp |= Int64(longBuff[6] & 0xff)\\n temp <<= 8\\n temp |= Int64(longBuff[5] & 0xff)\\n temp <<= 8\\n temp |= Int64(longBuff[4] & 0xff)\\n temp <<= 8\\n temp |= Int64(longBuff[3] & 0xff)\\n temp <<= 8\\n temp |= Int64(longBuff[2] & 0xff)\\n temp <<= 8\\n temp |= Int64(longBuff[1] & 0xff)\\n temp <<= 8\\n temp |= Int64(longBuff[0] & 0xff)\\n return temp",
      "Edge 3: [Source] public func readIntLittleEndian(b: Array<Byte>): Int32 {\\n return readIntLittleEndian(b, 0) => [Target] }",
      "Edge 4: [Source] private func readFully(inputStream: InputStream, buff: Array<Byte>, readLen: Int64): Unit {\\n var actualReadLength = Zip4cjUtil.readFully(inputStream, buff, 0, readLen)\\nif (actualReadLength != readLen) {\\n throw ZipException(\"Could not fill buffer\")\\n} => [Target] }"
    ]
  }
}