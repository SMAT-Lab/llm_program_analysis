{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 16,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "func split_ascii_normal(text: String, sep: String): ArrayList<String> {\\n let indices = ArrayList<Int64>()\\n var last = true => [Target] for (i in 0..text.size) {",
      "for (i in 0..text.size) { => [Target] let current = sep.indexOf(text[i]).isSome()\\nif (last != current) {\\nindices.append(i)\\n}",
      "let current = sep.indexOf(text[i]).isSome()\\nif (last != current) {\\nindices.append(i)\\n} => [Target] last = current",
      "last = current => [Target] for (i in 0..text.size) {",
      "last = current => [Target] if (!last) { indices.append(text.size) }\\nlet result = ArrayList<String>()",
      "if (!last) { indices.append(text.size) }\\nlet result = ArrayList<String>() => [Target] for (i in 0..indices.size:2) {",
      "for (i in 0..indices.size:2) { => [Target] result.append(text[indices[i]..indices[i + 1]])",
      "result.append(text[indices[i]..indices[i + 1]]) => [Target] for (i in 0..indices.size:2) {",
      "result.append(text[indices[i]..indices[i + 1]]) => [Target] return result",
      "func split_ascii(text: String, sep: String): ArrayList<String> {\\n let indices = ArrayList<Int64>()\\ntext |> enumerate |> fold(false) { state, e =>\\n let current = sep.indexOf(e[1]).isNone() => [Target] if (state != current) { indices.append(e[0]) }\\n current\\n} |> { valid: Bool => if (valid) {\\n indices.append(text.size)\\n }}",
      "if (state != current) { indices.append(e[0]) }\\n current\\n} |> { valid: Bool => if (valid) {\\n indices.append(text.size)\\n }} => [Target] let result = ArrayList<String>()",
      "let result = ArrayList<String>() => [Target] for (i in 0..indices.size:2) {\\n result.append(text[indices[i]..indices[i + 1]])\\n }",
      "for (i in 0..indices.size:2) {\\n result.append(text[indices[i]..indices[i + 1]])\\n } => [Target] return result\\n}",
      "func split_unicode(text: String, sep: String) {\\n let indices = ArrayList<Int64>()\\ntext.runes() |> enumerate |> fold(false) { state, e =>\\n let current = !sep.contains(e[1].toString())\\n if (state != current) { indices.append(e[0]) }\\n current\\n} => [Target] |> { valid: Bool => if (valid) { indices.append(text.size) } }\\nlet runes = text.toRuneArray()\\nlet result = ArrayList<String>()",
      "let result = ArrayList<String>() => [Target] for (i in 0..indices.size:2) {\\n result.append(String(runes[indices[i]..indices[i + 1]]))\\n}",
      "for (i in 0..indices.size:2) {\\n result.append(String(runes[indices[i]..indices[i + 1]]))\\n} => [Target] return result\\n}"
    ]
  }
}