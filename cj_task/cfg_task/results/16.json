{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 8,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] macro package Macro_JsonSerializable.macros\\n => [Target] import std.ast.*\\nimport std.collection.*\\n\\n// \u7ed3\u6784\u4f53\u547d\u540d\u6784\u9020\u51fd\u6570\u751f\u6210\u5668",
      "Edge 1: [Source] class StructInitFunctionGenerator <: Generator {\\n => [Target] }",
      "Edge 2: [Source] public func generate(context: Context): Unit {\\n var tokens = context.attrs\\n if (tokens.size == 0) { => [Target] tokens = Token(TokenKind.PRIVATE, \"private\").toTokens()\\n let illegal = match (tokens[0].kind) {\\n case TokenKind.PUBLIC => false\\n case TokenKind.PRIVATE => false\\n case TokenKind.PROTECTED => false\\n case TokenKind.INTERNAL => false\\n case _ => true\\n }",
      "Edge 3: [Source] public func generate(context: Context): Unit {\\n var tokens = context.attrs\\n if (tokens.size == 0) { => [Target] } else if (tokens.size > 1) {\\n diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u591a\u4e2a\u5173\u952e\u5b57\")\\n throw Exception(\"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\")\\n }\\n let illegal = match (tokens[0].kind) {\\n case TokenKind.PUBLIC => false\\n case TokenKind.PRIVATE => false\\n case TokenKind.PROTECTED => false\\n case TokenKind.INTERNAL => false\\n case _ => true\\n }",
      "Edge 4: [Source] tokens = Token(TokenKind.PRIVATE, \"private\").toTokens()\\n let illegal = match (tokens[0].kind) {\\n case TokenKind.PUBLIC => false\\n case TokenKind.PRIVATE => false\\n case TokenKind.PROTECTED => false\\n case TokenKind.INTERNAL => false\\n case _ => true\\n } => [Target] if (illegal) {\\n diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")\\n return\\n }",
      "Edge 5: [Source] if (illegal) {\\n diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")\\n return\\n } => [Target] let params = ArrayList<FuncParam>()\\n let body = quote()\\n for (reval in context.valDecls) {\\n if (reval.assign.kind == TokenKind.ASSIGN) {\\n continue\\n }\\n params.append(FuncParam(quote(\\n $(reval.identifier)!: $(reval.declType)\\n )))\\n body.append(quote(\\n this.$(reval.identifier) = $(reval.identifier)\\n ))\\n }\\n let funcDecl = FuncDecl(quote(\\n $(tokens) init() {\\n $(body)\\n }\\n ))\\n funcDecl.funcParams = params\\n context.structDecl.body.decls.append(funcDecl)",
      "Edge 6: [Source] } else if (tokens.size > 1) {\\n diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u591a\u4e2a\u5173\u952e\u5b57\")\\n throw Exception(\"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\")\\n }\\n let illegal = match (tokens[0].kind) {\\n case TokenKind.PUBLIC => false\\n case TokenKind.PRIVATE => false\\n case TokenKind.PROTECTED => false\\n case TokenKind.INTERNAL => false\\n case _ => true\\n } => [Target] if (illegal) {\\n diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")\\n return\\n }",
      "Edge 7: [Source] if (illegal) {\\n diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")\\n return\\n } => [Target] let params = ArrayList<FuncParam>()\\n let body = quote()\\n for (reval in context.valDecls) {\\n if (reval.assign.kind == TokenKind.ASSIGN) {\\n continue\\n }\\n params.append(FuncParam(quote(\\n $(reval.identifier)!: $(reval.declType)\\n )))\\n body.append(quote(\\n this.$(reval.identifier) = $(reval.identifier)\\n ))\\n }\\n let funcDecl = FuncDecl(quote(\\n $(tokens) init() {\\n $(body)\\n }\\n ))\\n funcDecl.funcParams = params\\n context.structDecl.body.decls.append(funcDecl)"
    ]
  }
}