{
  "edge_analysis": {
    "static_total": 2,
    "llm_total": 7,
    "matched_edges": {
      "exact_matches": 2,
      "partial_matches": 5
    },
    "accuracy_metrics": {
      "precision": 0.2857142857142857,
      "recall": 1.0,
      "f1_score": 0.4444444444444444
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] public func pathLoad(): PathMap {\\n var pathMap = PathMap(\\n \"/opds/v2/search\",\\n { => [Target] httpContext =>\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n var query = \"\"\\n match (httpContext.request.url.query) {",
      "Edge 1: [Source] httpContext =>\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n var query = \"\"\\n match (httpContext.request.url.query) { => [Target] case Some(x) => query = x.trimStart(\"query=\")\\n var cataLog = Search(query, host: host)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(cataLog.toJson())",
      "Edge 2: [Source] httpContext =>\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n var query = \"\"\\n match (httpContext.request.url.query) { => [Target] case None => ()\\n }\\n var cataLog = Search(query, host: host)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(cataLog.toJson())",
      "Edge 3: [Source] case Some(x) => query = x.trimStart(\"query=\")\\n var cataLog = Search(query, host: host)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(cataLog.toJson()) => [Target] }\\n return pathMap\\n}",
      "Edge 4: [Source] case None => ()\\n }\\n var cataLog = Search(query, host: host)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(cataLog.toJson()) => [Target] }\\n return pathMap\\n}",
      "Edge 5: [Source] func initSeries(query: String, host!: String = \"127.0.0.1\") {\\n var group = Group()\\n group.metadata = Metadata(\"Series\")\\n var obj = BookSeries.query(query) => [Target] for (i in obj) {\\n group\\n .navigation\\n .append(\\n Link(title: i.name, href: \"http://${host}/opds/v2/series/${i.id}\", type_u: \"application/opds+json\"))\\n}",
      "Edge 6: [Source] for (i in obj) {\\n group\\n .navigation\\n .append(\\n Link(title: i.name, href: \"http://${host}/opds/v2/series/${i.id}\", type_u: \"application/opds+json\"))\\n} => [Target] this.groups.append(group)\\n}"
    ]
  }
}