{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 18,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] package glob\\n => [Target] import std.unittest.*\\nimport std.unittest.testmacro.*\\n",
      "Edge 1: [Source] import std.unittest.*\\nimport std.unittest.testmacro.*\\n => [Target] @Test",
      "Edge 2: [Source] class PatternTests {\\n @TestCase => [Target] @TestCase\\n @TestCase",
      "Edge 3: [Source] @TestCase\\n @TestCase => [Target] @TestCase\\n @TestCase",
      "Edge 4: [Source] @TestCase\\n @TestCase => [Target] @TestCase\\n @TestCase",
      "Edge 5: [Source] @TestCase\\n @TestCase => [Target] @TestCase\\n @TestCase",
      "Edge 6: [Source] @TestCase\\n @TestCase => [Target] @TestCase\\n @TestCase",
      "Edge 7: [Source] @TestCase\\n @TestCase => [Target] @TestCase\\n}",
      "Edge 8: [Source] func testPatternFromStr() {\\n let p1 = Pattern(\"a*b\")\\n @Assert(p1.matches(\"a_b\"), true)\\n \\n let e = @AssertThrows[PatternException]({\\n let _ = Pattern(\"a/**b\")\\n })\\n @Assert(e.pos, 4) => [Target] }",
      "Edge 9: [Source] func testRangePattern() {\\n let pat = Pattern(\"a[0-9]b\") => [Target] for (i in 0..10) {\\n @Assert(pat.matches(\"a${i}b\"), true)\\n }",
      "Edge 10: [Source] for (i in 0..10) {\\n @Assert(pat.matches(\"a${i}b\"), true)\\n } => [Target] @Assert(pat.matches(\"a_b\"), false)\\n let pat2 = Pattern(\"a[!0-9]b\")",
      "Edge 11: [Source] @Assert(pat.matches(\"a_b\"), false)\\n let pat2 = Pattern(\"a[!0-9]b\") => [Target] for (i in 0..10) {\\n @Assert(pat2.matches(\"a${i}b\"), false)\\n }",
      "Edge 12: [Source] for (i in 0..10) {\\n @Assert(pat2.matches(\"a${i}b\"), false)\\n } => [Target] @Assert(pat2.matches(\"a_b\"), true)\\n let pats = [\"[a-z123]\", \"[1a-z23]\", \"[123a-z]\"]",
      "Edge 13: [Source] @Assert(pat2.matches(\"a_b\"), true)\\n let pats = [\"[a-z123]\", \"[1a-z23]\", \"[123a-z]\"] => [Target] for (p in pats) {\\n let pat = Pattern(p)\\n for (c in \"abcdefghijklmnopqrstuvwxyz\".toRuneArray()) {\\n @Assert(pat.matches(String(c)), true)\\n }\\n for (c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toRuneArray()) {\\n var options = MatchOptions()\\n options.caseSensitive = false\\n @Assert(pat.matchesWith(String(c), options), true)\\n }\\n @Assert(pat.matches(\"1\"), true)\\n @Assert(pat.matches(\"2\"), true)\\n @Assert(pat.matches(\"3\"), true)\\n }",
      "Edge 14: [Source] for (p in pats) {\\n let pat = Pattern(p)\\n for (c in \"abcdefghijklmnopqrstuvwxyz\".toRuneArray()) {\\n @Assert(pat.matches(String(c)), true)\\n }\\n for (c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toRuneArray()) {\\n var options = MatchOptions()\\n options.caseSensitive = false\\n @Assert(pat.matchesWith(String(c), options), true)\\n }\\n @Assert(pat.matches(\"1\"), true)\\n @Assert(pat.matches(\"2\"), true)\\n @Assert(pat.matches(\"3\"), true)\\n } => [Target] let pats2 = [\"[abc-]\", \"[-abc]\", \"[a-c-]\"]",
      "Edge 15: [Source] let pats2 = [\"[abc-]\", \"[-abc]\", \"[a-c-]\"] => [Target] for (p in pats2) {\\n let pat = Pattern(p)\\n @Assert(pat.matches(\"a\"), true)\\n @Assert(pat.matches(\"b\"), true)\\n @Assert(pat.matches(\"c\"), true)\\n @Assert(pat.matches(\"-\"), true)\\n @Assert(pat.matches(\"d\"), false)\\n }",
      "Edge 16: [Source] for (p in pats2) {\\n let pat = Pattern(p)\\n @Assert(pat.matches(\"a\"), true)\\n @Assert(pat.matches(\"b\"), true)\\n @Assert(pat.matches(\"c\"), true)\\n @Assert(pat.matches(\"-\"), true)\\n @Assert(pat.matches(\"d\"), false)\\n } => [Target] let pat3 = Pattern(\"[2-1]\")\\n @Assert(pat3.matches(\"1\"), false)\\n @Assert(pat3.matches(\"2\"), false)\\n let pat4 = Pattern(\"[-]\")\\n @Assert(pat4.matches(\"-\"), true)",
      "Edge 17: [Source] let pat3 = Pattern(\"[2-1]\")\\n @Assert(pat3.matches(\"1\"), false)\\n @Assert(pat3.matches(\"2\"), false)\\n let pat4 = Pattern(\"[-]\")\\n @Assert(pat4.matches(\"-\"), true) => [Target] let pat5 = Pattern(\"[!-]\")\\n @Assert(pat5.matches(\"-\"), false)"
    ]
  }
}