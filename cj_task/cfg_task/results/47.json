{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 4,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] main() {\\n println(\\n \"\"\"\\n###################################################\\n## Enter an simple math expression. ##\\n## e.g. ##\\n## 3 + 2 * (99 + 101) + 7 ##\\n## 1+(1 -1) + 6* 30/9 ##\\n## ##\\n## Press Ctrl + C to exit ##\\n###################################################\\n\"\"\") => [Target] while (true) {\\n Console.stdIn.readln().okOr(\"Invalid Input!\").andThen(eval).map(println).mapErr(println)\\n}",
      "Edge 1: [Source] while (true) {\\n Console.stdIn.readln().okOr(\"Invalid Input!\").andThen(eval).map(println).mapErr(println)\\n} => [Target] while (true) {",
      "Edge 2: [Source] while (true) => [Target] Console.stdIn.readln().okOr(\"Invalid Input!\").andThen(eval).map(println).mapErr(println)",
      "Edge 3: [Source] Console.stdIn.readln().okOr(\"Invalid Input!\").andThen(eval).map(println).mapErr(println) => [Target] while (true) {"
    ]
  }
}