{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 5,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] protected override func aboutToAppear() {\\n let description: Description = this.model.getDescription()\\n description.setEnabled(false)\\n let l: ?Legend = this.model.getLegend()\\n if (let Some(l) <- l) {\\n l.setEnabled(false)\\n } => [Target] // if more than 40 entries are displayed in the this.model, no values will be drawn\\n this.model.setMaxVisibleValueCount(40)\\n this.model.setDrawGridBackground(false)\\n this.model.setGridBackgroundColor(0x500000ff)\\n this.model.setDrawBarShadow(false)\\n this.model.setDrawValueAboveBar(false)\\n this.limitLine1 = LimitLine(120.0, \"Upper Limit\")\\n this.limitLine1.setLineWidth(4.0)\\n this.limitLine1.enableDashedLine(10, 10)\\n this.limitLine1.setLabelPosition(LimitLabelPosition.RIGHT_TOP)\\n this.limitLine1.setTextSize(10.0)\\n this.limitLine2 = LimitLine(50.0, \"Lower Limit\")\\n this.limitLine2.setLineWidth(4.0)\\n this.limitLine2.enableDashedLine(10, 10)\\n this.limitLine2.setLineColor(0xFFFF00)\\n this.limitLine2.setLabelPosition(LimitLabelPosition.RIGHT_BOTTOM)\\n this.limitLine2.setTextSize(10.0)",
      "Edge 1: [Source] // if more than 40 entries are displayed in the this.model, no values will be drawn\\n this.model.setMaxVisibleValueCount(40)\\n this.model.setDrawGridBackground(false)\\n this.model.setGridBackgroundColor(0x500000ff)\\n this.model.setDrawBarShadow(false)\\n this.model.setDrawValueAboveBar(false)\\n this.limitLine1 = LimitLine(120.0, \"Upper Limit\")\\n this.limitLine1.setLineWidth(4.0)\\n this.limitLine1.enableDashedLine(10, 10)\\n this.limitLine1.setLabelPosition(LimitLabelPosition.RIGHT_TOP)\\n this.limitLine1.setTextSize(10.0)\\n this.limitLine2 = LimitLine(50.0, \"Lower Limit\")\\n this.limitLine2.setLineWidth(4.0)\\n this.limitLine2.enableDashedLine(10, 10)\\n this.limitLine2.setLineColor(0xFFFF00)\\n this.limitLine2.setLabelPosition(LimitLabelPosition.RIGHT_BOTTOM)\\n this.limitLine2.setTextSize(10.0) => [Target] this.leftAxis = this.model.getAxisLeft()\\n if (let Some(leftAxis) <- this.leftAxis) {\\n leftAxis.setAxisMinimum(0.0)\\n leftAxis.setDrawLimitLinesBehindData(false)\\n leftAxis.addLimitLine(this.limitLine1)\\n leftAxis.addLimitLine(this.limitLine2)\\n }",
      "Edge 2: [Source] this.leftAxis = this.model.getAxisLeft()\\n if (let Some(leftAxis) <- this.leftAxis) {\\n leftAxis.setAxisMinimum(0.0)\\n leftAxis.setDrawLimitLinesBehindData(false)\\n leftAxis.addLimitLine(this.limitLine1)\\n leftAxis.addLimitLine(this.limitLine2)\\n } => [Target] this.rightAxis = this.model.getAxisRight()\\n if (let Some(rightAxis) <- this.rightAxis) {\\n rightAxis.setEnabled(false)\\n rightAxis.setAxisMinimum(0.0)\\n }",
      "Edge 3: [Source] this.rightAxis = this.model.getAxisRight()\\n if (let Some(rightAxis) <- this.rightAxis) {\\n rightAxis.setEnabled(false)\\n rightAxis.setAxisMinimum(0.0)\\n } => [Target] this.xAxis = this.model.getXAxis()\\n if (let Some(xAxis) <- this.xAxis) {\\n xAxis.setPosition(XAxisPosition.TOP)\\n }",
      "Edge 4: [Source] this.xAxis = this.model.getXAxis()\\n if (let Some(xAxis) <- this.xAxis) {\\n xAxis.setPosition(XAxisPosition.TOP)\\n } => [Target] this.barData = this.getStackData()\\n this.model.setData(this.barData)\\n this.model.setVisibleXRangeMaximum(20.0)"
    ]
  }
}