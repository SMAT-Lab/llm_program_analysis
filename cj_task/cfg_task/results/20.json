{
  "edge_analysis": {
    "static_total": 3,
    "llm_total": 5,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 3
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] func addToString(clazz: ClassDecl): ClassDecl { ... => [Target] case m: MacroExpandDecl => let vd = (m.macroInputDecl as VarDecl).getOrThrow()\n                Some(vd.identifier.value)",
      "Edge 1: [Source] func addToString(clazz: ClassDecl): ClassDecl { ... => [Target] case v: VarDecl => Some(v.identifier.value)",
      "Edge 2: [Source] func addToString(clazz: ClassDecl): ClassDecl { ... => [Target] case _ => None<String>\n        }\n\n        if (let Some(value) <- kind) {\n            let hasKey = msg |> any {m => m.hasItem(value)}\n            if (!hasKey) {\n                sb.append(\"${value}:\\${${value}},\")\n            }\n        }\n    }\n    let str = sb.toString().trimRight(\",\")\n    let funDecl = FuncDecl(quote(public func toString():String{\n        return $(str)\n    }))\n    clazz.body.decls.append(funDecl)\n    return clazz\n}"
    ],
    "extra_blocks": [
      "Edge 0: [Source] macro package cj_easy_data.macros\\n\\nimport std.ast.*\\nimport std.collection.* => [Target] \\nconst NO_TO_STRING = \"NoToString\"\\n//\n//",
      "Edge 1: [Source] \\nconst NO_TO_STRING = \"NoToString\"\\n//\n// => [Target] \\n//\\n\\n\\n",
      "Edge 2: [Source] public macro NoToString(input: Tokens): Tokens {\\n //\n//\\nif (!insideParentContext(\"Data\") && !insideParentContext(\"ToStringClass\")) {\\n throw MacroContextException (\"NoToString need Data or ToStringClass\") => [Target] }\\n let decl = VarDecl(input)\\n setItem(decl.identifier.value, true)\\n return input\\n}",
      "Edge 3: [Source] func addToString(clazz: ClassDecl): ClassDecl {\\n let types = clazz.superTypes\\nif (!isSuperToString(types)) {\\n if (clazz.upperBound.value != \"<:\") {\\n clazz.upperBound = Token(UPPERBOUND, \"<:\")\\n }\\n types.append(RefType(quote(ToString)))\\n} => [Target] if (isFuncToString(clazz)) {\\n return clazz\\n}\\nvar sb = StringBuilder()\\n//\\nlet msg = getChildMessages(NO_TO_STRING)\\nfor (d in clazz.body.decls) {\\n if (isFunc(d.keyword)) {\\n continue;\\n }\\n var kind = match (d) {\\n case m: MacroExpandDecl =>\\n let vd = (m.macroInputDecl as VarDecl).getOrThrow()\\n Some(vd.identifier.value)\\n case v: VarDecl => Some(v.identifier.value)\\n case _ => None<String>\\n }\\n\\n if (let Some(value) <- kind) {\\n let hasKey = msg |> any {m => m.hasItem(value)}\\n if (!hasKey) {\\n sb.append(\"${value}:\\${${value}},\")\\n }\\n }\\n}\\nlet str = sb.toString().trimRight(\",\")",
      "Edge 4: [Source] if (isFuncToString(clazz)) {\\n return clazz\\n}\\nvar sb = StringBuilder()\\n//\\nlet msg = getChildMessages(NO_TO_STRING)\\nfor (d in clazz.body.decls) {\\n if (isFunc(d.keyword)) {\\n continue;\\n }\\n var kind = match (d) {\\n case m: MacroExpandDecl =>\\n let vd = (m.macroInputDecl as VarDecl).getOrThrow()\\n Some(vd.identifier.value)\\n case v: VarDecl => Some(v.identifier.value)\\n case _ => None<String>\\n }\\n\\n if (let Some(value) <- kind) {\\n let hasKey = msg |> any {m => m.hasItem(value)}\\n if (!hasKey) {\\n sb.append(\"${value}:\\${${value}},\")\\n }\\n }\\n}\\nlet str = sb.toString().trimRight(\",\") => [Target] let funDecl = FuncDecl(quote(public func toString():String{\\n return $(str)\\n}))\\nclazz.body.decls.append(funDecl)\\nreturn clazz"
    ]
  }
}