{
  "edge_analysis": {
    "static_total": 10,
    "llm_total": 15,
    "matched_edges": {
      "exact_matches": 4,
      "partial_matches": 3
    },
    "accuracy_metrics": {
      "precision": 0.2667,
      "recall": 0.4,
      "f1_score": 0.32
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] private func readRequstSetHeaderPacket(): Int64 { ... => [Target] case 0 => handleOkPacket(data[1..])\n                return 0",
      "Edge 1: [Source] private func readRequstSetHeaderPacket(): Int64 { ... => [Target] case 255 => println(\"err, do later\")\n                return -1",
      "Edge 2: [Source] private func readRequstSetHeaderPacket(): Int64 { ... => [Target] case _ => 1 + 1\n                // println(\"unknow, do later\")\n                // return -1\n        }\n\n        // column count\n        let (number, isNull, n) = ByteArrayUtils.readLengthEncodedInteger(data)\n        return Int64(number)\n    }",
      "Edge 4: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case Some(number) => paramTypes[i<<1] = fieldTypeLongLong\n                            let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n                            paramValues.append(appenValue)\n                            pktLen += 8",
      "Edge 5: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case None => bitMask += 1 << UInt64(i)\n                            paramTypes[i<<1] = fieldTypeNULL\n                    }",
      "Edge 9: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case _ => println(\"unsupport data type\")\n            }\n        }\n\n        let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n        data[0] = UInt8(pktLen & 0xff)\n\t    data[1] = UInt8(pktLen >> 8)\n\t    data[2] = UInt8(pktLen >> 16)\n\t    data[3] = connection.sequence\n\n        data[4] = comStmtExecute\n\n        data[5] = UInt8(id)\n        data[6] = UInt8(id>>8)\n        data[7] = UInt8(id>>16)\n        data[8] = UInt8(id>>24)\n\n        data[10] = 0x01\n\n        if (paramCount > 0) {\n            var pos = 14 + ((Int64(paramCount) + 7) / 8)\n            for(i in 14 .. pos) {\n                data[i] = UInt8(bitMask >> UInt64((i - 14)* 8))\n            }\n\n            data[pos] = 0x01\n            pos ++\n\n            paramTypes.copyTo(data, 0, pos, paramTypes.size)\n            pos += paramTypes.size\n            for(i in 0 .. paramCount) {\n                let paramValue = paramValues[Int64(i)]\n                paramValue.toArray().copyTo(data, 0, pos, paramValue.toArray().size)\n                pos += paramValue.toArray().size\n            }\n        }\n        connection.writePacket(data)\n    }"
    ],
    "extra_blocks": [
      "Edge 0: [Source] public prop parameterColumnInfos: Array<ColumnInfo> {\\n get() {\\n return ArrayList<ColumnInfo>().toArray()\\n } => [Target] }",
      "Edge 1: [Source] public func query(params: Array<SqlDbType>): QueryResult {\\n // \\n writeExecutePacket(params)\\n // \\n let columnNumber = readRequstSetHeaderPacket()\\n // \\n var columns: ArrayList<MySqlField> = ArrayList<MySqlField>()\\n var rows: ArrayList<Array<Byte>> = ArrayList<Array<Byte>>() => [Target] if (columnNumber > 0) {\\n // read columns\\n columns = this.connection.readColumns(UInt16(columnNumber))\\n // read rows\\n rows = this.connection.readRows()\\n }",
      "Edge 2: [Source] public func query(params: Array<SqlDbType>): QueryResult {\\n // \\n writeExecutePacket(params)\\n // \\n let columnNumber = readRequstSetHeaderPacket()\\n // \\n var columns: ArrayList<MySqlField> = ArrayList<MySqlField>()\\n var rows: ArrayList<Array<Byte>> = ArrayList<Array<Byte>>() => [Target] return MysqlQueryResult(columns, rows)\\n }",
      "Edge 3: [Source] public func update(params: Array<SqlDbType>): UpdateResult {\\n// \\\\u53d1\\\\u9001\\nwriteExecutePacket(params) => [Target] // \\\\u63a5\\\\u6536\\\\u7ed3\\\\u679c\\nlet updateResult = readRequstSetHeaderPacket() \\nreturn MySqlUpdateResult(rowCount, lastInsertId)",
      "Edge 5: [Source] private func readRequstSetHeaderPacket(): Int64 {\\n let data = connection.readPacket() => [Target] let (number, isNull, n) = ByteArrayUtils.readLengthEncodedInteger(data)\\nreturn Int64(number)",
      "Edge 6: [Source] private func readPrepareResultPacket() {\\n let data = this.connection.readPacket()\\n if (data[0] != iOK) { => [Target] println(\"error here, do later\")\\n }\\n id = ByteArrayUtils.littleEndianUint32(data[1..5])\\n columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\\n paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\\n if (paramCount > 0) {",
      "Edge 7: [Source] private func readPrepareResultPacket() {\\n let data = this.connection.readPacket()\\n if (data[0] != iOK) { => [Target] id = ByteArrayUtils.littleEndianUint32(data[1..5])\\n columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\\n paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\\n if (paramCount > 0) {",
      "Edge 8: [Source] println(\"error here, do later\")\\n }\\n id = ByteArrayUtils.littleEndianUint32(data[1..5])\\n columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\\n paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\\n if (paramCount > 0) { => [Target] let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)\\n }\\n if (columnCount > 0) {\\n let columns = this.connection.readColumns(columnCount)",
      "Edge 9: [Source] println(\"error here, do later\")\\n }\\n id = ByteArrayUtils.littleEndianUint32(data[1..5])\\n columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\\n paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\\n if (paramCount > 0) { => [Target] if (columnCount > 0) {\\n let columns = this.connection.readColumns(columnCount)\\n }\\n }",
      "Edge 10: [Source] let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)\\n }\\n if (columnCount > 0) {\\n let columns = this.connection.readColumns(columnCount) => [Target] }\\n }",
      "Edge 11: [Source] id = ByteArrayUtils.littleEndianUint32(data[1..5])\\n columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\\n paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\\n if (paramCount > 0) { => [Target] let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)\\n }\\n if (columnCount > 0) {\\n let columns = this.connection.readColumns(columnCount)",
      "Edge 12: [Source] id = ByteArrayUtils.littleEndianUint32(data[1..5])\\n columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\\n paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\\n if (paramCount > 0) { => [Target] if (columnCount > 0) {\\n let columns = this.connection.readColumns(columnCount)\\n }\\n }",
      "Edge 13: [Source] let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)\\n }\\n if (columnCount > 0) {\\n let columns = this.connection.readColumns(columnCount) => [Target] }\\n }",
      "Edge 14: [Source] private func writeExecutePacket(params: Array<SqlDbType>) {\\n connection.sequence = 0\\n var pktLen = 1 + 4 + 1 + 4 + ((Int64(paramCount) + 7) / 8) + 1 + (Int64(paramCount) * 2)\\n let paramValues = ArrayList<Array<Byte>>() \\n let paramTypes = Array<Byte>(Int64(paramCount) * 2, item: 0)\\n var bitMask = UInt64(0)\\n for(i in 0 .. params.size) {\\n let param = params.get(i).getOrThrow()\\n // \\n match(param.name) {\\n case \"SqlNullableBigInt\" => \\n let temp = param as SqlNullableBigInt\\n let value = temp.getOrThrow()\\n match(value.value) {\\n case Some(number) => \\n paramTypes[i<<1] = fieldTypeLongLong\\n let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\\n paramValues.append(appenValue)\\n pktLen += 8\\n case None => \\n bitMask += 1 << UInt64(i)\\n paramTypes[i<<1] = fieldTypeNULL\\n } \\n case \"SqlBigInt\" => \\n let temp = param as SqlBigInt\\n let number = temp.getOrThrow().value\\n paramTypes[i<<1] = fieldTypeLongLong\\n let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\\n paramValues.append(appenValue)\\n pktLen += 8\\n\\n case \"SqlInteger\" =>\\n let temp = param as SqlInteger\\n let number = temp.getOrThrow().value\\n paramTypes[i<<1] = fieldTypeLong\\n let appenValue = ByteArrayUtils.uint32ToBytes(UInt32(number))\\n paramValues.append(appenValue)\\n pktLen += 4\\n\\n case \"SqlVarchar\" =>\\n let temp = param as SqlVarchar\\n let s = temp.getOrThrow().value\\n paramTypes[i<<1] = fieldTypeVarString\\n let result = ArrayList<Byte>()\\n var lengthBytes = ByteArrayUtils.appendLengthEncodedInteger(UInt64(s.toArray().size))\\n result.appendAll(lengthBytes)\\n result.appendAll(s.toArray())\\n paramValues.append(result.toArray())\\n pktLen = pktLen + result.toArray().size\\n\\n case _ => println(\"unsupport data type\")\\n }\\n } => [Target] let data = Array<Byte>(pktLen + 4, item: UInt8(0))\\n\\n data[0] = UInt8(pktLen & 0xff)\\n data[1] = UInt8(pktLen >> 8)\\n data[2] = UInt8(pktLen >> 16)\\n data[3] = connection.sequence\\n\\n data[4] = comStmtExecute\\n\\n data[5] = UInt8(id)\\n data[6] = UInt8(id>>8)\\n data[7] = UInt8(id>>16)\\n data[8] = UInt8(id>>24)\\n\\n data[10] = 0x01\\n\\n if (paramCount > 0) {\\n var pos = 14 + ((Int64(paramCount) + 7) / 8)\\n for(i in 14 .. pos) {\\n data[i] = UInt8(bitMask >> UInt64((i - 14)* 8))\\n }\\n\\n data[pos] = 0x01\\n pos ++\\n\\n paramTypes.copyTo(data, 0, pos, paramTypes.size)\\n pos += paramTypes.size\\n for(i in 0 .. paramCount) {\\n let paramValue = paramValues[Int64(i)]\\n paramValue.toArray().copyTo(data, 0, pos, paramValue.toArray().size)\\n pos += paramValue.toArray().size\\n }\\n }\\n connection.writePacket(data)"
    ]
  }
}