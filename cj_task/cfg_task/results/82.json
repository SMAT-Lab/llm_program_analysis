{
  "edge_analysis": {
    "static_total": 2,
    "llm_total": 4,
    "matched_edges": {
      "exact_matches": 1,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.25,
      "recall": 0.5,
      "f1_score": 0.333
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
      "Edge 1: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var cataLog = Series(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(cataLog.toJson())\n        }\n    )\n\n    return pathMap\n}"
    ],
    "extra_blocks": [
      "Edge 2: [Source] public init(id: String, host!: String = \"127.0.0.1\", page!: Int64 = 0) {\\n let series = BookSeries.fromId(id)\\n metadata = Metadata(series.name, itemsPerPage: 20, currentPage: page + 1,\\n numberOfItems: BookSeries.getCount(id: id), modified: series.lastModifiedDate)\\n metadata.addBookDesc(id)\\n links = Links(host, \"series/${id}\", page: page)\\n var obj = Books.formDatabase(baseConfig.database, page: page + 1, count: 20, seriesId: id) => [Target] for (i in obj) {\\n publications.append(Publication(i, host))\\n }",
      "Edge 3: [Source] for (i in obj) {\\n publications.append(Publication(i, host))\\n } => [Target] }"
    ]
  }
}