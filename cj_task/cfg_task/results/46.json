{
  "edge_analysis": {
    "static_total": 16,
    "llm_total": 30,
    "matched_edges": {
      "exact_matches": 16,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.5333333333333333,
      "recall": 1.0,
      "f1_score": 0.6956521739130435
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] package simple_math_interpreter\\nimport std.convert.*\\nimport simple_math_interpreter.ext.* => [Target] let symbol = Combinator<Rune, Rune>.make {\\n ch => match (ch) {\\n case r'+' | r'-' | r'*' | r'/' | r'(' | r')' => true\\n case _ => false\\n }\\n}.map {\\n ch: Rune => match (ch) {\\n case '+' => Plus\\n case '-' => Minus\\n case '*' => Multiply\\n case '/' => Divide\\n case '(' => LParen\\n case ')' => RParen\\n case _ => throw Exception()\\n }",
      "Edge 1: [Source] let symbol = Combinator<Rune, Rune>.make {\\n ch => match (ch) {\\n case r'+' | r'-' | r'*' | r'/' | r'(' | r')' => true\\n case _ => false\\n }\\n}.map {\\n ch: Rune => match (ch) {\\n case '+' => Plus\\n case '-' => Minus\\n case '*' => Multiply\\n case '/' => Divide\\n case '(' => LParen\\n case ')' => RParen\\n case _ => throw Exception()\\n } => [Target] let whiteSpace = Combinator<Rune, Rune>.make {ch => ch == r' '}\\nlet number = Combinator<Rune, Rune>.make {\\n ch => match (Int64.tryParse(ch.toString())) {\\n case Some(n) where n >= 0 && n <= 9 => true\\n case _ => false\\n }\\n}.map {ch => Int64.parse(ch.toString())}",
      "Edge 2: [Source] let whiteSpace = Combinator<Rune, Rune>.make {ch => ch == r' '}\\nlet number = Combinator<Rune, Rune>.make {\\n ch => match (Int64.tryParse(ch.toString())) {\\n case Some(n) where n >= 0 && n <= 9 => true\\n case _ => false\\n }\\n}.map {ch => Int64.parse(ch.toString())} => [Target] let value = number.many(1).map {\\n l => l.reduce<Int64>({acc, x => acc * 10 + x}, 0)\\n}.map {v => Value(v)}\\nlet tokenAndSpace = value.or(symbol).and(whiteSpace.many(1)).map {s: (Token, List<Rune>) => s[0]}\\nlet token = value.or(symbol)",
      "Edge 3: [Source] let value = number.many(1).map {\\n l => l.reduce<Int64>({acc, x => acc * 10 + x}, 0)\\n}.map {v => Value(v)}\\nlet tokenAndSpace = value.or(symbol).and(whiteSpace.many(1)).map {s: (Token, List<Rune>) => s[0]}\\nlet token = value.or(symbol) => [Target] let tokens = tokenAndSpace.or(token).many(1)\\nlet eNumber = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Value(_) => true\\n case _ => false\\n }\\n}.map {",
      "Edge 4: [Source] let tokens = tokenAndSpace.or(token).many(1)\\nlet eNumber = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Value(_) => true\\n case _ => false\\n }\\n}.map { => [Target] token => match (token) {\\n case Value(i) => Number(i)\\n case _ => throw Exception()\\n }\\nlet lparen = Combinator<Token, Token>.make {\\n token => match (token) {\\n case LParen => true\\n case _ => false\\n }\\n}",
      "Edge 5: [Source] token => match (token) {\\n case Value(i) => Number(i)\\n case _ => throw Exception()\\n }\\nlet lparen = Combinator<Token, Token>.make {\\n token => match (token) {\\n case LParen => true\\n case _ => false\\n }\\n} => [Target] let rparen = Combinator<Token, Token>.make {\\n token => match (token) {\\n case RParen => true\\n case _ => false\\n }\\n}\\nlet plus = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Plus => true\\n case _ => false\\n }\\n}",
      "Edge 6: [Source] let rparen = Combinator<Token, Token>.make {\\n token => match (token) {\\n case RParen => true\\n case _ => false\\n }\\n}\\nlet plus = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Plus => true\\n case _ => false\\n }\\n} => [Target] let minus = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Minus => true\\n case _ => false\\n }\\n}\\nlet multiply = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Multiply => true\\n case _ => false\\n }\\n}",
      "Edge 7: [Source] let minus = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Minus => true\\n case _ => false\\n }\\n}\\nlet multiply = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Multiply => true\\n case _ => false\\n }\\n} => [Target] let divide = Combinator<Token, Token>.make {\\n token => match (token) {\\n case Divide => true\\n case _ => false\\n }\\n}",
      "Edge 8: [Source] func tokensFunc(input: List<Rune>): Option<(List<Token>, List<Rune>)> {\\n tokens.parseFunc(input) => [Target] }",
      "Edge 18: [Source] static func fromTokens(tokens: List<Token>): Result<Expression, String> {\\n match (expressionFunc(tokens).map {t => t[0]}) { => [Target] case Some(e) => Ok(e)",
      "Edge 19: [Source] static func fromTokens(tokens: List<Token>): Result<Expression, String> {\\n match (expressionFunc(tokens).map {t => t[0]}) { => [Target] case None => Err(\"Invalid Expression!\")",
      "Edge 20: [Source] func eval(): Int64 {\\n match (this) { => [Target] case Number(n) => n",
      "Edge 21: [Source] func eval(): Int64 {\\n match (this) { => [Target] case Plus(e1, e2) => e1.eval() + e2.eval()",
      "Edge 22: [Source] func eval(): Int64 {\\n match (this) { => [Target] case Minus(e1, e2) => e1.eval() - e2.eval()",
      "Edge 23: [Source] func eval(): Int64 {\\n match (this) { => [Target] case Multiply(e1, e2) => e1.eval() * e2.eval()",
      "Edge 24: [Source] func eval(): Int64 {\\n match (this) { => [Target] case Divide(e1, e2) => e1.eval() / e2.eval()",
      "Edge 25: [Source] public func toString(): String {\\n match (this) { => [Target] case Number(n) => \"${n}\"",
      "Edge 26: [Source] public func toString(): String {\\n match (this) { => [Target] case Plus(e1, e2) => \"(+ ${e1} ${e2})\"",
      "Edge 27: [Source] public func toString(): String {\\n match (this) { => [Target] case Minus(e1, e2) => \"(- ${e1} ${e2})\"",
      "Edge 28: [Source] public func toString(): String {\\n match (this) { => [Target] case Multiply(e1, e2) => \"(* ${e1} ${e2})\"",
      "Edge 29: [Source] public func toString(): String {\\n match (this) { => [Target] case Divide(e1, e2) => \"(/ ${e1} ${e2})\""
    ]
  }
}