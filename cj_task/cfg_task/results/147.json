{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 13,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] public init(indexPolicy: IndexPolicy, srcFile: String, dstFile: String) {\\n this.srcHandle = try {\\n let f = File(srcFile, OpenOption.Open(true, false))\\n if (!f.canRead()) {\\n throw Exception(\"file can not read\")\\n }\\n f\\n } catch (e: Exception) {\\n throw Exception(\"open source file `${srcFile}`: ${e.toString()}\")\\n } => [Target] this.dstHandle = try {\\n let f = File(dstFile, OpenOption.CreateOrTruncate(true))\\n if (!f.canWrite()) {\\n throw Exception(\"file can not write\")\\n }\\n f\\n } catch (e: Exception) {\\n throw Exception(\"open target file `${dstFile}`: ${e.toString()}\")\\n }\\n this.indexPolicy = indexPolicy\\n this.header = Header(UInt16(VersionNo), this.indexPolicy, UInt32(DateTime.now().toUnixTimeStamp().toSeconds()),\\n 0, 0)\\n this.initDbHeader()",
      "Edge 1: [Source] this.dstHandle = try {\\n let f = File(dstFile, OpenOption.CreateOrTruncate(true))\\n if (!f.canWrite()) {\\n throw Exception(\"file can not write\")\\n }\\n f\\n } catch (e: Exception) {\\n throw Exception(\"open target file `${dstFile}`: ${e.toString()}\")\\n }\\n this.indexPolicy = indexPolicy\\n this.header = Header(UInt16(VersionNo), this.indexPolicy, UInt32(DateTime.now().toUnixTimeStamp().toSeconds()),\\n 0, 0)\\n this.initDbHeader() => [Target] }",
      "Edge 2: [Source] func loadSegments() {\\n let segments = ArrayList<Segment>()\\n let last: Box<?Segment> = Box<?Segment>(None)\\n iterateSegments(\\n this.srcHandle,\\n None,\\n {\\n seg =>\\n seg.afterCheck(last.value)\\n segments.append(seg)\\n last.value = seg\\n }\\n ) => [Target] this.segments = segments.toArray()\\n }",
      "Edge 3: [Source] func setVectorIndex(ip: UInt32, ptr: UInt32) {\\n let il0 = (ip >> 24) & 0xFF\\n let il1 = (ip >> 16) & 0xFF\\n let idx = Int64(il0 * UInt32(VectorIndexCols) * UInt32(VectorIndexSize) + il1 * UInt32(VectorIndexSize))\\n let sPtr = littleEndianUInt32(this.vectorIndex[idx..(idx + 4)])\\n if (sPtr == 0) {\\n littleEndianPutUInt32(this.vectorIndex[idx..(idx + 4)], ptr)\\n littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize)) => [Target] }",
      "Edge 4: [Source] func setVectorIndex(ip: UInt32, ptr: UInt32) {\\n let il0 = (ip >> 24) & 0xFF\\n let il1 = (ip >> 16) & 0xFF\\n let idx = Int64(il0 * UInt32(VectorIndexCols) * UInt32(VectorIndexSize) + il1 * UInt32(VectorIndexSize))\\n let sPtr = littleEndianUInt32(this.vectorIndex[idx..(idx + 4)])\\n if (sPtr == 0) {\\n littleEndianPutUInt32(this.vectorIndex[idx..(idx + 4)], ptr)\\n littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize)) => [Target] } else {\\n littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))\\n }",
      "Edge 5: [Source] public func start() {\\n this.loadSegments()\\nif (this.segments.size == 0) {\\n throw Exception(\"empty segment list\")\\n} => [Target] try {\\n this.dstHandle.seek(Begin(HeaderInfoLength + VectorIndexLength))",
      "Edge 6: [Source] try {\\n this.dstHandle.seek(Begin(HeaderInfoLength + VectorIndexLength)) => [Target] catch (e: Exception) {\\n throw Exception(\"seek to data first ptr: ${e.toString()}\")",
      "Edge 7: [Source] try {\\n this.dstHandle.seek(Begin(HeaderInfoLength + VectorIndexLength)) => [Target] for (seg in this.segments) {\\n if (this.regionPool.contains(seg.region)) {\\n continue",
      "Edge 8: [Source] for (seg in this.segments) {\\n if (this.regionPool.contains(seg.region)) {\\n continue => [Target] let region = seg.region.toArray()\\nif (region.size > 0xFFFF) {\\n throw Exception(\"too long region info `${seg.region}`: should be less than ${0xFFFF} bytes\")\\nlet pos = try {\\n this.dstHandle.seek(Current(0))",
      "Edge 9: [Source] let region = seg.region.toArray()\\nif (region.size > 0xFFFF) {\\n throw Exception(\"too long region info `${seg.region}`: should be less than ${0xFFFF} bytes\")\\nlet pos = try {\\n this.dstHandle.seek(Current(0)) => [Target] catch (e: Exception) {\\n throw Exception(\"seek to current ptr: ${e.toString()}\")",
      "Edge 10: [Source] let region = seg.region.toArray()\\nif (region.size > 0xFFFF) {\\n throw Exception(\"too long region info `${seg.region}`: should be less than ${0xFFFF} bytes\")\\nlet pos = try {\\n this.dstHandle.seek(Current(0)) => [Target] try {\\n this.dstHandle.write(region)",
      "Edge 11: [Source] try {\\n this.dstHandle.write(region) => [Target] catch (e: Exception) {\\n throw Exception(\"write region '${seg.region}': ${e.toString()}\")",
      "Edge 12: [Source] try {\\n this.dstHandle.write(region) => [Target] this.regionPool[seg.region] = UInt32(pos)"
    ]
  }
}