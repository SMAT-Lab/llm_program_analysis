{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 11,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": "0.0",
      "recall": "0.0",
      "f1_score": "0.0"
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] macro package Macro_JsonSerializable.macros\\nimport std.ast.*\\nimport std.collection.* => [Target] // \\\\u7ed3\\\\u6784\\\\u4f53 serialize\\\\u3001deserialize \\\\u65b9\\\\u6cd5\\\\u751f\\\\u6210\\\\u5668",
      "Edge 1: [Source] private func generateStructNameTokens(decl: StructDecl): Tokens { => [Target] try {\\n return quote($(decl.identifier)$(decl.genericParam))\\n} catch (_: Exception) {\\n return quote($(decl.identifier))",
      "Edge 2: [Source] private func generateStructNameTokens(decl: StructDecl): Tokens { => [Target] }",
      "Edge 3: [Source] private func generateDeserialize(context: Context): Unit {\\n let arguments = ArrayList<Argument>()\\n let assign = quote() => [Target] for (reval in context.valDecls) {\\n if (reval.assign.kind != TokenKind.ASSIGN) {\\n let arg = Argument()\\n arg.identifier = Token(TokenKind.IDENTIFIER, reval.identifier.value)\\n arg.expr = CallExpr(quote(\\n $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\\n ))\\n arg.colon = Token(TokenKind.COLON, \":\")\\n arguments.append(arg)\\n } else if (reval.keyword.kind == TokenKind.VAR) {\\n assign.append(quote(\\n reval.$(reval.identifier) = $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\\n ))\\n }\\n }",
      "Edge 4: [Source] private func generateDeserialize(context: Context): Unit {\\n let arguments = ArrayList<Argument>()\\n let assign = quote() => [Target] }",
      "Edge 5: [Source] for (reval in context.valDecls) {\\n if (reval.assign.kind != TokenKind.ASSIGN) {\\n let arg = Argument()\\n arg.identifier = Token(TokenKind.IDENTIFIER, reval.identifier.value)\\n arg.expr = CallExpr(quote(\\n $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\\n ))\\n arg.colon = Token(TokenKind.COLON, \":\")\\n arguments.append(arg)\\n } else if (reval.keyword.kind == TokenKind.VAR) {\\n assign.append(quote(\\n reval.$(reval.identifier) = $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\\n ))\\n }\\n } => [Target] let ce = CallExpr(quote($(generateStructNameTokens(context.structDecl))()))\\n ce.arguments = arguments\\n let body: Tokens",
      "Edge 6: [Source] for (reval in context.valDecls) {\\n if (reval.assign.kind != TokenKind.ASSIGN) {\\n let arg = Argument()\\n arg.identifier = Token(TokenKind.IDENTIFIER, reval.identifier.value)\\n arg.expr = CallExpr(quote(\\n $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\\n ))\\n arg.colon = Token(TokenKind.COLON, \":\")\\n arguments.append(arg)\\n } else if (reval.keyword.kind == TokenKind.VAR) {\\n assign.append(quote(\\n reval.$(reval.identifier) = $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\\n ))\\n }\\n } => [Target] let deserializeFunc = FuncDecl(quote(\\n public static func deserialize(dm: DataModel): $(generateStructNameTokens(context.structDecl)) {\\n let dms = match (dm) {\\n case d: DataModelStruct => d\\n case _ => throw Exception(\"This data is not DataModelStruct\")\\n }\\n $(body)\\n }\\n ))\\n context.structDecl.body.decls.append(deserializeFunc)",
      "Edge 7: [Source] let ce = CallExpr(quote($(generateStructNameTokens(context.structDecl))()))\\n ce.arguments = arguments\\n let body: Tokens => [Target] if (assign.size == 0) {\\n body = quote(\\n return $(ce)\\n )",
      "Edge 8: [Source] let ce = CallExpr(quote($(generateStructNameTokens(context.structDecl))()))\\n ce.arguments = arguments\\n let body: Tokens => [Target] } else {\\n body = quote(\\n var reval = $(ce)\\n $(assign)\\n return reval\\n )",
      "Edge 9: [Source] private func generateSerialize(context: Context): Unit {\\n let body = quote() => [Target] for (reval in context.valDecls) {\\n body.append(quote(\\n dms.add(field($(reval.identifier.value), this.$(reval.identifier)))\\n ))\\n }",
      "Edge 10: [Source] for (reval in context.valDecls) {\\n body.append(quote(\\n dms.add(field($(reval.identifier.value), this.$(reval.identifier)))\\n ))\\n } => [Target] let serializeFunc = FuncDecl(quote(\\n public func serialize(): DataModel {\\n let dms = DataModelStruct()\\n $(body)\\n return dms\\n }\\n ))\\n context.structDecl.body.decls.append(serializeFunc)\\n }"
    ]
  }
}