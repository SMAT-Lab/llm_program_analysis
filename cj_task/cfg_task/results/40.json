{
  "edge_analysis": {
    "static_total": 16,
    "llm_total": 31,
    "matched_edges": {
      "exact_matches": 13,
      "partial_matches": 4
    },
    "accuracy_metrics": {
      "precision": 0.41935483870967744,
      "recall": 0.8125,
      "f1_score": 0.5546218487394958
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] private func handleAuthResult() { ... => [Target] case 1 => match(authData[0]) {",
      "Edge 2: [Source] private func handleAuthResult() { ... => [Target] case 4 => // request public key from server\n let pktLen = 1\n \n let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n data[0] = UInt8(pktLen & 0xff)\n data[1] = UInt8(pktLen >> 8)\n data[2] = UInt8(pktLen >> 16)\n data[3] = sequence\n\n data[4] = cachingSha2PasswordRequestPublicKey\n writePacket(data)\n\n let publicKeyData = readPacket()\n\n sendEncryptedPassword(publicKeyData[1..])\n\n readPacket()",
      "Edge 3: [Source] private func handleAuthResult() { ... => [Target] case _ => println(\"eror or correct but do later\")\n }",
      "Edge 4: [Source] private func handleAuthResult() { ... => [Target] case _ => println(\"error size or correct size but do later \")\n }",
      "Edge 5: [Source] private func handleAuthResult() { ... => [Target] case _ => println(\"other, do later\")\n }\n }",
      "Edge 9: [Source] protected func readColumns(count: UInt16): ArrayList<MySqlField> { ... => [Target] case 254 => println(\"read end\")\n //",
      "Edge 10: [Source] protected func readColumns(count: UInt16): ArrayList<MySqlField> { ... => [Target] case _ => println(\"error, do later\")\n // }\n return returnResult\n }"
    ],
    "extra_blocks": [
      "Edge 0: [Source] private func writeAuthPacket() {\\n var clientFlags: UInt32 = \\n clientProtocol41 | \\n clientSecureConn | \\n clientLongPassword | \\n clientTransactions | \\n clientLocalFiles | \\n clientPluginAuth | \\n clientMultiResults | \\n flags &\\n clientLongFlag \\n \\n\\n let authResp = ByteArrayUtils.scrambleCachingSha2(cipher, config.password.toArray())\\n\\n // 4 \\n // 4 clientFlags\\n // 4 \\n // 1 charset\\n // 23 \\n // username\\n // 1 \\n // 1 \\n // \\n // dbname\\n\\n let authRespLen = authResp.size\\n let authRespLEI = ByteArrayUtils.appendLengthEncodedInteger(UInt64(authRespLen))\\n if (authRespLEI.size > 1) {\\n clientFlags |= clientPluginAuthLenEncClientData\\n } => [Target] var pktLen = 4 + 4 + 1 + 23 + config.username.toArray().size + 1 + authRespLEI.size + authResp.size + 21 \\n if (config.dbname.size > 0) {\\n clientFlags |= UInt32(clientConnectWithDB)\\n pktLen += config.dbname.toArray().size + 1\\n }\\n\\n let data = Array<Byte>(pktLen + 4, item: UInt8(0))",
      "Edge 1: [Source] var pktLen = 4 + 4 + 1 + 23 + config.username.toArray().size + 1 + authRespLEI.size + authResp.size + 21 \\n if (config.dbname.size > 0) {\\n clientFlags |= UInt32(clientConnectWithDB)\\n pktLen += config.dbname.toArray().size + 1\\n }\\n\\n let data = Array<Byte>(pktLen + 4, item: UInt8(0)) => [Target] data[0] = UInt8(pktLen & 0xff)\\n data[1] = UInt8(pktLen >> 8)\\n data[2] = UInt8(pktLen >> 16)\\n data[3] = sequence\\n data[4] = UInt8(clientFlags & 0xff)\\n data[5] = UInt8(clientFlags >> 8 & 0xff)\\n data[6] = UInt8(clientFlags >> 16 & 0xff)\\n data[7] = UInt8(clientFlags >> 24 & 0xff)",
      "Edge 2: [Source] data[0] = UInt8(pktLen & 0xff)\\n data[1] = UInt8(pktLen >> 8)\\n data[2] = UInt8(pktLen >> 16)\\n data[3] = sequence\\n data[4] = UInt8(clientFlags & 0xff)\\n data[5] = UInt8(clientFlags >> 8 & 0xff)\\n data[6] = UInt8(clientFlags >> 16 & 0xff)\\n data[7] = UInt8(clientFlags >> 24 & 0xff) => [Target] data[12] = charset\\n\\n var pos = 13 + 23\\n\\n if (config.username.size > 0) {\\n config.username.toArray().copyTo(data, 0, pos, config.username.toArray().size)\\n pos += config.username.toArray().size\\n }\\n pos += 1\\n authRespLEI.copyTo(data, 0, pos, authRespLEI.size)\\n pos += authRespLEI.size\\n\\n authResp.copyTo(data, 0, pos, authResp.size)\\n pos += authResp.size",
      "Edge 3: [Source] data[12] = charset\\n\\n var pos = 13 + 23\\n\\n if (config.username.size > 0) {\\n config.username.toArray().copyTo(data, 0, pos, config.username.toArray().size)\\n pos += config.username.toArray().size\\n }\\n pos += 1\\n authRespLEI.copyTo(data, 0, pos, authRespLEI.size)\\n pos += authRespLEI.size\\n\\n authResp.copyTo(data, 0, pos, authResp.size)\\n pos += authResp.size => [Target] if (config.dbname.size > 0) {\\n config.dbname.toArray().copyTo(data, 0, pos, config.dbname.toArray().size)\\n pos += config.dbname.toArray().size\\n pos += 1\\n }\\n plugin.toArray().copyTo(data, 0, pos, plugin.toArray().size)\\n pos += plugin.toArray().size\\n writePacket(data)\\n }",
      "Edge 11: [Source] protected func readRows():ArrayList<Array<Byte>> {\\n let result = ArrayList<Array<Byte>>() => [Target] while(true) {\\n let data = readPacket()",
      "Edge 12: [Source] protected func readRows():ArrayList<Array<Byte>> {\\n let result = ArrayList<Array<Byte>>() => [Target] return result",
      "Edge 15: [Source] match(data[0]) { => [Target] case _ =>\\n result.append(data)\\n let data = readPacket()",
      "Edge 17: [Source] sequence ++\\n\\n let resultData = buffer.readNext(pktLen)\\n if (pktLen < maxPacketSize) {\\n return resultData\\n } => [Target] let resultData2 = readPacket()\\n return resultData.concat(resultData2)",
      "Edge 19: [Source] protected func readUntilEOF(): Array<Byte> {\\n let result = ArrayList<Byte>() => [Target] return result.toArray()",
      "Edge 20: [Source] while (true) {\\n let tempData = readPacket() => [Target] match(tempData[0]) {",
      "Edge 22: [Source] match(tempData[0]) { => [Target] case 255 => println(\"error happen, do later\")",
      "Edge 23: [Source] match(tempData[0]) { => [Target] case _ => result.appendAll(tempData)",
      "Edge 24: [Source] case 255 => println(\"error happen, do later\") => [Target] while (true) {\\n let tempData = readPacket()",
      "Edge 25: [Source] while (true) {\\n let tempData = readPacket() => [Target] match(tempData[0]) {",
      "Edge 26: [Source] case _ => result.appendAll(tempData) => [Target] while (true) {\\n let tempData = readPacket()",
      "Edge 27: [Source] while (true) {\\n let tempData = readPacket() => [Target] match(tempData[0]) {",
      "Edge 30: [Source] println(\"send fail \" + e.message)\\n } finally { => [Target] }"
    ]
  }
}