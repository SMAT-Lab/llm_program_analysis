{
  "edge_analysis": {
    "static_total": 3,
    "llm_total": 11,
    "matched_edges": {
      "exact_matches": 3,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.2727272727272727,
      "recall": 1.0,
      "f1_score": 0.42857142857142855
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] protected func decodeMiddle(\\n row: BitArray,\\n startRange: Array<Int64>,\\n resultString: StringBuilder\\n ): Int64 {\\n let counters = decodeMiddleCounters\\n counters[0] = 0\\n counters[1] = 0\\n counters[2] = 0\\n counters[3] = 0\\n let end = row.size\\n var rowOffset = startRange[1]\\n var lgPatternFound = 0 => [Target] for (x in 0..6) {\\n if (rowOffset >= end) {\\n break\\n }\\n let bestMatch = decodeDigit(row, counters, rowOffset, L_AND_G_PATTERNS)\\n resultString.append(Char(UInt32('0') + UInt32(bestMatch % 10)))\\n for (counter in counters) {\\n rowOffset += counter\\n }\\n if (bestMatch >= 10) {\\n lgPatternFound |= 1 << (5 - x)\\n }\\n }",
      "Edge 1: [Source] for (x in 0..6) {\\n if (rowOffset >= end) {\\n break\\n }\\n let bestMatch = decodeDigit(row, counters, rowOffset, L_AND_G_PATTERNS)\\n resultString.append(Char(UInt32('0') + UInt32(bestMatch % 10)))\\n for (counter in counters) {\\n rowOffset += counter\\n }\\n if (bestMatch >= 10) {\\n lgPatternFound |= 1 << (5 - x)\\n }\\n } => [Target] determineFirstDigit(resultString, lgPatternFound)\\n let middleRange = findGuardPattern(row, rowOffset, true, MIDDLE_PATTERN)\\n rowOffset = middleRange[1]",
      "Edge 2: [Source] determineFirstDigit(resultString, lgPatternFound)\\n let middleRange = findGuardPattern(row, rowOffset, true, MIDDLE_PATTERN)\\n rowOffset = middleRange[1] => [Target] for (x in 0..6) {\\n if (rowOffset >= end) {\\n break\\n }\\n let bestMatch = decodeDigit(row, counters, rowOffset, L_PATTERNS)\\n resultString.append(Char(UInt32('0') + UInt32(bestMatch)))\\n for (counter in counters) {\\n rowOffset += counter\\n }\\n }",
      "Edge 3: [Source] for (x in 0..6) {\\n if (rowOffset >= end) {\\n break\\n }\\n let bestMatch = decodeDigit(row, counters, rowOffset, L_PATTERNS)\\n resultString.append(Char(UInt32('0') + UInt32(bestMatch)))\\n for (counter in counters) {\\n rowOffset += counter\\n }\\n } => [Target] rowOffset\\n }",
      "Edge 4: [Source] static func determineFirstDigit(resultString: StringBuilder, lgPatternFound: Int64) { => [Target] for (d in 0..10) {",
      "Edge 5: [Source] static func determineFirstDigit(resultString: StringBuilder, lgPatternFound: Int64) { => [Target] }\\nthrow NotFoundException()",
      "Edge 6: [Source] for (d in 0..10) { => [Target] if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {\\nresultString.insert(0, Char(UInt32('0') + UInt32(d)))\\nreturn",
      "Edge 7: [Source] for (d in 0..10) { => [Target] }"
    ]
  }
}