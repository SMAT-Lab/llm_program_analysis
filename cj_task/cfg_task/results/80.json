{
  "edge_analysis": {
    "static_total": 16,
    "llm_total": 16,
    "matched_edges": {
      "exact_matches": 14,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.875,
      "recall": 0.875,
      "f1_score": 0.875
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Brower(host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/browse\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var publisher = \"\"\n            match (httpContext.request.url.query) {",
      "Edge 3: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Brower(id, host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var brower = LibrariesDetail(host: host, id: id)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/keep-reading\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {"
    ],
    "extra_blocks": [
      "Edge 1: [Source] pathMap.add(\\n \"/opds/v2/libraries/:id/browse\",\\n {\\n httpContext =>\\n let id = httpContext.request.url.toString().split(\"/\")[4]\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n var publisher = \"\"\\n match (httpContext.request.url.query) {\\n case Some(x) => publisher = x.trimStart(\"publisher=\")\\n case None => ()\\n }\\n var brower = Brower(id, host: host, publisher: publisher)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(brower.toJson())\\n }\\n )\\npathMap.add(\\n \"/opds/v2/libraries/:id\",\\n {\\n httpContext =>\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n let id = httpContext.request.url.toString().split(\"/\")[4]\\n var brower = LibrariesDetail(host: host, id: id)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(brower.toJson())\\n }\\n )",
      "Edge 3: [Source] pathMap.add(\\n \"/opds/v2/libraries/:id/books/latest\",\\n {\\n httpContext =>\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n let id = httpContext.request.url.toString().split(\"/\")[4]\\n var page = 0\\n match (httpContext.request.url.query) {\\n case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\\n case None => ()\\n }\\n var brower = Latest(id, host: host, page: page)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(brower.toJson())\\n }\\n )\\npathMap.add(\\n \"/opds/v2/libraries/books/latest\",\\n {\\n httpContext =>\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n var page = 0\\n match (httpContext.request.url.query) {\\n case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\\n case None => ()\\n }\\n var brower = Latest(host: host, page: page)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(brower.toJson())\\n }\\n ) => [Target] pathMap.add(\\n \"/opds/v2/libraries/:id/series/latest\",\\n {\\n httpContext =>\\n let host = httpContext.request.headers.get(\"host\").toArray()[0]\\n let id = httpContext.request.url.toString().split(\"/\")[4]\\n var page = 0\\n match (httpContext.request.url.query) {\\n case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\\n case None => ()\\n }\\n var brower = Series(id, host: host, page: page)\\n httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\\n httpContext.responseBuilder.body(brower.toJson())\\n }\\n )"
    ]
  }
}