{
  "edge_analysis": {
    "static_total": 10,
    "llm_total": 22,
    "matched_edges": {
      "exact_matches": 5,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.227,
      "recall": 0.5,
      "f1_score": 0.315
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] public class ByteArrayUtils {\\n private static var CACHING_SHA2_DIGEST_LENGTH = 32\\n /*\\n \n => [Target] }",
      "Edge 1: [Source] public static func indexByte(source: Array<Byte>, target: Byte): Int64 { => [Target] for (i in 0 .. source.size) {",
      "Edge 2: [Source] public static func indexByte(source: Array<Byte>, target: Byte): Int64 { => [Target] return -1",
      "Edge 3: [Source] for (i in 0 .. source.size) { => [Target] if (source[i] == target) {\\n return i",
      "Edge 4: [Source] public static func scrambleRSA(password: String, publicKey: Array<Byte>, cipher: Array<Byte>): Array<Byte> {\\n var input: Array<Byte>\\nif(password.toArray().size == 0) { => [Target] input = Array<Byte>(1, item: 0)\\n}",
      "Edge 5: [Source] public static func scrambleRSA(password: String, publicKey: Array<Byte>, cipher: Array<Byte>): Array<Byte> {\\n var input: Array<Byte>\\nif(password.toArray().size == 0) { => [Target] } else {\\n input = Array<Byte>(password.toArray().size + 1, item: 0)\\n password.toArray().copyTo(input, 0, 0, password.toArray().size)\\n input[password.toArray().size] = 0\\n}",
      "Edge 6: [Source] input = Array<Byte>(1, item: 0)\\n} => [Target] var mysqlScrambleBuff = Array<Byte>(input.size, item: 0)\\n xorString(input, mysqlScrambleBuff, cipher, input.size)\\n var rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))\\n\\n var byteArraySteam1 = ByteArrayStream()\\n byteArraySteam1.write(mysqlScrambleBuff)\\n \\n var byteArraySteam2 = ByteArrayStream()\\n var opt = OAEPOption(SHA1(),SHA1())\\n rsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))\\n // rsaPub.encrypt(byteArraySteam1, byteArraySteam2, padType: PadOption.PKCS1)\\n var buffer = Array<Byte>(1024, item: 0)\\n var len = byteArraySteam2.read(buffer)\\n var res = Array<Byte>(len, item: 0)\\n buffer.copyTo(res, 0, 0, len)\\n return res",
      "Edge 7: [Source] } else {\\n input = Array<Byte>(password.toArray().size + 1, item: 0)\\n password.toArray().copyTo(input, 0, 0, password.toArray().size)\\n input[password.toArray().size] = 0\\n} => [Target] var mysqlScrambleBuff = Array<Byte>(input.size, item: 0)\\n xorString(input, mysqlScrambleBuff, cipher, input.size)\\n var rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))\\n\\n var byteArraySteam1 = ByteArrayStream()\\n byteArraySteam1.write(mysqlScrambleBuff)\\n \\n var byteArraySteam2 = ByteArrayStream()\\n var opt = OAEPOption(SHA1(),SHA1())\\n rsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))\\n // rsaPub.encrypt(byteArraySteam1, byteArraySteam2, padType: PadOption.PKCS1)\\n var buffer = Array<Byte>(1024, item: 0)\\n var len = byteArraySteam2.read(buffer)\\n var res = Array<Byte>(len, item: 0)\\n buffer.copyTo(res, 0, 0, len)\\n return res",
      "Edge 8: [Source] public static func xorString(src: Array<Byte>, to: Array<Byte>,scramble:Array<Byte>,len:Int64) {\\nvar pos = 0\\nvar scrambleLen = scramble.size => [Target] while (pos < len) {\\n to[pos] = src[pos] ^ scramble[pos % scrambleLen]\\n pos++\\n}",
      "Edge 9: [Source] while (pos < len) {\\n to[pos] = src[pos] ^ scramble[pos % scrambleLen]\\n pos++\\n} => [Target] }",
      "Edge 10: [Source] public static func appendLengthEncodedInteger(n: UInt64): Array<Byte> {\\n let result = ArrayList<Byte>()\\n if (n <= 250) {\\n result.append(UInt8(n))\\n } => [Target] else if (n <= 0xffff) {\\n result.append(0xfc)\\n result.append(UInt8(n & 0xff))\\n result.append(UInt8(n >> 8 & 0xff))\\n }\\n else if (n <= 0xffffff) {\\n result.append(0xfd)\\n result.append(UInt8(n & 0xff))\\n result.append(UInt8(n >> 8 & 0xff))\\n result.append(UInt8(n >> 16 & 0xff))\\n }",
      "Edge 11: [Source] else if (n <= 0xffff) {\\n result.append(0xfc)\\n result.append(UInt8(n & 0xff))\\n result.append(UInt8(n >> 8 & 0xff))\\n }\\n else if (n <= 0xffffff) {\\n result.append(0xfd)\\n result.append(UInt8(n & 0xff))\\n result.append(UInt8(n >> 8 & 0xff))\\n result.append(UInt8(n >> 16 & 0xff)) => [Target] else {\\n result.append(0xfe)\\n result.append(UInt8(n & 0xff))\\n result.append(UInt8(n >> 8 & 0xff))\\n result.append(UInt8(n >> 16 & 0xff))\\n result.append(UInt8(n >> 24 & 0xff))\\n result.append(UInt8(n >> 32 & 0xff))\\n result.append(UInt8(n >> 40 & 0xff))\\n result.append(UInt8(n >> 48 & 0xff))\\n result.append(UInt8(n >> 56 & 0xff))\\n }\\n return result.toArray()\\n }",
      "Edge 12: [Source] public static func uint64ToBytes(n: UInt64): Array<Byte> {\\nlet result = ArrayList<Byte>()\\nresult.append(UInt8(n & 0xff))\\nresult.append(UInt8(n >> 8 & 0xff))\\nresult.append(UInt8(n >> 16 & 0xff))\\nresult.append(UInt8(n >> 24 & 0xff))\\nresult.append(UInt8(n >> 32 & 0xff))\\nresult.append(UInt8(n >> 40 & 0xff))\\nresult.append(UInt8(n >> 48 & 0xff))\\nresult.append(UInt8(n >> 56 & 0xff)) => [Target] return result.toArray()\\n}",
      "Edge 13: [Source] public static func readLengthEncodedString(data: Array<Byte>) {\\n let result = readLengthEncodedInteger(data)\\n var num = result[0]\\n var isNull = result[1]\\n var n = result[2] => [Target] if (num < 1) {\\n return (data[n..n], isNull, n)\\n }\\n n += Int64(num)",
      "Edge 14: [Source] if (num < 1) {\\n return (data[n..n], isNull, n)\\n }\\n n += Int64(num) => [Target] if (data.size >= n) {\\n return (data[n - Int64(num) .. n], false, n)\\n }\\n return (Array<Byte>(), false, n)\\n }",
      "Edge 15: [Source] public static func lengthEncoderInteger(number: UInt64): Array<Byte> {\\n let result = ArrayList<Byte>() => [Target] if (number <= 250) {\\n result.append(UInt8(number))\\n }\\n\\n return result.toArray()",
      "Edge 16: [Source] public static func lengthEncoderInteger(number: UInt64): Array<Byte> {\\n let result = ArrayList<Byte>() => [Target] else if (number <= 0xffff) {\\n result.append(UInt8(0.fc))\\n }\\n\\n return result.toArray()",
      "Edge 17: [Source] public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {\\n match(data[0]) { => [Target] case 251 => \\n return (0, true, 1)",
      "Edge 18: [Source] public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {\\n match(data[0]) { => [Target] case 252 => \\n return (\\n UInt64(data[1]) | UInt64(data[2])<<8, false, 3\\n )",
      "Edge 19: [Source] public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {\\n match(data[0]) { => [Target] case 253 => \\n return (\\n UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16, false, 4\\n )",
      "Edge 20: [Source] public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {\\n match(data[0]) { => [Target] case 254 => \\n return (\\n UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16 | UInt64(data[4]) << 24 |\\n UInt64(data[5]) << 32 | UInt64(data[6]) << 40 | UInt64(data[7]) << 48 | UInt64(data[8]) << 56,\\n false, 9\\n )",
      "Edge 21: [Source] public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {\\n match(data[0]) { => [Target] case _ => return (UInt64(data[0]), false , 1)"
    ]
  }
}