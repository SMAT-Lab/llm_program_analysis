{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 170,
  "functions": [],
  "classes": [
    {
      "name": "LinkedEntry<K, V>",
      "type": "class",
      "start_line": 2,
      "end_line": 64,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 9,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init() {\n      this(Option<K>.None);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init() {",
              "successors": [
                {
                  "id": 2,
                  "label": "this(Option<K>.None);",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 12,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(key: Option<K>) {\n        this.key = key;\n        this.next = Some(this)\n        this.prev = Some(this)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(key: Option<K>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.key = key;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.next = Some(this)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    this.prev = Some(this)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "removeLast",
          "type": "function",
          "start_line": 17,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func removeLast(): Option<V> {\n      let valueSize: Int64 = size();\n      return if(valueSize > 0) {\n        this.values.remove(valueSize - 1)\n      } else {\n        None\n      };\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let valueSize: Int64 = size();",
              "successors": [
                {
                  "id": 2,
                  "label": "if(valueSize > 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.values.remove(valueSize - 1)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "size",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func size(): Int64 {\n      return this.values.size\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func size(): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "  return this.values.size",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "add",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func add(value: V): Unit {\n      this.values.append(value);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func add(value: V): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "  this.values.append(value);\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "==(right: LinkedEntry<K, V>)",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func ==(right: LinkedEntry<K, V>): Bool {\n        return equals(right)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func ==(right: LinkedEntry<K, V>): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "return equals(right)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "!=(right: LinkedEntry<K, V>)",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func !=(right: LinkedEntry<K, V>): Bool {\n      return !equals(right)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func !=(right: LinkedEntry<K, V>): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return !equals(right)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "equals",
          "type": "function",
          "start_line": 37,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func equals(right: LinkedEntry<K, V>): Bool {\n        if(match(this.key) {\n            case Some(x) => true\n            case _ => false\n        } && match(right.key) {\n                case Some(x) => true\n                case _ => false\n            }) {\n            return this.key.getOrThrow() == right.key.getOrThrow()\n        } else if(match(this.key) {\n            case Some(x) => false\n            case _ => true\n        } && match(right.key) {\n                case Some(x) => false\n                case _ => true\n            }) {\n                return true\n        } else {\n            return false\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func equals(right: LinkedEntry<K, V>): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "if(match(this.key) { case Some(x) => true case _ => false } && match(right.key) { case Some(x) => true case _ => false }) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return this.key.getOrThrow() == right.key.getOrThrow()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "else if(match(this.key) { case Some(x) => false case _ => true } && match(right.key) { case Some(x) => false case _ => true }) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return true",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "else {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "return false",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 58,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toString(): String {\n        return if(match(this.key) {\n            case Some(x) => true\n            case _ => false\n        }) {\"None\"} else {this.key.getOrThrow().toString()}\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toString(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "return if(match(this.key) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case Some(x) => true",
                      "successors": [
                        {
                          "id": 5,
                          "label": "\"None\"",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "case _ => false",
                      "successors": [
                        {
                          "id": 6,
                          "label": "this.key.getOrThrow().toString()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class LinkedEntry<K, V> <: Equatable<LinkedEntry<K, V>> where K <: Equatable<K> & Hashable & ToString {\n    public var key: Option<K> = None;\n    private var values: ArrayList<V> = ArrayList<V>();\n    public var next: Option<LinkedEntry<K, V>> = None;\n    public var prev: Option<LinkedEntry<K, V>> = None;\n    // Used only for the first item in the list which we will treat specially and which will not\n    // contain a value.\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n  }",
      "blocks": [
        {
          "id": 1,
          "label": "public class LinkedEntry<K, V> <: Equatable<LinkedEntry<K, V>> where K <: Equatable<K> & Hashable & ToString {",
          "successors": [
            {
              "id": 2,
              "label": "public var key: Option<K> = None;",
              "successors": [
                {
                  "id": 3,
                  "label": "private var values: ArrayList<V> = ArrayList<V>();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "public var next: Option<LinkedEntry<K, V>> = None;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "public var prev: Option<LinkedEntry<K, V>> = None;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "// Used only for the first item in the list which we will treat specially and which will not\n// contain a value.",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GroupedLinkedMap<K, V>",
      "type": "class",
      "start_line": 65,
      "end_line": 170,
      "functions": [
        {
          "name": "put",
          "type": "function",
          "start_line": 68,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func put(key: K, value: V): Unit {\n    var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);\n    if(match(entry) {\n        case Some(x) => false\n        case _ => true\n    }) {\n      entry = Some(LinkedEntry<K, V>(Some(key)));\n      makeTail(entry.getOrThrow());\n      let b = keyToEntry.put(key, entry.getOrThrow());\n    } else {\n      key.offer();\n    }\n    entry.getOrThrow().add(value);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func put(key: K, value: V): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if(match(entry) {\n    case Some(x) => false\n    case _ => true\n}) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "entry = Some(LinkedEntry<K, V>(Some(key)));\nmakeTail(entry.getOrThrow());\nlet b = keyToEntry.put(key, entry.getOrThrow());",
                          "successors": [
                            {
                              "id": 6,
                              "label": "entry.getOrThrow().add(value);",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "key.offer();",
                          "successors": [
                            {
                              "id": 6,
                              "label": "entry.getOrThrow().add(value);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 82,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func get(key: K): Option<V> {\n    var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);\n    if (match(entry) {\n        case Some(x) => false\n        case _ => true\n    }) {\n      entry = Some(LinkedEntry<K, V>(Some(key)))\n      let b = keyToEntry.put(key, entry.getOrThrow());\n    } else {\n      key.offer();\n    }\n    let en = entry.getOrThrow()\n    makeHead(en);\n    return en.removeLast();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func get(key: K): Option<V> {",
              "successors": [
                {
                  "id": 2,
                  "label": "var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (match(entry) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case Some(x) => false",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "label": "case _ => true",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "entry = Some(LinkedEntry<K, V>(Some(key)))",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "let b = keyToEntry.put(key, entry.getOrThrow());",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "} else {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "key.offer();",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "let en = entry.getOrThrow()",
                  "successors": [
                    {
                      "id": 13,
                      "label": "makeHead(en);",
                      "successors": [
                        {
                          "id": 14,
                          "label": "return en.removeLast();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "removeLast",
          "type": "function",
          "start_line": 97,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func removeLast(): Option<V> {\n    var last: LinkedEntry<K, V> = head.prev.getOrThrow();\n    while (!last.equals(head)) {\n      let removed: Option<V> = last.removeLast();\n      if (match(removed) {\n        case Some(x) => true\n        case _ => false\n      }) {\n        return removed;\n      } else {\n        // We will clean up empty lru entries since they are likely to have been one off or\n        // unusual sizes and\n        // are not likely to be requested again so the gc thrash should be minimal. Doing so will\n        // speed up our\n        // removeLast operation in the future and prevent our linked list from growing to\n        // arbitrarily large\n        // sizes.\n        removeEntry(last);\n        keyToEntry.remove(last.key.getOrThrow());\n        last.key.getOrThrow().offer();\n      }\n      last = last.prev.getOrThrow();\n    }\n    return None;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func removeLast(): Option<V> {",
              "successors": [
                {
                  "id": 2,
                  "label": "var last: LinkedEntry<K, V> = head.prev.getOrThrow();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (!last.equals(head)) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let removed: Option<V> = last.removeLast();",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (match(removed) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "case Some(x) => true",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "return removed;",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 7,
                                  "label": "case _ => false }) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "removeEntry(last);\nkeyToEntry.remove(last.key.getOrThrow());\nlast.key.getOrThrow().offer();",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "last = last.prev.getOrThrow();",
                                          "successors": [
                                            {
                                              "id": 3,
                                              "label": "while (!last.equals(head)) {",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "return None;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 122,
          "end_line": 147,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toString(): String {\n    var sb: StringBuilder = StringBuilder(\"GroupedLinkedMap( \");\n    var current: LinkedEntry<K, V> = head.next.getOrThrow();\n    var hadAtLeastOneItem: Bool  = false;\n    while (!current.equals(head)) {\n      hadAtLeastOneItem = true;\n      //\u9002\u914d\n      //sb.append('{').append(current.key.getOrThrow()).append(':').append(current.size()).append(\"}, \");\n      sb.append('{')\n      sb.append(current.key.getOrThrow())\n      sb.append(':')\n      sb.append(current.size())\n      sb.append(\"}, \")\n      current = current.next.getOrThrow();\n    }\n    if (hadAtLeastOneItem) {\n        let r = Range<Int64>(sb.size - 2, sb.size, 1, true, false, true)\n        //\u9002\u914d\n        //sb.remove(r);\n        var strTemp = sb.toString()\n        let r2: Range<Int64> = 0 .. sb.size - 2\n        var subStrTemp = strTemp[r2]\n        sb = StringBuilder(subStrTemp)\n    }\n    return sb.append(\" )\").toString();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toString(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "var sb: StringBuilder = StringBuilder(\"GroupedLinkedMap( \");\nvar current: LinkedEntry<K, V> = head.next.getOrThrow();\nvar hadAtLeastOneItem: Bool  = false;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (!current.equals(head)) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "hadAtLeastOneItem = true;\nsb.append('{')\nsb.append(current.key.getOrThrow())\nsb.append(':')\nsb.append(current.size())\nsb.append(\"}, \")\ncurrent = current.next.getOrThrow();",
                          "successors": [
                            {
                              "id": 3,
                              "label": "while (!current.equals(head)) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "if (hadAtLeastOneItem) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "let r = Range<Int64>(sb.size - 2, sb.size, 1, true, false, true)\nvar strTemp = sb.toString()\nlet r2: Range<Int64> = 0 .. sb.size - 2\nvar subStrTemp = strTemp[r2]\nsb = StringBuilder(subStrTemp)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "return sb.append(\" )\").toString();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "makeHead",
          "type": "function",
          "start_line": 149,
          "end_line": 154,
          "functions": [],
          "classes": [],
          "simplified_code": "  private func makeHead(entry: LinkedEntry<K, V>): Unit {\n    removeEntry<K, V>(entry);\n    entry.prev = head;\n    entry.next = head.next;\n    updateEntry<K, V>(entry);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private func makeHead(entry: LinkedEntry<K, V>): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "removeEntry<K, V>(entry);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "entry.prev = head;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "entry.next = head.next;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "updateEntry<K, V>(entry);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "label": "}",
              "successors": []
            }
          ]
        },
        {
          "name": "makeTail",
          "type": "function",
          "start_line": 156,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": "  private func makeTail(entry: LinkedEntry<K, V>): Unit {\n    removeEntry<K, V>(entry);\n    entry.prev = head.prev;\n    entry.next = head;\n    updateEntry<K, V>(entry);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private func makeTail(entry: LinkedEntry<K, V>): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "removeEntry<K, V>(entry);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "entry.prev = head.prev;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "entry.next = head;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "updateEntry<K, V>(entry);",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "updateEntry",
          "type": "function",
          "start_line": 162,
          "end_line": 165,
          "functions": [],
          "classes": [],
          "simplified_code": "  private static func updateEntry<K, V>(entry: LinkedEntry<K, V>) where K <: Poolable & Hashable & Equatable<K> & ToString {\n    entry.next.getOrThrow().prev = Some(entry);\n    entry.prev.getOrThrow().next = Some(entry);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "entry.next.getOrThrow().prev = Some(entry);",
              "successors": [
                {
                  "id": 2,
                  "label": "entry.prev.getOrThrow().next = Some(entry);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "removeEntry",
          "type": "function",
          "start_line": 166,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": "  private static func removeEntry<K, V>(entry: LinkedEntry<K, V>) where K <: Poolable & Hashable & Equatable<K> & ToString  {\n    entry.prev.getOrThrow().next = entry.next;\n    entry.next.getOrThrow().prev = entry.prev;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func removeEntry<K, V>(entry: LinkedEntry<K, V>) where K <: Poolable & Hashable & Equatable<K> & ToString {",
              "successors": [
                {
                  "id": 2,
                  "label": "entry.prev.getOrThrow().next = entry.next;",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "entry.next.getOrThrow().prev = entry.prev;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class GroupedLinkedMap<K, V> where K <: Poolable & Hashable & Equatable<K> & ToString {\n  private let head: LinkedEntry<K, V> = LinkedEntry<K, V>();\n  private let keyToEntry: HashMap<K, LinkedEntry<K, V>>  = HashMap<K, LinkedEntry<K, V>>();\n  }\n  }\n  }\n  }\n  // Make the entry the most recently used item.\n  }\n  // Make the entry the least recently used item.\n  }\n  }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class GroupedLinkedMap<K, V> where K <: Poolable & Hashable & Equatable<K> & ToString {",
          "successors": [
            {
              "id": 2,
              "label": "private let head: LinkedEntry<K, V> = LinkedEntry<K, V>();",
              "successors": [
                {
                  "id": 3,
                  "label": "private let keyToEntry: HashMap<K, LinkedEntry<K, V>>  = HashMap<K, LinkedEntry<K, V>>();",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package glide\n  }\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package glide",
      "successors": []
    }
  ]
}