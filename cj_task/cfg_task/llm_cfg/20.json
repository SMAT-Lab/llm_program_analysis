{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 74,
  "functions": [
    {
      "name": "ToStringClass",
      "type": "function",
      "start_line": 8,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "simplified_code": "public macro ToStringClass(input: Tokens): Tokens {\n    var classDecl = getClassDecl(input)\n    return addToString(classDecl).toTokens()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public macro ToStringClass(input: Tokens): Tokens {",
          "successors": [
            {
              "id": 2,
              "label": "var classDecl = getClassDecl(input)",
              "successors": [
                {
                  "id": 3,
                  "label": "return addToString(classDecl).toTokens()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "NoToString",
      "type": "function",
      "start_line": 13,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": "public macro NoToString(input: Tokens): Tokens {\n    //\u5f53\u5224\u65ad\u5916\u90e8\u5b8f\u4e0d\u5b58\u5728Data\u6216ToStringClass\u6ce8\u89e3\u65f6\u4f1a\u62a5\u9519\n    if (!insideParentContext(\"Data\") && !insideParentContext(\"ToStringClass\")) {\n            throw MacroContextException (\"NoToString need Data or ToStringClass\")\n    }\n    let decl = VarDecl(input)\n    setItem(decl.identifier.value, true)\n    return input\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public macro NoToString(input: Tokens): Tokens {",
          "successors": [
            {
              "id": 2,
              "label": "if (!insideParentContext(\"Data\") && !insideParentContext(\"ToStringClass\")) {",
              "successors": [
                {
                  "id": 3,
                  "label": "throw MacroContextException (\"NoToString need Data or ToStringClass\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "let decl = VarDecl(input)\nsetItem(decl.identifier.value, true)\nreturn input",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "addToString",
      "type": "function",
      "start_line": 24,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "simplified_code": "func addToString(clazz: ClassDecl): ClassDecl {\n    let types = clazz.superTypes\n    if (!isSuperToString(types)) {\n        if (clazz.upperBound.value != \"<:\") {\n            clazz.upperBound = Token(UPPERBOUND, \"<:\")\n        }\n        types.append(RefType(quote(ToString)))\n    }\n    if (isFuncToString(clazz)) {\n        return clazz\n    }\n    var sb = StringBuilder()\n    //\u63a5\u53d7\u5185\u90e8\u5b8fNoToString\u6d88\u606f\n    let msg = getChildMessages(NO_TO_STRING)\n    for (d in clazz.body.decls) {\n        if (isFunc(d.keyword)) {\n            continue;\n        }\n        var kind = match (d) {\n            case m: MacroExpandDecl =>\n                let vd = (m.macroInputDecl as VarDecl).getOrThrow()\n                Some(vd.identifier.value)\n            case v: VarDecl => Some(v.identifier.value)\n            case _ => None<String>\n        }\n\n        if (let Some(value) <- kind) {\n            let hasKey = msg |> any {m => m.hasItem(value)}\n            if (!hasKey) {\n                sb.append(\"${value}:\\${${value}},\")\n            }\n        }\n    }\n    let str = sb.toString().trimRight(\",\")\n    let funDecl = FuncDecl(quote(public func toString():String{\n        return $(str)\n    }))\n    clazz.body.decls.append(funDecl)\n    return clazz\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func addToString(clazz: ClassDecl): ClassDecl {\n    let types = clazz.superTypes",
          "successors": [
            {
              "id": 2,
              "label": "if (!isSuperToString(types)) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    if (clazz.upperBound.value != \"<:\") {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        clazz.upperBound = Token(UPPERBOUND, \"<:\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "    types.append(RefType(quote(ToString)))",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "if (isFuncToString(clazz)) {",
              "successors": [
                {
                  "id": 7,
                  "label": "    return clazz",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "label": "var sb = StringBuilder()",
              "successors": []
            },
            {
              "id": 9,
              "label": "//\u63a5\u53d7\u5185\u90e8\u5b8fNoToString\u6d88\u606f\nlet msg = getChildMessages(NO_TO_STRING)\nfor (d in clazz.body.decls) {",
              "successors": [
                {
                  "id": 10,
                  "label": "    if (isFunc(d.keyword)) {",
                  "successors": [
                    {
                      "id": 11,
                      "label": "        continue;",
                      "successors": [
                        {
                          "id": 12,
                          "label": "// Loop continuation point after continue statement",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 13,
                  "label": "    var kind = match (d) {",
                  "successors": [
                    {
                      "id": 14,
                      "label": "        case m: MacroExpandDecl =>",
                      "successors": [
                        {
                          "id": 15,
                          "label": "            let vd = (m.macroInputDecl as VarDecl).getOrThrow()\n            Some(vd.identifier.value)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 16,
                      "label": "        case v: VarDecl => Some(v.identifier.value)",
                      "successors": []
                    },
                    {
                      "id": 17,
                      "label": "        case _ => None<String>",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 18,
                  "label": "    if (let Some(value) <- kind) {",
                  "successors": [
                    {
                      "id": 19,
                      "label": "        let hasKey = msg |> any {m => m.hasItem(value)}\n        if (!hasKey) {",
                      "successors": [
                        {
                          "id": 20,
                          "label": "            sb.append(\"${value}:\\${${value}},\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 21,
              "label": "let str = sb.toString().trimRight(\",\")\nlet funDecl = FuncDecl(quote(public func toString():String{\n    return $(str)\n}))\nclazz.body.decls.append(funDecl)\nreturn clazz",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "isFuncToString",
      "type": "function",
      "start_line": 65,
      "end_line": 69,
      "functions": [],
      "classes": [],
      "simplified_code": "func isFuncToString(clazz: ClassDecl): Bool {\n    return clazz.body.decls |> filter {d => isFunc(d.keyword)} |> any {\n        d => d.identifier.value == \"toString\"\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func isFuncToString(clazz: ClassDecl): Bool {",
          "successors": [
            {
              "id": 2,
              "label": "return clazz.body.decls |> filter {d => isFunc(d.keyword)} |> any {",
              "successors": [
                {
                  "id": 3,
                  "label": "d => d.identifier.value == \"toString\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "isSuperToString",
      "type": "function",
      "start_line": 71,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": "func isSuperToString(superTypes: ArrayList<TypeNode>): Bool {\n    return superTypes |>\n        any {x: TypeNode => x is RefType && (x as RefType).getOrThrow().identifier.value.indexOf(\"ToString\") != None}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func isSuperToString(superTypes: ArrayList<TypeNode>): Bool {",
          "successors": [
            {
              "id": 2,
              "label": "    return superTypes |> any {x: TypeNode => x is RefType && (x as RefType).getOrThrow().identifier.value.indexOf(\"ToString\") != None}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "macro package cj_easy_data.macros\n\nimport std.ast.*\nimport std.collection.*\n\nconst NO_TO_STRING = \"NoToString\"\n//\u52a0\u5728\u7c7b\u4e0a\n}\n//\u52a0\u5728\u5b57\u6bb5\u4e0a,\u907f\u514d\u6ca1\u6709toString\u65b9\u6cd5\u7684\u7c7b\u7f16\u8bd1\u9519\u8bef\n}\n\n//\u6dfb\u52a0toString\u65b9\u6cd5\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package cj_easy_data.macros",
      "successors": [
        {
          "id": 2,
          "label": "import std.ast.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.collection.*",
              "successors": [
                {
                  "id": 4,
                  "label": "const NO_TO_STRING = \"NoToString\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}