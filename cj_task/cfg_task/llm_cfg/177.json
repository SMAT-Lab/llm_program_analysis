{
  "name": "utils.nio",
  "type": "CFG",
  "start_line": 1,
  "end_line": 267,
  "functions": [
    {
      "name": "ArrayCopy",
      "type": "function",
      "start_line": 2,
      "end_line": 10,
      "functions": [],
      "classes": [],
      "simplified_code": "public func ArrayCopy(src: Array<Byte>, srcPos: Int64, dest: Array<Byte>, destPos: Int64, length: Int64) {\n    if ((srcPos | destPos | length) < 0) {\n        throw IndexOutOfBoundsException()\n    }\n    if (destPos > dest.size) {\n        throw IndexOutOfBoundsException()\n    }\n    src.copyTo(dest, srcPos, destPos, length)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func ArrayCopy(src: Array<Byte>, srcPos: Int64, dest: Array<Byte>, destPos: Int64, length: Int64) {",
          "successors": [
            {
              "id": 2,
              "label": "if ((srcPos | destPos | length) < 0) {",
              "successors": [
                {
                  "id": 3,
                  "label": "throw IndexOutOfBoundsException()",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "if (destPos > dest.size) {",
              "successors": [
                {
                  "id": 5,
                  "label": "throw IndexOutOfBoundsException()",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "src.copyTo(dest, srcPos, destPos, length)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ByteBuffer",
      "type": "class",
      "start_line": 11,
      "end_line": 262,
      "functions": [
        {
          "name": "<init>",
          "type": "function",
          "start_line": 14,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    init (mark: Int64, position: Int64, limits: Int64, capacity: Int64, hbs: Array<Byte>, offsets: Int64) {\n        super(mark, position, limits, capacity)\n        this.hb = hbs\n        this.offset = offsets\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init (mark: Int64, position: Int64, limits: Int64, capacity: Int64, hbs: Array<Byte>, offsets: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super(mark, position, limits, capacity)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.hb = hbs",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    this.offset = offsets",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "<init>",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    init (cap: Int64, lims: Int64) {\n        this (-1, 0, lims, cap, Array<Byte>(cap, item: 0), 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init (cap: Int64, lims: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this (-1, 0, lims, cap, Array<Byte>(cap, item: 0), 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "<init>",
          "type": "function",
          "start_line": 22,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    init (bufs: Array<Byte>, off: Int64, len: Int64) {\n        this (-1, off, off+len, bufs.size, bufs, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init (bufs: Array<Byte>, off: Int64, len: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this (-1, off, off+len, bufs.size, bufs, 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "<init>",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected init (bufs: Array<Byte>, mark: Int64, pos: Int64, lim: Int64, cap: Int64, off: Int64) {\n        this(mark, pos, lim, cap, bufs, off)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "protected init (bufs: Array<Byte>, mark: Int64, pos: Int64, lim: Int64, cap: Int64, off: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this(mark, pos, lim, cap, bufs, off)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "allocate",
          "type": "function",
          "start_line": 28,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func allocate(capacitys: Int64): ByteBuffer {\n        if (capacitys < 0) {\n            throw IllegalArgumentException()\n        }\n        return ByteBuffer(capacitys, capacitys)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func allocate(capacitys: Int64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (capacitys < 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw IllegalArgumentException()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "return ByteBuffer(capacitys, capacitys)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "wrap",
          "type": "function",
          "start_line": 34,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func wrap(arrays: Array<UInt8>, offset: Int64, length: Int64): ByteBuffer {\n        try{\n            return ByteBuffer(arrays,offset,length)\n        } catch (ex: IllegalArgumentException) {\n            throw IndexOutOfBoundsException()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "try{",
              "successors": [
                {
                  "id": 2,
                  "label": "return ByteBuffer(arrays,offset,length)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "catch (ex: IllegalArgumentException) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "throw IndexOutOfBoundsException()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "wrap",
          "type": "function",
          "start_line": 41,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func wrap(arrays: Array<UInt8>): ByteBuffer {\n        return wrap(arrays, 0, arrays.size)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func wrap(arrays: Array<UInt8>): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "return wrap(arrays, 0, arrays.size)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 44,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func get(dst: Array<UInt8>): ByteBuffer {\n        return get(dst, 0, dst.size)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func get(dst: Array<UInt8>): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "return get(dst, 0, dst.size)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "put",
          "type": "function",
          "start_line": 47,
          "end_line": 49,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func put(srcs: Array<UInt8>): ByteBuffer {\n        return this.put(srcs, 0, srcs.size)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func put(srcs: Array<UInt8>): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "return this.put(srcs, 0, srcs.size)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "hasArray",
          "type": "function",
          "start_line": 50,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func hasArray(): Bool {\n        return false\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func hasArray(): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "return false",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "array",
          "type": "function",
          "start_line": 53,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func array(): Array<UInt8> {\n        return this.hb\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func array(): Array<UInt8> {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return this.hb",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "arrayOffset",
          "type": "function",
          "start_line": 56,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func arrayOffset(): Int64 {\n        return this.offset\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func arrayOffset(): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return this.offset",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "position",
          "type": "function",
          "start_line": 59,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func position(newPosit: Int64): ByteBuffer {\n        super.position(newPosit)\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func position(newPosit: Int64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super.position(newPosit)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "limit",
          "type": "function",
          "start_line": 63,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func limit(newLim: Int64): ByteBuffer {\n        super.limit(newLim)\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func limit(newLim: Int64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super.limit(newLim)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "start_line": 67,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func reset(): ByteBuffer {\n        super.reset()\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func reset(): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super.reset()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "clear",
          "type": "function",
          "start_line": 71,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func clear (): ByteBuffer {\n        super.clear()\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func clear (): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super.clear()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "flip",
          "type": "function",
          "start_line": 75,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func flip(): ByteBuffer {\n        super.flip()\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func flip(): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "super.flip()",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "return this",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "rewind",
          "type": "function",
          "start_line": 79,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func rewind(): ByteBuffer {\n        super.rewind()\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func rewind(): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "super.rewind()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 83,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toString(): String {\n        let sbd = StringBuilder()\n        sbd.append(\"ByteBuffer: [offset=\")\n        sbd.append(this.offset)\n        sbd.append(\" mark=\")\n        sbd.append(this.mar)\n        sbd.append(\" pos=\")\n        sbd.append(position())\n        sbd.append(\" lim=\")\n        sbd.append(limit())\n        sbd.append(\" cap=\")\n        sbd.append(capacity())\n        sbd.append(\"]\")\n        let src = sbd.toString()\n        sbd.reset()\n        return src\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toString(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "let sbd = StringBuilder()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "sbd.append(\"ByteBuffer: [offset=\")",
                      "successors": [
                        {
                          "id": 4,
                          "label": "sbd.append(this.offset)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "sbd.append(\" mark=\")",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "sbd.append(this.mar)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "sbd.append(\" pos=\")",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "sbd.append(position())",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "sbd.append(\" lim=\")",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "sbd.append(limit())",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "sbd.append(\" cap=\")",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "sbd.append(capacity())",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "sbd.append(\"]\")",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "let src = sbd.toString()",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "sbd.reset()",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "return src",
                                                                          "successors": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "hashCode",
          "type": "function",
          "start_line": 101,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func hashCode(): Int64 {\n        var hc: Int32 = 1\n        var p = position()\n        for (i in limit()-1..=p:-1) {\n            hc = 31 * hc + Int32(get(i))\n        }\n        return Int64(hc)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func hashCode(): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "var hc: Int32 = 1\nvar p = position()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (i in limit()-1..=p:-1) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "hc = 31 * hc + Int32(get(i))",
                          "successors": [
                            {
                              "id": 3,
                              "label": "for (i in limit()-1..=p:-1) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "return Int64(hc)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 109,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func == (thats: Buffer): Bool {\n        return refEq(this, thats)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func == (thats: Buffer): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "return refEq(this, thats)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 112,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func != (thats: Buffer): Bool {\n        return !refEq(this, thats)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func != (thats: Buffer): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "return !refEq(this, thats)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "slice",
          "type": "function",
          "start_line": 115,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func slice(): ByteBuffer {\n        return ByteBuffer(this.hb, -1, 0, this.remaining(), this.remaining(), this.position() + offset)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func slice(): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "return ByteBuffer(this.hb, -1, 0, this.remaining(), this.remaining(), this.position() + offset)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "slice",
          "type": "function",
          "start_line": 118,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func slice (pos: Int64, limit: Int64): ByteBuffer {\n        let rem = limit - pos\n        return ByteBuffer(hb, -1, 0, rem, rem, pos + offset)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func slice (pos: Int64, limit: Int64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let rem = limit - pos",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    return ByteBuffer(hb, -1, 0, rem, rem, pos + offset)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "duplicate",
          "type": "function",
          "start_line": 122,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func duplicate(): ByteBuffer {\n        return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func duplicate(): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "asReadOnlyBuffer",
          "type": "function",
          "start_line": 125,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func asReadOnlyBuffer(): ByteBuffer {\n        return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func asReadOnlyBuffer(): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "ix",
          "type": "function",
          "start_line": 128,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected func ix(ii: Int64): Int64 {\n        return ii + offset\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "protected func ix(ii: Int64): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return ii + offset",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 131,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func get(): Byte {\n        return hb[ix(nextGetIndex())]\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func get(): Byte {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return hb[ix(nextGetIndex())]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 134,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func get(i:Int64) : Byte {\n        return hb[ix(checkIndex(i))]\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func get(i:Int64) : Byte {",
              "successors": [
                {
                  "id": 2,
                  "label": "return hb[ix(checkIndex(i))]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 137,
          "end_line": 145,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func get(dsts: Array<Byte>, offset: Int64, length: Int64): ByteBuffer {\n        checkBounds(offset, length, dsts.size)\n        if (length > this.remaining()) {\n            throw Exception() // BufferUnderflowException\n        }\n        ArrayCopy(hb, ix(position()), dsts, offset, length)\n        position(position() + length)\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "checkBounds(offset, length, dsts.size)",
              "successors": [
                {
                  "id": 2,
                  "label": "if (length > this.remaining()):",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw Exception()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "ArrayCopy(hb, ix(position()), dsts, offset, length)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "position(position() + length)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return this",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "put",
          "type": "function",
          "start_line": 146,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func put(x: Byte): ByteBuffer {\n        hb[ix(nextGetIndex())] = x\n        return this",
          "blocks": [
            {
              "id": 1,
              "label": "public func put(x: Byte): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    hb[ix(nextGetIndex())] = x",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "put",
          "type": "function",
          "start_line": 150,
          "end_line": 152,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func put(i: Int64, x: Byte): ByteBuffer {\n        hb[ix(checkIndex(i))] = x\n        return this",
          "blocks": [
            {
              "id": 1,
              "label": "public func put(i: Int64, x: Byte): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "hb[ix(checkIndex(i))] = x",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "put",
          "type": "function",
          "start_line": 154,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func put(src: Array<Byte>, offsets: Int64, length: Int64): ByteBuffer {\n        checkBounds(offsets, length, src.size)\n        if (length > remaining()) {\n            throw Exception() // BufferOverflowException\n        }\n        ArrayCopy(src, offsets, hb, ix(position()), length)\n        position(position() + length)\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func put(src: Array<Byte>, offsets: Int64, length: Int64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "checkBounds(offsets, length, src.size)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (length > remaining()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "throw Exception() // BufferOverflowException",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "ArrayCopy(src, offsets, hb, ix(position()), length)",
                      "successors": [
                        {
                          "id": 6,
                          "label": "position(position() + length)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "return this",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "put",
          "type": "function",
          "start_line": 163,
          "end_line": 178,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func put(srcs: ByteBuffer): ByteBuffer {\n        if (srcs is ByteBuffer) {\n            if (srcs == this) {\n                throw createSameBufferException()\n            }\n            let sb: ByteBuffer =(srcs as ByteBuffer).getOrThrow()\n            let n = sb.remaining()\n            if (n > remaining()) {\n                throw BufferOverflowException() // BufferOverflowException\n            }\n            ArrayCopy(sb.hb, sb.ix(sb.position()), hb, ix(position()), n)\n            sb.position(sb.position() + n )\n            position(position() +n)\n        }\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func put(srcs: ByteBuffer): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (srcs is ByteBuffer) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (srcs == this) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "throw createSameBufferException()",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "let sb: ByteBuffer =(srcs as ByteBuffer).getOrThrow()",
                      "successors": [
                        {
                          "id": 6,
                          "label": "let n = sb.remaining()",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if (n > remaining()) {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "throw BufferOverflowException()",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "ArrayCopy(sb.hb, sb.ix(sb.position()), hb, ix(position()), n)",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "sb.position(sb.position() + n )",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "position(position() +n)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "return this",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "compact",
          "type": "function",
          "start_line": 179,
          "end_line": 185,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func compact(): ByteBuffer {\n        ArrayCopy(hb, ix(position()), hb, ix(0), remaining())\n        position(remaining())\n        limit(capacity())\n        discardMark()\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func compact(): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    ArrayCopy(hb, ix(position()), hb, ix(0), remaining())",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    position(remaining())",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    limit(capacity())",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    discardMark()",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    return this",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "putLong",
          "type": "function",
          "start_line": 187,
          "end_line": 189,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func putLong(val: Int64): ByteBuffer {\n        this.putUInt64(UInt64(val))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func putLong(val: Int64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.putUInt64(UInt64(val))",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "putInt",
          "type": "function",
          "start_line": 191,
          "end_line": 193,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func putInt(val: Int32): ByteBuffer {\n        this.putUInt32(UInt32(val))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func putInt(val: Int32): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.putUInt32(UInt32(val))",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        },
        {
          "name": "putShort",
          "type": "function",
          "start_line": 195,
          "end_line": 197,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func putShort(val: Int16): ByteBuffer {\n        this.putUInt16(UInt16(val))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func putShort(val: Int16): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.putUInt16(UInt16(val))",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getLong",
          "type": "function",
          "start_line": 199,
          "end_line": 201,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getLong(): Int64 {\n        return Int64(this.getUInt64())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getLong(): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return Int64(this.getUInt64())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getInt",
          "type": "function",
          "start_line": 203,
          "end_line": 205,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getInt(): Int32 {\n        return Int32(this.getUInt32())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getInt(): Int32 {",
              "successors": [
                {
                  "id": 2,
                  "label": "return Int32(this.getUInt32())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getShort",
          "type": "function",
          "start_line": 207,
          "end_line": 209,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getShort(): Int16 {\n        return Int16(this.getUInt16())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getShort(): Int16 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return Int16(this.getUInt16())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "putUInt64",
          "type": "function",
          "start_line": 211,
          "end_line": 221,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func putUInt64(val: UInt64): ByteBuffer {\n        this.put(UInt8((val >> 56) & 0xff))\n        this.put(UInt8((val >> 48) & 0xff))\n        this.put(UInt8((val >> 40) & 0xff))\n        this.put(UInt8((val >> 32) & 0xff))\n        this.put(UInt8((val >> 24) & 0xff))\n        this.put(UInt8((val >> 16) & 0xff))\n        this.put(UInt8((val >> 8) & 0xff))\n        this.put(UInt8(val & 0xff))\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func putUInt64(val: UInt64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.put(UInt8((val >> 56) & 0xff))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.put(UInt8((val >> 48) & 0xff))",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    this.put(UInt8((val >> 40) & 0xff))",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    this.put(UInt8((val >> 32) & 0xff))",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    this.put(UInt8((val >> 24) & 0xff))",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    this.put(UInt8((val >> 16) & 0xff))",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "    this.put(UInt8((val >> 8) & 0xff))",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "    this.put(UInt8(val & 0xff))",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "    return this",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "putUInt32",
          "type": "function",
          "start_line": 223,
          "end_line": 229,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func putUInt32(val: UInt32): ByteBuffer {\n        this.put(UInt8((val >> 24) & 0xff))\n        this.put(UInt8((val >> 16) & 0xff))\n        this.put(UInt8((val >> 8) & 0xff))\n        this.put(UInt8(val & 0xff))\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func putUInt32(val: UInt32): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.put(UInt8((val >> 24) & 0xff))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.put(UInt8((val >> 16) & 0xff))",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.put(UInt8((val >> 8) & 0xff))",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.put(UInt8(val & 0xff))",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "return this",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "putUInt16",
          "type": "function",
          "start_line": 231,
          "end_line": 235,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func putUInt16(val: UInt16): ByteBuffer {\n        this.put(UInt8((val >> 8) & 0xff))\n        this.put(UInt8(val & 0xff))\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func putUInt16(val: UInt16): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.put(UInt8((val >> 8) & 0xff))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.put(UInt8(val & 0xff))",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return this",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getUInt64",
          "type": "function",
          "start_line": 237,
          "end_line": 246,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getUInt64(): UInt64 {\n        return UInt64(this.get()) << 56 |\n                UInt64(this.get()) << 48 |\n                UInt64(this.get()) << 40 |\n                UInt64(this.get()) << 32 |\n                UInt64(this.get()) << 24 |\n                UInt64(this.get()) << 16 |\n                UInt64(this.get()) << 8 |\n                UInt64(this.get())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getUInt64(): UInt64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "return UInt64(this.get()) << 56 |\n            UInt64(this.get()) << 48 |\n            UInt64(this.get()) << 40 |\n            UInt64(this.get()) << 32 |\n            UInt64(this.get()) << 24 |\n            UInt64(this.get()) << 16 |\n            UInt64(this.get()) << 8 |\n            UInt64(this.get())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getUInt32",
          "type": "function",
          "start_line": 248,
          "end_line": 253,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getUInt32(): UInt32 {\n        return UInt32(this.get()) << 24 |\n            UInt32(this.get()) << 16 |\n            UInt32(this.get()) << 8 |\n            UInt32(this.get())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getUInt32(): UInt32 {",
              "successors": [
                {
                  "id": 2,
                  "label": "return UInt32(this.get()) << 24 |",
                  "successors": [
                    {
                      "id": 3,
                      "label": "UInt32(this.get()) << 16 |",
                      "successors": [
                        {
                          "id": 4,
                          "label": "UInt32(this.get()) << 8 |",
                          "successors": [
                            {
                              "id": 5,
                              "label": "UInt32(this.get())",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getUInt16",
          "type": "function",
          "start_line": 255,
          "end_line": 258,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getUInt16(): UInt16 {\n        return UInt16(this.get()) << 8 |\n            UInt16(this.get())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getUInt16(): UInt16 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return UInt16(this.get()) << 8 |",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        UInt16(this.get())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "createSameBufferException",
          "type": "function",
          "start_line": 259,
          "end_line": 261,
          "functions": [],
          "classes": [],
          "simplified_code": "     func createSameBufferException(): IllegalArgumentException {\n        throw IllegalArgumentException(\"The source buffer is this buffer\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func createSameBufferException(): IllegalArgumentException {",
              "successors": [
                {
                  "id": 2,
                  "label": "    throw IllegalArgumentException(\"The source buffer is this buffer\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class ByteBuffer <: Buffer & ToString & Hashable & Equatable<Buffer>  {\n    public let hb: Array<Byte>\n    let offset: Int64\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    @OverflowWrapping\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n        return this\n    }\n        return this\n    }\n    }\n    }\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    @OverflowWrapping\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class ByteBuffer <: Buffer & ToString & Hashable & Equatable<Buffer>  {",
          "successors": [
            {
              "id": 2,
              "label": "public let hb: Array<Byte>",
              "successors": []
            },
            {
              "id": 3,
              "label": "let offset: Int64",
              "successors": []
            },
            {
              "id": 4,
              "label": "@OverflowWrapping",
              "successors": []
            },
            {
              "id": 5,
              "label": "return this",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "BufferOverflowException",
      "type": "class",
      "start_line": 263,
      "end_line": 267,
      "functions": [
        {
          "name": "<init>",
          "type": "function",
          "start_line": 264,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init() {\n        super(\"BufferOverflowException: \\n\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init() {",
              "successors": [
                {
                  "id": 2,
                  "label": "super(\"BufferOverflowException: \\n\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class BufferOverflowException <: Exception {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class BufferOverflowException <: Exception {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package utils.nio\n}\n}\n}",
  "blocks": []
}