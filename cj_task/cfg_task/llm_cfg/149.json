{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [],
  "classes": [
    {
      "name": "SymbolShapeHint",
      "type": "class",
      "start_line": 2,
      "end_line": 34,
      "functions": [
        {
          "name": "GetSymbolShapeHintNum",
          "type": "function",
          "start_line": 6,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func GetSymbolShapeHintNum(result: SymbolShapeHint): Int64 {\n        match (result) {\n            case FORCE_NONE => return 0;\n            case FORCE_SQUARE => return 1;\n            case FORCE_RECTANGLE => return 2;\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func GetSymbolShapeHintNum(result: SymbolShapeHint): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "match (result) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case FORCE_NONE => return 0;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case FORCE_SQUARE => return 1;",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case FORCE_RECTANGLE => return 2;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 13,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func ==(right: SymbolShapeHint): Bool {\n        if (GetSymbolShapeHintNum(right) == GetSymbolShapeHintNum(this)) {\n            true;\n        } else {\n            false;\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func ==(right: SymbolShapeHint): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (GetSymbolShapeHintNum(right) == GetSymbolShapeHintNum(this)) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "true;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "false;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 20,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func !=(right: SymbolShapeHint): Bool {\n        if (GetSymbolShapeHintNum(right) != GetSymbolShapeHintNum(this)) {\n            true;\n        } else {\n            false;\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func !=(right: SymbolShapeHint): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (GetSymbolShapeHintNum(right) != GetSymbolShapeHintNum(this)) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "true;",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "false;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 27,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toString() {\n        match (this) {\n            case FORCE_NONE => \"FORCE_NONE\"\n            case FORCE_SQUARE => \"FORCE_SQUARE\"\n            case FORCE_RECTANGLE => \"FORCE_RECTANGLE\"\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toString() {",
              "successors": [
                {
                  "id": 2,
                  "label": "match (this) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case FORCE_NONE => \"FORCE_NONE\"",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case FORCE_SQUARE => \"FORCE_SQUARE\"",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case FORCE_RECTANGLE => \"FORCE_RECTANGLE\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public enum SymbolShapeHint <: Equatable<SymbolShapeHint> & ToString {\n    | FORCE_NONE\n    | FORCE_SQUARE\n    | FORCE_RECTANGLE\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum SymbolShapeHint <: Equatable<SymbolShapeHint> & ToString {",
          "successors": [
            {
              "id": 2,
              "label": "| FORCE_NONE",
              "successors": [
                {
                  "id": 3,
                  "label": "| FORCE_SQUARE",
                  "successors": [
                    {
                      "id": 4,
                      "label": "| FORCE_RECTANGLE",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package datamatrix.encoder\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package datamatrix.encoder",
      "successors": []
    }
  ]
}