{
  "name": "Cangjie script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 306,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 270,
      "end_line": 306,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let cube = Cube()\n    cube.print()\n    // 1.\u57fa\u672c\u64cd\u4f5c\n    for (r in [F, B, L, R, U, D]) {\n        cube.transform(r) // \u539f\u5b50\u64cd\u4f5c\n    }\n    Cube().transform(F * R * I(F * R)) // \u590d\u5408\u64cd\u4f5c\n\n    // 2.\u7f6e\u6362\u7684\u9636\u6570\n    // FFRR \u662f 2,3 \u9636\u7f6e\u6362\u7684\u7ec4\u5408\uff0c\u5176\u6700\u5c0f\u516c\u500d\u6570\u662f 6\uff0c\u91cd\u590d 6 \u6b21\u4e24\u7c7b\u7f6e\u6362\u90fd\u4f1a\u8fd8\u539f\n    Cube().transform((F * F * R * R) ** 6)\n    // FULLR \u662f 3,4,6,9,18 \u9636\u7f6e\u6362\u7684\u7ec4\u5408\uff0c\u540c\u7406\u53ef\u5f97\u5176\u9636\u6570\u4e3a 36\n    Cube().transform((F * U * L * L * R) ** 36)\n    Cube().transform((F * F * L * L * B * R) ** 90)\n\n    // 3.\u76f8\u4f3c\u53d8\u6362 UGU\u207b\u00b9\n    // \u5df2\u77e5 R\u207b\u00b9DRFDF\u207b\u00b9 \u53ef\u4ee5\u7ffb\u8f6c FUR \u89d2\u5757\n    let G = I(R) * D * R * F * D * I(F)\n    Cube().transform(G)\n    // \u4e3a\u4e86\u7ffb\u8f6c BUR \u89d2\u5757\uff0c\u53ef\u4ee5\u5148\u6267\u884c U \u628a BUR \u6362\u5230 FUR \u4f4d\u7f6e\uff0c\u7136\u540e\u6267\u884c G \u7ffb\u8f6c FUR\uff0c\u6700\u540e\u6267\u884c U\u207b\u00b9 \u6062\u590d BUR \u4f4d\u7f6e\n    let H = U * G * I(U)\n    Cube().transform(H)\n\n    // 4.\u7ec4\u5408\u5b50\u53d8\u6362 MU\u207b\u00b9M\u207b\u00b9U\n    // \u5df2\u77e5 RL\u207b\u00b9FFLR\u207b\u00b9D\u207b\u00b9RL\u207b\u00b9FLR\u207b\u00b9 \u53ef\u4ee5\u4fdd\u6301\u9876\u9762\u5176\u4ed6\u65b9\u5757\u4e0d\u53d8\u3001\u4ec5\u7ffb\u8f6c UF \u68f1\u5757\uff0c\u4f46\u4e0b\u9762\u4e24\u5c42\u4f1a\u88ab\u6253\u4e71\n    let M = R * I(L) * F * F * L * I(R) * I(D) * R * I(L) * F * L * I(R)\n    Cube().transform(M)\n    // \u4e3a\u4e86\u540c\u65f6\u7ffb\u8f6c UF \u548c UL\uff0c\u53ef\u4ee5\u5148\u6267\u884c M \u7ffb\u8f6c UF\uff0c\u7136\u540e\u6267\u884c U\u207b\u00b9 \u628a UL \u6362\u5230 UF \u4f4d\u7f6e\n    // \u518d\u6267\u884c M\u207b\u00b9 \u7ffb\u8f6c UL \u5e76\u8fd8\u539f\u4e0b\u9762\u4e24\u5c42\uff0c\u6700\u540e\u6267\u884c U \u6062\u590d UF \u548c UL \u4f4d\u7f6e\uff0c\u8fd9\u6837\u6574\u4e2a\u9b54\u65b9\u4ec5\u6709 UF \u548c UL \u88ab\u7ffb\u8f6c\n    let N = M * I(U) * I(M) * U\n    Cube().transform(N)\n    // \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u60f3\u540c\u65f6\u7ffb\u8f6c UL \u548c UR\uff0c\u53ef\u4ee5\u6309\u7ec4\u5408\u5b50\u601d\u60f3\u6267\u884c NUN\u207b\u00b9U\u207b\u00b9\n    let P = N * U * I(N) * I(U)\n    Cube().transform(P)\n    ()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "let cube = Cube()",
              "successors": [
                {
                  "id": 3,
                  "label": "cube.print()",
                  "successors": [
                    {
                      "id": 4,
                      "label": "// 1.\u57fa\u672c\u64cd\u4f5c",
                      "successors": [
                        {
                          "id": 5,
                          "label": "for (r in [F, B, L, R, U, D]) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "cube.transform(r) // \u539f\u5b50\u64cd\u4f5c",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "Cube().transform(F * R * I(F * R)) // \u590d\u5408\u64cd\u4f5c",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "// 2.\u7f6e\u6362\u7684\u9636\u6570",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "// FFRR \u662f 2,3 \u9636\u7f6e\u6362\u7684\u7ec4\u5408\uff0c\u5176\u6700\u5c0f\u516c\u500d\u6570\u662f 6\uff0c\u91cd\u590d 6 \u6b21\u4e24\u7c7b\u7f6e\u6362\u90fd\u4f1a\u8fd8\u539f",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "Cube().transform((F * F * R * R) ** 6)",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "// FULLR \u662f 3,4,6,9,18 \u9636\u7f6e\u6362\u7684\u7ec4\u5408\uff0c\u540c\u7406\u53ef\u5f97\u5176\u9636\u6570\u4e3a 36",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "Cube().transform((F * U * L * L * R) ** 36)",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "Cube().transform((F * F * L * L * B * R) ** 90)",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "label": "// 3.\u76f8\u4f3c\u53d8\u6362 UGU\u207b\u00b9",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "label": "// \u5df2\u77e5 R\u207b\u00b9DRFDF\u207b\u00b9 \u53ef\u4ee5\u7ffb\u8f6c FUR \u89d2\u5757",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "label": "let G = I(R) * D * R * F * D * I(F)",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "label": "Cube().transform(G)",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 19,
                                                                                  "label": "// \u4e3a\u4e86\u7ffb\u8f6c BUR \u89d2\u5757\uff0c\u53ef\u4ee5\u5148\u6267\u884c U \u628a BUR \u6362\u5230 FUR \u4f4d\u7f6e\uff0c\u7136\u540e\u6267\u884c G \u7ffb\u8f6c FUR\uff0c\u6700\u540e\u6267\u884c U\u207b\u00b9 \u6062\u590d BUR \u4f4d\u7f6e",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 20,
                                                                                      "label": "let H = U * G * I(U)",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 21,
                                                                                          "label": "Cube().transform(H)",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 22,
                                                                                              "label": "// 4.\u7ec4\u5408\u5b50\u53d8\u6362 MU\u207b\u00b9M\u207b\u00b9U",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 23,
                                                                                                  "label": "// \u5df2\u77e5 RL\u207b\u00b9FFLR\u207b\u00b9D\u207b\u00b9RL\u207b\u00b9FLR\u207b\u00b9 \u53ef\u4ee5\u4fdd\u6301\u9876\u9762\u5176\u4ed6\u65b9\u5757\u4e0d\u53d8\u3001\u4ec5\u7ffb\u8f6c UF \u68f1\u5757\uff0c\u4f46\u4e0b\u9762\u4e24\u5c42\u4f1a\u88ab\u6253\u4e71",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 24,
                                                                                                      "label": "let M = R * I(L) * F * F * L * I(R) * I(D) * R * I(L) * F * L * I(R)",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 25,
                                                                                                          "label": "Cube().transform(M)",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 26,
                                                                                                              "label": "// \u4e3a\u4e86\u540c\u65f6\u7ffb\u8f6c UF \u548c UL\uff0c\u53ef\u4ee5\u5148\u6267\u884c M \u7ffb\u8f6c UF\uff0c\u7136\u540e\u6267\u884c U\u207b\u00b9 \u628a UL \u6362\u5230 UF \u4f4d\u7f6e",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 27,
                                                                                                                  "label": "// \u518d\u6267\u884c M\u207b\u00b9 \u7ffb\u8f6c UL \u5e76\u8fd8\u539f\u4e0b\u9762\u4e24\u5c42\uff0c\u6700\u540e\u6267\u884c U \u6062\u590d UF \u548c UL \u4f4d\u7f6e\uff0c\u8fd9\u6837\u6574\u4e2a\u9b54\u65b9\u4ec5\u6709 UF \u548c UL \u88ab\u7ffb\u8f6c",
                                                                                                                  "successors": [
                                                                                                                    {
                                                                                                                      "id": 28,
                                                                                                                      "label": "let N = M * I(U) * I(M) * U",
                                                                                                                      "successors": [
                                                                                                                        {
                                                                                                                          "id": 29,
                                                                                                                          "label": "Cube().transform(N)",
                                                                                                                          "successors": [
                                                                                                                            {
                                                                                                                              "id": 30,
                                                                                                                              "label": "// \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u60f3\u540c\u65f6\u7ffb\u8f6c UL \u548c UR\uff0c\u53ef\u4ee5\u6309\u7ec4\u5408\u5b50\u601d\u60f3\u6267\u884c NUN\u207b\u00b9U\u207b\u00b9",
                                                                                                                              "successors": [
                                                                                                                                {
                                                                                                                                  "id": 31,
                                                                                                                                  "label": "let P = N * U * I(N) * I(U)",
                                                                                                                                  "successors": [
                                                                                                                                    {
                                                                                                                                      "id": 32,
                                                                                                                                      "label": "Cube().transform(P)",
                                                                                                                                      "successors": [
                                                                                                                                        {
                                                                                                                                          "id": 33,
                                                                                                                                          "label": "()",
                                                                                                                                          "successors": []
                                                                                                                                        }
                                                                                                                                      ]
                                                                                                                                    }
                                                                                                                                  ]
                                                                                                                                }
                                                                                                                              ]
                                                                                                                            }
                                                                                                                          ]
                                                                                                                        }
                                                                                                                      ]
                                                                                                                    }
                                                                                                                  ]
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Rotation",
      "type": "class",
      "start_line": 10,
      "end_line": 65,
      "functions": [
        {
          "name": "*",
          "type": "function",
          "start_line": 17,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func *(that: Rotation): Rotation {\n        match (this) {\n            case X(x1, x2) => X(x1, X(x2, that)) // \u6309\u6b64\u987a\u5e8f\u5206\u89e3\u91cd\u7ec4\uff0c\u4f7f\u5f97\u9012\u5f52\u65f6\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6267\u884c\u53d8\u6362\n            case _ => X(this, that)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func *(that: Rotation): Rotation {",
              "successors": [
                {
                  "id": 2,
                  "label": "match (this) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case X(x1, x2) => X(x1, X(x2, that))",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "case _ => X(this, that)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "**",
          "type": "function",
          "start_line": 25,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func **(exp: UInt32): Rotation {\n        var result = this\n        for (_ in 0..(exp - 1)) {\n            result = result * this\n        }\n        return result\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func **(exp: UInt32): Rotation {",
              "successors": [
                {
                  "id": 2,
                  "label": "var result = this",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (_ in 0..(exp - 1)) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "result = result * this",
                          "successors": [
                            {
                              "id": 3,
                              "label": "for (_ in 0..(exp - 1)) {",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "return result",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "return result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "text",
          "type": "function",
          "start_line": 34,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func text(inv: Bool): String {\n        let exp = if (inv) { \"\u207b\u00b9\" } else { \"\" }\n        match (this) {\n            case F => \"F${exp}\" case B => \"B${exp}\" case L => \"L${exp}\"\n            case R => \"R${exp}\" case U => \"U${exp}\" case D => \"D${exp}\"\n            case I(r) => r.text(!inv)\n            case X(x1, x2) =>\n                if (inv) { // \u9006\u53d8\u6362\u9700\u8981\u53cd\u5e8f\n                    x2.text(inv) + x1.text(inv)\n                } else {\n                    x1.text(inv) + x2.text(inv)\n                }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let exp = if (inv) { \"\u207b\u00b9\" } else { \"\" }",
              "successors": [
                {
                  "id": 2,
                  "label": "match (this)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case F => \"F${exp}\"",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case B => \"B${exp}\"",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case L => \"L${exp}\"",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "case R => \"R${exp}\"",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "case U => \"U${exp}\"",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "case D => \"D${exp}\"",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "case I(r) => r.text(!inv)",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "case X(x1, x2)",
                      "successors": [
                        {
                          "id": 11,
                          "label": "if (inv)",
                          "successors": [
                            {
                              "id": 12,
                              "label": "x2.text(inv) + x1.text(inv)",
                              "successors": []
                            },
                            {
                              "id": 13,
                              "label": "x1.text(inv) + x2.text(inv)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 49,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toString(): String {\n        text(false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toString(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "    text(false)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "hashCode",
          "type": "function",
          "start_line": 54,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func hashCode(): Int64 {\n        this.toString().hashCode()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func hashCode(): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.toString().hashCode()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 58,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func ==(that: Rotation): Bool {\n        this.toString() == that.toString()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func ==(that: Rotation): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.toString() == that.toString()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 62,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func !=(that: Rotation): Bool {\n        this.toString() != that.toString()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func !=(that: Rotation): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.toString() != that.toString()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "enum Rotation <: ToString & Hashable & Equatable<Rotation> {\n    // \u5728\u9b54\u65b9\u7814\u7a76\u4e2d\uff0c\u901a\u5e38\u7528 Front/Back/Left/Right/Up/Down \u8868\u793a\u516d\u4e2a\u9762\u4ee5\u53ca\u5bf9\u5e94\u7684\u539f\u5b50\u64cd\u4f5c\uff0c\u5373\u6b63\u5bf9\u6b64\u9762\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\n    F | B | L | R | U | D\n      | X(Rotation, Rotation) // \u4ed3\u9889\u652f\u6301 enum \u6784\u9020\u5668\u548c\u9012\u5f52\u5b9a\u4e49\uff0c\u6b64\u5904 X \u7528\u4e8e\u7ec4\u7ec7\u590d\u5408\u65cb\u8f6c\u64cd\u4f5c\n      | I(Rotation) // I(r) \u7528\u4e8e\u8868\u793a r \u7684\u9006\u53d8\u6362\uff0c\u5373\u6b63\u5bf9 r \u9762\u9006\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\n\n    // enum \u4e2d\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u91cc\u6211\u4eec\u91cd\u8f7d * \u8fd0\u7b97\u7b26\u4ee5\u5b9e\u73b0\u65cb\u8f6c\u64cd\u4f5c\u7684\u7ec4\u5408\uff0c\u7531\u6b64\u53ef\u751f\u6210\u4e00\u4e2a\u7f6e\u6362\u7fa4\n    }\n\n    // \u91cd\u8f7d ** \u8fd0\u7b97\u7b26\u5b9e\u73b0\u5e42\u8fd0\u7b97\uff0c\u4ee5\u4fbf\u8868\u793a\u548c\u9a8c\u8bc1\u9ad8\u9636\u7f6e\u6362\u64cd\u4f5c\uff0c\u5982 (F*F*L*L*B*R)**90 \u4f1a\u8ba9\u9b54\u65b9\u56de\u5f52\u521d\u6001\n    }\n\n    // \u5b9e\u73b0 ToString \u63a5\u53e3\u4ee5\u4fbf\u6253\u5370\u548c\u8c03\u8bd5\u6b64\u4ee3\u6570\u7cfb\u7edf\n    }\n\n    }\n\n    // \u4e0b\u9762\u5b9e\u73b0 Hashable \u548c Equatable \u63a5\u53e3\uff0c\u4ee5\u4fbf Rotation \u4f5c\u4e3a HashMap \u7684 Key\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "enum Rotation <: ToString & Hashable & Equatable<Rotation> {",
          "successors": [
            {
              "id": 2,
              "label": "    F | B | L | R | U | D",
              "successors": []
            },
            {
              "id": 3,
              "label": "    | X(Rotation, Rotation)",
              "successors": []
            },
            {
              "id": 4,
              "label": "    | I(Rotation)",
              "successors": []
            },
            {
              "id": 5,
              "label": "    }",
              "successors": []
            },
            {
              "id": 6,
              "label": "    }",
              "successors": []
            },
            {
              "id": 7,
              "label": "    }",
              "successors": []
            },
            {
              "id": 8,
              "label": "    }",
              "successors": []
            },
            {
              "id": 9,
              "label": "    }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Index",
      "type": "class",
      "start_line": 70,
      "end_line": 86,
      "functions": [
        {
          "name": "-",
          "type": "function",
          "start_line": 73,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func -(): Index {\n        match (this) {\n            case Inv(v) => v\n            case _ => Inv(this)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "match (this) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    case Inv(v) => v",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    case _ => Inv(this)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 80,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func value(): Index {\n        match (this) {\n            case Inv(v) => v\n            case _ => this\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func value(): Index {",
              "successors": [
                {
                  "id": 2,
                  "label": "match (this) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case Inv(v) => v",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case _ => this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "enum Index {\n    Row(Int64) | Col(Int64) | Inv(Index)\n    // \u7528\u4e8e\u6807\u8bb0\u5411\u91cf\u5012\u7f6e\n    }\n    // \u53bb\u6389 Inv \u7b26\u53f7\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "enum Index {",
          "successors": [
            {
              "id": 2,
              "label": "Row(Int64) | Col(Int64) | Inv(Index)",
              "successors": [
                {
                  "id": 3,
                  "label": "// \u7528\u4e8e\u6807\u8bb0\u5411\u91cf\u5012\u7f6e",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "// \u53bb\u6389 Inv \u7b26\u53f7",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Matrix",
      "type": "class",
      "start_line": 88,
      "end_line": 134,
      "functions": [
        {
          "name": "create",
          "type": "function",
          "start_line": 90,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func create(face: Face) {\n        Matrix(3, { i =>\n            Vector(3, { j => (face, 3 * i + j + 1)})\n        })\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func create(face: Face) {",
              "successors": [
                {
                  "id": 2,
                  "label": "Matrix(3, { i =>",
                  "successors": [
                    {
                      "id": 3,
                      "label": "Vector(3, { j => (face, 3 * i + j + 1)})",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "[]",
          "type": "function",
          "start_line": 97,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func [](index: Index): Vector {\n        match (index) {\n            case Row(r) => this[r].clone()\n            case Col(c) => Vector(this.size, { i => this[i][c] })\n            case Inv(i) => this[i] // \u5e94\u7528\u573a\u666f\u9700\u8981\uff0c\u53d6\u503c\u65f6\u5ffd\u7565\u7b26\u53f7\u3001\u4e0d\u505a\u5012\u7f6e\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func [](index: Index): Vector {",
              "successors": [
                {
                  "id": 2,
                  "label": "match (index) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case Row(r) => this[r].clone()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case Col(c) => Vector(this.size, { i => this[i][c] })",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case Inv(i) => this[i] // \u5e94\u7528\u573a\u666f\u9700\u8981\uff0c\u53d6\u503c\u65f6\u5ffd\u7565\u7b26\u53f7\u3001\u4e0d\u505a\u5012\u7f6e",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 106,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func set(index: Index, value: Vector): Unit {\n        match (index) {\n            case Row(r) => this[r] = value\n            case Col(c) =>\n                for (i in 0..value.size) {\n                    this[i][c] = value[i]\n                }\n            case Inv(i) => // \u8d4b\u503c\u65f6\u6839\u636e index \u7b26\u53f7\u505a\u5012\u7f6e\n                value.reverse()\n                this.set(i, value)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "match (index)",
              "successors": [
                {
                  "id": 2,
                  "label": "case Row(r) => this[r] = value",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "case Col(c)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "for (i in 0..value.size)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "this[i][c] = value[i]",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "case Inv(i)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "value.reverse()",
                      "successors": [
                        {
                          "id": 8,
                          "label": "this.set(i, value)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "print",
          "type": "function",
          "start_line": 120,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func print(row: Int64) {\n        for ((face, id) in this[row]) {\n            print(\"${face}${id} \")\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func print(row: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "for ((face, id) in this[row]) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "print(\"${face}${id} \")",
                      "successors": [
                        {
                          "id": 2,
                          "label": "for ((face, id) in this[row]) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "print",
          "type": "function",
          "start_line": 127,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func print() {\n        for (row in 0..this.size) {\n            print(\"         \")\n            print(row)\n            println()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func print() {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (row in 0..this.size) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "print(\"         \")",
                      "successors": [
                        {
                          "id": 4,
                          "label": "print(row)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "println()",
                              "successors": [
                                {
                                  "id": 2,
                                  "label": "for (row in 0..this.size) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Matrix {\n    // \u7ed9\u6307\u5b9a\u7684\u9b54\u65b9\u9762\u521b\u5efa\u521d\u59cb\u77e9\u9635\n    }\n\n    // \u83b7\u53d6\u77e9\u9635\u7684\u884c\u6216\u5217\n    }\n\n    // \u7ed9\u77e9\u9635\u7684\u884c\u6216\u5217\u8d4b\u503c\n    }\n\n    // \u6253\u5370\u77e9\u9635\u7684\u4e00\u884c\n    }\n\n    // \u6253\u5370\u6574\u4e2a\u77e9\u9635\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Matrix {",
          "successors": [
            {
              "id": 2,
              "label": "// \u7ed9\u6307\u5b9a\u7684\u9b54\u65b9\u9762\u521b\u5efa\u521d\u59cb\u77e9\u9635\n    }",
              "successors": [
                {
                  "id": 3,
                  "label": "// \u83b7\u53d6\u77e9\u9635\u7684\u884c\u6216\u5217\n    }",
                  "successors": [
                    {
                      "id": 4,
                      "label": "// \u7ed9\u77e9\u9635\u7684\u884c\u6216\u5217\u8d4b\u503c\n    }",
                      "successors": [
                        {
                          "id": 5,
                          "label": "// \u6253\u5370\u77e9\u9635\u7684\u4e00\u884c\n    }",
                          "successors": [
                            {
                              "id": 6,
                              "label": "// \u6253\u5370\u6574\u4e2a\u77e9\u9635\n    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Int64",
      "type": "class",
      "start_line": 137,
      "end_line": 144,
      "functions": [],
      "classes": [],
      "simplified_code": "extend Int64 {\n    public prop r: Index {\n        get() { Index.Row(this) }\n    }\n    public prop c: Index {\n        get() { Index.Col(this) }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Int64 {",
          "successors": [
            {
              "id": 2,
              "label": "public prop r: Index {",
              "successors": [
                {
                  "id": 3,
                  "label": "get() { Index.Row(this) }",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "public prop c: Index {",
              "successors": [
                {
                  "id": 5,
                  "label": "get() { Index.Col(this) }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Permutation",
      "type": "class",
      "start_line": 149,
      "end_line": 165,
      "functions": [
        {
          "name": "inverse",
          "type": "function",
          "start_line": 151,
          "end_line": 164,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func inverse() {\n        let perm = this.clone()\n        for (i in 0..perm.size) {\n            let j = (i + 1) % perm.size\n            let (face, index) = this[i] // \u89e3\u6784\u5143\u7ec4\n            if (let Inv(_) <- this[j][1]) { // if-let \u6a21\u5f0f\u5339\u914d\n                perm[i] = (face, -(index.value()))\n            } else {\n                perm[i] = (face, index.value())\n            }\n        }\n        perm.reverse()\n        return perm\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func inverse() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let perm = this.clone()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    for (i in 0..perm.size) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        let j = (i + 1) % perm.size\n        let (face, index) = this[i]",
                          "successors": [
                            {
                              "id": 5,
                              "label": "        if (let Inv(_) <- this[j][1]) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "            perm[i] = (face, -(index.value()))",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "        }",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "    }",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 7,
                                  "label": "        } else {",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "            perm[i] = (face, index.value())",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "        }",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "    }",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "    perm.reverse()",
                      "successors": [
                        {
                          "id": 11,
                          "label": "    return perm",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Permutation {\n    // \u83b7\u53d6\u5f53\u524d\u7f6e\u6362\u7684\u9006\u53d8\u6362\n    }\n}",
      "blocks": []
    },
    {
      "name": "Cube",
      "type": "class",
      "start_line": 167,
      "end_line": 268,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 172,
          "end_line": 174,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init() {\n        reset()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    reset()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 176,
          "end_line": 184,
          "functions": [],
          "classes": [],
          "simplified_code": "    static init() {\n        // \u6bcf\u4e2a\u9762\u987a\u65f6\u9488\u8f6c\u52a8 90 \u5ea6\u65f6\uff0c\u76f8\u90bb\u56db\u9762\u7684\u7f6e\u6362\u5173\u7cfb\n        permutation[F] = [(L, 2.c), (U, -2.r), (R, 0.c), (D, -0.r)]\n        permutation[B] = [(L, -0.c), (D, 2.r), (R, -2.c), (U, 0.r)]\n        permutation[L] = [(U, 0.c), (F, 0.c), (D, 0.c), (B, 0.c)]\n        permutation[R] = [(B, 2.c), (D, 2.c), (F, 2.c), (U, 2.c)]\n        permutation[U] = [(L, 0.r), (B, -2.r), (R, -0.r), (F, 0.r)]\n        permutation[D] = [(R, 2.r), (B, -0.r), (L, -2.r), (F, 2.r)]\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "static init() {",
              "successors": [
                {
                  "id": 2,
                  "label": "permutation[F] = [(L, 2.c), (U, -2.r), (R, 0.c), (D, -0.r)]\npermutation[B] = [(L, -0.c), (D, 2.r), (R, -2.c), (U, 0.r)]\npermutation[L] = [(U, 0.c), (F, 0.c), (D, 0.c), (B, 0.c)]\npermutation[R] = [(B, 2.c), (D, 2.c), (F, 2.c), (U, 2.c)]\npermutation[U] = [(L, 0.r), (B, -2.r), (R, -0.r), (F, 0.r)]\npermutation[D] = [(R, 2.r), (B, -0.r), (L, -2.r), (F, 2.r)]",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "start_line": 186,
          "end_line": 191,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func reset() {\n        history = ArrayList<Rotation>()\n        for (face in [F, B, L, R, U, D]) {\n            data[face] = Matrix.create(face)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func reset() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    history = ArrayList<Rotation>()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    for (face in [F, B, L, R, U, D]) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        data[face] = Matrix.create(face)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    }",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "    }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "rotate",
          "type": "function",
          "start_line": 195,
          "end_line": 210,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func rotate(face: Face, inverse: Bool) {\n        const N = 3\n        let matrix = Matrix.create(face)\n        let map = if (inverse) {\n            { i: Int64, j: Int64 => (N - 1 - j, i) }\n        } else {\n            { i: Int64, j: Int64 => (j, N - 1 - i) }\n        }\n        for (i in 0..N) {\n            for (j in 0..N) {\n                let (u, v) = map(i, j)\n                matrix[u][v] = data[face][i][j]\n            }\n        }\n        data[face] = matrix\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func rotate(face: Face, inverse: Bool) {",
              "successors": [
                {
                  "id": 2,
                  "label": "const N = 3",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let matrix = Matrix.create(face)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let map = if (inverse) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "{ i: Int64, j: Int64 => (N - 1 - j, i) }",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "label": "else { { i: Int64, j: Int64 => (j, N - 1 - i) }",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "for (i in 0..N) {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "for (j in 0..N) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "let (u, v) = map(i, j)",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "matrix[u][v] = data[face][i][j]",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 11,
                          "label": "data[face] = matrix",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "permute",
          "type": "function",
          "start_line": 213,
          "end_line": 224,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func permute(perm: Permutation, inverse: Bool) {\n        let p = if (inverse) { perm.inverse() } else { perm.clone() }\n        p.reverse()\n        var (lastFace, lastIndex) = p[0]\n        let vector = data[lastFace][lastIndex]\n        for (i in 1..p.size) {\n            let (face, index) = p[i]\n            data[lastFace].set(lastIndex, data[face][index])\n            (lastFace, lastIndex) = (face, index)\n        }\n        data[lastFace].set(lastIndex, vector)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let p = if (inverse) { perm.inverse() } else { perm.clone() }",
              "successors": [
                {
                  "id": 2,
                  "label": "p.reverse()\nvar (lastFace, lastIndex) = p[0]\nlet vector = data[lastFace][lastIndex]",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (i in 1..p.size) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let (face, index) = p[i]\ndata[lastFace].set(lastIndex, data[face][index])\n(lastFace, lastIndex) = (face, index)",
                          "successors": [
                            {
                              "id": 3,
                              "label": "for (i in 1..p.size) {",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "data[lastFace].set(lastIndex, vector)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "transform",
          "type": "function",
          "start_line": 227,
          "end_line": 242,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func transform(rotation: Rotation, inverse: Bool): Unit {\n        match (rotation) {\n            case I(r) => transform(r, !inverse)\n            case X(r1, r2) => // \u5bf9\u590d\u5408\u64cd\u4f5c\u8fdb\u884c\u9012\u5f52\u5206\u89e3\n                if (inverse) { // \u9006\u53d8\u6362\u9700\u8981\u53cd\u5e8f\n                    transform(r2, inverse)\n                    transform(r1, inverse)\n                } else {\n                    transform(r1, inverse)\n                    transform(r2, inverse)\n                }\n            case _ => // \u5404\u539f\u5b50\u64cd\u4f5c\u5bf9\u5e94\u9762\u5148\u65cb\u8f6c 90 \u5ea6\uff0c\u7136\u540e\u5bf9\u76f8\u90bb\u56db\u4e2a\u9762\u6267\u884c\u7f6e\u6362\u64cd\u4f5c\n                rotate(rotation, inverse)\n                permute(permutation[rotation], inverse)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func transform(rotation: Rotation, inverse: Bool): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "match (rotation) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case I(r) => transform(r, !inverse)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case X(r1, r2) =>",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (inverse) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "transform(r2, inverse)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "transform(r1, inverse)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "} else {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "transform(r1, inverse)",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "transform(r2, inverse)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "case _ =>",
                      "successors": [
                        {
                          "id": 12,
                          "label": "rotate(rotation, inverse)",
                          "successors": [
                            {
                              "id": 13,
                              "label": "permute(permutation[rotation], inverse)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "transform",
          "type": "function",
          "start_line": 244,
          "end_line": 249,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func transform(rotation: Rotation) {\n        transform(rotation, false)\n        history.append(rotation)\n        print()\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func transform(rotation: Rotation) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    transform(rotation, false)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    history.append(rotation)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    print()",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    return this",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "print",
          "type": "function",
          "start_line": 251,
          "end_line": 267,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func print() {\n        var prompt = \">> \"\n        for (rotation in history) {\n            prompt += rotation.toString()\n        }\n        println(prompt)\n        data[U].print()\n        for (i in 0..3) {\n            for (face in [L, F, R]) {\n                data[face].print(i)\n            }\n            println()\n        }\n        data[D].print()\n        data[B].print()\n        println()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func print() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    var prompt = \">> \"",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (rotation in history) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    prompt += rotation.toString()",
                          "successors": [
                            {
                              "id": 5,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "println(prompt)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "data[U].print()",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "for (i in 0..3) {",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "for (face in [L, F, R]) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "data[face].print(i)",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "println()",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "}",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "data[D].print()",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "data[B].print()",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "println()",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "}",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Cube {\n    public let data = HashMap<Face, Matrix>()\n    private var history = ArrayList<Rotation>()\n    private static let permutation = HashMap<Face, Permutation>()\n\n    }\n\n    }\n\n    }\n\n    // \u5bf9\u6307\u5b9a\u9762\u4e0a\u7684\u77e9\u9635\u65cb\u8f6c 90 \u5ea6\uff0cinverse = true \u4ee3\u8868\u9006\u65f6\u9488\u65b9\u5411\n    // \u6b64\u64cd\u4f5c\u4e0d\u5f71\u54cd\u5176\u4ed6\u9762\uff0c\u8981\u914d\u5408\u90bb\u8fb9\u7f6e\u6362\u64cd\u4f5c\u624d\u80fd\u5b8c\u6210\u9b54\u65b9\u7684\u5b9e\u9645\u8f6c\u52a8\n    }\n\n    // \u5b9e\u73b0\u5404\u9762\u884c/\u5217\u4e4b\u95f4\u7684\u7f6e\u6362\u64cd\u4f5c\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u7f6e\u6362\u5e8f\u5217\n    }\n\n    // \u5728\u9b54\u65b9\u4e0a\u6309\u5e8f\u6267\u884c rotation \u4e2d\u5b9a\u4e49\u7684\u64cd\u4f5c\u5e8f\u5217\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Cube {",
          "successors": [
            {
              "id": 2,
              "label": "public let data = HashMap<Face, Matrix>()",
              "successors": []
            },
            {
              "id": 3,
              "label": "private var history = ArrayList<Rotation>()",
              "successors": []
            },
            {
              "id": 4,
              "label": "private static let permutation = HashMap<Face, Permutation>()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "/**\n * \u793a\u4f8b\u573a\u666f\uff1a\u7528\u4ed3\u9889\u8bed\u8a00\u8868\u8fbe\u9b54\u65b9\u7f6e\u6362\u7fa4\uff0c\u5e76\u8fdb\u884c\u6a21\u62df\u9a8c\u8bc1\n *         \u672c\u4f8b\u4f53\u73b0\u4e86\u4ed3\u9889\u5728\u4ee3\u6570/\u7b26\u53f7\u6f14\u7b97\u65b9\u9762\u7684\u5b9a\u5236\u80fd\u529b\uff0c\u4ee5\u53ca\u8bed\u8a00\u7684\u6613\u7528\u6027\u548c\u7075\u6d3b\u6027\u7b49\n * \u6d89\u53ca\u7279\u6027\uff1aenum/\u6784\u9020\u5668/\u9012\u5f52\u5b9a\u4e49/\u6a21\u5f0f\u5339\u914d\uff0c\u64cd\u4f5c\u7b26\u91cd\u8f7d\uff0c\u63a5\u53e3\uff0c\u7c7b\u578b\u522b\u540d\uff0c\u9012\u5f52\u8c03\u7528\uff0c\n *         class\uff0ctuple\uff0cArray\uff0cHashMap\uff0cfor-in/Range\uff0cif-let\uff0clambda\n * \u4ed3\u9889\u8bed\u8a00\u56e2\u961f \u5218\u4fca\u6770 2024/7/25\n */ \nimport std.collection.*\n\n}\n\ntype Face = Rotation\ntype Vector = Array<(Face, Int64)>\ntype Matrix = Array<Vector>\n}\n\n}\n\n// \u76f4\u63a5\u7528\u4ee5\u4e0a enum \u8868\u793a\u884c\u5217\u7d22\u5f15\u8fd8\u4e0d\u591f\u4f18\u96c5\uff0c\u6211\u4eec\u4e3a\u6574\u578b\u6269\u5c55\u4e24\u4e2a\u5c5e\u6027\uff0c\u8ba9\u7d22\u5f15\u6570\u503c\u53ef\u4ee5\u76f4\u63a5\u6807\u8bb0\u884c\u5217\n}\n\n// Permutation \u53ef\u4ee5\u8868\u793a\u4e00\u4e2a\u7f6e\u6362\u5e8f\u5217\n// \u5982 [(L, 2.c), (U, -0.r)] \u8868\u793a L \u9762\u7b2c\u4e09\u5217\u548c U \u9762\u7b2c\u4e00\u884c\u4e4b\u95f4\u7684\u8f6e\u6362\uff0c\u4e14\u524d\u8005\u5728\u6362\u5230\u540e\u8005\u65f6\u9700\u8981\u5012\u7f6e\ntype Permutation = Array<(Face, Index)>\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.collection.*",
      "successors": [
        {
          "id": 2,
          "label": "type Face = Rotation\ntype Vector = Array<(Face, Int64)>\ntype Matrix = Array<Vector>",
          "successors": [
            {
              "id": 3,
              "label": "// \u76f4\u63a5\u7528\u4ee5\u4e0a enum \u8868\u793a\u884c\u5217\u7d22\u5f15\u8fd8\u4e0d\u591f\u4f18\u96c5\uff0c\u6211\u4eec\u4e3a\u6574\u578b\u6269\u5c55\u4e24\u4e2a\u5c5e\u6027\uff0c\u8ba9\u7d22\u5f15\u6570\u503c\u53ef\u4ee5\u76f4\u63a5\u6807\u8bb0\u884c\u5217",
              "successors": [
                {
                  "id": 4,
                  "label": "type Permutation = Array<(Face, Index)>",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}