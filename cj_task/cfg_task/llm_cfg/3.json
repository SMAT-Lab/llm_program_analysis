{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 232,
  "functions": [
    {
      "name": "safeParseExprFragment",
      "type": "function",
      "start_line": 21,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": "func safeParseExprFragment(t: Tokens, start: Int64): Option<(Expr, Int64)> {\n    try {\n        let (expr, next) = parseExprFragment(t, startFrom: start)\n        return Some((expr, next))\n    } catch (e: ParseASTException) {\n        return None\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func safeParseExprFragment(t: Tokens, start: Int64): Option<(Expr, Int64)> {",
          "successors": [
            {
              "id": 2,
              "label": "try {",
              "successors": [
                {
                  "id": 3,
                  "label": "let (expr, next) = parseExprFragment(t, startFrom: start)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return Some((expr, next))",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "} catch (e: ParseASTException) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "wrap",
      "type": "function",
      "start_line": 30,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "func wrap(tt: Tokens): Tokens {\n    return quote({=> $(tt) }())\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func wrap(tt: Tokens): Tokens {",
          "successors": [
            {
              "id": 2,
              "label": "    return quote({=> $(tt) }())",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "getIdent",
      "type": "function",
      "start_line": 34,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": "func getIdent(s: String): Token {\n    return Token(TokenKind.IDENTIFIER, s)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func getIdent(s: String): Token {",
          "successors": [
            {
              "id": 2,
              "label": "return Token(TokenKind.IDENTIFIER, s)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "parseValue",
      "type": "function",
      "start_line": 38,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "simplified_code": "func parseValue(t: Tokens, start: Int64): (Tokens, Int64) {\n    let tf = t[start]\n    match (tf.kind) {\n        case TokenKind.LCURL => return parseObject(t, start + 1)\n        case TokenKind.LSQUARE => return parseArray(t, start + 1)\n        case TokenKind.IDENTIFIER where (tf.value == \"null\" || tf.value == \"None\") => return (quote(JsonNull()), start +\n                1)\n        case _ => if (let Some((expr, next)) <- safeParseExprFragment(t, start)) {\n            let exprTokens = expr.toTokens()\n            if (exprTokens.size > 1) {\n                return (quote(castJsonValue($(expr))), next)\n            }\n            let first = exprTokens[0]\n            match (first.kind) {\n                case TokenKind.STRING_LITERAL => return (quote(JsonString($(first))), next)\n                case TokenKind.INTEGER_LITERAL => return (quote(JsonInt($(first))), next)\n                case TokenKind.FLOAT_LITERAL => return (quote(JsonFloat($(first))), next)\n                case TokenKind.BOOL_LITERAL => return (quote(JsonBool($(first))), next)\n                case _ => return (quote(castJsonValue($(expr))), next)\n            }\n        } else {\n            diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${tf.value} in parseValue\", \"Unexpected token\")\n            throw Exception(\"Unexpected token ${tf.value} in parseValue\")\n        }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func parseValue(t: Tokens, start: Int64): (Tokens, Int64) {",
          "successors": [
            {
              "id": 2,
              "label": "let tf = t[start]",
              "successors": [
                {
                  "id": 3,
                  "label": "match (tf.kind) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case TokenKind.LCURL => return parseObject(t, start + 1)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case TokenKind.LSQUARE => return parseArray(t, start + 1)",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "case TokenKind.IDENTIFIER where (tf.value == \"null\" || tf.value == \"None\") => return (quote(JsonNull()), start + 1)",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "case _ => if (let Some((expr, next)) <- safeParseExprFragment(t, start)) {",
                      "successors": [
                        {
                          "id": 8,
                          "label": "let exprTokens = expr.toTokens()",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (exprTokens.size > 1) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "return (quote(castJsonValue($(expr))), next)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "let first = exprTokens[0]",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "match (first.kind) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "case TokenKind.STRING_LITERAL => return (quote(JsonString($(first))), next)",
                                      "successors": []
                                    },
                                    {
                                      "id": 14,
                                      "label": "case TokenKind.INTEGER_LITERAL => return (quote(JsonInt($(first))), next)",
                                      "successors": []
                                    },
                                    {
                                      "id": 15,
                                      "label": "case TokenKind.FLOAT_LITERAL => return (quote(JsonFloat($(first))), next)",
                                      "successors": []
                                    },
                                    {
                                      "id": 16,
                                      "label": "case TokenKind.BOOL_LITERAL => return (quote(JsonBool($(first))), next)",
                                      "successors": []
                                    },
                                    {
                                      "id": 17,
                                      "label": "case _ => return (quote(castJsonValue($(expr))), next)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 18,
                          "label": "} else {",
                          "successors": [
                            {
                              "id": 19,
                              "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${tf.value} in parseValue\", \"Unexpected token\")",
                              "successors": [
                                {
                                  "id": 20,
                                  "label": "throw Exception(\"Unexpected token ${tf.value} in parseValue\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseObject",
      "type": "function",
      "start_line": 65,
      "end_line": 126,
      "functions": [],
      "classes": [],
      "simplified_code": "func parseObject(t: Tokens, start: Int64): (Tokens, Int64) {\n    let ident = getIdent(\"jsonCjObject\")\n    let tokens = quote(\n        let $(ident) = JsonObject();\n    )\n    var i = start\n    var state = JsonState.ObjectStart\n    while (i < t.size) {\n        let cur = t[i]\n        match (cur.kind) {\n            case TokenKind.RCURL => match (state) {\n                case JsonState.ObjectStart => return (quote(JsonObject()), i + 1)\n                case JsonState.ObjectValue | JsonState.ObjectComma =>\n                    tokens.append(quote(\n                            return $(ident);\n                        ))\n                    return (wrap(tokens), i + 1)\n                case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RCURL in parseObject\", \"Unexpected state\"\n                    )\n                    throw Exception(\"Unexpected state for RCURL in parseObject\")\n            }\n            case TokenKind.COMMA => match (state) {\n                case JsonState.ObjectValue =>\n                    i++\n                    state = JsonState.ObjectComma\n                    continue\n                case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseObject\", \"Unexpected state\"\n                    )\n                    throw Exception(\"Unexpected state for COMMA in parseObject\")\n            }\n            case TokenKind.STRING_LITERAL => match (state) {\n                case JsonState.ObjectStart | JsonState.ObjectComma =>\n                    let key = cur.value\n                    i++\n                    if (t[i].kind != TokenKind.COLON) {\n                        diagReport(DiagReportLevel.ERROR, t, \"No colon in object\", \"No colon\")\n                        throw Exception(\"No colon in object\")\n                    }\n                    i++\n                    let (value, next) = parseValue(t, i)\n                    i = next\n                    state = JsonState.ObjectValue\n                    tokens.append(quote(\n                        $(ident).put($(key), $(value));\n                    ))\n                    continue\n                case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for STRING_LITERAL in parseObject\",\n                        \"Unexpected state\")\n                    throw Exception(\"Unexpected state for STRING_LITERAL in parseObject\")\n            }\n            case _ =>\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseObject\", \"Unexpected token\")\n                throw Exception(\"Unexpected token ${cur.value} in parseObject\")\n        }\n    }\n\n    diagReport(DiagReportLevel.ERROR, t, \"No closing curly bracket\", \"No closing curly bracket\")\n    throw Exception(\"No closing curly bracket\")\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func parseObject(t: Tokens, start: Int64): (Tokens, Int64) {",
          "successors": [
            {
              "id": 2,
              "label": "let ident = getIdent(\"jsonCjObject\")",
              "successors": [
                {
                  "id": 3,
                  "label": "let tokens = quote(\n    let $(ident) = JsonObject();\n)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "var i = start\nvar state = JsonState.ObjectStart",
                      "successors": [
                        {
                          "id": 5,
                          "label": "while (i < t.size) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let cur = t[i]",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "match (cur.kind) {",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "case TokenKind.RCURL => match (state) {",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "case JsonState.ObjectStart => return (quote(JsonObject()), i + 1)",
                                          "successors": []
                                        },
                                        {
                                          "id": 10,
                                          "label": "case JsonState.ObjectValue | JsonState.ObjectComma =>",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "tokens.append(quote(\n        return $(ident);\n    ))\nreturn (wrap(tokens), i + 1)",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 12,
                                          "label": "case _ =>",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RCURL in parseObject\", \"Unexpected state\")\nthrow Exception(\"Unexpected state for RCURL in parseObject\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 14,
                                      "label": "case TokenKind.COMMA => match (state) {",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "case JsonState.ObjectValue =>",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "i++\nstate = JsonState.ObjectComma\ncontinue",
                                              "successors": [
                                                {
                                                  "id": 5,
                                                  "label": "while (i < t.size) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 17,
                                          "label": "case _ =>",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseObject\", \"Unexpected state\")\nthrow Exception(\"Unexpected state for COMMA in parseObject\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 19,
                                      "label": "case TokenKind.STRING_LITERAL => match (state) {",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "case JsonState.ObjectStart | JsonState.ObjectComma =>",
                                          "successors": [
                                            {
                                              "id": 21,
                                              "label": "let key = cur.value\ni++\nif (t[i].kind != TokenKind.COLON) {\n    diagReport(DiagReportLevel.ERROR, t, \"No colon in object\", \"No colon\")\n    throw Exception(\"No colon in object\")\n}\ni++\nlet (value, next) = parseValue(t, i)\ni = next\nstate = JsonState.ObjectValue\ntokens.append(quote(\n    $(ident).put($(key), $(value));\n))\ncontinue",
                                              "successors": [
                                                {
                                                  "id": 5,
                                                  "label": "while (i < t.size) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 22,
                                          "label": "case _ =>",
                                          "successors": [
                                            {
                                              "id": 23,
                                              "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for STRING_LITERAL in parseObject\",\n\"Unexpected state\")\nthrow Exception(\"Unexpected state for STRING_LITERAL in parseObject\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 24,
                                      "label": "case _ =>",
                                      "successors": [
                                        {
                                          "id": 25,
                                          "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseObject\", \"Unexpected token\")\nthrow Exception(\"Unexpected token ${cur.value} in parseObject\")",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 26,
                          "label": "diagReport(DiagReportLevel.ERROR, t, \"No closing curly bracket\", \"No closing curly bracket\")\nthrow Exception(\"No closing curly bracket\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseArray",
      "type": "function",
      "start_line": 128,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": "func parseArray(t: Tokens, start: Int64): (Tokens, Int64) {\n    let ident = getIdent(\"jsonCjArray\")\n    let tokens = quote(\n        let $(ident) = JsonArray();\n    )\n    var i = start\n    var state = JsonState.ArrayStart\n\n    while (i < t.size) {\n        let cur = t[i]\n        match (cur.kind) {\n            case TokenKind.RSQUARE => match (state) {\n                case JsonState.ArrayStart => return (quote(JsonArray()), i + 1)\n                case JsonState.ArrayValue | JsonState.ArrayComma =>\n                    tokens.append(quote(\n                            return $(ident);\n                        ))\n                    return (wrap(tokens), i + 1)\n                case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RSQUARE in parseArray\",\n                        \"Unexpected state\")\n                    throw Exception(\"Unexpected state for RSQUARE in parseArray\")\n            }\n            case TokenKind.COMMA => match (state) {\n                case JsonState.ArrayValue =>\n                    i++\n                    state = JsonState.ArrayComma\n                    continue\n                case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseArray\", \"Unexpected state\")\n                    throw Exception(\"Unexpected state for COMMA in parseArray\")\n            }\n            case _ => match (state) {\n                case JsonState.ArrayStart | JsonState.ArrayComma =>\n                    let (value, next) = parseValue(t, i)\n                    i = next\n                    state = JsonState.ArrayValue\n                    tokens.append(quote(\n                        $(ident).add($(value));\n                    ))\n                    continue\n                case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseArray\",\n                        \"Unexpected token\")\n                    throw Exception(\"Unexpected token ${cur.value} in parseArray\")\n            }\n        }\n    }\n\n    diagReport(DiagReportLevel.ERROR, t, \"No closing bracket\", \"No closing bracket\")\n    throw Exception(\"No closing bracket\")\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func parseArray(t: Tokens, start: Int64): (Tokens, Int64) {\n    let ident = getIdent(\"jsonCjArray\")\n    let tokens = quote(\n        let $(ident) = JsonArray();\n    )\n    var i = start\n    var state = JsonState.ArrayStart",
          "successors": [
            {
              "id": 2,
              "label": "while (i < t.size) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let cur = t[i]\nmatch (cur.kind) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case TokenKind.RSQUARE => match (state) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case JsonState.ArrayStart => return (quote(JsonArray()), i + 1)",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "case JsonState.ArrayValue | JsonState.ArrayComma =>\n    tokens.append(quote(\n            return $(ident);\n        ))\n    return (wrap(tokens), i + 1)",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "case _ =>\n    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RSQUARE in parseArray\",\n        \"Unexpected state\")\n    throw Exception(\"Unexpected state for RSQUARE in parseArray\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "case TokenKind.COMMA => match (state) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "case JsonState.ArrayValue =>\n    i++\n    state = JsonState.ArrayComma\n    continue",
                          "successors": [
                            {
                              "id": 3,
                              "label": "let cur = t[i]\nmatch (cur.kind) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "label": "case _ =>\n    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseArray\", \"Unexpected state\")\n    throw Exception(\"Unexpected state for COMMA in parseArray\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "case _ => match (state) {",
                      "successors": [
                        {
                          "id": 12,
                          "label": "case JsonState.ArrayStart | JsonState.ArrayComma =>\n    let (value, next) = parseValue(t, i)\n    i = next\n    state = JsonState.ArrayValue\n    tokens.append(quote(\n        $(ident).add($(value));\n    ))\n    continue",
                          "successors": [
                            {
                              "id": 3,
                              "label": "let cur = t[i]\nmatch (cur.kind) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 13,
                          "label": "case _ =>\n    diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseArray\",\n        \"Unexpected token\")\n    throw Exception(\"Unexpected token ${cur.value} in parseArray\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 14,
              "label": "diagReport(DiagReportLevel.ERROR, t, \"No closing bracket\", \"No closing bracket\")\nthrow Exception(\"No closing bracket\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "jsonTransform",
      "type": "function",
      "start_line": 181,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "simplified_code": "protected func jsonTransform(input: Tokens): Tokens {\n    let t = Tokens()\n\n    for (ti in input) {\n        if (let TokenKind.NL <- ti.kind) {\n            continue\n        }\n        t.append(ti)\n    }\n\n    let ret = Tokens()\n\n    if (t.size == 0) {\n        return quote(())\n    }\n\n    let cur = t[0]\n    let cv = cur.value\n    match (cur.kind) {\n        case TokenKind.LCURL =>\n            let (ts, next) = parseObject(t, 1)\n            ret.append(quote(\n                    return $(ts);\n                ))\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial object\",\n                    \"Unexpected token after initial object\")\n                throw Exception(\"Unexpected token after initial object\")\n            }\n            return wrap(ret)\n        case TokenKind.LSQUARE =>\n            let (ts, next) = parseArray(t, 1)\n            ret.append(quote(\n                        return $(ts);\n                    ))\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial array\",\n                    \"Unexpected token after initial array\")\n                throw Exception(\"Unexpected token after initial array\")\n            }\n            return wrap(ret)\n        case TokenKind.IDENTIFIER where (cv == \"null\" || cv == \"None\") => return quote(JsonNull())\n        case _ =>\n            let (ts, next) = parseValue(t, 0)\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial value\",\n                    \"Unexpected token after initial value\")\n                throw Exception(\"Unexpected token after initial value\")\n            }\n            return ts\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "protected func jsonTransform(input: Tokens): Tokens {\n    let t = Tokens()",
          "successors": [
            {
              "id": 2,
              "label": "for (ti in input) {",
              "successors": [
                {
                  "id": 3,
                  "label": "if (let TokenKind.NL <- ti.kind) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "continue",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "t.append(ti)",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "let ret = Tokens()",
              "successors": []
            },
            {
              "id": 7,
              "label": "if (t.size == 0) {",
              "successors": [
                {
                  "id": 8,
                  "label": "return quote(())",
                  "successors": []
                }
              ]
            },
            {
              "id": 9,
              "label": "let cur = t[0]\nlet cv = cur.value\nmatch (cur.kind) {",
              "successors": [
                {
                  "id": 10,
                  "label": "case TokenKind.LCURL =>",
                  "successors": [
                    {
                      "id": 11,
                      "label": "let (ts, next) = parseObject(t, 1)\nret.append(quote(\n                    return $(ts);\n                ))",
                      "successors": []
                    },
                    {
                      "id": 12,
                      "label": "if (next != t.size) {",
                      "successors": [
                        {
                          "id": 13,
                          "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial object\",\n                    \"Unexpected token after initial object\")",
                          "successors": []
                        },
                        {
                          "id": 14,
                          "label": "throw Exception(\"Unexpected token after initial object\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "label": "return wrap(ret)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 16,
                  "label": "case TokenKind.LSQUARE =>",
                  "successors": [
                    {
                      "id": 17,
                      "label": "let (ts, next) = parseArray(t, 1)\nret.append(quote(\n                        return $(ts);\n                    ))",
                      "successors": []
                    },
                    {
                      "id": 18,
                      "label": "if (next != t.size) {",
                      "successors": [
                        {
                          "id": 19,
                          "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial array\",\n                    \"Unexpected token after initial array\")",
                          "successors": []
                        },
                        {
                          "id": 20,
                          "label": "throw Exception(\"Unexpected token after initial array\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 21,
                      "label": "return wrap(ret)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 22,
                  "label": "case TokenKind.IDENTIFIER where (cv == \"null\" || cv == \"None\") =>",
                  "successors": [
                    {
                      "id": 23,
                      "label": "return quote(JsonNull())",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 24,
                  "label": "case _ =>",
                  "successors": [
                    {
                      "id": 25,
                      "label": "let (ts, next) = parseValue(t, 0)",
                      "successors": []
                    },
                    {
                      "id": 26,
                      "label": "if (next != t.size) {",
                      "successors": [
                        {
                          "id": 27,
                          "label": "diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial value\",\n                    \"Unexpected token after initial value\")",
                          "successors": []
                        },
                        {
                          "id": 28,
                          "label": "throw Exception(\"Unexpected token after initial value\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 29,
                      "label": "return ts",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "package json_cj.impl\n\nimport std.ast.*\nimport std.collection.ArrayList\nimport json_cj.helper.*\n\nenum JsonState {\n    | Initial\n    | ObjectStart\n    | ObjectKey\n    | ObjectColon\n    | ObjectValue\n    | ObjectComma\n    | ArrayStart\n    | ArrayValue\n    | ArrayComma\n    | PartEnd\n    | End\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}",
  "blocks": []
}