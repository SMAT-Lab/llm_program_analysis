{
  "name": "SimpleJsonReader",
  "type": "CFG",
  "start_line": 1,
  "end_line": 27,
  "functions": [],
  "classes": [
    {
      "name": "JsonInt64Test",
      "type": "class",
      "start_line": 7,
      "end_line": 27,
      "functions": [
        {
          "name": "testInt64Option",
          "type": "function",
          "start_line": 9,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testInt64Option() {\n        @Expect(Json(str: #\"{ \"int64\" : 123 }\"#)[\"int64\"].int64, Option.Some(123))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testInt64Option() {",
              "successors": [
                {
                  "id": 2,
                  "label": " @Expect(Json(str: #\"{ \"int64\" : 123 }\"#)[\"int64\"].int64, Option.Some(123))",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testInt64",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testInt64() {\n        @Expect(Json(str: #\"{ \"int64\" : 123 }\"#)[\"int64\"].int64Value, 123)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testInt64() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(Json(str: #\"{ \"int64\" : 123 }\"\")[\"int64\"].int64Value, 123)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testInt64Default",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testInt64Default() {\n        @Expect(Json(str: #\"{}\"#)[\"int64\"].int64Value, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testInt64Default() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(Json(str: #\"{}\"#)[\"int64\"].int64Value, 0)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testInt64OptionNone",
          "type": "function",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testInt64OptionNone() {\n        @Expect(Json(str: #\"{}\"#)[\"int64\"].int64, Option.None)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testInt64OptionNone() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(Json(str: #\"{}\"#)[\"int64\"].int64, Option.None)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class JsonInt64Test {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class JsonInt64Test {",
          "successors": [
            {
              "id": 2,
              "label": "    @TestCase",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    @TestCase",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    }",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    @TestCase",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "    }",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "    @TestCase",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "    }",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package SimpleJsonReader\n\nimport std.unittest.*\nimport std.unittest.testmacro.*\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package SimpleJsonReader",
      "successors": [
        {
          "id": 2,
          "label": "import std.unittest.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.unittest.testmacro.*",
              "successors": [
                {
                  "id": 4,
                  "label": "@Test",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}