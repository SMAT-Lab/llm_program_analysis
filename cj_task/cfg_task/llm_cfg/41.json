{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 4,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "simplified_code": "unsafe main() {\n    let instance = GetModuleHandleA(EMPTY_STRING)\n    // \u6ce8\u518c\u7a97\u53e3\u7c7b\n    let className = LibC.mallocCString('Cangjie Window')\n    var windowClass = WNDCLASSEX(lpszClassName: className,\n        hInstance: instance,\n        lpfnWndProc: onMessage,\n        hbrBackground: CreateSolidBrush(0x0095D6C0) // \u4e2d\u56fd\u4f20\u7edf\u8272 \u6b27\u78a7\n    )\n    if (RegisterClassExA(inout windowClass) == 0) {\n        println('RegisterClass Failed: ${GetLastError()}')\n        return\n    }\n    // \u521b\u5efa\u7a97\u53e3\u5b9e\u4f8b\n    let windowName = LibC.mallocCString('Cangjie')\n    let window = CreateWindowExA(\n        0,                                   // \u6269\u5c55\u6837\u5f0f\n        className,                           // \u7a97\u53e3\u7c7b\u540d\n        windowName,                          // \u7a97\u53e3\u6807\u9898\n        WS_OVERLAPPEDWINDOW,                 // \u7a97\u53e3\u98ce\u683c\n        CW_USEDEFAULT, CW_USEDEFAULT,        // \u7a97\u53e3\u4f4d\u7f6e\n        640, 480,                            // \u7a97\u53e3\u5927\u5c0f\n        NULL,                                // \u7236\u7a97\u53e3\u53e5\u67c4\n        NULL,                                // \u83dc\u5355\u53e5\u67c4\n        instance,                            // \u5b9e\u4f8b\u53e5\u67c4\n        NULL                                 // \u9644\u52a0\u53c2\u6570\n    )\n    if (window.isNull()) {\n        println('CreateWindow Failed: ${GetLastError()}')\n        return\n    }\n    // \u663e\u793a\u7a97\u53e3\n    ShowWindow(window, SW_SHOWNORMAL)\n    UpdateWindow(window)\n    // \u542f\u52a8\u6d88\u606f\u5faa\u73af\n    var message = MSG()\n    while (GetMessageA(inout message, NULL, 0, 0)) {\n        TranslateMessage(inout message)\n        DispatchMessageA(inout message)\n    }\n    // \u9000\u51fa\u6d88\u606f\u5faa\u73af\n    println('Out of Message Loop')\n    LibC.free(className)\n    LibC.free(windowName)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "unsafe main() {",
          "successors": [
            {
              "id": 2,
              "label": "let instance = GetModuleHandleA(EMPTY_STRING)",
              "successors": [
                {
                  "id": 3,
                  "label": "let className = LibC.mallocCString('Cangjie Window')",
                  "successors": [
                    {
                      "id": 4,
                      "label": "var windowClass = WNDCLASSEX(lpszClassName: className,\n    hInstance: instance,\n    lpfnWndProc: onMessage,\n    hbrBackground: CreateSolidBrush(0x0095D6C0))",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (RegisterClassExA(inout windowClass) == 0) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "println('RegisterClass Failed: ${GetLastError()}')",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "label": "return",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "let windowName = LibC.mallocCString('Cangjie')",
                          "successors": [
                            {
                              "id": 9,
                              "label": "let window = CreateWindowExA(\n    0,\n    className,\n    windowName,\n    WS_OVERLAPPEDWINDOW,\n    CW_USEDEFAULT, CW_USEDEFAULT,\n    640, 480,\n    NULL,\n    NULL,\n    instance,\n    NULL\n)",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "if (window.isNull()) {",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "println('CreateWindow Failed: ${GetLastError()}')",
                                      "successors": []
                                    },
                                    {
                                      "id": 12,
                                      "label": "return",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 13,
                                  "label": "ShowWindow(window, SW_SHOWNORMAL)",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "UpdateWindow(window)",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "var message = MSG()",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "while (GetMessageA(inout message, NULL, 0, 0)) {",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "TranslateMessage(inout message)",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 18,
                                                  "label": "DispatchMessageA(inout message)",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "while (GetMessageA(inout message, NULL, 0, 0)) {",
                                                      "successors": [
                                                        {
                                                          "id": 17,
                                                          "label": "TranslateMessage(inout message)",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 18,
                                                          "label": "DispatchMessageA(inout message)",
                                                          "successors": [
                                                            {
                                                              "id": 19,
                                                              "label": "println('Out of Message Loop')",
                                                              "successors": [
                                                                {
                                                                  "id": 20,
                                                                  "label": "LibC.free(className)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 21,
                                                                      "label": "LibC.free(windowName)",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 19,
                                                      "label": "println('Out of Message Loop')",
                                                      "successors": [
                                                        {
                                                          "id": 20,
                                                          "label": "LibC.free(className)",
                                                          "successors": [
                                                            {
                                                              "id": 21,
                                                              "label": "LibC.free(windowName)",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "onMessage",
      "type": "function",
      "start_line": 52,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "simplified_code": "func onMessage(hWnd: Handle, msg: UInt32, wParam: UIntNative, lParam: UIntNative): Int64 {\n    var result = 0\n    const VK_ESCAPE: UInt16 = 0x1B\n    if (msg == WM_KEYDOWN && wParam == UIntNative(VK_ESCAPE)) {\n        unsafe { DestroyWindow(hWnd) }\n    } else if (msg == WM_DESTROY) {\n        unsafe { PostQuitMessage(0) }\n    }\n    result = unsafe { DefWindowProcA(hWnd, msg, wParam, lParam) }\n    return result\n}",
      "blocks": [
        {
          "id": 1,
          "label": "var result = 0",
          "successors": [
            {
              "id": 2,
              "label": "const VK_ESCAPE: UInt16 = 0x1B",
              "successors": [
                {
                  "id": 3,
                  "label": "if (msg == WM_KEYDOWN && wParam == UIntNative(VK_ESCAPE)) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    unsafe { DestroyWindow(hWnd) }",
                      "successors": [
                        {
                          "id": 7,
                          "label": "result = unsafe { DefWindowProcA(hWnd, msg, wParam, lParam) }",
                          "successors": [
                            {
                              "id": 8,
                              "label": "return result",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "} else if (msg == WM_DESTROY) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "    unsafe { PostQuitMessage(0) }",
                          "successors": [
                            {
                              "id": 7,
                              "label": "result = unsafe { DefWindowProcA(hWnd, msg, wParam, lParam) }",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return result",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// \u6d4b\u8bd5 Windows API\n// \u4ed3\u9889\u8bed\u8a00\u56e2\u961f \u5218\u4fca\u6770 2024.11.04\n\n}\n\n@C\n@CallingConv[STDCALL]\n}",
  "blocks": [
    {
      "id": 1,
      "label": "// \u6d4b\u8bd5 Windows API\n// \u4ed3\u9889\u8bed\u8a00\u56e2\u961f \u5218\u4fca\u6770 2024.11.04\n\n",
      "successors": []
    },
    {
      "id": 2,
      "label": "@C\n@CallingConv[STDCALL]\n",
      "successors": []
    }
  ]
}