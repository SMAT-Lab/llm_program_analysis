{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 176,
  "functions": [
    {
      "name": "pathLoad",
      "type": "function",
      "start_line": 10,
      "end_line": 176,
      "functions": [],
      "classes": [],
      "simplified_code": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/opds/v2/libraries\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var cataLog = CataLog(host: host)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(cataLog.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/browse\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var publisher = \"\"\n            match (httpContext.request.url.query) {\n                case Some(x) => publisher = x.trimStart(\"publisher=\")\n                case None => ()\n            }\n            var brower = Brower(host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/browse\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var publisher = \"\"\n            match (httpContext.request.url.query) {\n                case Some(x) => publisher = x.trimStart(\"publisher=\")\n                case None => ()\n            }\n            var brower = Brower(id, host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var brower = LibrariesDetail(host: host, id: id)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/keep-reading\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n            if (user.id == \"\") {\n                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())\n                return\n            }\n            var brower = Reading(host: host, userID: user.id, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/keep-reading\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n            if (user.id == \"\") {\n                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())\n                return\n            }\n            var brower = Reading(id, host: host, userID: user.id, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/books/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Latest(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/books/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Latest(host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/series/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Series(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/series/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var brower = Series(host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n    return pathMap\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/opds/v2/libraries\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var cataLog = CataLog(host: host)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(cataLog.toJson())\n        }\n    )",
          "successors": [
            {
              "id": 2,
              "label": "pathMap.add(\n    \"/opds/v2/libraries/browse\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        var publisher = \"\"\n        match (httpContext.request.url.query) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Some(x) => publisher = x.trimStart(\"publisher=\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case None => ()\n        }\n        var brower = Brower(host: host, publisher: publisher)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "pathMap.add(\n    \"/opds/v2/libraries/:id/browse\",\n    {\n        httpContext =>\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        var publisher = \"\"\n        match (httpContext.request.url.query) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "case Some(x) => publisher = x.trimStart(\"publisher=\")",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "case None => ()\n        }\n        var brower = Brower(id, host: host, publisher: publisher)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                          "successors": [
                            {
                              "id": 8,
                              "label": "pathMap.add(\n    \"/opds/v2/libraries/:id\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        var brower = LibrariesDetail(host: host, id: id)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "pathMap.add(\n    \"/opds/v2/libraries/keep-reading\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        var page = 0\n        match (httpContext.request.url.query) {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "label": "case None => ()\n        }\n        let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n        if (user.id == \"\") {",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())",
                                          "successors": []
                                        },
                                        {
                                          "id": 13,
                                          "label": "return\n        }\n        var brower = Reading(host: host, userID: user.id, page: page)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                                          "successors": [
                                            {
                                              "id": 14,
                                              "label": "pathMap.add(\n    \"/opds/v2/libraries/:id/keep-reading\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        var page = 0\n        match (httpContext.request.url.query) {",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 16,
                                                  "label": "case None => ()\n        }\n        let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n        if (user.id == \"\") {",
                                                  "successors": [
                                                    {
                                                      "id": 17,
                                                      "label": "httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 18,
                                                      "label": "return\n        }\n        var brower = Reading(id, host: host, userID: user.id, page: page)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                                                      "successors": [
                                                        {
                                                          "id": 19,
                                                          "label": "pathMap.add(\n    \"/opds/v2/libraries/:id/books/latest\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        var page = 0\n        match (httpContext.request.url.query) {",
                                                          "successors": [
                                                            {
                                                              "id": 20,
                                                              "label": "case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
                                                              "successors": []
                                                            },
                                                            {
                                                              "id": 21,
                                                              "label": "case None => ()\n        }\n        var brower = Latest(id, host: host, page: page)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                                                              "successors": [
                                                                {
                                                                  "id": 22,
                                                                  "label": "pathMap.add(\n    \"/opds/v2/libraries/books/latest\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        var page = 0\n        match (httpContext.request.url.query) {",
                                                                  "successors": [
                                                                    {
                                                                      "id": 23,
                                                                      "label": "case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
                                                                      "successors": []
                                                                    },
                                                                    {
                                                                      "id": 24,
                                                                      "label": "case None => ()\n        }\n        var brower = Latest(host: host, page: page)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                                                                      "successors": [
                                                                        {
                                                                          "id": 25,
                                                                          "label": "pathMap.add(\n    \"/opds/v2/libraries/:id/series/latest\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        var page = 0\n        match (httpContext.request.url.query) {",
                                                                          "successors": [
                                                                            {
                                                                              "id": 26,
                                                                              "label": "case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
                                                                              "successors": []
                                                                            },
                                                                            {
                                                                              "id": 27,
                                                                              "label": "case None => ()\n        }\n        var brower = Series(id, host: host, page: page)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 28,
                                                                                  "label": "pathMap.add(\n    \"/opds/v2/libraries/series/latest\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        var page = 0\n        match (httpContext.request.url.query) {",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 29,
                                                                                      "label": "case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
                                                                                      "successors": []
                                                                                    },
                                                                                    {
                                                                                      "id": 30,
                                                                                      "label": "case None => ()\n        }\n        var brower = Series(host: host, page: page)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(brower.toJson())\n    }\n)",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 31,
                                                                                          "label": "return pathMap\n}",
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "package opds_cj.path.opds.v2.libraries\n\nimport net.http.*\nimport opds_cj.router.PathMap\ninternal import std.{collection.*, time.*, convert.*, io.ByteBuffer, io.readToEnd}\ninternal import opds_cj.config.baseConfig\ninternal import opds_cj.data_stru.*\ninternal import encoding.{url.*, json.stream.*}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package opds_cj.path.opds.v2.libraries",
      "successors": [
        {
          "id": 2,
          "label": "import net.http.*",
          "successors": [
            {
              "id": 3,
              "label": "import opds_cj.router.PathMap",
              "successors": [
                {
                  "id": 4,
                  "label": "internal import std.{collection.*, time.*, convert.*, io.ByteBuffer, io.readToEnd}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "internal import opds_cj.config.baseConfig",
                      "successors": [
                        {
                          "id": 6,
                          "label": "internal import opds_cj.data_stru.*",
                          "successors": [
                            {
                              "id": 7,
                              "label": "internal import encoding.{url.*, json.stream.*}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}