{
  "name": "opds_cj.data_stru",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [],
  "classes": [
    {
      "name": "Page",
      "type": "class",
      "start_line": 6,
      "end_line": 62,
      "functions": [
        {
          "name": "unzip",
          "type": "function",
          "start_line": 13,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func unzip(file: String, id: String) {\n        let argument: Array<String> = [\"e\", \"-y\", file, \"-o./data/cache/${id}\"]\n        Process.run(\"7z\", argument, stdOut: Discard)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func unzip(file: String, id: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let argument: Array<String> = [\"e\", \"-y\", file, \"-o./data/cache/${id}\"]",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    Process.run(\"7z\", argument, stdOut: Discard)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "identify",
          "type": "function",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func identify(path: String) {\n        let output = Process.runOutput(\"identify\", path)\n        return String.fromUtf8(output[1]).split(\" \")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func identify(path: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let output = Process.runOutput(\"identify\", path)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return String.fromUtf8(output[1]).split(\" \")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getPage",
          "type": "function",
          "start_line": 23,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func getPage(id: String, page: Int64, convert: String) {\n        var pageImage = Page()\n        let url = baseConfig.getFileURL(Books.getFile(id))\n        if (!exists(\"./data/cache/${id}/\")) {\n            unzip(url, id)\n        }\n        for (file in Directory.readFrom(\"data/cache/${id}/\")) {\n            var filename = file.path.fileNameWithoutExtension\n            let r = Regex(\"\\\\d+\")\n            let matchData = r.matcher(filename).find().getOrThrow().matchStr()\n            if (Int64.parse(matchData) == page) {\n                pageImage.path = file.path.toString()\n                let info = identify(pageImage.path)\n                pageImage.format = info[1].toAsciiLower()\n                pageImage.width = Int64.parse(info[2].split(\"x\")[0])\n                pageImage.height = Int64.parse(info[2].split(\"x\")[1])\n                pageImage.convert(convert)\n                return pageImage\n            }\n        }\n        return pageImage\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func getPage(id: String, page: Int64, convert: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "var pageImage = Page()\nlet url = baseConfig.getFileURL(Books.getFile(id))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (!exists(\"./data/cache/${id}/\")) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "unzip(url, id)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "for (file in Directory.readFrom(\"data/cache/${id}/\")) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "var filename = file.path.fileNameWithoutExtension\nlet r = Regex(\"\\\\d+\")\nlet matchData = r.matcher(filename).find().getOrThrow().matchStr()",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "if (Int64.parse(matchData) == page) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "pageImage.path = file.path.toString()\nlet info = identify(pageImage.path)\npageImage.format = info[1].toAsciiLower()\npageImage.width = Int64.parse(info[2].split(\"x\")[0])\npageImage.height = Int64.parse(info[2].split(\"x\")[1])\npageImage.convert(convert)\nreturn pageImage",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "for (file in Directory.readFrom(\"data/cache/${id}/\")) {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "var filename = file.path.fileNameWithoutExtension\nlet r = Regex(\"\\\\d+\")\nlet matchData = r.matcher(filename).find().getOrThrow().matchStr()",
                          "successors": [
                            {
                              "id": 11,
                              "label": "if (Int64.parse(matchData) == page) {",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "pageImage.path = file.path.toString()\nlet info = identify(pageImage.path)\npageImage.format = info[1].toAsciiLower()\npageImage.width = Int64.parse(info[2].split(\"x\")[0])\npageImage.height = Int64.parse(info[2].split(\"x\")[1])\npageImage.convert(convert)\nreturn pageImage",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "return pageImage",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readFile",
          "type": "function",
          "start_line": 45,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readFile() {\n        this.data.appendAll(File.readFrom(this.path))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readFile() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.data.appendAll(File.readFrom(this.path))",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "convert",
          "type": "function",
          "start_line": 49,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    func convert(type_u: String) {\n        if (type_u == \"\") {\n            return\n        }\n        if (this.format != type_u) {\n            if (!exists(this.path.replace(\".${this.format}\", \".${type_u}\"))) {\n                let argument: Array<String> = [this.path, this.path.replace(\".${this.format}\", \".${type_u}\")]\n                Process.run(\"convert\", argument, stdOut: Discard)\n            }\n            this.path = this.path.replace(\".${this.format}\", \".${type_u}\")\n            this.format = type_u\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func convert(type_u: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (type_u == \"\") {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "if (this.format != type_u) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (!exists(this.path.replace(\".${this.format}\", \".${type_u}\"))) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "let argument: Array<String> = [this.path, this.path.replace(\".${this.format}\", \".${type_u}\")]",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "Process.run(\"convert\", argument, stdOut: Discard)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "this.path = this.path.replace(\".${this.format}\", \".${type_u}\")",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "this.format = type_u",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Page {\n    public var width: Int64 = 0\n    public var height: Int64 = 0\n    public var format: String = \"\"\n    var path: String = \"\"\n    public var data: ArrayList<Byte> = ArrayList<Byte>()\n\n    }\n\n    }\n\n    }\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Page {\n    public var width: Int64 = 0\n    public var height: Int64 = 0\n    public var format: String = \"\"\n    var path: String = \"\"\n    public var data: ArrayList<Byte> = ArrayList<Byte>()\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package opds_cj.data_stru\n\nimport std.{process.*, fs.*, convert.*, regex.*, collection.*}\nimport opds_cj.config.baseConfig\n\n}",
  "blocks": []
}