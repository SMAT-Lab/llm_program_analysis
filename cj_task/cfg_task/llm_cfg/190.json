{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 17,
  "functions": [],
  "classes": [
    {
      "name": "AI013x0xReader",
      "type": "class",
      "start_line": 2,
      "end_line": 17,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 5,
          "end_line": 7,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(information: BitArray) {\n        super(information)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(information: BitArray) {",
              "successors": [
                {
                  "id": 2,
                  "label": "super(information)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "parseInformation",
          "type": "function",
          "start_line": 8,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func parseInformation(): String {\n        if (this.information.size != HEADER_SIZE + GTIN_SIZE + WEIGHT_SIZE) {\n            throw NotFoundException()\n        }\n        let buf = StringBuilder()\n        encodeCompressedGtin(buf, HEADER_SIZE)\n        encodeCompressedWeight(buf, HEADER_SIZE + GTIN_SIZE, WEIGHT_SIZE)\n        buf.toString()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func parseInformation(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.information.size != HEADER_SIZE + GTIN_SIZE + WEIGHT_SIZE) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw NotFoundException()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "let buf = StringBuilder()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "encodeCompressedGtin(buf, HEADER_SIZE)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "encodeCompressedWeight(buf, HEADER_SIZE + GTIN_SIZE, WEIGHT_SIZE)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "buf.toString()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "abstract class AI013x0xReader <: AI01WeightReader {\n    static let HEADER_SIZE = 5 // 4 + 1\n    static let WEIGHT_SIZE = 15\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "abstract class AI013x0xReader <: AI01WeightReader {",
          "successors": [
            {
              "id": 2,
              "label": "    static let HEADER_SIZE = 5 // 4 + 1",
              "successors": [
                {
                  "id": 3,
                  "label": "    static let WEIGHT_SIZE = 15",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package barcode\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package barcode",
      "successors": []
    },
    {
      "id": 2,
      "label": "}",
      "successors": []
    }
  ]
}