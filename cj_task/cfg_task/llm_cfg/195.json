{
  "name": "barPage",
  "type": "CFG",
  "start_line": 1,
  "end_line": 102,
  "functions": [],
  "classes": [
    {
      "name": "StackedBarChartPage",
      "type": "class",
      "start_line": 8,
      "end_line": 102,
      "functions": [
        {
          "name": "aboutToAppear",
          "type": "function",
          "start_line": 16,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected override func aboutToAppear() {\n        let description: Description = this.model.getDescription()\n        description.setEnabled(false)\n        let l: ?Legend = this.model.getLegend()\n        if (let Some(l) <- l) {\n            l.setEnabled(false)\n        }\n        // if more than 40 entries are displayed in the this.model, no values will be drawn\n        this.model.setMaxVisibleValueCount(40)\n        this.model.setDrawGridBackground(false)\n        this.model.setGridBackgroundColor(0x500000ff)\n        this.model.setDrawBarShadow(false)\n        this.model.setDrawValueAboveBar(false)\n        this.limitLine1 = LimitLine(120.0, \"Upper Limit\")\n        this.limitLine1.setLineWidth(4.0)\n        this.limitLine1.enableDashedLine(10, 10)\n        this.limitLine1.setLabelPosition(LimitLabelPosition.RIGHT_TOP)\n        this.limitLine1.setTextSize(10.0)\n        this.limitLine2 = LimitLine(50.0, \"Lower Limit\")\n        this.limitLine2.setLineWidth(4.0)\n        this.limitLine2.enableDashedLine(10, 10)\n        this.limitLine2.setLineColor(0xFFFF00)\n        this.limitLine2.setLabelPosition(LimitLabelPosition.RIGHT_BOTTOM)\n        this.limitLine2.setTextSize(10.0)\n        this.leftAxis = this.model.getAxisLeft()\n        if (let Some(leftAxis) <- this.leftAxis) {\n            leftAxis.setAxisMinimum(0.0)\n            leftAxis.setDrawLimitLinesBehindData(false)\n            leftAxis.addLimitLine(this.limitLine1)\n            leftAxis.addLimitLine(this.limitLine2)\n        }\n        this.rightAxis = this.model.getAxisRight()\n        if (let Some(rightAxis) <- this.rightAxis) {\n            rightAxis.setEnabled(false)\n            rightAxis.setAxisMinimum(0.0)\n        }\n        this.xAxis = this.model.getXAxis()\n        if (let Some(xAxis) <- this.xAxis) {\n            xAxis.setPosition(XAxisPosition.TOP)\n        }\n        this.barData = this.getStackData()\n        this.model.setData(this.barData)\n        this.model.setVisibleXRangeMaximum(20.0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "protected override func aboutToAppear() {",
              "successors": [
                {
                  "id": 2,
                  "label": "let description: Description = this.model.getDescription()\ndescription.setEnabled(false)\nlet l: ?Legend = this.model.getLegend()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (let Some(l) <- l) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "l.setEnabled(false)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "this.model.setMaxVisibleValueCount(40)\nthis.model.setDrawGridBackground(false)\nthis.model.setGridBackgroundColor(0x500000ff)\nthis.model.setDrawBarShadow(false)\nthis.model.setDrawValueAboveBar(false)\nthis.limitLine1 = LimitLine(120.0, \"Upper Limit\")\nthis.limitLine1.setLineWidth(4.0)\nthis.limitLine1.enableDashedLine(10, 10)\nthis.limitLine1.setLabelPosition(LimitLabelPosition.RIGHT_TOP)\nthis.limitLine1.setTextSize(10.0)\nthis.limitLine2 = LimitLine(50.0, \"Lower Limit\")\nthis.limitLine2.setLineWidth(4.0)\nthis.limitLine2.enableDashedLine(10, 10)\nthis.limitLine2.setLineColor(0xFFFF00)\nthis.limitLine2.setLabelPosition(LimitLabelPosition.RIGHT_BOTTOM)\nthis.limitLine2.setTextSize(10.0)\nthis.leftAxis = this.model.getAxisLeft()",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (let Some(leftAxis) <- this.leftAxis) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "leftAxis.setAxisMinimum(0.0)\nleftAxis.setDrawLimitLinesBehindData(false)\nleftAxis.addLimitLine(this.limitLine1)\nleftAxis.addLimitLine(this.limitLine2)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "this.rightAxis = this.model.getAxisRight()",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (let Some(rightAxis) <- this.rightAxis) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "rightAxis.setEnabled(false)\nrightAxis.setAxisMinimum(0.0)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "this.xAxis = this.model.getXAxis()",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (let Some(xAxis) <- this.xAxis) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "xAxis.setPosition(XAxisPosition.TOP)",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "label": "this.barData = this.getStackData()\nthis.model.setData(this.barData)\nthis.model.setVisibleXRangeMaximum(20.0)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getStackData",
          "type": "function",
          "start_line": 60,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func getStackData(): BarData {\n        let values: ArrayList<BarEntry> = ArrayList<BarEntry>()\n        values.append(BarEntry(1.0, [38.0, 28.0, 39.8]))\n        values.append(BarEntry(2.0, [18.2, 16.1, 16.1]))\n        values.append(BarEntry(3.0, [45.8, 49.8, 26.7]))\n        values.append(BarEntry(4.0, [36.5, 43.8, 15.1]))\n        values.append(BarEntry(5.0, [51.5, 35.4, 24.1]))\n        values.append(BarEntry(6.0, [44.9, 21.4, 15.9]))\n        values.append(BarEntry(7.0, [32.9, 40.4, 32.7]))\n        values.append(BarEntry(8.0, [24.3, 31.0, 47.1]))\n        values.append(BarEntry(9.0, [17.4, 48.4, 49.6]))\n        values.append(BarEntry(10.0, [32.0, 29.8, 20.0]))\n        values.append(BarEntry(11.0, [43.9, 52.7, 27.7]))\n        values.append(BarEntry(12.0, [28.4, 46.2, 51.8]))\n        values.append(BarEntry(13.0, [42.6, 51.9, 44.0]))\n        values.append(BarEntry(14.0, [14.8, 22.4, 31.2]))\n        values.append(BarEntry(15.0, [50.3, 18.7, 18.3]))\n        values.append(BarEntry(16.0, [20.7, 22.9, 40.2]))\n        values.append(BarEntry(17.0, [49.4, 38.3, 41.7]))\n        values.append(BarEntry(18.0, [45.9, 40.7, 29.5]))\n        values.append(BarEntry(19.0, [37.1, 31.8, 42.9]))\n        let set1: BarDataSet\n        set1 = BarDataSet(values, \"Statistics Vienna 2014\")\n        set1.setDrawIcons(false)\n        set1.setColorsByVariable(this.getColors())\n        set1.setStackLabels([\"Births\", \"Divorces\", \"Marriages\"])\n        let dataSets: ArrayList<IBarDataSet> = ArrayList<IBarDataSet>()\n        dataSets.append(set1)\n        let data: BarData = BarData(dataSets)\n        data.setValueTextColor(0xffffff)\n        return data\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func getStackData(): BarData {",
              "successors": [
                {
                  "id": 2,
                  "label": "let values: ArrayList<BarEntry> = ArrayList<BarEntry>()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "values.append(BarEntry(1.0, [38.0, 28.0, 39.8]))\nvalues.append(BarEntry(2.0, [18.2, 16.1, 16.1]))\nvalues.append(BarEntry(3.0, [45.8, 49.8, 26.7]))\nvalues.append(BarEntry(4.0, [36.5, 43.8, 15.1]))\nvalues.append(BarEntry(5.0, [51.5, 35.4, 24.1]))\nvalues.append(BarEntry(6.0, [44.9, 21.4, 15.9]))\nvalues.append(BarEntry(7.0, [32.9, 40.4, 32.7]))\nvalues.append(BarEntry(8.0, [24.3, 31.0, 47.1]))\nvalues.append(BarEntry(9.0, [17.4, 48.4, 49.6]))\nvalues.append(BarEntry(10.0, [32.0, 29.8, 20.0]))\nvalues.append(BarEntry(11.0, [43.9, 52.7, 27.7]))\nvalues.append(BarEntry(12.0, [28.4, 46.2, 51.8]))\nvalues.append(BarEntry(13.0, [42.6, 51.9, 44.0]))\nvalues.append(BarEntry(14.0, [14.8, 22.4, 31.2]))\nvalues.append(BarEntry(15.0, [50.3, 18.7, 18.3]))\nvalues.append(BarEntry(16.0, [20.7, 22.9, 40.2]))\nvalues.append(BarEntry(17.0, [49.4, 38.3, 41.7]))\nvalues.append(BarEntry(18.0, [45.9, 40.7, 29.5]))\nvalues.append(BarEntry(19.0, [37.1, 31.8, 42.9]))",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let set1: BarDataSet\nset1 = BarDataSet(values, \"Statistics Vienna 2014\")",
                          "successors": [
                            {
                              "id": 5,
                              "label": "set1.setDrawIcons(false)\nset1.setColorsByVariable(this.getColors())\nset1.setStackLabels([\"Births\", \"Divorces\", \"Marriages\"])",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "let dataSets: ArrayList<IBarDataSet> = ArrayList<IBarDataSet>()\ndataSets.append(set1)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "let data: BarData = BarData(dataSets)\ndata.setValueTextColor(0xffffff)",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "return data",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getColors",
          "type": "function",
          "start_line": 92,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func getColors(): Array<UInt32> {\n        let colors: Array<UInt32> = [UInt32(ColorTemplate.MATERIAL_COLORS[0]), UInt32(ColorTemplate.MATERIAL_COLORS[1]),\n        UInt32(ColorTemplate.MATERIAL_COLORS[2])]\n        return colors\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func getColors(): Array<UInt32> {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let colors: Array<UInt32> = [UInt32(ColorTemplate.MATERIAL_COLORS[0]), UInt32(ColorTemplate.MATERIAL_COLORS[1]), UInt32(ColorTemplate.MATERIAL_COLORS[2])]",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return colors",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "build",
          "type": "function",
          "start_line": 97,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": "    func build() {\n        Column {\n            BarChart(model: this.model)\n        }.width(100.percent).height(70.percent).backgroundColor(Color.WHITE)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func build() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Column {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        BarChart(model: this.model)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "    }.width(100.percent).height(70.percent).backgroundColor(Color.WHITE)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class StackedBarChartPage {\n    private var model: BarChartModel = BarChartModel.build()\n    private var leftAxis: ?YAxis = Option<YAxis>.None\n    private var rightAxis: ?YAxis = Option<YAxis>.None\n    private var xAxis: ?XAxis = Option<XAxis>.None\n    private var limitLine1: LimitLine = LimitLine(0.0, \"limit1\")\n    private var limitLine2: LimitLine = LimitLine(0.0, \"limit2\")\n    private var barData: BarData = BarData()\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class StackedBarChartPage {",
          "successors": [
            {
              "id": 2,
              "label": "private var model: BarChartModel = BarChartModel.build()",
              "successors": [
                {
                  "id": 3,
                  "label": "private var leftAxis: ?YAxis = Option<YAxis>.None",
                  "successors": [
                    {
                      "id": 4,
                      "label": "private var rightAxis: ?YAxis = Option<YAxis>.None",
                      "successors": [
                        {
                          "id": 5,
                          "label": "private var xAxis: ?XAxis = Option<XAxis>.None",
                          "successors": [
                            {
                              "id": 6,
                              "label": "private var limitLine1: LimitLine = LimitLine(0.0, \"limit1\")",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "private var limitLine2: LimitLine = LimitLine(0.0, \"limit2\")",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "private var barData: BarData = BarData()",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package ohos_app_cangjie_entry.barPage\nimport ohos.base.*\nimport ohos.component.*\nimport ohos.state_manage.*\nimport ohos.state_macro_manage.*\n@Entry\n@Component\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package ohos_app_cangjie_entry.barPage",
      "successors": [
        {
          "id": 2,
          "label": "import ohos.base.*",
          "successors": [
            {
              "id": 3,
              "label": "import ohos.component.*",
              "successors": [
                {
                  "id": 4,
                  "label": "import ohos.state_manage.*",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import ohos.state_macro_manage.*",
                      "successors": [
                        {
                          "id": 6,
                          "label": "@Entry",
                          "successors": [
                            {
                              "id": 7,
                              "label": "@Component",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}