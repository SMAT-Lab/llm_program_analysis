{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 116,
  "functions": [],
  "classes": [
    {
      "name": "HelperTests",
      "type": "class",
      "start_line": 11,
      "end_line": 116,
      "functions": [
        {
          "name": "basic",
          "type": "function",
          "start_line": 13,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    func basic() {\n        let a: Bool = true\n        let i8: Int8 = 1\n        let i16: Int16 = 2\n        let i32: Int32 = 3\n        let i64: Int64 = 4\n        let ina: IntNative = 5\n        let u8: UInt8 = 6\n        let u16: UInt16 = 7\n        let u32: UInt32 = 8\n        let u64: UInt64 = 9\n        let una: UIntNative = 10 \n        let f16: Float16 = 0.5\n        let f32: Float32 = 0.25\n        let f64: Float64 = 0.125\n        let s: String = \"hello\"\n\n        assertJson(castJsonValue(a), JsonBool(true))\n        assertJson(castJsonValue(i8), JsonInt(1))\n        assertJson(castJsonValue(i16), JsonInt(2))\n        assertJson(castJsonValue(i32), JsonInt(3))\n        assertJson(castJsonValue(i64), JsonInt(4))\n        assertJson(castJsonValue(ina), JsonInt(5))\n        assertJson(castJsonValue(u8), JsonInt(6))\n        assertJson(castJsonValue(u16), JsonInt(7))\n        assertJson(castJsonValue(u32), JsonInt(8))\n        assertJson(castJsonValue(u64), JsonInt(9))\n        assertJson(castJsonValue(una), JsonInt(10))\n        assertJson(castJsonValue(f16), JsonFloat(0.5))\n        assertJson(castJsonValue(f32), JsonFloat(0.25))\n        assertJson(castJsonValue(f64), JsonFloat(0.125))\n        assertJson(castJsonValue(s), JsonString(\"hello\"))\n\n        assertJson(a.toJsonValue(), JsonBool(true))\n        assertJson(i8.toJsonValue(), JsonInt(1))\n        assertJson(i16.toJsonValue(), JsonInt(2))\n        assertJson(i32.toJsonValue(), JsonInt(3))\n        assertJson(i64.toJsonValue(), JsonInt(4))\n        assertJson(ina.toJsonValue(), JsonInt(5))\n        assertJson(u8.toJsonValue(), JsonInt(6))\n        assertJson(u16.toJsonValue(), JsonInt(7))\n        assertJson(u32.toJsonValue(), JsonInt(8))\n        assertJson(u64.toJsonValue(), JsonInt(9))\n        assertJson(una.toJsonValue(), JsonInt(10))\n        assertJson(f16.toJsonValue(), JsonFloat(0.5))\n        assertJson(f32.toJsonValue(), JsonFloat(0.25))\n        assertJson(f64.toJsonValue(), JsonFloat(0.125))\n        assertJson(s.toJsonValue(), JsonString(\"hello\"))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func basic() {\n    let a: Bool = true\n    let i8: Int8 = 1\n    let i16: Int16 = 2\n    let i32: Int32 = 3\n    let i64: Int64 = 4\n    let ina: IntNative = 5\n    let u8: UInt8 = 6\n    let u16: UInt16 = 7\n    let u32: UInt32 = 8\n    let u64: UInt64 = 9\n    let una: UIntNative = 10\n    let f16: Float16 = 0.5\n    let f32: Float32 = 0.25\n    let f64: Float64 = 0.125\n    let s: String = \"hello\"",
              "successors": [
                {
                  "id": 2,
                  "label": "assertJson(castJsonValue(a), JsonBool(true))\nassertJson(castJsonValue(i8), JsonInt(1))\nassertJson(castJsonValue(i16), JsonInt(2))\nassertJson(castJsonValue(i32), JsonInt(3))\nassertJson(castJsonValue(i64), JsonInt(4))\nassertJson(castJsonValue(ina), JsonInt(5))\nassertJson(castJsonValue(u8), JsonInt(6))\nassertJson(castJsonValue(u16), JsonInt(7))\nassertJson(castJsonValue(u32), JsonInt(8))\nassertJson(castJsonValue(u64), JsonInt(9))\nassertJson(castJsonValue(una), JsonInt(10))\nassertJson(castJsonValue(f16), JsonFloat(0.5))\nassertJson(castJsonValue(f32), JsonFloat(0.25))\nassertJson(castJsonValue(f64), JsonFloat(0.125))\nassertJson(castJsonValue(s), JsonString(\"hello\"))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "assertJson(a.toJsonValue(), JsonBool(true))\nassertJson(i8.toJsonValue(), JsonInt(1))\nassertJson(i16.toJsonValue(), JsonInt(2))\nassertJson(i32.toJsonValue(), JsonInt(3))\nassertJson(i64.toJsonValue(), JsonInt(4))\nassertJson(ina.toJsonValue(), JsonInt(5))\nassertJson(u8.toJsonValue(), JsonInt(6))\nassertJson(u16.toJsonValue(), JsonInt(7))\nassertJson(u32.toJsonValue(), JsonInt(8))\nassertJson(u64.toJsonValue(), JsonInt(9))\nassertJson(una.toJsonValue(), JsonInt(10))\nassertJson(f16.toJsonValue(), JsonFloat(0.5))\nassertJson(f32.toJsonValue(), JsonFloat(0.25))\nassertJson(f64.toJsonValue(), JsonFloat(0.125))\nassertJson(s.toJsonValue(), JsonString(\"hello\"))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "tojson",
          "type": "function",
          "start_line": 64,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    func tojson() {\n        let t = DataModelInt(233)\n        assertJson(castJsonValue(t), JsonInt(233))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func tojson() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let t = DataModelInt(233)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    assertJson(castJsonValue(t), JsonInt(233))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "jsonValue",
          "type": "function",
          "start_line": 70,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "    func jsonValue() {\n        let a = JsonInt(1)\n        let b = JsonFloat(1.0)\n        let c = JsonBool(true)\n        let d = JsonString(\"hello\")\n        let e = JsonNull()\n\n        assertJson(castJsonValue(a), a)\n        assertJson(castJsonValue(b), b)\n        assertJson(castJsonValue(c), c)\n        assertJson(castJsonValue(d), d)\n        assertJson(castJsonValue(e), e)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let a = JsonInt(1)\nlet b = JsonFloat(1.0)\nlet c = JsonBool(true)\nlet d = JsonString(\"hello\")\nlet e = JsonNull()",
              "successors": [
                {
                  "id": 2,
                  "label": "assertJson(castJsonValue(a), a)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "assertJson(castJsonValue(b), b)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "assertJson(castJsonValue(c), c)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "assertJson(castJsonValue(d), d)",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "assertJson(castJsonValue(e), e)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "list",
          "type": "function",
          "start_line": 85,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    func list() {\n        let a = [1, 2, 3]\n        let b = ArrayList([1, 2, 3])\n        let c = LinkedList([1, 2, 3])\n\n        let target = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])\n\n        assertJson(castJsonValue(a), target)\n        assertJson(castJsonValue(b), target)\n        assertJson(castJsonValue(c), target)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func list() {",
              "successors": [
                {
                  "id": 2,
                  "label": "let a = [1, 2, 3]",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let b = ArrayList([1, 2, 3])",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let c = LinkedList([1, 2, 3])",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let target = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "assertJson(castJsonValue(a), target)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "assertJson(castJsonValue(b), target)",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "assertJson(castJsonValue(c), target)",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "map",
          "type": "function",
          "start_line": 98,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": "    func map() {\n        let a = TreeMap([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n        let target = JsonObject()\n        target.put(\"a\", JsonInt(1))\n        target.put(\"b\", JsonInt(2))\n        target.put(\"c\", JsonInt(3))\n\n        assertJson(castJsonValue(a), target)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func map() {",
              "successors": [
                {
                  "id": 2,
                  "label": "let a = TreeMap([(\"a\", 1), (\"b\", 2), (\"c\", 3)])",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let target = JsonObject()",
                      "successors": [
                        {
                          "id": 4,
                          "label": "target.put(\"a\", JsonInt(1))",
                          "successors": [
                            {
                              "id": 5,
                              "label": "target.put(\"b\", JsonInt(2))",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "target.put(\"c\", JsonInt(3))",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "assertJson(castJsonValue(a), target)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "option",
          "type": "function",
          "start_line": 109,
          "end_line": 115,
          "functions": [],
          "classes": [],
          "simplified_code": "    func option() {\n        let a: Option<Int> = Some(1)\n        let b: Option<Int> = None\n\n        assertJson(castJsonValue(a), JsonInt(1))\n        assertJson(castJsonValue(b), JsonNull())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func option() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let a: Option<Int> = Some(1)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    let b: Option<Int> = None",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    assertJson(castJsonValue(a), JsonInt(1))",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    assertJson(castJsonValue(b), JsonNull())",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class HelperTests {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package json_cj.helper\n\nimport std.unittest.testmacro.{Test, Assert, TestCase}\nimport std.unittest.*\nimport std.collection.*\nimport encoding.json.*\nimport serialization.serialization.*\nimport json_cj.testutil.assertJson\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package json_cj.helper",
      "successors": [
        {
          "id": 2,
          "label": "import std.unittest.testmacro.{Test, Assert, TestCase}",
          "successors": [
            {
              "id": 3,
              "label": "import std.unittest.*",
              "successors": [
                {
                  "id": 4,
                  "label": "import std.collection.*",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import encoding.json.*",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import serialization.serialization.*",
                          "successors": [
                            {
                              "id": 7,
                              "label": "import json_cj.testutil.assertJson",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "@Test",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}