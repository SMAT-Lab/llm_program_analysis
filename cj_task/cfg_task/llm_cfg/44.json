{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 92,
  "functions": [
    {
      "name": "controller",
      "type": "function",
      "start_line": 15,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "func controller() {\n    spawn {\n        while (!g_quit) {\n            let key = Console.stdIn.read().getOrDefault {r' '}\n            if (key == r'q' || key == r'Q') {\n                g_quit = true\n            }\n        }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func controller() {",
          "successors": [
            {
              "id": 2,
              "label": "spawn {",
              "successors": [
                {
                  "id": 3,
                  "label": "while (!g_quit) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let key = Console.stdIn.read().getOrDefault {r' '}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (key == r'q' || key == r'Q') {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "g_quit = true",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 36,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let messageQueue = NonBlockingQueue<(TcpSocket, Array<Byte>)>()\n    let members = LinkedList<TcpSocket>() // \u7fa4\u804a\u6210\u5458/\u5ba2\u6237\u7aef\n    let server = TcpServerSocket(bindAt: PORT) // \u670d\u52a1\u7aef\n    server.bind()\n    controller()\n\n    // \u548c\u65b0\u7684\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5\n    let mutex = ReentrantMutex()\n    let monitor = Monitor()\n    spawn {\n        while (!g_quit) {\n            let client = server.accept()\n            synchronized (mutex) {\n                members.append(client)\n            }\n            // \u6bcf\u4e2a\u8fde\u63a5\u8981\u5904\u7406\u7684\u4efb\u52a1\n            spawn {\n                while (!g_quit) {\n                    let data = Array<Byte>(BUFFER_SIZE, repeat: 0)\n                    try { client.read(data) } catch (e: SocketException) {\n                        return // \u9047\u5230\u5f02\u5e38\u7ec8\u6b62\u6b64\u7ebf\u7a0b\uff0c\u7531\u8f6c\u53d1\u7ebf\u7a0b\u6e05\u7406\u8d44\u6e90\n                    }\n                    println(String.fromUtf8(data))\n                    messageQueue.enqueue((client, data))\n                    synchronized (monitor) { monitor.notify() }\n                }\n            }\n        }\n    }\n\n    // \u8f6c\u53d1\u6d88\u606f\u5230\u6240\u6709\u5ba2\u6237\u7aef\uff0c\u5b9e\u73b0\u7fa4\u804a\n    while (!g_quit) {\n        // \u6211\u4eec\u4f7f\u7528\u4e86\u5e76\u53d1\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc Monitor \u4e0d\u5fc5\u4fdd\u62a4\u6570\u636e\uff0c\u4ec5\u7528\u4e8e\u907f\u514d\u5f53\u524d while \u7a7a\u8f6c\n        synchronized (monitor) {\n            monitor.wait(timeout: 100 * Duration.millisecond)            \n        }\n        while (let Some((client, data)) <- messageQueue.dequeue()) {\n            mutex.lock()\n            // \u904d\u5386\u7fa4\u804a\u6210\u5458\uff0c\u8f6c\u53d1\u6d88\u606f\u5e76\u6e05\u7406\u65e0\u6548\u5ba2\u6237\u7aef\n            members.removeIf { socket =>\n                if (refEq(client, socket)) { // \u4e0d\u5fc5\u8f6c\u53d1\u7ed9\u6d88\u606f\u6e90\n                    return false\n                }\n                !socket.tryWrite(data)\n            }\n            mutex.unlock()\n        }\n    }\n    // \u9000\u51fa\u65f6\u901a\u77e5\u6240\u6709\u5ba2\u6237\u7aef\n    for (client in members) {\n        if (client.tryWrite(\"Server Exit\".toArray())) {\n            client.close()\n        }\n    }\n    server.close()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let messageQueue = NonBlockingQueue<(TcpSocket, Array<Byte>)>()",
          "successors": [
            {
              "id": 2,
              "label": "let members = LinkedList<TcpSocket>()",
              "successors": [
                {
                  "id": 3,
                  "label": "let server = TcpServerSocket(bindAt: PORT)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "server.bind()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "controller()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let mutex = ReentrantMutex()",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "let monitor = Monitor()",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "spawn { while (!g_quit) { let client = server.accept() synchronized (mutex) { members.append(client) } spawn { while (!g_quit) { let data = Array<Byte>(BUFFER_SIZE, repeat: 0) try { client.read(data) } catch (e: SocketException) { return } println(String.fromUtf8(data)) messageQueue.enqueue((client, data)) synchronized (monitor) { monitor.notify() } } } } }",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "while (!g_quit) { synchronized (monitor) { monitor.wait(timeout: 100 * Duration.millisecond) } while (let Some((client, data)) <- messageQueue.dequeue()) { mutex.lock() members.removeIf { socket => if (refEq(client, socket)) { return false } !socket.tryWrite(data) } mutex.unlock() } }",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "for (client in members) { if (client.tryWrite(\"Server Exit\".toArray())) { client.close() } }",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "server.close()",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "TcpSocket",
      "type": "class",
      "start_line": 26,
      "end_line": 34,
      "functions": [
        {
          "name": "tryWrite",
          "type": "function",
          "start_line": 27,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func tryWrite(data: Array<Byte>) {\n        try { this.write(data) } catch (e: SocketException) {\n            if (!this.isClosed()) { this.close() }\n            return false\n        }\n        return true\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func tryWrite(data: Array<Byte>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "try { this.write(data) }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return true",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "catch (e: SocketException) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (!this.isClosed()) { this.close() }",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return false",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "extend TcpSocket {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend TcpSocket {",
          "successors": [
            {
              "id": 2,
              "label": "    }",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "// \u7fa4\u804a\u7a0b\u5e8f-\u670d\u52a1\u5668\n// \u4ed3\u9889\u8bed\u8a00\u56e2\u961f \u5218\u4fca\u6770 2024/10/21\nimport std.net.*\nimport std.time.*\nimport std.sync.*\nimport std.collection.*\nimport std.collection.concurrent.*\nimport std.console.*\n\nconst PORT: UInt16 = 24621\nconst BUFFER_SIZE = 1024\nvar g_quit = false\n\n// \u4ece\u63a7\u5236\u53f0\u8bfb\u53d6\u9000\u51fa\u547d\u4ee4\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.net.*\nimport std.time.*\nimport std.sync.*\nimport std.collection.*\nimport std.collection.concurrent.*\nimport std.console.*",
      "successors": [
        {
          "id": 2,
          "label": "const PORT: UInt16 = 24621\nconst BUFFER_SIZE = 1024\nvar g_quit = false",
          "successors": []
        }
      ]
    }
  ]
}