{
  "name": "opds_cj_sqlite",
  "type": "CFG",
  "start_line": 1,
  "end_line": 315,
  "functions": [
    {
      "name": "malloc",
      "type": "function",
      "start_line": 12,
      "end_line": 12,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func malloc(size: UIntNative): CPointer<Unit>",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func malloc(size: UIntNative): CPointer<Unit>",
          "successors": []
        }
      ]
    },
    {
      "name": "free",
      "type": "function",
      "start_line": 13,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func free(p: CPointer<Unit>): Unit",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func free(p: CPointer<Unit>): Unit",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlite3_open",
      "type": "function",
      "start_line": 18,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_open(path: CString, ppDb: CPointer<CPointer<Unit>>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_open(path: CString, ppDb: CPointer<CPointer<Unit>>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlOpen",
      "type": "function",
      "start_line": 20,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlOpen(path: String): CPointer<CPointer<Unit>> {\n    let ppDb: CPointer<CPointer<Unit>>\n    unsafe {\n        let ptr = malloc(POINTER_SIZE)\n        ppDb = CPointer<CPointer<Unit>>(ptr)\n        let cPath = LibC.mallocCString(path)\n        let ret = sqlite3_open(cPath, ppDb)\n        LibC.free(cPath)\n        if (ret != 0) {\n            throw SqlException(\"Failed to open database.\")\n        }\n    }\n    return ppDb\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlOpen(path: String): CPointer<CPointer<Unit>> {",
          "successors": [
            {
              "id": 2,
              "label": "let ppDb: CPointer<CPointer<Unit>>",
              "successors": [
                {
                  "id": 3,
                  "label": "unsafe {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let ptr = malloc(POINTER_SIZE)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "ppDb = CPointer<CPointer<Unit>>(ptr)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let cPath = LibC.mallocCString(path)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "let ret = sqlite3_open(cPath, ppDb)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "LibC.free(cPath)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "if (ret != 0) {",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "throw SqlException(\"Failed to open database.\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "label": "return ppDb",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_prepare_v2",
      "type": "function",
      "start_line": 38,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_prepare_v2(pDb: CPointer<Unit>, zSql: CString, nBytes: Int32, \n                                ppStmt: CPointer<CPointer<Unit>>, pzTail: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_prepare_v2(pDb: CPointer<Unit>, zSql: CString, nBytes: Int32,",
          "successors": [
            {
              "id": 2,
              "label": "ppStmt: CPointer<CPointer<Unit>>, pzTail: CPointer<Unit>): Int32",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlPrepare",
      "type": "function",
      "start_line": 41,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlPrepare(ppDb: CPointer<CPointer<Unit>>, sql: String): CPointer<CPointer<Unit>> {\n    let ppStmt: CPointer<CPointer<Unit>>\n    unsafe {\n        let ptr = malloc(POINTER_SIZE)\n        ppStmt = CPointer<CPointer<Unit>>(ptr)\n        let zSql = LibC.mallocCString(sql)\n        let nullptr = CPointer<Unit>()\n        let ret = sqlite3_prepare_v2(ppDb.read(), zSql, Int32(sql.size), ppStmt, nullptr)\n        LibC.free(zSql)\n        if (ret != 0) {\n            throw SqlException(\"Failed to prepare statement.\")\n        }\n    }\n    return ppStmt\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlPrepare(ppDb: CPointer<CPointer<Unit>>, sql: String): CPointer<CPointer<Unit>> {",
          "successors": [
            {
              "id": 2,
              "label": "let ppStmt: CPointer<CPointer<Unit>>",
              "successors": [
                {
                  "id": 3,
                  "label": "unsafe {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let ptr = malloc(POINTER_SIZE)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "ppStmt = CPointer<CPointer<Unit>>(ptr)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let zSql = LibC.mallocCString(sql)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "let nullptr = CPointer<Unit>()",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "let ret = sqlite3_prepare_v2(ppDb.read(), zSql, Int32(sql.size), ppStmt, nullptr)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "LibC.free(zSql)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "if (ret != 0) {",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "throw SqlException(\"Failed to prepare statement.\")",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 12,
                                              "label": "}",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "return ppStmt",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_step",
      "type": "function",
      "start_line": 60,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_step(pStmt: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_step(pStmt: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlStep",
      "type": "function",
      "start_line": 62,
      "end_line": 64,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlStep(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_step(ppStmt.read()) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlStep(ppStmt: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_step(ppStmt.read()) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_type",
      "type": "function",
      "start_line": 69,
      "end_line": 69,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_type(pStmt: CPointer<Unit>, i: Int32): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_column_type(pStmt: CPointer<Unit>, i: Int32): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnType",
      "type": "function",
      "start_line": 71,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnType(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {\n    return unsafe { sqlite3_column_type(ppStmt.read(), i) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnType(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_column_type(ppStmt.read(), i) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_text",
      "type": "function",
      "start_line": 78,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_text(pStmt: CPointer<Unit>, i: Int32): CString ",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_column_text(pStmt: CPointer<Unit>, i: Int32): CString",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnText",
      "type": "function",
      "start_line": 80,
      "end_line": 83,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnText(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {\n    let ret = unsafe { sqlite3_column_text(ppStmt.read(), i) }\n    return ret.toString()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnText(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {",
          "successors": [
            {
              "id": 2,
              "label": "let ret = unsafe { sqlite3_column_text(ppStmt.read(), i) }",
              "successors": [
                {
                  "id": 3,
                  "label": "return ret.toString()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_bytes",
      "type": "function",
      "start_line": 88,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_bytes(pStmt: CPointer<Unit>, i: Int32): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_column_bytes(pStmt: CPointer<Unit>, i: Int32): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnBytes",
      "type": "function",
      "start_line": 90,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnBytes(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {\n    return unsafe { sqlite3_column_bytes(ppStmt.read(), i) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnBytes(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_column_bytes(ppStmt.read(), i) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_int64",
      "type": "function",
      "start_line": 97,
      "end_line": 97,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_int64(pStmt: CPointer<Unit>, i: Int32): Int64",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_column_int64(pStmt: CPointer<Unit>, i: Int32): Int64",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnInt64",
      "type": "function",
      "start_line": 99,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int64 {\n    return unsafe { sqlite3_column_int64(ppStmt.read(), i) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int64 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_column_int64(ppStmt.read(), i) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_double",
      "type": "function",
      "start_line": 106,
      "end_line": 106,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_double(pStmt: CPointer<Unit>, i: Int32): Float64",
      "blocks": []
    },
    {
      "name": "sqlColumnDouble",
      "type": "function",
      "start_line": 108,
      "end_line": 110,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Float64 {\n    return unsafe { sqlite3_column_double(ppStmt.read(), i) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Float64 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_column_double(ppStmt.read(), i) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_blob",
      "type": "function",
      "start_line": 115,
      "end_line": 115,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_blob(pStmt: CPointer<Unit>, i: Int32): CPointer<Byte>",
      "blocks": []
    },
    {
      "name": "sqlColumnBlob",
      "type": "function",
      "start_line": 117,
      "end_line": 119,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnBlob(ppStmt: CPointer<CPointer<Unit>>, i: Int32): CPointer<Byte> {\n    return unsafe { sqlite3_column_blob(ppStmt.read(), i) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnBlob(ppStmt: CPointer<CPointer<Unit>>, i: Int32): CPointer<Byte> {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_column_blob(ppStmt.read(), i) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_count",
      "type": "function",
      "start_line": 124,
      "end_line": 124,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_count(pStmt: CPointer<Unit>): Int32 ",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_column_count(pStmt: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnCount",
      "type": "function",
      "start_line": 126,
      "end_line": 128,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_column_count(ppStmt.read()) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_column_count(ppStmt.read()) }",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_name",
      "type": "function",
      "start_line": 133,
      "end_line": 133,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_name(pStmt: CPointer<Unit>, n: Int32): CString",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_column_name(pStmt: CPointer<Unit>, n: Int32): CString",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnName",
      "type": "function",
      "start_line": 135,
      "end_line": 138,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnName(ppStmt: CPointer<CPointer<Unit>>, n: Int32): String {\n    let ret = unsafe { sqlite3_column_name(ppStmt.read(), n) }\n    return ret.toString()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnName(ppStmt: CPointer<CPointer<Unit>>, n: Int32): String {",
          "successors": [
            {
              "id": 2,
              "label": "let ret = unsafe { sqlite3_column_name(ppStmt.read(), n) }",
              "successors": [
                {
                  "id": 3,
                  "label": "return ret.toString()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_column_decltype",
      "type": "function",
      "start_line": 143,
      "end_line": 143,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_column_decltype(pStmt: CPointer<Unit>, i: Int32): CString",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_column_decltype(pStmt: CPointer<Unit>, i: Int32): CString",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnDecltype",
      "type": "function",
      "start_line": 145,
      "end_line": 148,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlColumnDecltype(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {\n    let ret = unsafe { sqlite3_column_decltype(ppStmt.read(), i) }\n    return ret.toString()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnDecltype(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {",
          "successors": [
            {
              "id": 2,
              "label": "let ret = unsafe { sqlite3_column_decltype(ppStmt.read(), i) }",
              "successors": [
                {
                  "id": 3,
                  "label": "return ret.toString()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_reset",
      "type": "function",
      "start_line": 153,
      "end_line": 153,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_reset(pStmt: CPointer<Unit>): Int32",
      "blocks": []
    },
    {
      "name": "sqlReset",
      "type": "function",
      "start_line": 155,
      "end_line": 157,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlReset(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_reset(ppStmt.read()) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlReset(ppStmt: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_reset(ppStmt.read()) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_busy_timeout",
      "type": "function",
      "start_line": 162,
      "end_line": 162,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_busy_timeout(pDb: CPointer<Unit>, ms: Int32): Int32 ",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_busy_timeout(pDb: CPointer<Unit>, ms: Int32): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBusyTimeout",
      "type": "function",
      "start_line": 164,
      "end_line": 166,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlBusyTimeout(ppDb: CPointer<CPointer<Unit>>, ms: Int32): Int32 {\n    return unsafe { sqlite3_busy_timeout(ppDb.read(), ms) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBusyTimeout(ppDb: CPointer<CPointer<Unit>>, ms: Int32): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_busy_timeout(ppDb.read(), ms) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_changes",
      "type": "function",
      "start_line": 171,
      "end_line": 171,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_changes(pDb: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_changes(pDb: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlChanges",
      "type": "function",
      "start_line": 173,
      "end_line": 175,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlChanges(ppDb: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_changes(ppDb.read()) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlChanges(ppDb: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_changes(ppDb.read()) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_last_insert_rowid",
      "type": "function",
      "start_line": 180,
      "end_line": 180,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_last_insert_rowid(pDb: CPointer<Unit>): Int64",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_last_insert_rowid(pDb: CPointer<Unit>): Int64",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlLastInsertRowid",
      "type": "function",
      "start_line": 182,
      "end_line": 184,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlLastInsertRowid(ppDb: CPointer<CPointer<Unit>>): Int64 {\n    return unsafe { sqlite3_last_insert_rowid(ppDb.read()) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlLastInsertRowid(ppDb: CPointer<CPointer<Unit>>): Int64 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_last_insert_rowid(ppDb.read()) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_soft_heap_limit",
      "type": "function",
      "start_line": 189,
      "end_line": 189,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_soft_heap_limit(n: Int32): Unit",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_soft_heap_limit(n: Int32): Unit",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlSoftHeapLimit",
      "type": "function",
      "start_line": 191,
      "end_line": 193,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlSoftHeapLimit(n: Int32): Unit {\n    unsafe { sqlite3_soft_heap_limit(n) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlSoftHeapLimit(n: Int32): Unit {",
          "successors": [
            {
              "id": 2,
              "label": "    unsafe { sqlite3_soft_heap_limit(n) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_bind_parameter_count",
      "type": "function",
      "start_line": 198,
      "end_line": 198,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_bind_parameter_count(pStmt: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_bind_parameter_count(pStmt: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindParameterCount",
      "type": "function",
      "start_line": 200,
      "end_line": 202,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlBindParameterCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_bind_parameter_count(ppStmt.read()) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindParameterCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_bind_parameter_count(ppStmt.read()) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_bind_null",
      "type": "function",
      "start_line": 207,
      "end_line": 207,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_bind_null(pStmt: CPointer<Unit>, i: Int32): Int32",
      "blocks": []
    },
    {
      "name": "sqlBindNull",
      "type": "function",
      "start_line": 209,
      "end_line": 211,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlBindNull(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {\n    return unsafe { sqlite3_bind_null(ppStmt.read(), i) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindNull(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_bind_null(ppStmt.read(), i) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_bind_int",
      "type": "function",
      "start_line": 216,
      "end_line": 216,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_bind_int(pStmt: CPointer<Unit>, i: Int32, iValue: Int32): Int32",
      "blocks": []
    },
    {
      "name": "sqlBindInt",
      "type": "function",
      "start_line": 218,
      "end_line": 220,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlBindInt(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int32): Int32 {\n    return unsafe { sqlite3_bind_int(ppStmt.read(), i, iValue) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindInt(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int32): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_bind_int(ppStmt.read(), i, iValue) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_bind_int64",
      "type": "function",
      "start_line": 225,
      "end_line": 225,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_bind_int64(pStmt: CPointer<Unit>, i: Int32, iValue: Int64): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_bind_int64(pStmt: CPointer<Unit>, i: Int32, iValue: Int64): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindInt64",
      "type": "function",
      "start_line": 227,
      "end_line": 229,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlBindInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int64): Int32 {\n    return unsafe { sqlite3_bind_int64(ppStmt.read(), i, iValue) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int64): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_bind_int64(ppStmt.read(), i, iValue) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_bind_double",
      "type": "function",
      "start_line": 234,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_bind_double(pStmt: CPointer<Unit>, i: Int32, rValue: Float64): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_bind_double(pStmt: CPointer<Unit>, i: Int32, rValue: Float64): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindDouble",
      "type": "function",
      "start_line": 236,
      "end_line": 238,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlBindDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32, rValue: Float64): Int32 {\n    return unsafe { sqlite3_bind_double(ppStmt.read(), i, rValue) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32, rValue: Float64): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "return unsafe { sqlite3_bind_double(ppStmt.read(), i, rValue) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_bind_text",
      "type": "function",
      "start_line": 243,
      "end_line": 244,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_bind_text(pStmt: CPointer<Unit>, i: Int32, zData: CString, \n    nData: Int32, xDel: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_bind_text(pStmt: CPointer<Unit>, i: Int32, zData: CString, nData: Int32, xDel: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindText",
      "type": "function",
      "start_line": 246,
      "end_line": 255,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlBindText(ppStmt: CPointer<CPointer<Unit>>, i: Int32, data: String) {\n    let ret: Int32\n    unsafe {\n        let zData = LibC.mallocCString(data)\n        let nullptr = CPointer<Unit>()\n        ret = sqlite3_bind_text(ppStmt.read(), i, zData, Int32(data.size), nullptr)\n        LibC.free(zData)\n    }\n    return ret\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let ret: Int32",
          "successors": [
            {
              "id": 2,
              "label": "unsafe {",
              "successors": [
                {
                  "id": 3,
                  "label": "let zData = LibC.mallocCString(data)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let nullptr = CPointer<Unit>()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "ret = sqlite3_bind_text(ppStmt.read(), i, zData, Int32(data.size), nullptr)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "LibC.free(zData)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 7,
          "label": "return ret",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlite3_clear_bindings",
      "type": "function",
      "start_line": 260,
      "end_line": 260,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_clear_bindings(pStmt: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_clear_bindings(pStmt: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlClearBindings",
      "type": "function",
      "start_line": 262,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlClearBindings(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_clear_bindings(ppStmt.read()) }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlClearBindings(ppStmt: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_clear_bindings(ppStmt.read()) }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_exec",
      "type": "function",
      "start_line": 269,
      "end_line": 270,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_exec(pDb: CPointer<Unit>, zSql: CString, \n    xCallback: CPointer<Unit>, pArg: CPointer<Unit>, pzErrMsg: CPointer<CString>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_exec(pDb: CPointer<Unit>, zSql: CString, xCallback: CPointer<Unit>, pArg: CPointer<Unit>, pzErrMsg: CPointer<CString>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlExec",
      "type": "function",
      "start_line": 272,
      "end_line": 286,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlExec(ppDb: CPointer<CPointer<Unit>>, sql: String) {\n    unsafe {\n        let zSql = LibC.mallocCString(sql)\n        let nullptr = CPointer<Unit>()\n        let ptr = malloc(POINTER_SIZE)\n        let pzErrMsg = CPointer<CString>(ptr)\n        let ret = sqlite3_exec(ppDb.read(), zSql, nullptr, nullptr, pzErrMsg)\n        let errMsg = pzErrMsg.read().toString()\n        free(ptr)\n        LibC.free(zSql)\n        if (ret != 0) {\n            throw SqlException(errMsg)\n        }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlExec(ppDb: CPointer<CPointer<Unit>>, sql: String) {",
          "successors": [
            {
              "id": 2,
              "label": "unsafe {",
              "successors": [
                {
                  "id": 3,
                  "label": "let zSql = LibC.mallocCString(sql)\nlet nullptr = CPointer<Unit>()\nlet ptr = malloc(POINTER_SIZE)\nlet pzErrMsg = CPointer<CString>(ptr)\nlet ret = sqlite3_exec(ppDb.read(), zSql, nullptr, nullptr, pzErrMsg)\nlet errMsg = pzErrMsg.read().toString()\nfree(ptr)\nLibC.free(zSql)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (ret != 0) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "throw SqlException(errMsg)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_close",
      "type": "function",
      "start_line": 291,
      "end_line": 291,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_close(pDb: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_close(pDb: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlClose",
      "type": "function",
      "start_line": 293,
      "end_line": 300,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlClose(ppDb: CPointer<CPointer<Unit>>): Int32 {\n    let ret: Int32\n    unsafe {\n        ret = sqlite3_close(ppDb.read())\n        free(CPointer<Unit>(ppDb))\n    }\n    return ret\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlClose(ppDb: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "let ret: Int32",
              "successors": [
                {
                  "id": 3,
                  "label": "unsafe {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "ret = sqlite3_close(ppDb.read())",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "free(CPointer<Unit>(ppDb))",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return ret",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sqlite3_finalize",
      "type": "function",
      "start_line": 305,
      "end_line": 305,
      "functions": [],
      "classes": [],
      "simplified_code": "foreign func sqlite3_finalize(pStmt: CPointer<Unit>): Int32",
      "blocks": [
        {
          "id": 1,
          "label": "foreign func sqlite3_finalize(pStmt: CPointer<Unit>): Int32",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlFinalize",
      "type": "function",
      "start_line": 307,
      "end_line": 314,
      "functions": [],
      "classes": [],
      "simplified_code": "public func sqlFinalize(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    let ret: Int32\n    unsafe {\n        ret = sqlite3_finalize(ppStmt.read())\n        free(CPointer<Unit>(ppStmt))\n    }\n    return ret\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlFinalize(ppStmt: CPointer<CPointer<Unit>>): Int32 {",
          "successors": [
            {
              "id": 2,
              "label": "let ret: Int32",
              "successors": [
                {
                  "id": 3,
                  "label": "unsafe {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "ret = sqlite3_finalize(ppStmt.read())",
                      "successors": [
                        {
                          "id": 5,
                          "label": "free(CPointer<Unit>(ppStmt))",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return ret",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "package opds_cj.sqlite\n\nimport std.database.sql.SqlException\n\n/* sqlite3_step() \u8fd8\u672a\u5b8c\u6210\u6267\u884c */\npublic let SQLITE_ROW: Int32 = 100\n/* sqlite3_step() \u5df2\u6267\u884c\u5b8c\u6210 */\npublic let SQLITE_DONE: Int32 = 101\n/* \u6307\u9488\u7c7b\u578b\u5360\u5185\u5b58\u5b57\u8282\u6570 */\nlet POINTER_SIZE: UIntNative = 8\n\nforeign func malloc(size: UIntNative): CPointer<Unit>\nforeign func free(p: CPointer<Unit>): Unit\n\n/* \n * Description: \u6253\u5f00\u6570\u636e\u5e93db\u6587\u4ef6\n */\nforeign func sqlite3_open(path: CString, ppDb: CPointer<CPointer<Unit>>): Int32\n\n}\n\n/* \n * Description: \u9884\u5904\u7406sql\u8bed\u53e5\n */\n                                ppStmt: CPointer<CPointer<Unit>>, pzTail: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u6267\u884csql\u8bed\u53e5\n */\nforeign func sqlite3_step(pStmt: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u6307\u5b9a\u5217\u7684\u6570\u636e\u7c7b\u578b\n */\nforeign func sqlite3_column_type(pStmt: CPointer<Unit>, i: Int32): Int32\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u6307\u5b9a\u6587\u672c\u7c7b\u578b\u5217\u7684\u503c\n */\nforeign func sqlite3_column_text(pStmt: CPointer<Unit>, i: Int32): CString \n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u6307\u5b9a\u5217\u503c\u7684\u5b57\u8282\u6570\n */\nforeign func sqlite3_column_bytes(pStmt: CPointer<Unit>, i: Int32): Int32\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u6307\u5b9aInt64\u7c7b\u578b\u5217\u7684\u503c\n */\nforeign func sqlite3_column_int64(pStmt: CPointer<Unit>, i: Int32): Int64\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u6307\u5b9aFloat64\u7c7b\u578b\u5217\u7684\u503c\n */\nforeign func sqlite3_column_double(pStmt: CPointer<Unit>, i: Int32): Float64\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679cblob\u7c7b\u578b\u5217\u7684\u503c\n */\nforeign func sqlite3_column_blob(pStmt: CPointer<Unit>, i: Int32): CPointer<Byte>\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u5217\u6570\n */\nforeign func sqlite3_column_count(pStmt: CPointer<Unit>): Int32 \n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u6307\u5b9a\u5217\u540d\n */\nforeign func sqlite3_column_name(pStmt: CPointer<Unit>, n: Int32): CString\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u7ed3\u679c\u6307\u5b9a\u5217\u58f0\u660e\u7684\u6570\u636e\u7c7b\u578b\n */\nforeign func sqlite3_column_decltype(pStmt: CPointer<Unit>, i: Int32): CString\n\n}\n\n/* \n * Description: \u91cd\u7f6esql\u8bed\u53e5\n */\nforeign func sqlite3_reset(pStmt: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u8bbe\u7f6e\u8d85\u65f6\u6beb\u79d2\u6570\n */\nforeign func sqlite3_busy_timeout(pDb: CPointer<Unit>, ms: Int32): Int32 \n\n}\n\n/* \n * Description: \u83b7\u53d6\u6700\u8fd1\u6267\u884c\u7684sql\u8bed\u53e5\u7684\u4fee\u6539\u6570\u91cf\n */\nforeign func sqlite3_changes(pDb: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u83b7\u53d6\u6700\u8fd1\u63d2\u5165\u884c\u7684ID\n */\nforeign func sqlite3_last_insert_rowid(pDb: CPointer<Unit>): Int64\n\n}\n\n/* \n * Description: \u8bbe\u7f6e\u5806\u5185\u5b58\u4e0a\u9650\n */\nforeign func sqlite3_soft_heap_limit(n: Int32): Unit\n\n}\n\n/* \n * Description: \u83b7\u53d6sql\u8bed\u53e5\u7ed1\u5b9a\u53c2\u6570\u6570\u91cf\n */\nforeign func sqlite3_bind_parameter_count(pStmt: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u7ed1\u5b9a\u7a7a\u503c\u5230sql\u8bed\u53e5\u6307\u5b9a\u53c2\u6570\n */\nforeign func sqlite3_bind_null(pStmt: CPointer<Unit>, i: Int32): Int32\n\n}\n\n/* \n * Description: \u7ed1\u5b9aInt32\u503c\u5230sql\u8bed\u53e5\u6307\u5b9a\u53c2\u6570\n */\nforeign func sqlite3_bind_int(pStmt: CPointer<Unit>, i: Int32, iValue: Int32): Int32\n\n}\n\n/* \n * Description: \u7ed1\u5b9aInt64\u503c\u5230sql\u8bed\u53e5\u6307\u5b9a\u53c2\u6570\n */\nforeign func sqlite3_bind_int64(pStmt: CPointer<Unit>, i: Int32, iValue: Int64): Int32\n\n}\n\n/* \n * Description: \u7ed1\u5b9aFloat64\u503c\u5230sql\u8bed\u53e5\u6307\u5b9a\u53c2\u6570\n */\nforeign func sqlite3_bind_double(pStmt: CPointer<Unit>, i: Int32, rValue: Float64): Int32\n\n}\n\n/* \n * Description: \u7ed1\u5b9a\u6587\u672c\u503c\u5230sql\u8bed\u53e5\u6307\u5b9a\u53c2\u6570\n */\n    nData: Int32, xDel: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u89e3\u9664sql\u8bed\u53e5\u7ed1\u5b9a\u53c2\u6570\n */\nforeign func sqlite3_clear_bindings(pStmt: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u6307\u5b9a\u6570\u636e\u5e93\u6267\u884csql\u547d\u4ee4\n */\n    xCallback: CPointer<Unit>, pArg: CPointer<Unit>, pzErrMsg: CPointer<CString>): Int32\n\n}\n\n/* \n * Description: \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\n */\nforeign func sqlite3_close(pDb: CPointer<Unit>): Int32\n\n}\n\n/* \n * Description: \u9500\u6bc1sql\u8bed\u53e5\u5bf9\u8c61\uff0c\u91ca\u653e\u5185\u5b58\n */\nforeign func sqlite3_finalize(pStmt: CPointer<Unit>): Int32\n\n}\n",
  "blocks": []
}