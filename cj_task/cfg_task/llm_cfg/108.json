{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 31,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let expr = Num(1.2) + Num(3.4) * Num(2.0) - Num(1.0) / Num(2.0)\n    println(expr.calc())\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "    let expr = Num(1.2) + Num(3.4) * Num(2.0) - Num(1.0) / Num(2.0)",
              "successors": [
                {
                  "id": 3,
                  "label": "    println(expr.calc())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Expr",
      "type": "class",
      "start_line": 3,
      "end_line": 29,
      "functions": [
        {
          "name": "calc",
          "type": "function",
          "start_line": 7,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func calc(): Float64 {\n        match(this) {\n            case Num(number) => number\n            case Add(a, b) => a.calc() + b.calc()\n            case Sub(a, b) => a.calc() - b.calc()\n            case Mul(a, b) => a.calc() * b.calc()\n            case Div(a, b) => a.calc() / b.calc()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "match(this) {",
              "successors": [
                {
                  "id": 2,
                  "label": "case Num(number) => number",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "case Add(a, b) => a.calc() + b.calc()",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case Sub(a, b) => a.calc() - b.calc()",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "case Mul(a, b) => a.calc() * b.calc()",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "case Div(a, b) => a.calc() / b.calc()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "+",
          "type": "function",
          "start_line": 17,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func +(that: Expr): Expr {\n        return Add(this, that)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func +(that: Expr): Expr {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return Add(this, that)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "-",
          "type": "function",
          "start_line": 20,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func -(that: Expr): Expr {\n        return Sub(this, that)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func -(that: Expr): Expr {",
              "successors": [
                {
                  "id": 2,
                  "label": "return Sub(this, that)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "*",
          "type": "function",
          "start_line": 23,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func *(that: Expr): Expr {\n        return Mul(this, that)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func *(that: Expr): Expr {",
              "successors": [
                {
                  "id": 2,
                  "label": "return Mul(this, that)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "/",
          "type": "function",
          "start_line": 26,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func /(that: Expr): Expr {\n        return Div(this, that)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func /(that: Expr): Expr {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return Div(this, that)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "enum Expr {\n    Num(Float64) |\n    Add(Expr, Expr) | Sub(Expr, Expr) | Mul(Expr, Expr) | Div(Expr, Expr)\n\n    }\n\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "enum Expr {",
          "successors": [
            {
              "id": 2,
              "label": "    Num(Float64) |",
              "successors": []
            },
            {
              "id": 3,
              "label": "    Add(Expr, Expr) | Sub(Expr, Expr) | Mul(Expr, Expr) | Div(Expr, Expr)",
              "successors": []
            },
            {
              "id": 4,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "// \u57fa\u4e8e enum \u548c\u6a21\u5f0f\u5339\u914d\u5b9e\u73b0\u7b97\u672f\u8868\u8fbe\u5f0f\u8868\u793a\u548c\u8ba1\u7b97\n// cjc version: 0.53.13\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "enum Operator { Add, Sub, Mul, Div }",
      "successors": []
    },
    {
      "id": 2,
      "label": "struct Expr { op: Operator, left: Box<Expr>, right: Box<Expr> }",
      "successors": []
    },
    {
      "id": 3,
      "label": "fn evaluate(expr: &Expr) -> f64 {",
      "successors": [
        {
          "id": 4,
          "label": "    match expr.op {",
          "successors": [
            {
              "id": 5,
              "label": "        Operator::Add => evaluate(&expr.left) + evaluate(&expr.right),",
              "successors": [
                {
                  "id": 8,
                  "label": "    }",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "        Operator::Sub => evaluate(&expr.left) - evaluate(&expr.right),",
              "successors": [
                {
                  "id": 8,
                  "label": "    }",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "label": "        Operator::Mul => evaluate(&expr.left) * evaluate(&expr.right),",
              "successors": [
                {
                  "id": 8,
                  "label": "    }",
                  "successors": []
                }
              ]
            },
            {
              "id": 9,
              "label": "        Operator::Div => evaluate(&expr.left) / evaluate(&expr.right),",
              "successors": [
                {
                  "id": 8,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 10,
          "label": "}",
          "successors": []
        }
      ]
    }
  ]
}