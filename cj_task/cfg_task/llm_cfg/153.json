{
  "name": "cangjie_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 42,
  "functions": [],
  "classes": [
    {
      "name": "ToStringUtils",
      "type": "class",
      "start_line": 2,
      "end_line": 42,
      "functions": [
        {
          "name": "listToString",
          "type": "function",
          "start_line": 3,
          "end_line": 6,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func listToString<T>(values: Iterable<T>): String {\n        let str = values |> map<T, String> {v => toString(v)} |> collectString<String>(delimiter: \", \")\n        return \"[\" + str + \"]\"\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func listToString<T>(values: Iterable<T>): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "let str = values |> map<T, String> {v => toString(v)} |> collectString<String>(delimiter: \", \")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return \"[\" + str + \"]\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "mapToString",
          "type": "function",
          "start_line": 7,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func mapToString<K, V>(kvs: Iterable<(K, V)>): String {\n        let str = kvs |> map<(K, V), String> {\n            kv =>\n            let k = toString(kv[0])\n            let v = toString(kv[1])\n            k + \":\" + v\n        } |> collectString<(String)>(delimiter: \", \")\n        return \"{\" + str + \"}\"\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func mapToString<K, V>(kvs: Iterable<(K, V)>): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "let str = kvs |> map<(K, V), String> {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "kv =>",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let k = toString(kv[0])",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let v = toString(kv[1])",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "k + \":\" + v",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} |> collectString<(String)>(delimiter: \", \")",
                  "successors": [
                    {
                      "id": 8,
                      "label": "return \"{\" + str + \"}\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "mapToString2",
          "type": "function",
          "start_line": 16,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func mapToString2<K, V>(kvs: ?Map<K, V>): ?String where K <: ToString & Equatable<K>, V <: ToString {\n        return match (kvs) {\n            case Some(_kvs) => mapToString(_kvs)\n            case None => None\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func mapToString2<K, V>(kvs: ?Map<K, V>): ?String where K <: ToString & Equatable<K>, V <: ToString {",
              "successors": [
                {
                  "id": 2,
                  "label": "return match (kvs) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case Some(_kvs) => mapToString(_kvs)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "case None => None",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func toString<T>(v: T): String {\n        return match (v) {\n            case v1: ToString => v1.toString()\n            // \u4e3b\u8981\u7ed9 S3MultiValueMap \u4f7f\u7528, \u73b0\u5728\u4e5f\u90fd\u662f Collection<String>\n            case v2: Iterable<String> => \"[\" + (v2 |> collectString<String>(delimiter: \", \")) + \"]\"\n            case _ => \"<!ToString(${TypeInfo.of(v)})>\"\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func toString<T>(v: T): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "return match (v) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case v1: ToString => v1.toString()",
                      "successors": [
                        {
                          "id": 6,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "case v2: Iterable<String> => \"[\" + (v2 |> collectString<String>(delimiter: \", \")) + \"]\"",
                      "successors": [
                        {
                          "id": 6,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "case _ => \"<!ToString(${TypeInfo.of(v)})>\"",
                      "successors": [
                        {
                          "id": 6,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "exceptionToString",
          "type": "function",
          "start_line": 30,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func exceptionToString(ex: Exception): String {\n        var sb = StringBuilder()\n        sb.append(ex.toString())\n        sb.append(IOUtils.LINE_SEPARATOR)\n        let stacks = ex.getStackTrace()\n        for (i in 0..stacks.size) {\n            let stack = stacks[i]\n            sb.append(\"\\t at ${stack.declaringClass} ${stack.methodName} (${stack.fileName}:${stack.lineNumber})\")\n            sb.append(IOUtils.LINE_SEPARATOR)\n        }\n        return sb.toString()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func exceptionToString(ex: Exception): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "var sb = StringBuilder()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "sb.append(ex.toString())",
                      "successors": [
                        {
                          "id": 4,
                          "label": "sb.append(IOUtils.LINE_SEPARATOR)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let stacks = ex.getStackTrace()",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "for (i in 0..stacks.size) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "let stack = stacks[i]",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "sb.append(\"\\t at ${stack.declaringClass} ${stack.methodName} (${stack.fileName}:${stack.lineNumber})\")",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "sb.append(IOUtils.LINE_SEPARATOR)",
                                              "successors": [
                                                {
                                                  "id": 6,
                                                  "label": "for (i in 0..stacks.size) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 10,
                                  "label": "return sb.toString()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class ToStringUtils {\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class ToStringUtils {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package s3client.util\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package s3client.util",
      "successors": []
    }
  ]
}