{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 135,
  "functions": [
    {
      "name": "mustBeFunc",
      "type": "function",
      "start_line": 17,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "func mustBeFunc(\n    input: Tokens,\n    action: (FuncDecl) -> Tokens\n): Tokens {\n    let decl = parseDecl(input)\n    if (let Some(funcDecl) <- (decl as FuncDecl)) {\n        action(funcDecl)\n    } else {\n        diagReport(\n            DiagReportLevel.ERROR,\n            input,\n            '\u4e0d\u662f\u51fd\u6570\u7c7b\u578b',\n            '\u53ea\u652f\u6301\u51fd\u6570\u7c7b\u578b'\n        )\n        input\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let decl = parseDecl(input)",
          "successors": [
            {
              "id": 2,
              "label": "if (let Some(funcDecl) <- (decl as FuncDecl))",
              "successors": [
                {
                  "id": 3,
                  "label": "    action(funcDecl)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "else",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    diagReport(DiagReportLevel.ERROR, input, '\u4e0d\u662f\u51fd\u6570\u7c7b\u578b', '\u53ea\u652f\u6301\u51fd\u6570\u7c7b\u578b')",
                      "successors": [
                        {
                          "id": 6,
                          "label": "    input",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parseAttrToConfig",
      "type": "function",
      "start_line": 38,
      "end_line": 106,
      "functions": [],
      "classes": [],
      "simplified_code": "func parseAttrToConfig(attrs: Tokens): Tokens {\n    var interval = 0\n    var leading = false\n    var trailing = false\n\n    var index: Int64 = 0\n    while (true) {\n        let (litExpr, nextIndex) = parseExprFragment(attrs, startFrom: index)\n        match (litExpr) {\n            case litConstExpr: LitConstExpr =>\n                let literal = litConstExpr.literal\n                if (literal.kind == TokenKind.INTEGER_LITERAL) {\n                    interval = Int64.parse(literal.value)\n                } else if (literal.kind == TokenKind.STRING_LITERAL) {\n                    let value = literal.value\n                    if (value == LEADING_STRING) {\n                        leading = true\n                    } else if (value == TRAILING_STRING) {\n                        trailing = true\n                    }\n                }\n            case refExpr: RefExpr =>\n                let value = refExpr.identifier.value\n                if (value == LEADING_STRING) {\n                    leading = true\n                } else if (value == TRAILING_STRING) {\n                    trailing = true\n                }\n            case _ => diagReport(\n                DiagReportLevel.ERROR,\n                attrs[nextIndex..nextIndex],\n                '\u8fd9\u91cc\u5fc5\u987b\u662f\u5b57\u9762\u91cf',\n                '\u53ea\u652f\u6301\u5b57\u9762\u91cf'\n            )\n        }\n\n        if (nextIndex >= attrs.size) {\n            break\n        }\n\n        if (attrs[nextIndex].kind != TokenKind.COMMA) {\n            diagReport(\n                DiagReportLevel.ERROR,\n                attrs[nextIndex..nextIndex + 1],\n                \"\u5fc5\u987b\u662f\u9017\u53f7\u5206\u5272\u7684\u591a\u4e2a\u8868\u8fbe\u5f0f\",\n                \"\u6539\u4e3a\u9017\u53f7\"\n            )\n        }\n\n        index = nextIndex + 1\n    }\n\n    // \u5fc5\u987b\u6709interval\n    if (interval == 0) {\n        diagReport(\n            DiagReportLevel.ERROR,\n            attrs,\n            \"\u5fc5\u987b\u6709\u65f6\u95f4(\u6beb\u79d2)\",\n            \"\u6dfb\u52a0\u65f6\u95f4\u5c5e\u6027\"\n        )\n    }\n\n    if (!leading && !trailing) {\n        trailing = true\n    }\n\n    quote(\n        RepeaterConfig(interval: Duration.millisecond * $(interval), leading: $(leading), trailing: $(trailing)))\n}",
      "blocks": [
        {
          "id": 1,
          "label": "var interval = 0\nvar leading = false\nvar trailing = false\n\nvar index: Int64 = 0",
          "successors": [
            {
              "id": 2,
              "label": "while (true) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let (litExpr, nextIndex) = parseExprFragment(attrs, startFrom: index)\nmatch (litExpr) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case litConstExpr: LitConstExpr =>",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let literal = litConstExpr.literal\nif (literal.kind == TokenKind.INTEGER_LITERAL) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "interval = Int64.parse(literal.value)",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "label": "} else if (literal.kind == TokenKind.STRING_LITERAL) {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "let value = literal.value\nif (value == LEADING_STRING) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "leading = true",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "label": "} else if (value == TRAILING_STRING) {",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "trailing = true",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "case refExpr: RefExpr =>",
                      "successors": [
                        {
                          "id": 13,
                          "label": "let value = refExpr.identifier.value\nif (value == LEADING_STRING) {",
                          "successors": [
                            {
                              "id": 14,
                              "label": "leading = true",
                              "successors": []
                            },
                            {
                              "id": 15,
                              "label": "} else if (value == TRAILING_STRING) {",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "trailing = true",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 17,
                      "label": "case _ =>",
                      "successors": [
                        {
                          "id": 18,
                          "label": "diagReport(\nDiagReportLevel.ERROR,\nattrs[nextIndex..nextIndex],\n'\u8fd9\u91cc\u5fc5\u987b\u662f\u5b57\u9762\u91cf',\n'\u53ea\u652f\u6301\u5b57\u9762\u91cf'\n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 19,
                  "label": "if (nextIndex >= attrs.size) {",
                  "successors": [
                    {
                      "id": 20,
                      "label": "break",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 21,
                  "label": "if (attrs[nextIndex].kind != TokenKind.COMMA) {",
                  "successors": [
                    {
                      "id": 22,
                      "label": "diagReport(\nDiagReportLevel.ERROR,\nattrs[nextIndex..nextIndex + 1],\n\"\u5fc5\u987b\u662f\u9017\u53f7\u5206\u5272\u7684\u591a\u4e2a\u8868\u8fbe\u5f0f\",\n\"\u6539\u4e3a\u9017\u53f7\"\n)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 23,
                  "label": "index = nextIndex + 1",
                  "successors": []
                }
              ]
            },
            {
              "id": 24,
              "label": "if (interval == 0) {",
              "successors": [
                {
                  "id": 25,
                  "label": "diagReport(\nDiagReportLevel.ERROR,\nattrs,\n\"\u5fc5\u987b\u6709\u65f6\u95f4(\u6beb\u79d2)\",\n\"\u6dfb\u52a0\u65f6\u95f4\u5c5e\u6027\"\n)",
                  "successors": []
                }
              ]
            },
            {
              "id": 26,
              "label": "if (!leading && !trailing) {",
              "successors": [
                {
                  "id": 27,
                  "label": "trailing = true",
                  "successors": []
                }
              ]
            },
            {
              "id": 28,
              "label": "quote(\nRepeaterConfig(interval: Duration.millisecond * $(interval), leading: $(leading), trailing: $(trailing)))",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "impDebounceOrThrottle",
      "type": "function",
      "start_line": 111,
      "end_line": 134,
      "functions": [],
      "classes": [],
      "simplified_code": "func impDebounceOrThrottle(throttle: Bool, attr: Tokens, funcDecl: FuncDecl): Tokens {\n    // \u89e3\u6790\u53c2\u6570\n    let config = parseAttrToConfig(attr)\n    // \u5916\u5c42\u521b\u5efa\u4e00\u4e2aDebouncer\n    let debouncerName = Token(TokenKind.IDENTIFIER, \"debouncerFor\" + funcDecl.identifier.value.toAsciiTitle())\n    // \u5c06\u51fd\u6570\u4f53\u4f5c\u4e3adebouncer\u7684block\n    let ret = quote(private var $(debouncerName): ?Repeater = None\n        )\n\n    let funcBlockNodes = funcDecl.block.nodes\n    let orgNodes = funcBlockNodes.clone()\n    funcBlockNodes.clear()\n    funcBlockNodes.append(\n        parseExpr(\n        quote(\n            $(debouncerName).getOrDefault {\n            let config = $(config)\n            Repeater(throttle: $(throttle.toTokens()), config: config) {\n                $(orgNodes)\n            }}.call())\n    ))\n    ret.append(funcDecl.toTokens())\n    return ret\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let config = parseAttrToConfig(attr)",
          "successors": [
            {
              "id": 2,
              "label": "let debouncerName = Token(TokenKind.IDENTIFIER, \"debouncerFor\" + funcDecl.identifier.value.toAsciiTitle())",
              "successors": [
                {
                  "id": 3,
                  "label": "let ret = quote(private var $(debouncerName): ?Repeater = None)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let funcBlockNodes = funcDecl.block.nodes",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let orgNodes = funcBlockNodes.clone()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "funcBlockNodes.clear()",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "funcBlockNodes.append(parseExpr(quote($(debouncerName).getOrDefault { let config = $(config) Repeater(throttle: $(throttle.toTokens()), config: config) { $(orgNodes) }}.call())))",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "ret.append(funcDecl.toTokens())",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "return ret",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// cjlint-ignore -start !G.NAM.02 !G.EXP.03 !G.FUN.01\nmacro package cj_debounce_throttle.macros\n\nimport std.time.MonoTime\nimport std.convert.Parsable\nimport std.collection.ArrayList\ninternal import std.ast.{TokenKind, ToTokens, Tokens, parseDecl, FuncDecl, parseExpr, parseExprFragment, diagReport, \n    DiagReportLevel, LitConstExpr, RefExpr, Token}\npublic import cj_debounce_throttle.repeater.* // cjlint-ignore !G.PKG.01\n\nconst LEADING_STRING: String = 'leading'\nconst TRAILING_STRING: String = 'trailing'\n\n/**\n * \u4fdd\u8bc1\u5fc5\u987b\u662f\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\uff0c\u7136\u540e\u6267\u884caction\u52a8\u4f5c\n */\n}\n\n/**\n * \u89e3\u6790\u5c5e\u6027\n */\n}\n\n/**\n * \u5b9e\u73b0Debounce\u6216\u8005Throttle\u7684\u5b8f\n */\n}\n// cjlint-ignore -end",
  "blocks": [
    {
      "id": 1,
      "label": "// cjlint-ignore -start !G.NAM.02 !G.EXP.03 !G.FUN.01\nmacro package cj_debounce_throttle.macros",
      "successors": [
        {
          "id": 2,
          "label": "import std.time.MonoTime\nimport std.convert.Parsable\nimport std.collection.ArrayList\ninternal import std.ast.{TokenKind, ToTokens, Tokens, parseDecl, FuncDecl, parseExpr, parseExprFragment, diagReport, DiagReportLevel, LitConstExpr, RefExpr, Token}\npublic import cj_debounce_throttle.repeater.* // cjlint-ignore !G.PKG.01",
          "successors": [
            {
              "id": 3,
              "label": "const LEADING_STRING: String = 'leading'\nconst TRAILING_STRING: String = 'trailing'",
              "successors": [
                {
                  "id": 4,
                  "label": "/**\n * \u4fdd\u8bc1\u5fc5\u987b\u662f\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\uff0c\u7136\u540e\u6267\u884caction\u52a8\u4f5c\n */\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "/**\n * \u89e3\u6790\u5c5e\u6027\n */\n}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "/**\n * \u5b9e\u73b0Debounce\u6216\u8005Throttle\u7684\u5b8f\n */\n}\n// cjlint-ignore -end",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}