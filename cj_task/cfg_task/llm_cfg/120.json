{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 17,
  "functions": [
    {
      "name": "node",
      "type": "function",
      "start_line": 3,
      "end_line": 10,
      "functions": [],
      "classes": [],
      "simplified_code": "func node(value: Rune,\n    left!: () -> Unit = {=>}, right!: () -> Unit = {=>}) {\n    return { =>\n        left()\n        print(value)\n        right()\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func node(value: Rune, left!: () -> Unit = {=>}, right!: () -> Unit = {=>}) {",
          "successors": [
            {
              "id": 2,
              "label": "return { =>",
              "successors": [
                {
                  "id": 3,
                  "label": "left()",
                  "successors": [
                    {
                      "id": 4,
                      "label": "print(value)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "right()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 12,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let tree = node(r'A',\n        left: node(r'B', left: node(r'C', right: node(r'D'))),\n        right: node(r'E', left: node(r'F'), right: node(r'G')))\n    tree()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "    let tree = node(r'A', left: node(r'B', left: node(r'C', right: node(r'D'))), right: node(r'E', left: node(r'F'), right: node(r'G')))",
              "successors": [
                {
                  "id": 3,
                  "label": "    tree()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// \u57fa\u4e8e\u51fd\u6570\u5b9e\u73b0\u4e8c\u53c9\u6811\uff0c\u6f14\u793a\u4ed3\u9889\u51fd\u6570\u7684 first class \u53ca\u95ed\u5305\u7279\u6027\n// cjc version: 0.53.13\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "function tree(value) {",
      "successors": [
        {
          "id": 2,
          "label": "  return {",
          "successors": [
            {
              "id": 3,
              "label": "    value,",
              "successors": [
                {
                  "id": 4,
                  "label": "    left: null,",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    right: null",
                      "successors": [
                        {
                          "id": 6,
                          "label": "  };",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": 7,
      "label": "function insert(node, value) {",
      "successors": [
        {
          "id": 8,
          "label": "  if (node == null) {",
          "successors": [
            {
              "id": 9,
              "label": "    return tree(value);",
              "successors": [
                {
                  "id": 18,
                  "label": "{}",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "label": "  }",
              "successors": [
                {
                  "id": 11,
                  "label": "  if (value < node.value) {",
                  "successors": [
                    {
                      "id": 12,
                      "label": "    node.left = insert(node.left, value);",
                      "successors": [
                        {
                          "id": 18,
                          "label": "{}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 13,
                  "label": "  } else if (value > node.value) {",
                  "successors": [
                    {
                      "id": 14,
                      "label": "    node.right = insert(node.right, value);",
                      "successors": [
                        {
                          "id": 18,
                          "label": "{}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 15,
                  "label": "  } else {",
                  "successors": [
                    {
                      "id": 16,
                      "label": "    return node;",
                      "successors": [
                        {
                          "id": 18,
                          "label": "{}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 17,
                  "label": "  }",
                  "successors": [
                    {
                      "id": 18,
                      "label": "  return node;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}