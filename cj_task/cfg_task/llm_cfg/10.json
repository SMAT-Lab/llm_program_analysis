{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 82,
  "functions": [],
  "classes": [
    {
      "name": "StructSerializableFunctionGenerator",
      "type": "class",
      "start_line": 7,
      "end_line": 82,
      "functions": [
        {
          "name": "generate",
          "type": "function",
          "start_line": 9,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func generate(context: Context): Unit {\n        this.generateDeserialize(context)\n        this.generateSerialize(context)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func generate(context: Context): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.generateDeserialize(context)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    this.generateSerialize(context)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "generateStructNameTokens",
          "type": "function",
          "start_line": 14,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func generateStructNameTokens(decl: StructDecl): Tokens {\n        try {\n            return quote($(decl.identifier)$(decl.genericParam))\n        } catch (_: Exception) {\n            return quote($(decl.identifier))\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func generateStructNameTokens(decl: StructDecl): Tokens {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return quote($(decl.identifier)$(decl.genericParam))",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} catch (_: Exception) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return quote($(decl.identifier))",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "generateDeserialize",
          "type": "function",
          "start_line": 22,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func generateDeserialize(context: Context): Unit {\n        let arguments = ArrayList<Argument>()\n        let assign = quote()\n        for (reval in context.valDecls) {\n            if (reval.assign.kind != TokenKind.ASSIGN) {\n                let arg = Argument()\n                arg.identifier = Token(TokenKind.IDENTIFIER, reval.identifier.value)\n                arg.expr = CallExpr(quote(\n                    $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\n                ))\n                arg.colon = Token(TokenKind.COLON, \":\")\n                arguments.append(arg)\n            } else if (reval.keyword.kind == TokenKind.VAR) {\n                assign.append(quote(\n                    reval.$(reval.identifier) = $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\n                ))\n            }\n        }\n        let ce = CallExpr(quote($(generateStructNameTokens(context.structDecl))()))\n        ce.arguments = arguments\n        let body: Tokens\n        if (assign.size == 0) {\n            body = quote(\n                return $(ce)\n            )\n        } else {\n            body = quote(\n                var reval = $(ce)\n                $(assign)\n                return reval\n            )\n        }\n        let deserializeFunc = FuncDecl(quote(\n            public static func deserialize(dm: DataModel): $(generateStructNameTokens(context.structDecl)) {\n                let dms = match (dm) {\n                    case d: DataModelStruct => d\n                    case _ => throw Exception(\"This data is not DataModelStruct\")\n                }\n                $(body)\n            }\n        ))\n        context.structDecl.body.decls.append(deserializeFunc)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func generateDeserialize(context: Context): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let arguments = ArrayList<Argument>()\nlet assign = quote()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (reval in context.valDecls) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (reval.assign.kind != TokenKind.ASSIGN) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let arg = Argument()\narg.identifier = Token(TokenKind.IDENTIFIER, reval.identifier.value)\narg.expr = CallExpr(quote($(reval.declType).deserialize(dms.get($(reval.identifier.value)))))\narg.colon = Token(TokenKind.COLON, \":\")\narguments.append(arg)",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "label": "else if (reval.keyword.kind == TokenKind.VAR) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "assign.append(quote(reval.$(reval.identifier) = $(reval.declType).deserialize(dms.get($(reval.identifier.value))))",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "}",
                          "successors": [
                            {
                              "id": 9,
                              "label": "let ce = CallExpr(quote($(generateStructNameTokens(context.structDecl))()))\nce.arguments = arguments",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "let body: Tokens",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "if (assign.size == 0) {",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "body = quote(return $(ce))",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 13,
                                          "label": "else {",
                                          "successors": [
                                            {
                                              "id": 14,
                                              "label": "body = quote(var reval = $(ce)\n$(assign)\nreturn reval)",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 15,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 16,
                                          "label": "let deserializeFunc = FuncDecl(quote(public static func deserialize(dm: DataModel): $(generateStructNameTokens(context.structDecl)) {",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "let dms = match (dm) {",
                                              "successors": [
                                                {
                                                  "id": 18,
                                                  "label": "case d: DataModelStruct => d",
                                                  "successors": [
                                                    {
                                                      "id": 20,
                                                      "label": "case _ => throw Exception(\"This data is not DataModelStruct\")",
                                                      "successors": [
                                                        {
                                                          "id": 21,
                                                          "label": "}\n$(body)",
                                                          "successors": [
                                                            {
                                                              "id": 22,
                                                              "label": "})",
                                                              "successors": [
                                                                {
                                                                  "id": 23,
                                                                  "label": "context.structDecl.body.decls.append(deserializeFunc)",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 20,
                                                  "label": "case _ => throw Exception(\"This data is not DataModelStruct\")",
                                                  "successors": [
                                                    {
                                                      "id": 21,
                                                      "label": "}\n$(body)",
                                                      "successors": [
                                                        {
                                                          "id": 22,
                                                          "label": "})",
                                                          "successors": [
                                                            {
                                                              "id": 23,
                                                              "label": "context.structDecl.body.decls.append(deserializeFunc)",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 22,
                                              "label": "})",
                                              "successors": [
                                                {
                                                  "id": 23,
                                                  "label": "context.structDecl.body.decls.append(deserializeFunc)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "generateSerialize",
          "type": "function",
          "start_line": 66,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func generateSerialize(context: Context): Unit {\n        let body = quote()\n        for (reval in context.valDecls) {\n            body.append(quote(\n                dms.add(field($(reval.identifier.value), this.$(reval.identifier)))\n            ))\n        }\n        let serializeFunc = FuncDecl(quote(\n            public func serialize(): DataModel {\n                let dms = DataModelStruct()\n                $(body)\n                return dms\n            }\n        ))\n        context.structDecl.body.decls.append(serializeFunc)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func generateSerialize(context: Context): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let body = quote()",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "for (reval in context.valDecls) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "body.append(quote(\n                dms.add(field($(reval.identifier.value), this.$(reval.identifier)))\n            ))",
                      "successors": [
                        {
                          "id": 3,
                          "label": "for (reval in context.valDecls) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "let serializeFunc = FuncDecl(quote(\n            public func serialize(): DataModel {\n                let dms = DataModelStruct()\n                $(body)\n                return dms\n            }\n        ))",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "context.structDecl.body.decls.append(serializeFunc)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class StructSerializableFunctionGenerator <: Generator {\n\n    }\n\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class StructSerializableFunctionGenerator <: Generator {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "macro package Macro_JsonSerializable.macros\n\nimport std.ast.*\nimport std.collection.*\n\n// \u7ed3\u6784\u4f53 serialize\u3001deserialize \u65b9\u6cd5\u751f\u6210\u5668\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros",
      "successors": [
        {
          "id": 2,
          "label": "import std.ast.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.collection.*",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}