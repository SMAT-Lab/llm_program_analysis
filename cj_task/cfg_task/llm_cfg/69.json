{
  "name": "opds_cj.path.api.v1.books",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [
    {
      "name": "pathLoad",
      "type": "function",
      "start_line": 9,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "simplified_code": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/api/v1/books/:id/thumbnail\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let data = Books.getThumb(id)\n            httpContext.responseBuilder.header(\"content-type\", Books.getThumbType(id))\n            httpContext.responseBuilder.body(data)\n        }\n    )\n    pathMap.add(\n        \"/api/v1/books/:id/file\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let data = baseConfig.getFileURL(Books.getFile(id))\n            let path = data.split(\"/\")\n            httpContext.responseBuilder.header(\"content-disposition\", \"attachment; filename=\" + path[path.size - 1])\n            httpContext.responseBuilder.header(\"content-type\", Books.getFileType(id))\n            httpContext.responseBuilder.body(File.readFrom(data))\n        }\n    )\n\n    pathMap.add(\n        \"/api/v1/books/:id/pages/:page\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let page = Int64.parse(httpContext.request.url.path.split(\"/\")[6])\n            var convert = \"\"\n            match (httpContext.request.url.query) {\n                case Some(x) => convert = x.trimStart(\"convert=\")\n                case None => ()\n            }\n            let pageImage = Page.getPage(id, page, convert)\n            pageImage.readFile()\n            httpContext.responseBuilder.header(\"content-type\", \"image/${pageImage.format}\")\n            httpContext.responseBuilder.body(pageImage.data.toArray())\n        }\n    )\n    pathMap.add(\n        \"/api/v1/books/:id/manifest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.path.split(\"/\")[4]\n            var manifest= Manifest(id, host)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(manifest.toJson())\n        }\n    )\n    return pathMap\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func pathLoad(): PathMap {",
          "successors": [
            {
              "id": 2,
              "label": "var pathMap = PathMap(\n    \"/api/v1/books/:id/thumbnail\",\n    {\n        httpContext =>\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        let data = Books.getThumb(id)\n        httpContext.responseBuilder.header(\"content-type\", Books.getThumbType(id))\n        httpContext.responseBuilder.body(data)\n    }\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "pathMap.add(\n    \"/api/v1/books/:id/file\",\n    {\n        httpContext =>\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        let data = baseConfig.getFileURL(Books.getFile(id))\n        let path = data.split(\"/\")\n        httpContext.responseBuilder.header(\"content-disposition\", \"attachment; filename=\" + path[path.size - 1])\n        httpContext.responseBuilder.header(\"content-type\", Books.getFileType(id))\n        httpContext.responseBuilder.body(File.readFrom(data))\n    }\n)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "pathMap.add(\n    \"/api/v1/books/:id/pages/:page\",\n    {\n        httpContext =>\n        let id = httpContext.request.url.toString().split(\"/\")[4]\n        let page = Int64.parse(httpContext.request.url.path.split(\"/\")[6])\n        var convert = \"\"\n        match (httpContext.request.url.query) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case Some(x) => convert = x.trimStart(\"convert=\")",
                          "successors": [
                            {
                              "id": 7,
                              "label": "let pageImage = Page.getPage(id, page, convert)\npageImage.readFile()\nhttpContext.responseBuilder.header(\"content-type\", \"image/${pageImage.format}\")\nhttpContext.responseBuilder.body(pageImage.data.toArray())",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "pathMap.add(\n    \"/api/v1/books/:id/manifest\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        let id = httpContext.request.url.path.split(\"/\")[4]\n        var manifest= Manifest(id, host)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(manifest.toJson())\n    }\n)",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "return pathMap",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "case None => ()",
                          "successors": [
                            {
                              "id": 7,
                              "label": "let pageImage = Page.getPage(id, page, convert)\npageImage.readFile()\nhttpContext.responseBuilder.header(\"content-type\", \"image/${pageImage.format}\")\nhttpContext.responseBuilder.body(pageImage.data.toArray())",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "pathMap.add(\n    \"/api/v1/books/:id/manifest\",\n    {\n        httpContext =>\n        let host = httpContext.request.headers.get(\"host\").toArray()[0]\n        let id = httpContext.request.url.path.split(\"/\")[4]\n        var manifest= Manifest(id, host)\n        httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n        httpContext.responseBuilder.body(manifest.toJson())\n    }\n)",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "return pathMap",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "package opds_cj.path.api.v1.books\n\nimport std.{io.*,fs.*,convert.*}\nimport net.http.*\nimport opds_cj.router.PathMap\nimport opds_cj.config.baseConfig\ninternal import opds_cj.data_stru.*\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package opds_cj.path.api.v1.books",
      "successors": []
    },
    {
      "id": 2,
      "label": "import std.{io.*,fs.*,convert.*}",
      "successors": []
    },
    {
      "id": 3,
      "label": "import net.http.*",
      "successors": []
    },
    {
      "id": 4,
      "label": "import opds_cj.router.PathMap",
      "successors": []
    },
    {
      "id": 5,
      "label": "import opds_cj.config.baseConfig",
      "successors": []
    },
    {
      "id": 6,
      "label": "internal import opds_cj.data_stru.*",
      "successors": []
    },
    {
      "id": 7,
      "label": "}",
      "successors": []
    }
  ]
}