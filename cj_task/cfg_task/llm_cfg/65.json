{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 58,
  "functions": [
    {
      "name": "newField",
      "type": "function",
      "start_line": 20,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": "func newField(varDecl: VarDecl): Tokens {\n    let name = varDecl.identifier\n    // let type_u = varDecl.declType\n    quote(\n        w.writeName($(name.value)).writeValue($(name)))\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func newField(varDecl: VarDecl): Tokens {",
          "successors": [
            {
              "id": 2,
              "label": "    let name = varDecl.identifier",
              "successors": [
                {
                  "id": 3,
                  "label": "    quote(",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        w.writeName($(name.value)).writeValue($(name)))",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "newToString",
      "type": "function",
      "start_line": 27,
      "end_line": 45,
      "functions": [],
      "classes": [
        {
          "name": "Series",
          "type": "class",
          "start_line": 33,
          "end_line": 43,
          "functions": [
            {
              "name": "toJson",
              "type": "function",
              "start_line": 34,
              "end_line": 42,
              "functions": [],
              "classes": [],
              "simplified_code": "            public func toJson(): String {\n                let stream = ByteBuffer()\n                let w = JsonWriter(stream)\n                w.startObject()\n                $(newToken)\n                w.endObject()\n                w.flush()\n                return String.fromUtf8(readToEnd(stream))\n            }",
              "blocks": [
                {
                  "id": 1,
                  "label": "public func toJson(): String {",
                  "successors": [
                    {
                      "id": 2,
                      "label": "let stream = ByteBuffer()",
                      "successors": [
                        {
                          "id": 3,
                          "label": "let w = JsonWriter(stream)",
                          "successors": [
                            {
                              "id": 4,
                              "label": "w.startObject()",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "$(newToken)",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "w.endObject()",
                                      "successors": [
                                        {
                                          "id": 7,
                                          "label": "w.flush()",
                                          "successors": [
                                            {
                                              "id": 8,
                                              "label": "return String.fromUtf8(readToEnd(stream))",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "simplified_code": "        extend Series {\n            }\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "extend Series {",
              "successors": [
                {
                  "id": 2,
                  "label": "}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "func newToString(varList: ArrayList<VarDecl>): Tokens {\n    var newToken = Tokens()\n    for (i in varList) {\n        newToken += newField(i)\n    }\n    quote(\n        }\n    )\n}",
      "blocks": [
        {
          "id": 1,
          "label": "var newToken = Tokens()",
          "successors": [
            {
              "id": 2,
              "label": "for (i in varList) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    newToken += newField(i)",
                  "successors": [
                    {
                      "id": 2,
                      "label": "for (i in varList) {",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "quote( }\n )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Json",
      "type": "function",
      "start_line": 47,
      "end_line": 58,
      "functions": [],
      "classes": [],
      "simplified_code": "public macro Json(input: Tokens): Tokens {\n    let s: Decl = parseDecl(input)\n    var toString: Tokens\n    var visitor = VarVisitor()\n    match (s) {\n        case d: ClassDecl =>\n            d.traverse(visitor)\n            toString = newToString(visitor.varList)\n        case _ => throw Exception(\"Json only using for Class\")\n    }\n    input + toString\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public macro Json(input: Tokens): Tokens {",
          "successors": [
            {
              "id": 2,
              "label": "let s: Decl = parseDecl(input)",
              "successors": [
                {
                  "id": 3,
                  "label": "var toString: Tokens",
                  "successors": [
                    {
                      "id": 4,
                      "label": "var visitor = VarVisitor()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "match (s) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "case d: ClassDecl =>",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "d.traverse(visitor)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "toString = newToString(visitor.varList)",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "input + toString",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "case _ => throw Exception(\"Json only using for Class\")",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "input + toString",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "VarVisitor",
      "type": "class",
      "start_line": 6,
      "end_line": 18,
      "functions": [
        {
          "name": "visit",
          "type": "function",
          "start_line": 8,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func visit(varDecl: VarDecl) {\n        varList.append(varDecl)\n        breakTraverse() // \u4e0d\u4f1a\u7ee7\u7eed\u904d\u5386 varDecl \u7684\u5b50\u8282\u70b9\n        return\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func visit(varDecl: VarDecl) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    varList.append(varDecl)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    breakTraverse()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "    return",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "visit",
          "type": "function",
          "start_line": 14,
          "end_line": 17,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func visit(_: FuncDecl) { //\u963b\u6b62\u5728func\u51fd\u6570\u4e0b\u67e5\u627e\u53d8\u91cf\n        breakTraverse()\n        return\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func visit(_: FuncDecl) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    breakTraverse()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class VarVisitor <: Visitor {\n    public var varList = ArrayList<VarDecl>()\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class VarVisitor <: Visitor {",
          "successors": [
            {
              "id": 2,
              "label": "public var varList = ArrayList<VarDecl>()",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        },
        {
          "id": 4,
          "label": "}",
          "successors": [
            "{}"
          ]
        }
      ]
    }
  ],
  "simplified_code": "macro package opds_cj.macros\n\nimport std.ast.*\nimport std.collection.ArrayList\n\n}\n\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package opds_cj.macros",
      "successors": []
    },
    {
      "id": 2,
      "label": "import std.ast.*",
      "successors": []
    },
    {
      "id": 3,
      "label": "import std.collection.ArrayList",
      "successors": []
    }
  ]
}