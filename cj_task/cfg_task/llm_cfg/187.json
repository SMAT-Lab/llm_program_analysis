{
  "name": "benchmark_client",
  "type": "CFG",
  "start_line": 1,
  "end_line": 52,
  "functions": [],
  "classes": [
    {
      "name": "PerformanceTask",
      "type": "class",
      "start_line": 2,
      "end_line": 52,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 9,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(\n        sessions: Array<Session>,\n        totalRequestCount: Int64,\n        executeNum: Int64,\n        message: String,\n        barrier: Barrier\n    ) {\n        this.sessions = sessions\n        this.totalRequestCount = totalRequestCount\n        this.executeNum = executeNum\n        this.message = message\n        this.barrier = barrier\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(",
              "successors": [
                {
                  "id": 2,
                  "label": "sessions: Array<Session>,",
                  "successors": [
                    {
                      "id": 3,
                      "label": "totalRequestCount: Int64,",
                      "successors": [
                        {
                          "id": 4,
                          "label": "executeNum: Int64,",
                          "successors": [
                            {
                              "id": 5,
                              "label": "message: String,",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "barrier: Barrier",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": ") {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "this.sessions = sessions",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "this.totalRequestCount = totalRequestCount",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "this.executeNum = executeNum",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "this.message = message",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "this.barrier = barrier",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 22,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func run() {\n        // \u7b49\u5f85\u6240\u6709\u7ebf\u7a0b\u4e00\u8d77\u6267\u884c\n        barrier.wait()\n        var i = 0\n        while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {\n            // \u53d1\u9001\u6d88\u606f\uff0c\u5e76\u6536\u53d6\u5bf9\u5e94\u7684\u54cd\u5e94\n            let echoRequest = EchoRequest(TaskController.requestIdGenerator.fetchAdd(1), message)\n            let session = sessions[nextIndex()]\n            session.writeAndFlushMessage(echoRequest)\n            try {\n                let echoResponse = echoRequest.waitForResponse()\n                if (TaskController.stopTime.load() == 0) {\n                    let totalCount = TaskController.totalInvokeCount.fetchAdd(1)\n                    if (totalCount + 1 >= totalRequestCount) {\n                        // \u8bbe\u7f6e\u505c\u6b62\u65f6\u95f4\n                        TaskController.stopTime.compareAndSwap(0, DateTime.now().toUnixTimeStamp().toMilliseconds());\n                    }\n                }\n                i++\n            } catch (ex: Exception) {\n                ex.printStackTrace()\n                break\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func run() {",
              "successors": [
                {
                  "id": 2,
                  "label": "barrier.wait()\nvar i = 0",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let echoRequest = EchoRequest(TaskController.requestIdGenerator.fetchAdd(1), message)\nlet session = sessions[nextIndex()]\nsession.writeAndFlushMessage(echoRequest)\ntry {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let echoResponse = echoRequest.waitForResponse()",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "if (TaskController.stopTime.load() == 0) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "let totalCount = TaskController.totalInvokeCount.fetchAdd(1)\nif (totalCount + 1 >= totalRequestCount) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "TaskController.stopTime.compareAndSwap(0, DateTime.now().toUnixTimeStamp().toMilliseconds());",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "i++",
                                              "successors": [
                                                {
                                                  "id": 3,
                                                  "label": "while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 10,
                                      "label": "i++",
                                      "successors": [
                                        {
                                          "id": 3,
                                          "label": "while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "} catch (ex: Exception) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "ex.printStackTrace()\nbreak",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "nextIndex",
          "type": "function",
          "start_line": 48,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func nextIndex(): Int64 {\n        let index = indexGenerator.fetchAdd(1) % UInt64(sessions.size)\n        return Int64(index)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func nextIndex(): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let index = indexGenerator.fetchAdd(1) % UInt64(sessions.size)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return Int64(index)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class PerformanceTask {\n    static let indexGenerator = AtomicUInt64(0)\n    let sessions: Array<Session>\n    private let totalRequestCount: Int64\n    private let executeNum: Int64\n    private let message: String\n    private let barrier: Barrier\n    }\n    }\n    @OverflowWrapping\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class PerformanceTask {",
          "successors": [
            {
              "id": 2,
              "label": "static let indexGenerator = AtomicUInt64(0)",
              "successors": [
                {
                  "id": 3,
                  "label": "let sessions: Array<Session>",
                  "successors": [
                    {
                      "id": 4,
                      "label": "private let totalRequestCount: Int64",
                      "successors": [
                        {
                          "id": 5,
                          "label": "private let executeNum: Int64",
                          "successors": [
                            {
                              "id": 6,
                              "label": "private let message: String",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "private let barrier: Barrier",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package benchmark_client\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package benchmark_client",
      "successors": []
    }
  ]
}