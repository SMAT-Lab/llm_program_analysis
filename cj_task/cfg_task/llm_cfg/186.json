{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 42,
  "functions": [
    {
      "name": "f_gold",
      "type": "function",
      "start_line": 2,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": "func f_gold (str:Array<UInt8>):Bool{\n  let len = str.size\n  if ( str [ 0 ] < b'A' || str [ 0 ] > b'Z' ) {return false}\n  if ( str [ len - 1 ] != b'.' ) {return false}\n  var prev_state = 0\n  var curr_state = 0\n  var index = 1\n  while ( index <= str . size ) {\n    if ( str [ index ] >= b'A' && str [ index ] <= b'Z' ) {curr_state = 0}\n    else if ( str [ index ] == b' ' ) {curr_state = 1}\n    else if ( str [ index ] >= b'a' && str [ index ] <= b'z' ) {curr_state = 2}\n    else if ( str [ index ] == b'.' ) {curr_state = 3}\n    if ( prev_state == curr_state && curr_state != 2 ) {return false}\n    if ( prev_state == 2 && curr_state == 0 ) {return false}\n    if ( curr_state == 3 && prev_state != 1 ) {return ( index + 1 == str . size )}\n    index ++\n    prev_state = curr_state\n  }\n  return false\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func f_gold (str:Array<UInt8>):Bool{\n  let len = str.size",
          "successors": [
            {
              "id": 2,
              "label": "if ( str [ 0 ] < b'A' || str [ 0 ] > b'Z' ) {return false}",
              "successors": []
            },
            {
              "id": 3,
              "label": "if ( str [ len - 1 ] != b'.' ) {return false}",
              "successors": []
            },
            {
              "id": 4,
              "label": "var prev_state = 0\n  var curr_state = 0\n  var index = 1",
              "successors": [
                {
                  "id": 5,
                  "label": "while ( index <= str . size ) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "if ( str [ index ] >= b'A' && str [ index ] <= b'Z' ) {curr_state = 0}",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "else if ( str [ index ] == b' ' ) {curr_state = 1}",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "else if ( str [ index ] >= b'a' && str [ index ] <= b'z' ) {curr_state = 2}",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "else if ( str [ index ] == b'.' ) {curr_state = 3}",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "if ( prev_state == curr_state && curr_state != 2 ) {return false}",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "if ( prev_state == 2 && curr_state == 0 ) {return false}",
                      "successors": []
                    },
                    {
                      "id": 12,
                      "label": "if ( curr_state == 3 && prev_state != 1 ) {return ( index + 1 == str . size )}",
                      "successors": []
                    },
                    {
                      "id": 13,
                      "label": "index ++\n    prev_state = curr_state",
                      "successors": [
                        {
                          "id": 14,
                          "label": "return false",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 23,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": "main(){\n    var n_success = 0\n    let param0 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])\n    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])\n    for (i in 0..param0.size){\n        if (f_gold(param0[i].toArray()) == f_filled(param1[i].toArray())){\n            n_success += 1\n        }\n    }\n    println(\"#Results: ${n_success}, ${param0.size}\\n\")\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "var n_success = 0\n    let param0 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])\n    let param1 = ArrayList<String>([\"I love cinema.\", \"The vertex is S.\",\n                         \"I am single.\", \"My name is KG.\",\n                         \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n                         \" You are my friend.\", \"I love cinema\", \"Hello world !\"])",
              "successors": [
                {
                  "id": 3,
                  "label": "for (i in 0..param0.size) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (f_gold(param0[i].toArray()) == f_filled(param1[i].toArray())) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "n_success += 1",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "}\n\n    println(\"#Results: ${n_success}, ${param0.size}\\n\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": " from std import collection.*\n}\n//TOFILL\n}",
  "blocks": [
    {
      "id": 1,
      "label": "from std import collection.*",
      "successors": []
    }
  ]
}