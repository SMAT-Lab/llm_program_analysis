{
  "name": "SimpleJsonReader",
  "type": "CFG",
  "start_line": 1,
  "end_line": 27,
  "functions": [],
  "classes": [
    {
      "name": "JsonStringTest",
      "type": "class",
      "start_line": 7,
      "end_line": 27,
      "functions": [
        {
          "name": "testStringOption",
          "type": "function",
          "start_line": 9,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testStringOption() {\n        @Expect(Json(str: #\"{ \"string\" : \"123\" }\"#)[\"string\"].string, Option.Some(\"123\"))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testStringOption() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    @Expect(Json(str: #\"{ \"string\" : \"123\" }\"#)[\"string\"].string, Option.Some(\"123\"))",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testString",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testString() {\n        @Expect(Json(str: #\"{ \"string\" : \"123\" }\"#)[\"string\"].stringValue, \"123\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testString() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(Json(str: #\"{ \"string\" : \"123\" }\"#)[\"string\"].stringValue, \"123\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testStringDefault",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testStringDefault() {\n        @Expect(Json(str: #\"{}\"#)[\"string\"].stringValue, \"\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testStringDefault() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(Json(str: #\"{}\"#)[\"string\"].stringValue, \"\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testStringOptionNone",
          "type": "function",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testStringOptionNone() {\n        @Expect(Json(str: #\"{}\"#)[\"string\"].string, Option.None)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testStringOptionNone() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    @Expect(Json(str: #\"{}\"#)[\"string\"].string, Option.None)",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class JsonStringTest {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package SimpleJsonReader\n\nimport std.unittest.*\nimport std.unittest.testmacro.*\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package SimpleJsonReader",
      "successors": [
        {
          "id": 2,
          "label": "import std.unittest.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.unittest.testmacro.*",
              "successors": [
                {
                  "id": 4,
                  "label": "@Test }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}