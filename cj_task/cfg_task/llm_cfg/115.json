{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 47,
  "functions": [
    {
      "name": "split_normal",
      "type": "function",
      "start_line": 5,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": "func split_normal(text: String, sep: String): ArrayList<String> {\n    let indices = ArrayList<Int64>()\n    var last = true\n    for (i in 0..text.size) {\n        let current = sep.indexOf(text[i]).isSome()\n        if (last != current) {\n            indices.append(i)\n        }\n        last = current\n    }\n    if (!last) { indices.append(text.size) }\n\n    let result = ArrayList<String>()\n    for (i in 0..indices.size:2) {\n        result.append(text[indices[i]..indices[i + 1]])\n    }\n    return result\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func split_normal(text: String, sep: String): ArrayList<String> {",
          "successors": [
            {
              "id": 2,
              "label": "let indices = ArrayList<Int64>()\nvar last = true",
              "successors": [
                {
                  "id": 3,
                  "label": "for (i in 0..text.size) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let current = sep.indexOf(text[i]).isSome()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (last != current) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "indices.append(i)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "last = current",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "if (!last) { indices.append(text.size) }",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "let result = ArrayList<String>()",
                  "successors": [
                    {
                      "id": 10,
                      "label": "for (i in 0..indices.size:2) {",
                      "successors": [
                        {
                          "id": 11,
                          "label": "result.append(text[indices[i]..indices[i + 1]])",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "return result",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "split",
      "type": "function",
      "start_line": 25,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": "func split(text: String, sep: String): ArrayList<String> {\n    let indices = ArrayList<Int64>()\n    text |> enumerate |> fold(false) { state, e =>\n        let current = sep.indexOf(e[1]).isNone()\n        if (state != current) { indices.append(e[0]) }\n        current\n    } |> { valid: Bool => if (valid) {\n        indices.append(text.size)\n    }}\n\n    let result = ArrayList<String>()\n    for (i in 0..indices.size:2) {\n        result.append(text[indices[i]..indices[i + 1]])\n    }\n    return result\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func split(text: String, sep: String): ArrayList<String> {",
          "successors": [
            {
              "id": 2,
              "label": "let indices = ArrayList<Int64>()",
              "successors": [
                {
                  "id": 3,
                  "label": "text |> enumerate |> fold(false) { state, e =>",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let current = sep.indexOf(e[1]).isNone()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (state != current) { indices.append(e[0]) }",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "current",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} |> { valid: Bool => if (valid) { indices.append(text.size) }}",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "let result = ArrayList<String>()",
                  "successors": [
                    {
                      "id": 9,
                      "label": "for (i in 0..indices.size:2) {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "result.append(text[indices[i]..indices[i + 1]])",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "}",
                      "successors": [
                        {
                          "id": 12,
                          "label": "return result",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 42,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let text = \"123, 456 7&89, , 96^3, 567\"\n    let separator = \"&^, \"\n    println(split_normal(text, separator))\n    println(split(text, separator))\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "    let text = \"123, 456 7&89, , 96^3, 567\"",
              "successors": [
                {
                  "id": 3,
                  "label": "    let separator = \"&^, \"",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    println(split_normal(text, separator))",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    println(split(text, separator))",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// \u7528\u7ed9\u5b9a\u7684\u5206\u9694\u7b26\u62c6\u5206\u5b57\u7b26\u4e32\uff0c\u652f\u6301\u591a\u5206\u9694\u7b26\uff0c\u6f14\u793a\u5e38\u89c4\u7f16\u7801\u5b9e\u73b0\u548c\u51fd\u6570\u5f0f\u7f16\u7a0b\u5b9e\u73b0\nimport std.collection.*\n\n// \u5e38\u89c4\u5b9e\u73b0\n}\n\n// \u51fd\u6570\u5f0f\u7f16\u7a0b\u5b9e\u73b0\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.collection.*",
      "successors": []
    },
    {
      "id": 2,
      "label": "// \u5e38\u89c4\u5b9e\u73b0",
      "successors": []
    },
    {
      "id": 3,
      "label": "// \u51fd\u6570\u5f0f\u7f16\u7a0b\u5b9e\u73b0",
      "successors": []
    }
  ]
}