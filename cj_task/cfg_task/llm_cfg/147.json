{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 201,
  "functions": [],
  "classes": [
    {
      "name": "Maker",
      "type": "class",
      "start_line": 46,
      "end_line": 201,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 54,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(indexPolicy: IndexPolicy, srcFile: String, dstFile: String) {\n        this.srcHandle = try {\n            let f = File(srcFile, OpenOption.Open(true, false))\n            if (!f.canRead()) {\n                throw Exception(\"file can not read\")\n            }\n            f\n        } catch (e: Exception) {\n            throw Exception(\"open source file `${srcFile}`: ${e.toString()}\")\n        }\n        this.dstHandle = try {\n            let f = File(dstFile, OpenOption.CreateOrTruncate(true))\n            if (!f.canWrite()) {\n                throw Exception(\"file can not write\")\n            }\n            f\n        } catch (e: Exception) {\n            throw Exception(\"open target file `${dstFile}`: ${e.toString()}\")\n        }\n        this.indexPolicy = indexPolicy\n        this.header = Header(UInt16(VersionNo), this.indexPolicy, UInt32(DateTime.now().toUnixTimeStamp().toSeconds()),\n            0, 0)\n        this.initDbHeader()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(indexPolicy: IndexPolicy, srcFile: String, dstFile: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.srcHandle = try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let f = File(srcFile, OpenOption.Open(true, false))",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if (!f.canRead()) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "throw Exception(\"file can not read\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "} catch (e: Exception) {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "throw Exception(\"open source file `${srcFile}`: ${e.toString()}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "this.dstHandle = try {",
                  "successors": [
                    {
                      "id": 9,
                      "label": "let f = File(dstFile, OpenOption.CreateOrTruncate(true))",
                      "successors": [
                        {
                          "id": 10,
                          "label": "if (!f.canWrite()) {",
                          "successors": [
                            {
                              "id": 11,
                              "label": "throw Exception(\"file can not write\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "} catch (e: Exception) {",
                  "successors": [
                    {
                      "id": 13,
                      "label": "throw Exception(\"open target file `${dstFile}`: ${e.toString()}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 14,
                  "label": "this.indexPolicy = indexPolicy",
                  "successors": [
                    {
                      "id": 15,
                      "label": "this.header = Header(UInt16(VersionNo), this.indexPolicy, UInt32(DateTime.now().toUnixTimeStamp().toSeconds()), 0, 0)",
                      "successors": [
                        {
                          "id": 16,
                          "label": "this.initDbHeader()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "initDbHeader",
          "type": "function",
          "start_line": 78,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "    func initDbHeader() {\n        this.dstHandle.seek(Begin(0))\n        this.header.writeTo(this.dstHandle)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func initDbHeader() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.dstHandle.seek(Begin(0))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.header.writeTo(this.dstHandle)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "loadSegments",
          "type": "function",
          "start_line": 82,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "    func loadSegments() {\n        let segments = ArrayList<Segment>()\n        let last: Box<?Segment> = Box<?Segment>(None)\n        iterateSegments(\n            this.srcHandle,\n            None,\n            {\n                seg =>\n                seg.afterCheck(last.value)\n                segments.append(seg)\n                last.value = seg\n            }\n        )\n        this.segments = segments.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func loadSegments() {",
              "successors": [
                {
                  "id": 2,
                  "label": "let segments = ArrayList<Segment>()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let last: Box<?Segment> = Box<?Segment>(None)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "iterateSegments(",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.srcHandle,",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "None,",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "{",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "seg =>",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "seg.afterCheck(last.value)",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "segments.append(seg)",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "last.value = seg",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 12,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": ")",
                                          "successors": [
                                            {
                                              "id": 14,
                                              "label": "this.segments = segments.toArray()",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setVectorIndex",
          "type": "function",
          "start_line": 97,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "    func setVectorIndex(ip: UInt32, ptr: UInt32) {\n        let il0 = (ip >> 24) & 0xFF\n        let il1 = (ip >> 16) & 0xFF\n        let idx = Int64(il0 * UInt32(VectorIndexCols) * UInt32(VectorIndexSize) + il1 * UInt32(VectorIndexSize))\n        let sPtr = littleEndianUInt32(this.vectorIndex[idx..(idx + 4)])\n        if (sPtr == 0) {\n            littleEndianPutUInt32(this.vectorIndex[idx..(idx + 4)], ptr)\n            littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))\n        } else {\n            littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let il0 = (ip >> 24) & 0xFF",
              "successors": [
                {
                  "id": 2,
                  "label": "let il1 = (ip >> 16) & 0xFF",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let idx = Int64(il0 * UInt32(VectorIndexCols) * UInt32(VectorIndexSize) + il1 * UInt32(VectorIndexSize))",
                      "successors": [
                        {
                          "id": 4,
                          "label": "let sPtr = littleEndianUInt32(this.vectorIndex[idx..(idx + 4)])",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (sPtr == 0) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "littleEndianPutUInt32(this.vectorIndex[idx..(idx + 4)], ptr)\nlittleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))",
                                  "successors": []
                                },
                                {
                                  "id": 7,
                                  "label": "} else {",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "start",
          "type": "function",
          "start_line": 109,
          "end_line": 196,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func start() {\n        this.loadSegments()\n        if (this.segments.size == 0) {\n            throw Exception(\"empty segment list\")\n        }\n        try {\n            this.dstHandle.seek(Begin(HeaderInfoLength + VectorIndexLength))\n        } catch (e: Exception) {\n            throw Exception(\"seek to data first ptr: ${e.toString()}\")\n        }\n        for (seg in this.segments) {\n            if (this.regionPool.contains(seg.region)) {\n                continue\n            }\n            let region = seg.region.toArray()\n            if (region.size > 0xFFFF) {\n                throw Exception(\"too long region info `${seg.region}`: should be less than ${0xFFFF} bytes\")\n            }\n            let pos = try {\n                this.dstHandle.seek(Current(0))\n            } catch (e: Exception) {\n                throw Exception(\"seek to current ptr: ${e.toString()}\")\n            }\n            try {\n                this.dstHandle.write(region)\n            } catch (e: Exception) {\n                throw Exception(\"write region '${seg.region}': ${e.toString()}\")\n            }\n            this.regionPool[seg.region] = UInt32(pos)\n        }\n        let indexBuff = Array<UInt8>(SegmentIndexBlockSize, item: 0)\n        var (counter, startIndexPtr, endIndexPtr) = (0, -1, -1)\n        for (seg in this.segments) {\n            if (!this.regionPool.contains(seg.region)) {\n                throw Exception(\"missing ptr cache for region `${seg.region}`\")\n            }\n            let dataLen = seg.region.size\n            if (dataLen == 0) {\n                throw Exception(\"empty region info for segment '${seg}'\")\n            }\n            let dataPtr = this.regionPool[seg.region]\n            let segList = seg.split()\n            for (s in segList) {\n                let pos = try {\n                    this.dstHandle.seek(Current(0))\n                } catch (e: Exception) {\n                    throw Exception(\"seek to segment index block: ${e.toString()}\")\n                }\n                littleEndianPutUInt32(indexBuff[0..4], s.startIP)\n                littleEndianPutUInt32(indexBuff[4..8], s.endIP)\n                littleEndianPutUInt16(indexBuff[8..10], UInt16(dataLen))\n                littleEndianPutUInt32(indexBuff[10..14], dataPtr)\n                try {\n                    this.dstHandle.write(indexBuff)\n                } catch (e: Exception) {\n                    throw Exception(\"write segment index for '${s}': ${e.toString()}\")\n                }\n                this.setVectorIndex(s.startIP, UInt32(pos))\n                counter++\n                if (startIndexPtr == -1) {\n                    startIndexPtr = pos\n                }\n                endIndexPtr = pos\n            }\n        }\n        try {\n            this.dstHandle.seek(Begin(HeaderInfoLength))\n        } catch (e: Exception) {\n            throw Exception(\"seek vector index first ptr: ${e.toString()}\")\n        }\n        try {\n            this.dstHandle.write(this.vectorIndex)\n        } catch (e: Exception) {\n            throw Exception(\"write vector index: ${e.toString()}\")\n        }\n        try {\n            this.dstHandle.seek(Begin(8))\n        } catch (e: Exception) {\n            throw Exception(\"seek segment index ptr: ${e.toString()}\")\n        }\n        littleEndianPutUInt32(indexBuff[0..4], UInt32(startIndexPtr))\n        littleEndianPutUInt32(indexBuff[4..8], UInt32(endIndexPtr))\n        try {\n            this.dstHandle.write(indexBuff[0..8])\n        } catch (e: Exception) {\n            throw Exception(\"write segment index ptr: ${e.toString()}\")\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func start() {\n    this.loadSegments()",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.segments.size == 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    throw Exception(\"empty segment list\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    this.dstHandle.seek(Begin(HeaderInfoLength + VectorIndexLength))",
                      "successors": [
                        {
                          "id": 6,
                          "label": "for (seg in this.segments) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if (this.regionPool.contains(seg.region)) {",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "    continue",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "for (seg in this.segments) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "let region = seg.region.toArray()",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "if (region.size > 0xFFFF) {",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "    throw Exception(\"too long region info `${seg.region}`: should be less than ${0xFFFF} bytes\")",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 12,
                                  "label": "let pos = try {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "    this.dstHandle.seek(Current(0))",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "try {",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "    this.dstHandle.write(region)",
                                              "successors": [
                                                {
                                                  "id": 16,
                                                  "label": "this.regionPool[seg.region] = UInt32(pos)",
                                                  "successors": [
                                                    {
                                                      "id": 6,
                                                      "label": "for (seg in this.segments) {",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 17,
                                          "label": "} catch (e: Exception) {",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "    throw Exception(\"write region '${seg.region}': ${e.toString()}\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 19,
                                  "label": "} catch (e: Exception) {",
                                  "successors": [
                                    {
                                      "id": 20,
                                      "label": "    throw Exception(\"seek to current ptr: ${e.toString()}\")",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 21,
                      "label": "} catch (e: Exception) {",
                      "successors": [
                        {
                          "id": 22,
                          "label": "    throw Exception(\"seek to data first ptr: ${e.toString()}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 23,
                  "label": "let indexBuff = Array<UInt8>(SegmentIndexBlockSize, item: 0)\nvar (counter, startIndexPtr, endIndexPtr) = (0, -1, -1)",
                  "successors": [
                    {
                      "id": 24,
                      "label": "for (seg in this.segments) {",
                      "successors": [
                        {
                          "id": 25,
                          "label": "if (!this.regionPool.contains(seg.region)) {",
                          "successors": [
                            {
                              "id": 26,
                              "label": "    throw Exception(\"missing ptr cache for region `${seg.region}`\")",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 27,
                          "label": "let dataLen = seg.region.size",
                          "successors": [
                            {
                              "id": 28,
                              "label": "if (dataLen == 0) {",
                              "successors": [
                                {
                                  "id": 29,
                                  "label": "    throw Exception(\"empty region info for segment '${seg}'\")",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 30,
                              "label": "let dataPtr = this.regionPool[seg.region]\nlet segList = seg.split()",
                              "successors": [
                                {
                                  "id": 31,
                                  "label": "for (s in segList) {",
                                  "successors": [
                                    {
                                      "id": 32,
                                      "label": "let pos = try {",
                                      "successors": [
                                        {
                                          "id": 33,
                                          "label": "    this.dstHandle.seek(Current(0))",
                                          "successors": [
                                            {
                                              "id": 34,
                                              "label": "littleEndianPutUInt32(indexBuff[0..4], s.startIP)\nlittleEndianPutUInt32(indexBuff[4..8], s.endIP)\nlittleEndianPutUInt16(indexBuff[8..10], UInt16(dataLen))\nlittleEndianPutUInt32(indexBuff[10..14], dataPtr)",
                                              "successors": [
                                                {
                                                  "id": 35,
                                                  "label": "try {",
                                                  "successors": [
                                                    {
                                                      "id": 36,
                                                      "label": "    this.dstHandle.write(indexBuff)",
                                                      "successors": [
                                                        {
                                                          "id": 37,
                                                          "label": "this.setVectorIndex(s.startIP, UInt32(pos))\ncounter++\nif (startIndexPtr == -1) {\n    startIndexPtr = pos\n}\nendIndexPtr = pos",
                                                          "successors": [
                                                            {
                                                              "id": 31,
                                                              "label": "for (s in segList) {",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 38,
                                                  "label": "} catch (e: Exception) {",
                                                  "successors": [
                                                    {
                                                      "id": 39,
                                                      "label": "    throw Exception(\"write segment index for '${s}': ${e.toString()}\")",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 40,
                                          "label": "} catch (e: Exception) {",
                                          "successors": [
                                            {
                                              "id": 41,
                                              "label": "    throw Exception(\"seek to segment index block: ${e.toString()}\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 42,
                      "label": "try {",
                      "successors": [
                        {
                          "id": 43,
                          "label": "    this.dstHandle.seek(Begin(HeaderInfoLength))",
                          "successors": [
                            {
                              "id": 44,
                              "label": "try {",
                              "successors": [
                                {
                                  "id": 45,
                                  "label": "    this.dstHandle.write(this.vectorIndex)",
                                  "successors": [
                                    {
                                      "id": 46,
                                      "label": "try {",
                                      "successors": [
                                        {
                                          "id": 47,
                                          "label": "    this.dstHandle.seek(Begin(8))",
                                          "successors": [
                                            {
                                              "id": 48,
                                              "label": "littleEndianPutUInt32(indexBuff[0..4], UInt32(startIndexPtr))\nlittleEndianPutUInt32(indexBuff[4..8], UInt32(endIndexPtr))",
                                              "successors": [
                                                {
                                                  "id": 49,
                                                  "label": "try {",
                                                  "successors": [
                                                    {
                                                      "id": 50,
                                                      "label": "    this.dstHandle.write(indexBuff[0..8])",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 51,
                                                  "label": "} catch (e: Exception) {",
                                                  "successors": [
                                                    {
                                                      "id": 52,
                                                      "label": "    throw Exception(\"write segment index ptr: ${e.toString()}\")",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 53,
                                          "label": "} catch (e: Exception) {",
                                          "successors": [
                                            {
                                              "id": 54,
                                              "label": "    throw Exception(\"seek segment index ptr: ${e.toString()}\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 55,
                              "label": "} catch (e: Exception) {",
                              "successors": [
                                {
                                  "id": 56,
                                  "label": "    throw Exception(\"write vector index: ${e.toString()}\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 57,
                          "label": "} catch (e: Exception) {",
                          "successors": [
                            {
                              "id": 58,
                              "label": "    throw Exception(\"seek vector index first ptr: ${e.toString()}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "end",
          "type": "function",
          "start_line": 197,
          "end_line": 200,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func end() {\n        this.dstHandle.close()\n        this.srcHandle.close()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func end() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.dstHandle.close()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.srcHandle.close()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Maker {\n    let srcHandle: File\n    let dstHandle: File\n    let indexPolicy: IndexPolicy\n    var segments: Array<Segment> = []\n    let regionPool: HashMap<String, UInt32> = HashMap<String, UInt32>()\n    let vectorIndex: Array<UInt8> = Array<UInt8>(VectorIndexLength, item: 0)\n    let header: Header\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Maker {\n    let srcHandle: File\n    let dstHandle: File\n    let indexPolicy: IndexPolicy\n    var segments: Array<Segment> = []\n    let regionPool: HashMap<String, UInt32> = HashMap<String, UInt32>()\n    let vectorIndex: Array<UInt8> = Array<UInt8>(VectorIndexLength, item: 0)\n    let header: Header\n    }\n    }\n    }\n    }\n    }\n    }\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package maker\n// ----\n// ip2region database v2.0 structure\n//\n// +----------------+-------------------+---------------+--------------+\n// | header space   | speed up index    |  data payload | block index  |\n// +----------------+-------------------+---------------+--------------+\n// | 256 bytes      | 512 KiB (fixed)   | dynamic size  | dynamic size |\n// +----------------+-------------------+---------------+--------------+\n//\n// 1. padding space : for header info like block index ptr, version, release date eg ... or any other temporary needs.\n// -- 2bytes: version number, different version means structure update, it fixed to 2 for now\n// -- 2bytes: index algorithm code.\n// -- 4bytes: generate unix timestamp (version)\n// -- 4bytes: index block start ptr\n// -- 4bytes: index block end ptr\n//\n//\n// 2. data block : region or whatever data info.\n// 3. segment index block : binary index block.\n// 4. vector index block  : fixed index info for block index search speed up.\n// space structure table:\n// -- 0   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n// -- 1   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n// -- 2   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n// -- ...\n// -- 255 -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n//\n//\n// super block structure:\n// +-----------------------+----------------------+\n// | first index block ptr | last index block ptr |\n// +-----------------------+----------------------+\n//\n// data entry structure:\n// +--------------------+-----------------------+\n// | 2bytes (for desc)\t| dynamic length        |\n// +--------------------+-----------------------+\n//  data length   whatever in bytes\n//\n// index entry structure\n// +------------+-----------+---------------+------------+\n// | 4bytes     | 4bytes    | 2bytes        | 4 bytes    |\n// +------------+-----------+---------------+------------+\n//  start ip \t  end ip\t  data length     data ptr\n}",
  "blocks": []
}