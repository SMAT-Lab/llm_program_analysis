{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 145,
  "functions": [
    {
      "name": "role_type_to_str",
      "type": "function",
      "start_line": 70,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": "public func role_type_to_str(role: RoleType): Option<String> {\n  return match(role) {\n    case RoleType.User => Some(\"user\")\n    case RoleType.Assistant => Some(\"assistant\")\n    case RoleType.System => Some(\"system\")\n    case RoleType.Function => Some(\"function\")\n    case RoleType.NULL => None\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func role_type_to_str(role: RoleType): Option<String> { return match(role) {",
          "successors": [
            {
              "id": 2,
              "label": "    case RoleType.User => Some(\"user\")",
              "successors": [
                {
                  "id": 7,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "    case RoleType.Assistant => Some(\"assistant\")",
              "successors": [
                {
                  "id": 7,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "    case RoleType.System => Some(\"system\")",
              "successors": [
                {
                  "id": 7,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "    case RoleType.Function => Some(\"function\")",
              "successors": [
                {
                  "id": 7,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "    case RoleType.NULL => None",
              "successors": [
                {
                  "id": 7,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "str_to_role_type",
      "type": "function",
      "start_line": 80,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": "public func str_to_role_type(role_option_str: Option<String>): RoleType {\n  return match(role_option_str) {\n    case Some(role_option) => \n      match (role_option) {\n        case \"user\" => RoleType.User\n        case \"assistant\" => RoleType.Assistant\n        case \"system\" => RoleType.System\n        case \"function\" => RoleType.Function\n        case x => throw Exception(\"unknow enum ${x} for RoleType\");\n      }\n    case None => RoleType.NULL\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func str_to_role_type(role_option_str: Option<String>): RoleType {",
          "successors": [
            {
              "id": 2,
              "label": "return match(role_option_str) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Some(role_option) => ",
                  "successors": [
                    {
                      "id": 4,
                      "label": "match (role_option) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case \"user\" => RoleType.User",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "case \"assistant\" => RoleType.Assistant",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "case \"system\" => RoleType.System",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "case \"function\" => RoleType.Function",
                          "successors": []
                        },
                        {
                          "id": 9,
                          "label": "case x => throw Exception(\"unknow enum ${x} for RoleType\");",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "case None => RoleType.NULL",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "SamplingMethod",
      "type": "enum",
      "start_line": 6,
      "end_line": 8,
      "functions": [],
      "classes": [],
      "simplified_code": "public enum SamplingMethod {\n  Greedy | Top_p | Top_k\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum SamplingMethod {",
          "successors": [
            {
              "id": 2,
              "label": "  Greedy | Top_p | Top_k",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ModelState",
      "type": "struct",
      "start_line": 10,
      "end_line": 23,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    code!: Int64 = 200,\n    is_end!: Bool = false,\n    message!: String = \"\"\n  ) {\n    this.code = code;\n    this.is_end = is_end;\n    this.message = message;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(",
              "successors": [
                {
                  "id": 2,
                  "label": "    code!: Int64 = 200,",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    is_end!: Bool = false,",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    message!: String = \"\"",
                          "successors": [
                            {
                              "id": 5,
                              "label": ") {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    this.code = code;",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    this.is_end = is_end;",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "    this.message = message;",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct ModelState {\n  public var code: Int64;\n  public var is_end: Bool;\n  public var message: String = \"\";\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct ModelState {",
          "successors": [
            {
              "id": 2,
              "label": "public var code: Int64;",
              "successors": []
            },
            {
              "id": 3,
              "label": "public var is_end: Bool;",
              "successors": []
            },
            {
              "id": 4,
              "label": "public var message: String = \"\";",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "FunctionCall",
      "type": "struct",
      "start_line": 25,
      "end_line": 64,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 29,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(name: String, arguments: String) {\n    this.name = name;\n    this.arguments = arguments;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(name: String, arguments: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.name = name;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.arguments = arguments;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 34,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): FunctionCall {\n    var temp_name: String = \"\";\n    var temp_arguments: String = \"\";\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"name\" => temp_name = r.readValue<String>();\n                  case \"arguments\" => temp_arguments = r.readValue<String>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for FunctionCall\");\n      }\n    }\n    return FunctionCall(temp_name, temp_arguments);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): FunctionCall {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_name: String = \"\";\nvar temp_arguments: String = \"\";",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "match (n) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "case \"name\" => temp_name = r.readValue<String>();",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "continue;",
                                                      "successors": [
                                                        {
                                                          "id": 8,
                                                          "label": "let n = r.readName()",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 12,
                                                  "label": "case \"arguments\" => temp_arguments = r.readValue<String>();",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "label": "continue;",
                                                      "successors": [
                                                        {
                                                          "id": 8,
                                                          "label": "let n = r.readName()",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "case unkow => println(\"unkow key ${unkow}\");",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "continue;",
                                                      "successors": [
                                                        {
                                                          "id": 8,
                                                          "label": "let n = r.readName()",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 16,
                                      "label": "r.endObject();",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "break;",
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "return FunctionCall(temp_name, temp_arguments);",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 18,
                              "label": "case _ => throw Exception(\"can't deserialize for FunctionCall\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 19,
                      "label": "}",
                      "successors": [
                        {
                          "id": 20,
                          "label": "return FunctionCall(temp_name, temp_arguments);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 57,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"name\").writeValue<String>(this.name);\n    w.writeName(\"arguments\").writeValue<String>(this.arguments);\n    w.endObject();\n    w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter) {",
              "successors": [
                {
                  "id": 2,
                  "label": "w.startObject();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "w.writeName(\"name\").writeValue<String>(this.name);",
                      "successors": [
                        {
                          "id": 4,
                          "label": "w.writeName(\"arguments\").writeValue<String>(this.arguments);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "w.endObject();",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "w.flush();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct FunctionCall <: JsonDeserializable<FunctionCall> & JsonSerializable {\n  public let name: String;\n  public let arguments: String;\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct FunctionCall <: JsonDeserializable<FunctionCall> & JsonSerializable {",
          "successors": [
            {
              "id": 2,
              "label": "  public let name: String;",
              "successors": [
                {
                  "id": 3,
                  "label": "  public let arguments: String;",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "RoleType",
      "type": "enum",
      "start_line": 66,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "public enum RoleType {\n  User | Assistant | System | Function | NULL\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum RoleType {",
          "successors": [
            {
              "id": 2,
              "label": "User | Assistant | System | Function | NULL",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Message",
      "type": "struct",
      "start_line": 95,
      "end_line": 145,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 100,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(role: RoleType, content: String) {\n    this.role = role;\n    this.content = content;\n    this.function_call = None;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(role: RoleType, content: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.role = role;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.content = content;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    this.function_call = None;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 106,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(role: RoleType, content: String, function_call: Option<FunctionCall>) {\n    this.role = role;\n    this.content = content;\n    this.function_call = function_call;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(role: RoleType, content: String, function_call: Option<FunctionCall>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.role = role;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.content = content;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.function_call = function_call;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 112,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): Message {\n    var temp_role: Option<String> = None; // role may null in stream chat\n    var temp_content: String = \"\";\n    var temp_functional_call: Option<FunctionCall> = None;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"role\" => temp_role = r.readValue<Option<String>>();\n                  case \"content\" => temp_content = r.readValue<String>();\n                  case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for Message\");\n      }\n    }\n    let role_type: RoleType = str_to_role_type(temp_role);\n    return Message(role_type, temp_content);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): Message {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_role: Option<String> = None; // role may null in stream chat\nvar temp_content: String = \"\";\nvar temp_functional_call: Option<FunctionCall> = None;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "match (n) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "case \"role\" => temp_role = r.readValue<Option<String>>();",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "r.endObject();\nbreak;",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 11,
                                                  "label": "case \"content\" => temp_content = r.readValue<String>();",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "r.endObject();\nbreak;",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 12,
                                                  "label": "case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "r.endObject();\nbreak;",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 13,
                                                  "label": "case unkow => println(\"unkow key ${unkow}\");",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "r.endObject();\nbreak;",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 16,
                              "label": "case _ => throw Exception(\"can't deserialize for Message\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 17,
                      "label": "let role_type: RoleType = str_to_role_type(temp_role);",
                      "successors": [
                        {
                          "id": 18,
                          "label": "return Message(role_type, temp_content);",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 138,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"role\").writeValue<Option<String>>(role_type_to_str(this.role));\n    w.writeName(\"content\").writeValue<String>(this.content);\n    w.endObject();\n    w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter) {",
              "successors": [
                {
                  "id": 2,
                  "label": "w.startObject();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "w.writeName(\"role\").writeValue<Option<String>>(role_type_to_str(this.role));",
                      "successors": [
                        {
                          "id": 4,
                          "label": "w.writeName(\"content\").writeValue<String>(this.content);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "w.endObject();",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "w.flush();",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct Message<: JsonDeserializable<Message> & JsonSerializable {\n  public let role: RoleType;\n  public var content: String;\n  public let function_call: Option<FunctionCall>;\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct Message<: JsonDeserializable<Message> & JsonSerializable {",
          "successors": [
            {
              "id": 2,
              "label": "public let role: RoleType;",
              "successors": [
                {
                  "id": 3,
                  "label": "public var content: String;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "public let function_call: Option<FunctionCall>;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package tokenizer\nimport encoding.json.stream.*\nimport std.collection.ArrayList\nimport std.io.ByteArrayStream\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package tokenizer",
      "successors": [
        {
          "id": 2,
          "label": "import encoding.json.stream.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.collection.ArrayList",
              "successors": [
                {
                  "id": 4,
                  "label": "import std.io.ByteArrayStream",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}