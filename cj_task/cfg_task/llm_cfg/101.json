{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 55,
  "functions": [
    {
      "name": "cli_chat",
      "type": "function",
      "start_line": 5,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": "func cli_chat(env_info: EnvInfo, stream!: Bool) {\n  println(\"\\n\u6b22\u8fce\u4f7f\u7528AI\u804a\u5929\u673a\u5668\u4eba\uff0c\u8f93\u5165exit\u6216\u8005quit\u9000\u51fa\uff0c\u8f93\u5165clear\u6e05\u7a7a\u5386\u53f2\u8bb0\u5f55\");\n  var history: ArrayList<(String, String)> = ArrayList<(String, String)>();\n  while (true) {\n    print(\"Input: \");\n    var prompt: String = \"\";\n    match(Console.stdIn.readln()) {\n      case Some(str1: String) => prompt=str1;\n      case None => continue;\n    }\n    if (prompt == \"exit\" || prompt == \"exit()\") {\n      break;\n    }\n    if (prompt == \"clear\") {\n      history.clear();\n      println(\"Output: \u5df2\u6e05\u7406\u5386\u53f2\u5bf9\u8bdd\u4fe1\u606f\u3002\");\n      continue;\n    }\n    print(\"ChatBox: \")\n    let response_option: Option<String> = if (stream) {\n      stream_chat(prompt, env_info, history);\n    } else {\n      chat(prompt, env_info, history);\n    }\n    match (response_option) {\n      case Some(response: String) => \n        if (stream) {\n           println(\"\") ;\n        } else {\n            println(\"${response}\");\n        }\n        history.append((prompt, response));\n      case None => println(\"\u9047\u5230\u9519\u8bef\uff0c\u5373\u5c06\u9000\u51fa\"); break;\n    }\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func cli_chat(env_info: EnvInfo, stream!: Bool) {\n  println(\"\\n\u6b22\u8fce\u4f7f\u7528AI\u804a\u5929\u673a\u5668\u4eba\uff0c\u8f93\u5165exit\u6216\u8005quit\u9000\u51fa\uff0c\u8f93\u5165clear\u6e05\u7a7a\u5386\u53f2\u8bb0\u5f55\");\n  var history: ArrayList<(String, String)> = ArrayList<(String, String)>();",
          "successors": [
            {
              "id": 2,
              "label": "while (true) {",
              "successors": [
                {
                  "id": 3,
                  "label": "print(\"Input: \");\n    var prompt: String = \"\";\n    match(Console.stdIn.readln()) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case Some(str1: String) => prompt=str1;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (prompt == \"exit\" || prompt == \"exit()\") {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "break;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "if (prompt == \"clear\") {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "history.clear();\n      println(\"Output: \u5df2\u6e05\u7406\u5386\u53f2\u5bf9\u8bdd\u4fe1\u606f\u3002\");\n      continue;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "print(\"ChatBox: \")\n    let response_option: Option<String> = if (stream) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "stream_chat(prompt, env_info, history);",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "match (response_option) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "case Some(response: String) =>",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "if (stream) {",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "println(\"\") ;",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "history.append((prompt, response));",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 16,
                                          "label": "else {\n            println(\"${response}\");\n        }",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "history.append((prompt, response));",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 18,
                                      "label": "case None => println(\"\u9047\u5230\u9519\u8bef\uff0c\u5373\u5c06\u9000\u51fa\"); break;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "chat(prompt, env_info, history);",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "match (response_option) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "case Some(response: String) =>",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "if (stream) {",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "println(\"\") ;",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "history.append((prompt, response));",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 16,
                                          "label": "else {\n            println(\"${response}\");\n        }",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "history.append((prompt, response));",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 18,
                                      "label": "case None => println(\"\u9047\u5230\u9519\u8bef\uff0c\u5373\u5c06\u9000\u51fa\"); break;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 19,
                      "label": "case None => continue;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 43,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": "main(args: Array<String>): Int64 {\n  let env_info = load_env_info();\n  var stream: Bool = false;\n  if (args.size == 1) {\n    if (args[0] == \"--stream\") {\n      stream = true;\n    } else {\n      println(\"Warning! you can only use `--stream` to use stream for response.\")\n    }\n  }\n  cli_chat(env_info, stream: stream);\n  return 0\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let env_info = load_env_info();\nvar stream: Bool = false;",
          "successors": [
            {
              "id": 2,
              "label": "if (args.size == 1) {",
              "successors": [
                {
                  "id": 3,
                  "label": "if (args[0] == \"--stream\") {\n  stream = true;\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "cli_chat(env_info, stream: stream);\nreturn 0",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "else {\n  println(\"Warning! you can only use `--stream` to use stream for response.\")\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "cli_chat(env_info, stream: stream);\nreturn 0",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "package openai_chat\nimport std.console.Console\nimport std.collection.ArrayList\n\n}\n\n\n}",
  "blocks": []
}