{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 5,
      "end_line": 30,
      "functions": [
        {
          "name": "spawn_inline_function",
          "type": "function",
          "start_line": 6,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    let fut = spawn { =>\n        mon.lock()\n        while (flag) {\n            println(\"New thread: before wait\")\n            // Monitor \u5bf9\u8c61\u6267\u884c wait \u65f6\uff0c\u5fc5\u987b\u5728\u9501\u7684\u4fdd\u62a4\u4e0b\u8fdb\u884c\uff0c\n            // \u5426\u5219 wait \u4e2d\u91ca\u653e\u9501\u7684\u64cd\u4f5c\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n            mon.wait()\n            println(\"New thread: after wait\")\n        }\n        mon.unlock()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let fut = spawn { =>",
              "successors": [
                {
                  "id": 2,
                  "label": "mon.lock()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (flag) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "println(\"New thread: before wait\")",
                          "successors": [
                            {
                              "id": 5,
                              "label": "mon.wait()",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "println(\"New thread: after wait\")",
                                  "successors": [
                                    {
                                      "id": 3,
                                      "label": "while (flag) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "mon.unlock()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "main(): Int64 {\n    }\n    // sleep for 10ms, make sure the new thread can be executed\n    sleep(10 * Duration.millisecond)\n    mon.lock()\n    println(\"Main thread: set flag\")\n    flag = false\n    mon.unlock()\n    mon.lock()\n    println(\"Main thread: notify\")\n    mon.notify()\n    mon.unlock()\n    // wait for the new thread nished\n    fut.get()\n    return 0\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main(): Int64 {",
          "successors": [
            {
              "id": 2,
              "label": "    sleep(10 * Duration.millisecond)",
              "successors": [
                {
                  "id": 3,
                  "label": "    mon.lock()",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    println(\"Main thread: set flag\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    flag = false",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    mon.unlock()",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "    mon.lock()",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "    println(\"Main thread: notify\")",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "    mon.notify()",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "    mon.unlock()",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "    fut.get()",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "    return 0",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from std import sync.*\nfrom std import time.*\nvar mon = Monitor()\nvar flag: Bool = true\n}",
  "blocks": [
    {
      "id": 1,
      "label": "from std import sync.*",
      "successors": [
        {
          "id": 2,
          "label": "from std import time.*",
          "successors": [
            {
              "id": 3,
              "label": "var mon = Monitor()",
              "successors": [
                {
                  "id": 4,
                  "label": "var flag: Bool = true",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}