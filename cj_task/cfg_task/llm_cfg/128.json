{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 177,
  "functions": [],
  "classes": [
    {
      "name": "H2Config",
      "type": "class",
      "start_line": 9,
      "end_line": 150,
      "functions": [
        {
          "name": "HEADER_TABLE_SIZE",
          "type": "function",
          "start_line": 16,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    public mut prop HEADER_TABLE_SIZE: Int64 {\n        get() {\n            return headerTableSize\n        }\n        set(v) {\n            if (v > 0) {\n                headerTableSize = v\n            } else {\n                throw Exception()\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut prop HEADER_TABLE_SIZE: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "get() {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return headerTableSize",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "set(v) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (v > 0) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "headerTableSize = v",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "throw Exception()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "ENABLE_PUSH",
          "type": "function",
          "start_line": 28,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    public mut prop ENABLE_PUSH: Int64 {\n        get () {\n            return enablePush\n        }\n        set (v) {\n            if (v == 0 || v == 1) {\n                enablePush = v\n            } else {\n                throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")  //\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut prop ENABLE_PUSH: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "get () {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return enablePush",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "set (v) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (v == 0 || v == 1) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "enablePush = v",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "else {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "MAX_CONCURRENT_STREAMS",
          "type": "function",
          "start_line": 41,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "    public mut prop MAX_CONCURRENT_STREAMS: Int64 {\n        get () {\n            return maxConcurrentStreams\n        }\n        set (v) {\n            if (v >= 0) {\n                maxConcurrentStreams = v\n            } else {\n                throw ProtocolErrorException()\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut prop MAX_CONCURRENT_STREAMS: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "get () {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return maxConcurrentStreams",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "set (v) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (v >= 0) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "maxConcurrentStreams = v",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "else {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "throw ProtocolErrorException()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "INITIAL_WINDOW_SIZE",
          "type": "function",
          "start_line": 53,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    public mut prop INITIAL_WINDOW_SIZE: Int64 {\n        get () {\n            return initialWindowSize\n        }\n        set (v) {\n            if (v >= 0 && v <= Int64(Int32.Max)) {\n                initialWindowSize = v\n            } else {\n                throw FlowControlErrorException()\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut prop INITIAL_WINDOW_SIZE: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "get () {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return initialWindowSize",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "set (v) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (v >= 0 && v <= Int64(Int32.Max)) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "initialWindowSize = v",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "else {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "throw FlowControlErrorException()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "MAX_FRAME_SIZE",
          "type": "function",
          "start_line": 65,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": "    public mut prop MAX_FRAME_SIZE: Int64 {\n        get () {\n            return maxFrameSize\n        }\n        set (v) {\n            if (v > 16777215 || v < 16384) {\n                throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")\n            }\n            maxFrameSize = v\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut prop MAX_FRAME_SIZE: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "get () {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return maxFrameSize",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "set (v) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (v > 16777215 || v < 16384) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "maxFrameSize = v",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "MAX_HEADER_LIST_SIZE",
          "type": "function",
          "start_line": 76,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": "    public mut prop MAX_HEADER_LIST_SIZE: Int64 {\n        get () {\n            return maxHeaderListSize\n        }\n        set (v) {\n            if (v > 0) {\n                maxHeaderListSize = v\n            } else {\n                throw ProtocolErrorException()\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut prop MAX_HEADER_LIST_SIZE: Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "get () {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return maxHeaderListSize",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "set (v) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (v > 0) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "maxHeaderListSize = v",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "else {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "throw ProtocolErrorException()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 88,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init (){\n        this.headerTableSize = initialHeaderTableSize\n        this.enablePush = 1\n        this.maxConcurrentStreams = defaultMaxConcurrentStreams\n        this.initialWindowSize = globalinitialWindowSize\n        this.maxFrameSize = initialMaxFrameSize\n        this.maxHeaderListSize = initialMaxHeadListSize\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init (){",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.headerTableSize = initialHeaderTableSize",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.enablePush = 1",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    this.maxConcurrentStreams = defaultMaxConcurrentStreams",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    this.initialWindowSize = globalinitialWindowSize",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    this.maxFrameSize = initialMaxFrameSize",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    this.maxHeaderListSize = initialMaxHeadListSize",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init_with_parameters",
          "type": "function",
          "start_line": 96,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(headerTableSize: Int64, enablePush: Int64, maxConcurrentStreams: Int64, initialWindowSize: Int64, maxFrameSize: Int64, maxHeaderListSize: Int64) {\n        this.headerTableSize = if (headerTableSize > 0) {\n            headerTableSize\n        } else {\n            throw Exception()\n        }\n        this.enablePush = if (enablePush == 0 || enablePush == 1) {\n            enablePush\n        } else {\n            throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")  //\n        }\n        this.maxConcurrentStreams = if (maxConcurrentStreams >= 0) {\n            maxConcurrentStreams\n        } else {\n            throw ProtocolErrorException()\n        }\n        this.initialWindowSize = if (initialWindowSize >= 0 && initialWindowSize <= Int64(Int32.Max)) {\n            initialWindowSize\n        } else {\n            throw FlowControlErrorException()\n        }\n        this.maxFrameSize = if (maxFrameSize > 16777215 || maxFrameSize < 16384) {\n            throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")\n        }else {\n            maxFrameSize\n        }\n        this.maxHeaderListSize = if (maxHeaderListSize > 0) {\n            maxHeaderListSize\n        } else {\n            throw ProtocolErrorException()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(headerTableSize: Int64, enablePush: Int64, maxConcurrentStreams: Int64, initialWindowSize: Int64, maxFrameSize: Int64, maxHeaderListSize: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.headerTableSize = if (headerTableSize > 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "headerTableSize",
                      "successors": [
                        {
                          "id": 9,
                          "label": "this.enablePush = if (enablePush == 0 || enablePush == 1) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "enablePush",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "this.maxConcurrentStreams = if (maxConcurrentStreams >= 0) {",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "maxConcurrentStreams",
                                      "successors": [
                                        {
                                          "id": 23,
                                          "label": "this.initialWindowSize = if (initialWindowSize >= 0 && initialWindowSize <= Int64(Int32.Max)) {",
                                          "successors": [
                                            {
                                              "id": 24,
                                              "label": "initialWindowSize",
                                              "successors": [
                                                {
                                                  "id": 30,
                                                  "label": "this.maxFrameSize = if (maxFrameSize > 16777215 || maxFrameSize < 16384) {",
                                                  "successors": [
                                                    {
                                                      "id": 31,
                                                      "label": "throw ProtocolErrorException(\"The value of the endpoint broadcast must be between this initial value and the maximum allowed frame size (2 ^ 24-1 or 16777215 octets), including both. Values outside this range must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 32,
                                                      "label": "maxFrameSize",
                                                      "successors": [
                                                        {
                                                          "id": 35,
                                                          "label": "this.maxHeaderListSize = if (maxHeaderListSize > 0) {",
                                                          "successors": [
                                                            {
                                                              "id": 36,
                                                              "label": "maxHeaderListSize",
                                                              "successors": []
                                                            },
                                                            {
                                                              "id": 37,
                                                              "label": "throw ProtocolErrorException()",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 25,
                                              "label": "throw FlowControlErrorException()",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 18,
                                      "label": "throw ProtocolErrorException()",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "throw ProtocolErrorException(\"Any value other than 0 or 1 must be considered PROTOCOL_ ERROR type connection error (Section 5.4.1).\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "throw Exception()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "operator_func_set",
          "type": "function",
          "start_line": 128,
          "end_line": 138,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func [](key: Int64, value!: Int64): Unit{\n        match (key) {\n            case 0x01 => this.HEADER_TABLE_SIZE = value\n            case 0x02 => this.ENABLE_PUSH = value\n            case 0x03 => this.MAX_CONCURRENT_STREAMS = value\n            case 0x04 => this.INITIAL_WINDOW_SIZE = value\n            case 0x05 => this.MAX_FRAME_SIZE = value\n            case 0x06 => this.MAX_HEADER_LIST_SIZE = value\n            case _ => throw ProtocolErrorException()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func [](key: Int64, value!: Int64): Unit{",
              "successors": [
                {
                  "id": 2,
                  "label": "match (key) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case 0x01 => this.HEADER_TABLE_SIZE = value",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case 0x02 => this.ENABLE_PUSH = value",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case 0x03 => this.MAX_CONCURRENT_STREAMS = value",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "case 0x04 => this.INITIAL_WINDOW_SIZE = value",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "case 0x05 => this.MAX_FRAME_SIZE = value",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "case 0x06 => this.MAX_HEADER_LIST_SIZE = value",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "case _ => throw ProtocolErrorException()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "operator_func_get",
          "type": "function",
          "start_line": 139,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func [](key: Int64): Int64 {\n        return match (key) {\n            case 0x01 => this.HEADER_TABLE_SIZE\n            case 0x02 => this.ENABLE_PUSH\n            case 0x03 => this.MAX_CONCURRENT_STREAMS\n            case 0x04 => this.INITIAL_WINDOW_SIZE\n            case 0x05 => this.MAX_FRAME_SIZE\n            case 0x06 => this.MAX_HEADER_LIST_SIZE\n            case _ => throw ProtocolErrorException()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func [](key: Int64): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "return match (key) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case 0x01 => this.HEADER_TABLE_SIZE",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case 0x02 => this.ENABLE_PUSH",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case 0x03 => this.MAX_CONCURRENT_STREAMS",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "case 0x04 => this.INITIAL_WINDOW_SIZE",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "case 0x05 => this.MAX_FRAME_SIZE",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "case 0x06 => this.MAX_HEADER_LIST_SIZE",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "case _ => throw ProtocolErrorException()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class H2Config {\n    private var headerTableSize: Int64\n    private var enablePush: Int64\n    private var maxConcurrentStreams: Int64\n    private var initialWindowSize: Int64\n    private var maxFrameSize: Int64\n    private var maxHeaderListSize: Int64\n    }\n    }\n    // The value of 0 is prohibit the creation of new streams\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class H2Config {",
          "successors": [
            {
              "id": 2,
              "label": "    private var headerTableSize: Int64",
              "successors": [
                {
                  "id": 3,
                  "label": "    private var enablePush: Int64",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    private var maxConcurrentStreams: Int64",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    private var initialWindowSize: Int64",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    private var maxFrameSize: Int64",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "    private var maxHeaderListSize: Int64",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "ProtocolErrorException",
      "type": "class",
      "start_line": 152,
      "end_line": 159,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 153,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(){\n        super()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(){",
              "successors": [
                {
                  "id": 2,
                  "label": "    super()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init_with_string",
          "type": "function",
          "start_line": 156,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(string: String) {\n        super(\"ProtocolErrorException: ${string}\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(string: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "super(\"ProtocolErrorException: ${string}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class ProtocolErrorException <: Exception {\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class ProtocolErrorException <: Exception {",
          "successors": []
        },
        {
          "id": 2,
          "label": "    }",
          "successors": []
        },
        {
          "id": 3,
          "label": "    }",
          "successors": []
        },
        {
          "id": 4,
          "label": "}",
          "successors": []
        }
      ]
    },
    {
      "name": "FlowControlErrorException",
      "type": "class",
      "start_line": 161,
      "end_line": 168,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 162,
          "end_line": 164,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(){\n        super()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(){",
              "successors": [
                {
                  "id": 2,
                  "label": "super()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init_with_string",
          "type": "function",
          "start_line": 165,
          "end_line": 167,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(string: String) {\n        super(\"FlowControlErrorException: ${string}\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(string: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "super(\"FlowControlErrorException: ${string}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class FlowControlErrorException <: Exception {\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class FlowControlErrorException <: Exception {",
          "successors": []
        },
        {
          "id": 2,
          "label": "    }",
          "successors": []
        },
        {
          "id": 3,
          "label": "    }",
          "successors": []
        },
        {
          "id": 4,
          "label": "}",
          "successors": []
        }
      ]
    },
    {
      "name": "FrameSizeErrorException",
      "type": "class",
      "start_line": 170,
      "end_line": 177,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 171,
          "end_line": 173,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(){\n        super()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(){",
              "successors": [
                {
                  "id": 2,
                  "label": "    super()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init_with_string",
          "type": "function",
          "start_line": 174,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(string: String) {\n        super(\"FrameSizeErrorException: ${string}\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(string: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    super(\"FrameSizeErrorException: ${string}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class FrameSizeErrorException <: Exception {\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class FrameSizeErrorException <: Exception {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package rpc4cj.http2.proto\ninternal import std.log.*\nlet initialHeaderTableSize: Int64 = 4096\nlet initEnablePush: Int64 = 0\nlet defaultMaxConcurrentStreams = 100\nlet globalinitialWindowSize: Int64 = 65535 // 6.9.2 Initial Flow Control Window Size\nlet initialMaxFrameSize: Int64 = 16384\nlet initialMaxHeadListSize = 1048896\n}\n// PROTOCOL_ERROR\n}\n// FLOW_CONTROL_ERROR\n}\n// FRAME_SIZE_ERROR\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package rpc4cj.http2.proto",
      "successors": [
        {
          "id": 2,
          "label": "internal import std.log.*",
          "successors": [
            {
              "id": 3,
              "label": "let initialHeaderTableSize: Int64 = 4096",
              "successors": [
                {
                  "id": 4,
                  "label": "let initEnablePush: Int64 = 0",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let defaultMaxConcurrentStreams = 100",
                      "successors": [
                        {
                          "id": 6,
                          "label": "let globalinitialWindowSize: Int64 = 65535 // 6.9.2 Initial Flow Control Window Size",
                          "successors": [
                            {
                              "id": 7,
                              "label": "let initialMaxFrameSize: Int64 = 16384",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "let initialMaxHeadListSize = 1048896",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": 9,
      "label": "// PROTOCOL_ERROR",
      "successors": []
    },
    {
      "id": 10,
      "label": "// FLOW_CONTROL_ERROR",
      "successors": []
    },
    {
      "id": 11,
      "label": "// FRAME_SIZE_ERROR",
      "successors": []
    }
  ]
}