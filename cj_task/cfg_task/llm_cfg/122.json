{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 32,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 19,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    var tree1 = Node(r'X',\n        left: Node(r'B', left: Node(r'C', right: Node(r'D'))),\n        right: Node(r'E', left: Node(r'F'), right: Node(r'G')))\n    tree1.set(r'A')\n    tree1.traverse()\n\n    println()\n    var tree2 = Node(0,\n        left: Node(2, left: Node(3, right: Node(4))),\n        right: Node(5, left: Node(6), right: Node(7)))\n    tree2.set(1)\n    tree2.traverse()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "var tree1 = Node(r'X', left: Node(r'B', left: Node(r'C', right: Node(r'D'))), right: Node(r'E', left: Node(r'F'), right: Node(r'G')))",
              "successors": [
                {
                  "id": 3,
                  "label": "tree1.set(r'A')",
                  "successors": [
                    {
                      "id": 4,
                      "label": "tree1.traverse()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "println()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "var tree2 = Node(0, left: Node(2, left: Node(3, right: Node(4))), right: Node(5, left: Node(6), right: Node(7)))",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "tree2.set(1)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "tree2.traverse()",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Node",
      "type": "class",
      "start_line": 3,
      "end_line": 17,
      "functions": [
        {
          "name": "traverse",
          "type": "function",
          "start_line": 8,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func traverse(): Unit {\n        left?.traverse()\n        print(value)\n        right?.traverse()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "left?.traverse()",
              "successors": [
                {
                  "id": 2,
                  "label": "print(value)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "right?.traverse()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    public mut func set(value: T) {\n        this.value = value\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut func set(value: T):",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.value = value",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "struct Node<T> where T <: ToString {\n    public Node(var value: T,\n        let left!: ?Node<T> = None,\n        let right!: ?Node<T> = None) {}\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "struct Node<T> where T <: ToString {",
          "successors": [
            {
              "id": 2,
              "label": "public Node(var value: T,",
              "successors": [
                {
                  "id": 3,
                  "label": "let left!: ?Node<T> = None,",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let right!: ?Node<T> = None) {}",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "label": "}",
              "successors": [
                {
                  "id": 6,
                  "label": "}",
                  "successors": [
                    {
                      "id": 7,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "// \u57fa\u4e8e struct \u548c\u6cdb\u578b\u5b9e\u73b0\u4e8c\u53c9\u6811\n// cjc version: 0.53.13\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "// \u57fa\u4e8e struct \u548c\u6cdb\u578b\u5b9e\u73b0\u4e8c\u53c9\u6811",
      "successors": [
        {
          "id": 2,
          "label": "// cjc version: 0.53.13",
          "successors": []
        }
      ]
    }
  ]
}