{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 32,
  "functions": [
    {
      "name": "assertJson",
      "type": "function",
      "start_line": 7,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "public func assertJson(a: JsonValue, b: JsonValue): Unit {\n    match ((a, b)) {\n        case (_: JsonNull, _: JsonNull) => return\n        case (a: JsonBool, b: JsonBool) => @Assert(a.getValue(), b.getValue())\n        case (a: JsonInt, b: JsonInt) => @Assert(a.getValue(), b.getValue())\n        case (a: JsonFloat, b: JsonFloat) => @Assert(a.getValue(), b.getValue())\n        case (a: JsonString, b: JsonString) => @Assert(a.getValue(), b.getValue())\n        case (a: JsonArray, b: JsonArray) =>\n            @Assert(a.size(), b.size())\n            for (i in 0..a.size()) {\n                assertJson(a.get(i).getOrThrow(), b.get(i).getOrThrow())\n            }\n        case (a: JsonObject, b: JsonObject) =>\n            @Assert(a.size(), b.size())\n            let fields = a.getFields()\n            for ((k, v) in fields) {\n                match (b.get(k)) {\n                    case Some(bv) => assertJson(v, bv)\n                    case None => @Fail(\"Field not found: \" + k)\n                }\n            }\n        case _ => @Fail(\"Different types: \" + a.toJsonString() + \" vs \" + b.toJsonString())\n    }\n\n    return\n}",
      "blocks": [
        {
          "id": 1,
          "label": "match ((a, b)) {",
          "successors": [
            {
              "id": 2,
              "label": "case (_: JsonNull, _: JsonNull) => return",
              "successors": []
            },
            {
              "id": 3,
              "label": "case (a: JsonBool, b: JsonBool) => @Assert(a.getValue(), b.getValue())",
              "successors": [
                {
                  "id": 10,
                  "label": "return",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "case (a: JsonInt, b: JsonInt) => @Assert(a.getValue(), b.getValue())",
              "successors": [
                {
                  "id": 10,
                  "label": "return",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "case (a: JsonFloat, b: JsonFloat) => @Assert(a.getValue(), b.getValue())",
              "successors": [
                {
                  "id": 10,
                  "label": "return",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "case (a: JsonString, b: JsonString) => @Assert(a.getValue(), b.getValue())",
              "successors": [
                {
                  "id": 10,
                  "label": "return",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "label": "case (a: JsonArray, b: JsonArray) =>",
              "successors": [
                {
                  "id": 8,
                  "label": "@Assert(a.size(), b.size())",
                  "successors": [
                    {
                      "id": 9,
                      "label": "for (i in 0..a.size()) {\n    assertJson(a.get(i).getOrThrow(), b.get(i).getOrThrow())\n}",
                      "successors": [
                        {
                          "id": 10,
                          "label": "return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "label": "case (a: JsonObject, b: JsonObject) =>",
              "successors": [
                {
                  "id": 12,
                  "label": "@Assert(a.size(), b.size())",
                  "successors": [
                    {
                      "id": 13,
                      "label": "let fields = a.getFields()",
                      "successors": [
                        {
                          "id": 14,
                          "label": "for ((k, v) in fields) {\n    match (b.get(k)) {\n        case Some(bv) => assertJson(v, bv)\n        case None => @Fail(\"Field not found: \" + k)\n    }\n}",
                          "successors": [
                            {
                              "id": 10,
                              "label": "return",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 15,
              "label": "case _ => @Fail(\"Different types: \" + a.toJsonString() + \" vs \" + b.toJsonString())",
              "successors": [
                {
                  "id": 10,
                  "label": "return",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "package json_cj.testutil\n\nimport std.unittest.*\nimport std.unittest.testmacro.{Assert, Fail}\nimport encoding.json.*\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package json_cj.testutil\n\nimport std.unittest.*\nimport std.unittest.testmacro.{Assert, Fail}\nimport encoding.json.*\n\n}",
      "successors": []
    }
  ]
}