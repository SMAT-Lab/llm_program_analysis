{
  "name": "csv4cj_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 150,
  "functions": [],
  "classes": [
    {
      "name": "CSVOutFormat",
      "type": "class",
      "start_line": 2,
      "end_line": 140,
      "functions": [
        {
          "name": "CSVOutFormat",
          "type": "function",
          "start_line": 44,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    CSVOutFormat(\n        delimiter: String,\n        quoteChar: Rune,\n        quoteMode: QuoteMode,\n        quotedColsIndex: Array<Int64>,\n        commentStart: Rune,\n        escape: Rune,\n        trim: Bool,\n        ignoreEmptyRecord: Bool,\n        recordSeparator: String,\n        header: Array<String>,\n        headerComments: Array<String>\n    ) {\n        this.delimiter = delimiter\n        this.delimiterRune = delimiter.toRuneArray()\n        this.quoteCharacter = quoteChar\n        this.quoteMode = quoteMode\n        this.quotedColsIndex = quotedColsIndex\n        this.trim = trim\n        this.ignoreEmptyRecord = ignoreEmptyRecord\n        this.recordSeparator = recordSeparator\n        this.commentMarker = commentStart\n        this.escapeCharacter = escape\n        this.header = header\n        this.headerComments = headerComments\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "CSVOutFormat(",
              "successors": [
                {
                  "id": 2,
                  "label": "    delimiter: String,",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    quoteChar: Rune,",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    quoteMode: QuoteMode,",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    quotedColsIndex: Array<Int64>,",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    commentStart: Rune,",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    escape: Rune,",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "    trim: Bool,",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "    ignoreEmptyRecord: Bool,",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "    recordSeparator: String,",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "    header: Array<String>,",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "    headerComments: Array<String>",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": ") {",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "    this.delimiter = delimiter",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "    this.delimiterRune = delimiter.toRuneArray()",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "    this.quoteCharacter = quoteChar",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "label": "    this.quoteMode = quoteMode",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 18,
                                                                                  "label": "    this.quotedColsIndex = quotedColsIndex",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 19,
                                                                                      "label": "    this.trim = trim",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 20,
                                                                                          "label": "    this.ignoreEmptyRecord = ignoreEmptyRecord",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 21,
                                                                                              "label": "    this.recordSeparator = recordSeparator",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 22,
                                                                                                  "label": "    this.commentMarker = commentStart",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 23,
                                                                                                      "label": "    this.escapeCharacter = escape",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 24,
                                                                                                          "label": "    this.header = header",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 25,
                                                                                                              "label": "    this.headerComments = headerComments",
                                                                                                              "successors": []
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setEscapeCharacter",
          "type": "function",
          "start_line": 70,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setEscapeCharacter(escapeCharacter: Rune) {\n        this.escapeCharacter = escapeCharacter\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setEscapeCharacter(escapeCharacter: Rune) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.escapeCharacter = escapeCharacter",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getEscapeCharacter",
          "type": "function",
          "start_line": 74,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getEscapeCharacter(): Rune {\n        return escapeCharacter\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getEscapeCharacter(): Rune {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return escapeCharacter",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setHeader",
          "type": "function",
          "start_line": 77,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setHeader(headerList: Array<String>) {\n        this.header = headerList\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setHeader(headerList: Array<String>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.header = headerList",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getHeader",
          "type": "function",
          "start_line": 81,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getHeader() {\n        return header\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getHeader() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return header",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setIgnoreEmptyRecord",
          "type": "function",
          "start_line": 84,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setIgnoreEmptyRecord(ignoreEmptyRecord: Bool) {\n        this.ignoreEmptyRecord = ignoreEmptyRecord\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setIgnoreEmptyRecord(ignoreEmptyRecord: Bool) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.ignoreEmptyRecord = ignoreEmptyRecord",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getIgnoreEmptyRecord",
          "type": "function",
          "start_line": 88,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getIgnoreEmptyRecord(): Bool {\n        return ignoreEmptyRecord\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getIgnoreEmptyRecord(): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return ignoreEmptyRecord",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setTrim",
          "type": "function",
          "start_line": 91,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setTrim(trim: Bool) {\n        this.trim = trim\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setTrim(trim: Bool) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.trim = trim",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getTrim",
          "type": "function",
          "start_line": 95,
          "end_line": 97,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getTrim(): Bool {\n        return trim\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getTrim(): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "return trim",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setQuoteCharacter",
          "type": "function",
          "start_line": 98,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setQuoteCharacter(quoteCharacter: Rune) {\n        this.quoteCharacter = quoteCharacter\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setQuoteCharacter(quoteCharacter: Rune) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.quoteCharacter = quoteCharacter",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getQuoteCharacter",
          "type": "function",
          "start_line": 102,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getQuoteCharacter(): Rune {\n        return quoteCharacter\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getQuoteCharacter(): Rune {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return quoteCharacter",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setQuoteMode",
          "type": "function",
          "start_line": 105,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setQuoteMode(quoteMode: QuoteMode) {\n        this.quoteMode = quoteMode\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setQuoteMode(quoteMode: QuoteMode) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.quoteMode = quoteMode",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return this",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getQuoteMode",
          "type": "function",
          "start_line": 109,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getQuoteMode(): QuoteMode {\n        return quoteMode\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getQuoteMode(): QuoteMode {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return quoteMode",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setDelimiter",
          "type": "function",
          "start_line": 112,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setDelimiter(outdelimiter: String) {\n        this.delimiter = outdelimiter\n        this.delimiterRune = outdelimiter.toRuneArray()\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setDelimiter(outdelimiter: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.delimiter = outdelimiter",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    this.delimiterRune = outdelimiter.toRuneArray()",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    return this",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getDelimiterString",
          "type": "function",
          "start_line": 117,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getDelimiterString(): String {\n        return delimiter\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getDelimiterString(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return delimiter",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getDelimiterRune",
          "type": "function",
          "start_line": 120,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getDelimiterRune(): Array<Rune> {\n        return delimiterRune\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getDelimiterRune(): Array<Rune> {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return delimiterRune",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setCommentMarker",
          "type": "function",
          "start_line": 123,
          "end_line": 126,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setCommentMarker(outcommentMarker: Rune) {\n        this.commentMarker = outcommentMarker\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setCommentMarker(outcommentMarker: Rune) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.commentMarker = outcommentMarker",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    return this",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getCommentMarker",
          "type": "function",
          "start_line": 127,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getCommentMarker(): Rune {\n        return commentMarker\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getCommentMarker(): Rune {",
              "successors": [
                {
                  "id": 2,
                  "label": "return commentMarker",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getRecordSeparator",
          "type": "function",
          "start_line": 130,
          "end_line": 132,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getRecordSeparator() {\n        return recordSeparator\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getRecordSeparator() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return recordSeparator",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setQuotedColsIndex",
          "type": "function",
          "start_line": 133,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setQuotedColsIndex(quotedColsIndex: Array<Int64>) {\n        this.quotedColsIndex = quotedColsIndex\n        return this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setQuotedColsIndex(quotedColsIndex: Array<Int64>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.quotedColsIndex = quotedColsIndex",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    return this",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getQuotedColsIndex",
          "type": "function",
          "start_line": 137,
          "end_line": 139,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getQuotedColsIndex() {\n        return quotedColsIndex\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getQuotedColsIndex() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return quotedColsIndex",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class CSVOutFormat {\n    // Header title\n    private var header: Array<String>\n    // array of header column names\n    private var headerComments: Array<String>\n    // Annotation symbols\n    private var commentMarker: Rune\n    // Separator\n    private var delimiter: String\n    // Separator\n    private var delimiterRune: Array<Rune>\n    // Escape character\n    private var escapeCharacter: Rune\n    // Reference symbol\n    private var quoteCharacter: Rune\n    // Record split string\n    private var recordSeparator: String\n    // Ignore records without values\n    private var ignoreEmptyRecord: Bool\n    // Whether to remove white space characters outside the content\n    private var trim: Bool\n    // Add column ordinal for reference symbol\n    private var quotedColsIndex: Array<Int64>\n    // Reference mode of output content\n    private var quoteMode: QuoteMode\n    public static prop DEFAULT: CSVOutFormat {\n        get() {\n            CSVOutFormat(\n                Constants.COMMA_STRING,\n                Constants.DOUBLE_QUOTE_CHAR,\n                QuoteMode.SpecialValue,\n                [],\n                Constants.COMMENT_CHAR,\n                Constants.BACKSLASH,\n                true,\n                true,\n                Constants.CRLF,\n                [],\n                []\n            )\n        }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class CSVOutFormat {",
          "successors": [
            {
              "id": 2,
              "label": "// Header title\nprivate var header: Array<String>",
              "successors": []
            },
            {
              "id": 3,
              "label": "// array of header column names\nprivate var headerComments: Array<String>",
              "successors": []
            },
            {
              "id": 4,
              "label": "// Annotation symbols\nprivate var commentMarker: Rune",
              "successors": []
            },
            {
              "id": 5,
              "label": "// Separator\nprivate var delimiter: String",
              "successors": []
            },
            {
              "id": 6,
              "label": "// Separator\nprivate var delimiterRune: Array<Rune>",
              "successors": []
            },
            {
              "id": 7,
              "label": "// Escape character\nprivate var escapeCharacter: Rune",
              "successors": []
            },
            {
              "id": 8,
              "label": "// Reference symbol\nprivate var quoteCharacter: Rune",
              "successors": []
            },
            {
              "id": 9,
              "label": "// Record split string\nprivate var recordSeparator: String",
              "successors": []
            },
            {
              "id": 10,
              "label": "// Ignore records without values\nprivate var ignoreEmptyRecord: Bool",
              "successors": []
            },
            {
              "id": 11,
              "label": "// Whether to remove white space characters outside the content\nprivate var trim: Bool",
              "successors": []
            },
            {
              "id": 12,
              "label": "// Add column ordinal for reference symbol\nprivate var quotedColsIndex: Array<Int64>",
              "successors": []
            },
            {
              "id": 13,
              "label": "// Reference mode of output content\nprivate var quoteMode: QuoteMode",
              "successors": []
            },
            {
              "id": 14,
              "label": "public static prop DEFAULT: CSVOutFormat {",
              "successors": [
                {
                  "id": 15,
                  "label": "get() {",
                  "successors": [
                    {
                      "id": 16,
                      "label": "CSVOutFormat(\n    Constants.COMMA_STRING,\n    Constants.DOUBLE_QUOTE_CHAR,\n    QuoteMode.SpecialValue,\n    [],\n    Constants.COMMENT_CHAR,\n    Constants.BACKSLASH,\n    true,\n    true,\n    Constants.CRLF,\n    [],\n    []\n)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "QuoteMode",
      "type": "class",
      "start_line": 141,
      "end_line": 150,
      "functions": [],
      "classes": [],
      "simplified_code": "public enum QuoteMode {\n    // All columns\n    All |\n    // Configure the specified column\n    CfgCols |\n    // Column values with special characters\n    SpecialValue |\n    // No reference, escape if there are special symbols\n    None\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum QuoteMode {",
          "successors": [
            {
              "id": 2,
              "label": "    // All columns\n    All |",
              "successors": []
            },
            {
              "id": 3,
              "label": "    // Configure the specified column\n    CfgCols |",
              "successors": []
            },
            {
              "id": 4,
              "label": "    // Column values with special characters\n    SpecialValue |",
              "successors": []
            },
            {
              "id": 5,
              "label": "    // No reference, escape if there are special symbols\n    None",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package csv4cj\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package csv4cj",
      "successors": []
    },
    {
      "id": 2,
      "label": "}",
      "successors": []
    },
    {
      "id": 3,
      "label": "}",
      "successors": []
    }
  ]
}