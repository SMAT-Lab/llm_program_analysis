{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 156,
  "functions": [],
  "classes": [
    {
      "name": "LogDataTransfer",
      "type": "class",
      "start_line": 7,
      "end_line": 156,
      "functions": [
        {
          "name": "sendRequest",
          "type": "function",
          "start_line": 20,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func sendRequest(id: String, request: Request): Unit {\n        fastLog(id, MessageType.REQUEST_METHOD(\"RQM\"), request.getMethod());\n        let url = request.getUrl().toString();\n        fastLog(id, MessageType.REQUEST_URL(\"RQU\"),url);\n        let nowSjc = Time.now().unixNano()\n        fastLog(id, MessageType.REQUEST_TIME(\"RQT\"), Time.now().toString());\n        let copy = request.newBuilder().build();\n        match(copy.getBody()){\n             case Some(v) => doSomeThingRequestBody(v,id)\n             case _ => ()\n        }\n        let headers = request.getHeaders()\n        for(header in headers){\n            let name: String = header[0]\n            let nameUpper = name.toAsciiUpper();\n            let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();\n            let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();\n            if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {\n                continue\n            }\n            let arrayList: ArrayList<String> = header[1]\n            if(arrayList.size>0){\n                if(arrayList.size == 1){\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());\n                }else{\n                    var strBuilder = StringBuilder();\n                    for(str in arrayList){\n                        strBuilder.append(str).append(\",\")\n                    }\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());\n                }\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func sendRequest(id: String, request: Request): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "fastLog(id, MessageType.REQUEST_METHOD(\"RQM\"), request.getMethod());",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let url = request.getUrl().toString();",
                      "successors": [
                        {
                          "id": 4,
                          "label": "fastLog(id, MessageType.REQUEST_URL(\"RQU\"),url);",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let nowSjc = Time.now().unixNano()",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "fastLog(id, MessageType.REQUEST_TIME(\"RQT\"), Time.now().toString());",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "let copy = request.newBuilder().build();",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "match(copy.getBody()){",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "case Some(v) => doSomeThingRequestBody(v,id)",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "let headers = request.getHeaders()",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "for(header in headers){",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "let name: String = header[0]",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "let nameUpper = name.toAsciiUpper();",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "label": "let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "label": "let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "label": "if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "label": "continue",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "id": 19,
                                                                          "label": "let arrayList: ArrayList<String> = header[1]",
                                                                          "successors": [
                                                                            {
                                                                              "id": 20,
                                                                              "label": "if(arrayList.size>0){",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 21,
                                                                                  "label": "if(arrayList.size == 1){",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 22,
                                                                                      "label": "fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());",
                                                                                      "successors": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "id": 23,
                                                                                  "label": "var strBuilder = StringBuilder();",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 24,
                                                                                      "label": "for(str in arrayList){",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 25,
                                                                                          "label": "strBuilder.append(str).append(\",\")",
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "id": 26,
                                                                                      "label": "fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());",
                                                                                      "successors": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 10,
                                              "label": "case _ => ()",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "let headers = request.getHeaders()",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "for(header in headers){",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "let name: String = header[0]",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "let nameUpper = name.toAsciiUpper();",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "label": "let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "label": "let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "label": "if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "label": "continue",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "id": 19,
                                                                          "label": "let arrayList: ArrayList<String> = header[1]",
                                                                          "successors": [
                                                                            {
                                                                              "id": 20,
                                                                              "label": "if(arrayList.size>0){",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 21,
                                                                                  "label": "if(arrayList.size == 1){",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 22,
                                                                                      "label": "fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());",
                                                                                      "successors": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "id": 23,
                                                                                  "label": "var strBuilder = StringBuilder();",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 24,
                                                                                      "label": "for(str in arrayList){",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 25,
                                                                                          "label": "strBuilder.append(str).append(\",\")",
                                                                                          "successors": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "id": 26,
                                                                                      "label": "fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());",
                                                                                      "successors": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "sendResponse",
          "type": "function",
          "start_line": 54,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "      public func sendResponse(id: String, response: Response): Unit {\n        let optionBody: Option<ResponseBody> = response.getBody()\n        match(optionBody){\n              case Some(v) => doSomeThingResponseBody(v,id)\n              case _ => ()\n        }\n        logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\n        let headers = response.getHeaders()\n        for(header in headers){\n                let name: String = header[0]\n                let arrayList : ArrayList<String> = header[1]\n                if(arrayList.size > 0){\n                    if(arrayList.size == 1){\n                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);\n                    }else{\n                        var strBuilder = StringBuilder();\n                        for(str in arrayList){\n                            strBuilder.append(str).append(\",\")\n                        }\n                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);\n                    }\n                }\n            }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func sendResponse(id: String, response: Response): Unit {\n  let optionBody: Option<ResponseBody> = response.getBody()",
              "successors": [
                {
                  "id": 2,
                  "label": "match(optionBody){",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case Some(v) => doSomeThingResponseBody(v,id)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\nlet headers = response.getHeaders()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "for(header in headers){",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "let name: String = header[0]\nlet arrayList : ArrayList<String> = header[1]",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "if(arrayList.size > 0){",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "if(arrayList.size == 1){",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 11,
                                          "label": "var strBuilder = StringBuilder();\nfor(str in arrayList){",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "strBuilder.append(str).append(\",\")",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "}\nlogWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "case _ => ()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\nlet headers = response.getHeaders()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "for(header in headers){",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "let name: String = header[0]\nlet arrayList : ArrayList<String> = header[1]",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "if(arrayList.size > 0){",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "if(arrayList.size == 1){",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 11,
                                          "label": "var strBuilder = StringBuilder();\nfor(str in arrayList){",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "strBuilder.append(str).append(\",\")",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "}\nlogWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "sendException",
          "type": "function",
          "start_line": 78,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "        public func sendException(id: String, ex: Exception): Unit {\n            logWithHandler(id, MessageType.RESPONSE_ERROR(\"REE\"), ex.message, 0);\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "public func sendException(id: String, ex: Exception): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    logWithHandler(id, MessageType.RESPONSE_ERROR(\"REE\"), ex.message, 0);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "sendDuration",
          "type": "function",
          "start_line": 81,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "        public func sendDuration(id: String, duration: Int64): Unit {\n            logWithHandler(id, MessageType.RESPONSE_TIME(\"RST\"), duration.toString(), 0);\n            logWithHandler(id, MessageType.RESPONSE_END(\"RSD\"), \"-->\", 0);\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "public func sendDuration(id: String, duration: Int64): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "logWithHandler(id, MessageType.RESPONSE_TIME(\"RST\"), duration.toString(), 0);",
                  "successors": [
                    {
                      "id": 3,
                      "label": "logWithHandler(id, MessageType.RESPONSE_END(\"RSD\"), \"-->\", 0);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fastLog",
          "type": "function",
          "start_line": 85,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "        private func fastLog(id: String, mType: MessageType, message: String): Unit {\n            let tag = LOG_PREFIX + DELIMITER + id + DELIMITER + mType.getValue();\n            printLog(tag,message)\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "private func fastLog(id: String, mType: MessageType, message: String): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let tag = LOG_PREFIX + DELIMITER + id + DELIMITER + mType.getValue();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "printLog(tag,message)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "printLog",
          "type": "function",
          "start_line": 89,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "        private func printLog(tag: String, message: String): Unit {\n            let logger: SimpleLogger = SimpleLogger()\n             //var s = File(\"../stdout8.log\", AccessMode.Write, OpenMode.Append)\n             //logger.setOutput(s)\n            logger.log(LogLevel.TRACE, tag+SPACE+SPACE+message)\n            logger.flush()\n            //s.close()\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "private func printLog(tag: String, message: String): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let logger: SimpleLogger = SimpleLogger()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "logger.log(LogLevel.TRACE, tag+SPACE+SPACE+message)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "logger.flush()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "doSomeThingResponseBody",
          "type": "function",
          "start_line": 97,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": "        private func doSomeThingResponseBody(body : ResponseBody,id: String): Unit {\n            let source = body.getString() //Array<UInt8>\n            let sourceSize = source.size\n            var strResponse = \"\"\n            if(sourceSize<BODY_BUFFER_SIZE){\n                strResponse = source.substring(0,sourceSize)\n            }else{\n                strResponse = source.substring(0,BODY_BUFFER_SIZE)\n            }\n            largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);\n        }",
          "blocks": [
            {
              "id": 1,
              "label": "private func doSomeThingResponseBody(body : ResponseBody,id: String): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let source = body.getString() //Array<UInt8>\nlet sourceSize = source.size\nvar strResponse = \"\"",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if(sourceSize<BODY_BUFFER_SIZE){",
                      "successors": [
                        {
                          "id": 4,
                          "label": "strResponse = source.substring(0,sourceSize)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "strResponse = source.substring(0,BODY_BUFFER_SIZE)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "logWithHandler",
          "type": "function",
          "start_line": 108,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "        private func logWithHandler(id: String, mType: MessageType, message: String, partsCount: Int64): Unit {\n                 let tag = LOG_PREFIX + DELIMITER + id + DELIMITER + mType.getValue();\n                 let logger: SimpleLogger = SimpleLogger()\n                 //var s = File(\"../stdout8.log\", AccessMode.Write, OpenMode.Append)\n                 //logger.setOutput(s)\n                 logger.log(LogLevel.TRACE, tag+SPACE+SPACE+message+SPACE+partsCount.toString())\n                 logger.flush()\n                 //s.close()\n            }",
          "blocks": [
            {
              "id": 1,
              "label": "private func logWithHandler(id: String, mType: MessageType, message: String, partsCount: Int64): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let tag = LOG_PREFIX + DELIMITER + id + DELIMITER + mType.getValue();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let logger: SimpleLogger = SimpleLogger()",
                      "successors": [
                        {
                          "id": 4,
                          "label": "logger.log(LogLevel.TRACE, tag+SPACE+SPACE+message+SPACE+partsCount.toString())",
                          "successors": [
                            {
                              "id": 5,
                              "label": "logger.flush()",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "doSomeThingRequestBody",
          "type": "function",
          "start_line": 117,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func doSomeThingRequestBody(body : RequestBody,id: String): Unit {\n         let mediaType = match(body.contentType()) {\n            case Some(m) => \"${m}\"\n            case None => \"\"\n         }\n         let contentLength = body.getContentLength()\n         if (contentLength != -1) {\n                fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());\n         }\n        fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)\n         let inputStream = body.get()\n         let bas = inputStream as ByteArrayStream\n         match(bas){\n            case Some(v) => doSomeThingRequestBodyLog(v,id)\n            case _ => ()\n         }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func doSomeThingRequestBody(body : RequestBody,id: String): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let mediaType = match(body.contentType()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case Some(m) => \"${m}\"",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let contentLength = body.getContentLength()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if (contentLength != -1) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "let inputStream = body.get()",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "let bas = inputStream as ByteArrayStream",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "match(bas){",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "case Some(v) => doSomeThingRequestBodyLog(v,id)",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 14,
                                                          "label": "case _ => ()",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "case None => \"\"",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let contentLength = body.getContentLength()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if (contentLength != -1) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "}",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "let inputStream = body.get()",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "let bas = inputStream as ByteArrayStream",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "match(bas){",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "case Some(v) => doSomeThingRequestBodyLog(v,id)",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 14,
                                                          "label": "case _ => ()",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "doSomeThingRequestBodyLog",
          "type": "function",
          "start_line": 134,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func doSomeThingRequestBodyLog(bas :ByteArrayStream, id: String): Unit{\n         largeLog(id, MessageType. REQUEST_BODY(\"RQB\"),String.fromUtf8(bas.readToEnd()));\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func doSomeThingRequestBodyLog(bas: ByteArrayStream, id: String): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    largeLog(id, MessageType.REQUEST_BODY(\"RQB\"), String.fromUtf8(bas.readToEnd()));",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "largeLog",
          "type": "function",
          "start_line": 137,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func largeLog(id: String, mType: MessageType, content: String): Unit {\n        let contentLength = content.size\n        if (contentLength > LOG_LENGTH) {\n            let parts = contentLength / LOG_LENGTH\n            for (i in 0..parts) {\n                let start = i * LOG_LENGTH\n                var end = start + LOG_LENGTH\n                if (end > contentLength) {\n                    let printLength = contentLength+LOG_LENGTH-end\n                    logWithHandler(id, mType, content.substring(start, printLength), parts);\n                }else{\n                    let printLength  = LOG_LENGTH\n                    logWithHandler(id, mType, content.substring(start, LOG_LENGTH), parts);\n                }\n            }\n        } else {\n            logWithHandler(id, mType, content, 0);\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let contentLength = content.size",
              "successors": [
                {
                  "id": 2,
                  "label": "if (contentLength > LOG_LENGTH):",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let parts = contentLength / LOG_LENGTH",
                      "successors": [
                        {
                          "id": 4,
                          "label": "for (i in 0..parts):",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let start = i * LOG_LENGTH\nvar end = start + LOG_LENGTH",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "if (end > contentLength):",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "let printLength = contentLength+LOG_LENGTH-end\nlogWithHandler(id, mType, content.substring(start, printLength), parts);",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": null,
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 8,
                                      "label": "let printLength  = LOG_LENGTH\nlogWithHandler(id, mType, content.substring(start, LOG_LENGTH), parts);",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": null,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "logWithHandler(id, mType, content, 0);",
                      "successors": [
                        {
                          "id": 11,
                          "label": null,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class LogDataTransfer <: DataTransfer{\n    private static let LOG_LENGTH = 4000\n    private static let SLOW_DOWN_PARTS_AFTER = 20\n    private static let BODY_BUFFER_SIZE = 1024 * 1024 * 10\n    private static let LOG_PREFIX = \"OKPRFL\"\n    private static let DELIMITER = \"_\"\n    private static let HEADER_DELIMITER = ':'\n    private static let SPACE = ' '\n    private static let KEY_TAG = \"TAG\"\n    private static let KEY_VALUE = \"VALUE\"\n    private static let KEY_PARTS_COUNT = \"PARTS_COUNT\"\n    private static let CONTENT_TYPE = \"Content-Type\"\n    private static let CONTENT_LENGTH = \"Content-Length\"\n    }\n    }\n        }\n        }\n        }\n        }\n        }\n            }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class LogDataTransfer <: DataTransfer{",
          "successors": [
            {
              "id": 2,
              "label": "private static let LOG_LENGTH = 4000",
              "successors": [
                {
                  "id": 3,
                  "label": "private static let SLOW_DOWN_PARTS_AFTER = 20",
                  "successors": [
                    {
                      "id": 4,
                      "label": "private static let BODY_BUFFER_SIZE = 1024 * 1024 * 10",
                      "successors": [
                        {
                          "id": 5,
                          "label": "private static let LOG_PREFIX = \"OKPRFL\"",
                          "successors": [
                            {
                              "id": 6,
                              "label": "private static let DELIMITER = \"_\"",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "private static let HEADER_DELIMITER = ':'",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "private static let SPACE = ' '",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "private static let KEY_TAG = \"TAG\"",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "private static let KEY_VALUE = \"VALUE\"",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "private static let KEY_PARTS_COUNT = \"PARTS_COUNT\"",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "private static let CONTENT_TYPE = \"Content-Type\"",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "private static let CONTENT_LENGTH = \"Content-Length\"",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package okhttpprofiler\nfrom std import log.*\nfrom std import io.*\nfrom std import collection.*\nfrom net import http.Header\nfrom okhttp import okhttp.*\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package okhttpprofiler",
      "successors": [
        {
          "id": 2,
          "label": "from std import log.*",
          "successors": [
            {
              "id": 3,
              "label": "from std import io.*",
              "successors": [
                {
                  "id": 4,
                  "label": "from std import collection.*",
                  "successors": [
                    {
                      "id": 5,
                      "label": "from net import http.Header",
                      "successors": [
                        {
                          "id": 6,
                          "label": "from okhttp import okhttp.*",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}