{
  "name": "cangjie_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 47,
  "functions": [],
  "classes": [
    {
      "name": "Buffer",
      "type": "class",
      "start_line": 5,
      "end_line": 47,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(socket: TcpSocket) {\n        this.socket = socket\n        this.buf = Array<Byte>(4096, item: 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(socket: TcpSocket) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.socket = socket",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    this.buf = Array<Byte>(4096, item: 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readNext",
          "type": "function",
          "start_line": 16,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readNext(need: Int64): Array<Byte> {\n        if (length < need) {\n            fill(need)\n        }\n        \n        let data = buf[idx .. idx + need]\n        idx += need\n        length -= need\n\n        return data\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readNext(need: Int64): Array<Byte> {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (length < need) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "fill(need)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "}",
                          "successors": [
                            {
                              "id": 5,
                              "label": "let data = buf[idx .. idx + need]",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "idx += need",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "length -= need",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "return data",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fill",
          "type": "function",
          "start_line": 28,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func fill(need: Int64) {\n        if (length > 0 && idx > 0) {\n            buf.copyTo(buf, idx, 0, length - idx)\n        }\n        if (need > buf.size) {\n            grow(need)\n        }\n        idx = 0\n        while (length < need) {\n            var readSize = socket.read(buf[length..])\n            length += readSize\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "if (length > 0 && idx > 0) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    buf.copyTo(buf, idx, 0, length - idx)",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "if (need > buf.size) {",
              "successors": [
                {
                  "id": 4,
                  "label": "    grow(need)",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "idx = 0",
              "successors": [
                {
                  "id": 6,
                  "label": "while (length < need) {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    var readSize = socket.read(buf[length..])",
                      "successors": [
                        {
                          "id": 8,
                          "label": "    length += readSize",
                          "successors": [
                            {
                              "id": 6,
                              "label": "while (length < need) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "grow",
          "type": "function",
          "start_line": 42,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func grow(need: Int64) {\n        let newBuf = Array<Byte>(need, item: 0)\n        buf.copyTo(newBuf, 0, 0, length)\n        this.buf = newBuf\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func grow(need: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "let newBuf = Array<Byte>(need, item: 0)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "buf.copyTo(newBuf, 0, 0, length)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.buf = newBuf",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Buffer {\n    private var idx: Int64 = 0\n    private var length: Int64 = 0\n    private var buf: Array<Byte>\n    private let socket: TcpSocket\n\n    }\n\n    }\n\n    }\n\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package cangjieWeb.mysql\n\nimport std.net.{TcpSocket}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package cangjieWeb.mysql",
      "successors": [
        {
          "id": 2,
          "label": "import std.net.{TcpSocket}",
          "successors": []
        }
      ]
    }
  ]
}