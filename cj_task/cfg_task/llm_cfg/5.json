{
  "name": "json_cj.helper",
  "type": "CFG",
  "start_line": 1,
  "end_line": 182,
  "functions": [
    {
      "name": "matchValue",
      "type": "function",
      "start_line": 130,
      "end_line": 136,
      "functions": [],
      "classes": [],
      "simplified_code": "func matchValue<T>(v: T): JsonValue {\n    match (v) {\n        case vv: ToJson => return vv.toJson()\n        case vv: ToJsonValue => return vv.toJsonValue()\n        case _ => throw Exception(\"Value must implement ToJson or ToJsonValue\")\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "match (v) {",
          "successors": [
            {
              "id": 2,
              "label": "case vv: ToJson => return vv.toJson()",
              "successors": []
            },
            {
              "id": 3,
              "label": "case vv: ToJsonValue => return vv.toJsonValue()",
              "successors": []
            },
            {
              "id": 4,
              "label": "case _ => throw Exception(\"Value must implement ToJson or ToJsonValue\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "castJsonValue",
      "type": "function",
      "start_line": 172,
      "end_line": 174,
      "functions": [],
      "classes": [],
      "simplified_code": "public func castJsonValue(t: ToJsonValue): JsonValue {\n    return t.toJsonValue()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func castJsonValue(t: ToJsonValue): JsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "    return t.toJsonValue()",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "castJsonValue",
      "type": "function",
      "start_line": 176,
      "end_line": 178,
      "functions": [],
      "classes": [],
      "simplified_code": "public func castJsonValue(t: JsonValue): JsonValue {\n    return t\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func castJsonValue(t: JsonValue): JsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "    return t",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "castJsonValue",
      "type": "function",
      "start_line": 180,
      "end_line": 182,
      "functions": [],
      "classes": [],
      "simplified_code": "public func castJsonValue(t: ToJson): JsonValue {\n    return t.toJson()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func castJsonValue(t: ToJson): JsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "    return t.toJson()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ToJsonValue",
      "type": "class",
      "start_line": 6,
      "end_line": 8,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 7,
          "end_line": 7,
          "functions": [],
          "classes": [],
          "simplified_code": "    func toJsonValue(): JsonValue",
          "blocks": [
            {
              "id": 1,
              "label": "func toJsonValue():",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public interface ToJsonValue {\n    func toJsonValue(): JsonValue\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public interface ToJsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "    func toJsonValue(): JsonValue",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Bool",
      "type": "class",
      "start_line": 10,
      "end_line": 14,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 11,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonBool(this)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonBool(this)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Bool <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Bool <: ToJsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Int8",
      "type": "class",
      "start_line": 16,
      "end_line": 20,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 17,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Int8 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Int8 <: ToJsonValue {",
          "successors": []
        }
      ]
    },
    {
      "name": "Int16",
      "type": "class",
      "start_line": 22,
      "end_line": 26,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 23,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Int16 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Int16 <: ToJsonValue {",
          "successors": []
        }
      ]
    },
    {
      "name": "Int32",
      "type": "class",
      "start_line": 28,
      "end_line": 32,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 29,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Int32 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Int32 <: ToJsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Int64",
      "type": "class",
      "start_line": 34,
      "end_line": 38,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 35,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(this)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(this)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Int64 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Int64 <: ToJsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "IntNative",
      "type": "class",
      "start_line": 40,
      "end_line": 44,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 41,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend IntNative <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend IntNative <: ToJsonValue {",
          "successors": []
        }
      ]
    },
    {
      "name": "UInt8",
      "type": "class",
      "start_line": 46,
      "end_line": 50,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 47,
          "end_line": 49,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend UInt8 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend UInt8 <: ToJsonValue { }",
          "successors": []
        }
      ]
    },
    {
      "name": "UInt16",
      "type": "class",
      "start_line": 52,
      "end_line": 56,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 53,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend UInt16 <: ToJsonValue {\n    }\n}",
      "blocks": []
    },
    {
      "name": "UInt32",
      "type": "class",
      "start_line": 58,
      "end_line": 62,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 59,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend UInt32 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend UInt32 <: ToJsonValue {\n    }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "UInt64",
      "type": "class",
      "start_line": 64,
      "end_line": 68,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 65,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend UInt64 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend UInt64 <: ToJsonValue {",
          "successors": []
        }
      ]
    },
    {
      "name": "UIntNative",
      "type": "class",
      "start_line": 70,
      "end_line": 74,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 71,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonInt(Int64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonInt(Int64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend UIntNative <: ToJsonValue {\n    }\n}",
      "blocks": []
    },
    {
      "name": "Float16",
      "type": "class",
      "start_line": 76,
      "end_line": 80,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 77,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonFloat(Float64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonFloat(Float64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Float16 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Float16 <: ToJsonValue {\n    }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Float32",
      "type": "class",
      "start_line": 82,
      "end_line": 86,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 83,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonFloat(Float64(this))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonFloat(Float64(this))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Float32 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Float32 <: ToJsonValue {",
          "successors": []
        }
      ]
    },
    {
      "name": "Float64",
      "type": "class",
      "start_line": 88,
      "end_line": 92,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 89,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonFloat(this)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "return JsonFloat(this)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend Float64 <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend Float64 <: ToJsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "    }",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "String",
      "type": "class",
      "start_line": 94,
      "end_line": 98,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 95,
          "end_line": 97,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        return JsonString(this)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return JsonString(this)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend String <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend String <: ToJsonValue { }",
          "successors": []
        }
      ]
    },
    {
      "name": "Array<T>",
      "type": "class",
      "start_line": 100,
      "end_line": 108,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 101,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        let arr = JsonArray()\n        for (i in this) {\n            arr.add(i.toJsonValue())\n        }\n        return arr\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "let arr = JsonArray()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (i in this) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "arr.add(i.toJsonValue())",
                          "successors": [
                            {
                              "id": 3,
                              "label": "for (i in this) {",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "arr.add(i.toJsonValue())",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "return arr",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<T> Array<T> <: ToJsonValue where T <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend<T> Array<T> <: ToJsonValue where T <: ToJsonValue {",
          "successors": []
        }
      ]
    },
    {
      "name": "ArrayList<T>",
      "type": "class",
      "start_line": 110,
      "end_line": 118,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 111,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        let arr = JsonArray()\n        for (i in this) {\n            arr.add(i.toJsonValue())\n        }\n        return arr\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "let arr = JsonArray()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (i in this) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "arr.add(i.toJsonValue())",
                          "successors": [
                            {
                              "id": 3,
                              "label": "for (i in this) {",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "return arr",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<T> ArrayList<T> <: ToJsonValue where T <: ToJsonValue {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend<T> ArrayList<T> <: ToJsonValue where T <: ToJsonValue {",
          "successors": [
            {
              "id": 2,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "LinkedList<T>",
      "type": "class",
      "start_line": 120,
      "end_line": 128,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 121,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        let arr = JsonArray()\n        for (i in this) {\n            arr.add(i.toJsonValue())\n        }\n        return arr\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "let arr = JsonArray()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for (i in this) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "arr.add(i.toJsonValue())",
                          "successors": [
                            {
                              "id": 5,
                              "label": "return arr",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<T> LinkedList<T> <: ToJsonValue where T <: ToJsonValue {\n    }\n}",
      "blocks": []
    },
    {
      "name": "Option<K>",
      "type": "class",
      "start_line": 138,
      "end_line": 145,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 139,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        match (this) {\n            case Some(v) => return matchValue(v)\n            case None => return JsonNull()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "match (this) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case Some(v) => return matchValue(v)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "case None => return JsonNull()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<K> Option<K> <: ToJsonValue {\n    }\n}",
      "blocks": []
    },
    {
      "name": "TreeMap<K, V>",
      "type": "class",
      "start_line": 148,
      "end_line": 158,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 149,
          "end_line": 157,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        let obj = JsonObject()\n        \n        for ((k,v) in this) {\n            obj.put(k.toString(), matchValue(v))\n        }\n\n        return obj\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let obj = JsonObject()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    for ((k,v) in this) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        obj.put(k.toString(), matchValue(v))",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "    }",
                      "successors": [
                        {
                          "id": 6,
                          "label": "    return obj",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<K, V> TreeMap<K, V> <: ToJsonValue where K <: ToString & Equatable<K> {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend<K, V> TreeMap<K, V> <: ToJsonValue where K <: ToString & Equatable<K> {",
          "successors": []
        }
      ]
    },
    {
      "name": "HashMap<K, V>",
      "type": "class",
      "start_line": 160,
      "end_line": 170,
      "functions": [
        {
          "name": "toJsonValue",
          "type": "function",
          "start_line": 161,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJsonValue(): JsonValue {\n        let obj = JsonObject()\n        \n        for ((k,v) in this) {\n            obj.put(k.toString(), matchValue(v))\n        }\n\n        return obj\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJsonValue(): JsonValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "let obj = JsonObject()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for ((k,v) in this) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "obj.put(k.toString(), matchValue(v))",
                          "successors": [
                            {
                              "id": 5,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "return obj",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<K, V> HashMap<K, V> <: ToJsonValue where K <: ToString & Equatable<K> {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend<K, V> HashMap<K, V> <: ToJsonValue where K <: ToString & Equatable<K> {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package json_cj.helper\n\nimport std.collection.*\nimport encoding.json.*\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n\n}\n\n}\n\n}\n\n}\n\n}",
  "blocks": []
}