{
  "name": "SimpleJsonReader",
  "type": "CFG",
  "start_line": 1,
  "end_line": 26,
  "functions": [],
  "classes": [
    {
      "name": "JsonChainTest",
      "type": "class",
      "start_line": 7,
      "end_line": 26,
      "functions": [
        {
          "name": "testExist",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testExist() {        \n        @Expect(json[\"struct\"][\"key\"].stringValue, \"value\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testExist() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(json[\"struct\"][\"key\"].stringValue, \"value\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testNotExist",
          "type": "function",
          "start_line": 23,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testNotExist() {        \n        @Expect(json[\"a\"][\"b\"][99][\"c\"][\"*\"][\"@\"][-1].stringValue, \"\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testNotExist() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(json[\"a\"][\"b\"][99][\"c\"][\"*\"][\"@\"][-1].stringValue, \"\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class JsonChainTest {\n\n    private let json = Json(str: #\"\n    {\n        \"array\": [1, 2, 3],\n        \"struct\": {\n            \"key\": \"value\"\n        }\n    }\"#)\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class JsonChainTest {",
          "successors": [
            {
              "id": 2,
              "label": "private let json = Json(str: #\"\"\"{\"array\": [1, 2, 3],\"struct\": {\"key\": \"value\"}}\"\"\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "@TestCase",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package SimpleJsonReader\n\nimport std.unittest.*\nimport std.unittest.testmacro.*\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package SimpleJsonReader",
      "successors": [
        {
          "id": 2,
          "label": "import std.unittest.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.unittest.testmacro.*",
              "successors": []
            }
          ]
        },
        {
          "id": 4,
          "label": "@Test",
          "successors": [
            {
              "id": 5,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}