{
  "name": "enum_enhance.test",
  "type": "CFG",
  "start_line": 1,
  "end_line": 58,
  "functions": [],
  "classes": [
    {
      "name": "Color2",
      "type": "class",
      "start_line": 8,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": "public enum Color2 {\n    | Red\n    | Green(Bool)\n    | Blue(Rune)\n    | RGBA(UInt8, UInt8, UInt8, Color2)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum Color2 {",
          "successors": [
            {
              "id": 2,
              "label": "| Red",
              "successors": [
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "label": "| Green(Bool)",
              "successors": [
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "| Blue(Rune)",
              "successors": [
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "| RGBA(UInt8, UInt8, UInt8, Color2)",
              "successors": [
                {
                  "id": 6,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "ToStringEnumTest",
      "type": "class",
      "start_line": 18,
      "end_line": 58,
      "functions": [
        {
          "name": "noArgTest",
          "type": "function",
          "start_line": 20,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    func noArgTest(): Unit {\n        let red = Color2.Red\n        @Expect(red.toString(true), 'Color2.Red')\n        @Expect(red.toString(), 'Red')\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func noArgTest(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let red = Color2.Red",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    @Expect(red.toString(true), 'Color2.Red')",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    @Expect(red.toString(), 'Red')",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "runeTest",
          "type": "function",
          "start_line": 27,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    func runeTest(): Unit {\n        let blue1 = Color2.Blue(r'\\\\')\n        let blue2 = Color2.Blue(r'$')\n        @Expect(blue1.toString(true), 'Color2.Blue(\\\\)')\n        @Expect(blue2.toString(true), 'Color2.Blue($)')\n        @Expect(blue1.toString(), 'Blue(\\\\)')\n        @Expect(blue2.toString(), 'Blue($)')\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func runeTest(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let blue1 = Color2.Blue(r'\\\\')\nlet blue2 = Color2.Blue(r'$')",
                  "successors": [
                    {
                      "id": 3,
                      "label": "@Expect(blue1.toString(true), 'Color2.Blue(\\\\)')",
                      "successors": [
                        {
                          "id": 4,
                          "label": "@Expect(blue2.toString(true), 'Color2.Blue($)')",
                          "successors": [
                            {
                              "id": 5,
                              "label": "@Expect(blue1.toString(), 'Blue(\\\\)')",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "@Expect(blue2.toString(), 'Blue($)')",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "noNestedPrimTest",
          "type": "function",
          "start_line": 37,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    func noNestedPrimTest(): Unit {\n        let green1 = Color2.Green(false)\n        let green2 = Color2.Green(true)\n        @Expect(green1.toString(true), 'Color2.Green(false)')\n        @Expect(green2.toString(true), 'Color2.Green(true)')\n        @Expect(green1.toString(), 'Green(false)')\n        @Expect(green2.toString(), 'Green(true)')\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func noNestedPrimTest(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let green1 = Color2.Green(false)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    let green2 = Color2.Green(true)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    @Expect(green1.toString(true), 'Color2.Green(false)')",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    @Expect(green2.toString(true), 'Color2.Green(true)')",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    @Expect(green1.toString(), 'Green(false)')",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    @Expect(green2.toString(), 'Green(true)')",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "NestedTest",
          "type": "function",
          "start_line": 47,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    func NestedTest(): Unit {\n        let rgba1 = Color2.RGBA(23, 54, 67, Color2.Red)\n        let rgba2 = Color2.RGBA(2, 4, 6, Green(true))\n        let rgba3 = Color2.RGBA(9, 3, 12, rgba2)\n        @Expect(rgba1.toString(true), 'Color2.RGBA(23, 54, 67, Color2.Red)')\n        @Expect(rgba2.toString(true), 'Color2.RGBA(2, 4, 6, Color2.Green(true))')\n        @Expect(rgba3.toString(true), 'Color2.RGBA(9, 3, 12, Color2.RGBA(2, 4, 6, Color2.Green(true)))')\n        @Expect(rgba1.toString(), 'RGBA(23, 54, 67, Red)')\n        @Expect(rgba2.toString(), 'RGBA(2, 4, 6, Green(true))')\n        @Expect(rgba3.toString(), 'RGBA(9, 3, 12, RGBA(2, 4, 6, Green(true)))')\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let rgba1 = Color2.RGBA(23, 54, 67, Color2.Red)",
              "successors": [
                {
                  "id": 2,
                  "label": "let rgba2 = Color2.RGBA(2, 4, 6, Green(true))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let rgba3 = Color2.RGBA(9, 3, 12, rgba2)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "@Expect(rgba1.toString(true), 'Color2.RGBA(23, 54, 67, Color2.Red)')",
                          "successors": [
                            {
                              "id": 5,
                              "label": "@Expect(rgba2.toString(true), 'Color2.RGBA(2, 4, 6, Color2.Green(true))')",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "@Expect(rgba3.toString(true), 'Color2.RGBA(9, 3, 12, Color2.RGBA(2, 4, 6, Color2.Green(true)))')",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "@Expect(rgba1.toString(), 'RGBA(23, 54, 67, Red)')",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "@Expect(rgba2.toString(), 'RGBA(2, 4, 6, Green(true))')",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "@Expect(rgba3.toString(), 'RGBA(9, 3, 12, RGBA(2, 4, 6, Green(true)))')",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ToStringEnumTest {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class ToStringEnumTest {",
          "successors": [
            {
              "id": 2,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 3,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 4,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 5,
              "label": "@TestCase",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package enum_enhance.test\n\n// import std.unittest.testmacro.*\n// import std.unittest.*\nimport enum_enhance.{ToStringEnum, EquatableEnum}\n\n@ToStringEnum\n}\n\n\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package enum_enhance.test",
      "successors": [
        {
          "id": 2,
          "label": "import enum_enhance.{ToStringEnum, EquatableEnum}",
          "successors": []
        }
      ]
    }
  ]
}