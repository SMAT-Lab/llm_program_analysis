{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [],
  "classes": [
    {
      "name": "Context",
      "type": "class",
      "start_line": 6,
      "end_line": 30,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 13,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(attrs: Tokens, input: Tokens) {\n        this.attrs = attrs\n        this.input = input\n        this.structDecl = match (parseDecl(input)) {\n            case d: StructDecl => d\n            case _ =>\n                diagReport(DiagReportLevel.ERROR, input, \"\u5b8f\u4ec5\u9002\u7528\u4e8e\u7ed3\u6784\u4f53\", \"\u8bf7\u68c0\u67e5\u5b8f\u662f\u5426\u4f5c\u7528\u5728\u7ed3\u6784\u4f53\u4e0a\")\n                throw Exception(\"\u4e0d\u652f\u6301\u7684\u7c7b\u578b\")\n        }\n        if (!findInterface(\"Serializable\", this.structDecl)) {\n            diagReport(DiagReportLevel.ERROR, input, \"\u7ed3\u6784\u4f53\u9700\u8981\u58f0\u660e Serializable \u63a5\u53e3\", \"\u8bf7\u68c0\u67e5\u7ed3\u6784\u4f53\u662f\u5426\u58f0\u660e\u8981\u5b9e\u73b0 Serializable \u63a5\u53e3\")\n            throw Exception(\"\u672a\u58f0\u660e Serializable \u63a5\u53e3\")\n        }\n        let visitor = StructDeclVisitor()\n        this.structDecl.traverse(visitor)\n        this.valDecls = visitor.varDecls.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "this.attrs = attrs\nthis.input = input",
              "successors": [
                {
                  "id": 2,
                  "label": "this.structDecl = match (parseDecl(input))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case d: StructDecl => d",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (!findInterface(\"Serializable\", this.structDecl))",
                          "successors": [
                            {
                              "id": 7,
                              "label": "diagReport(DiagReportLevel.ERROR, input, \"\u7ed3\u6784\u4f53\u9700\u8981\u58f0\u660e Serializable \u63a5\u53e3\", \"\u8bf7\u68c0\u67e5\u7ed3\u6784\u4f53\u662f\u5426\u58f0\u660e\u8981\u5b9e\u73b0 Serializable \u63a5\u53e3\")\nthrow Exception(\"\u672a\u58f0\u660e Serializable \u63a5\u53e3\")",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "let visitor = StructDeclVisitor()\nthis.structDecl.traverse(visitor)\nthis.valDecls = visitor.varDecls.toArray()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "case _",
                      "successors": [
                        {
                          "id": 5,
                          "label": "diagReport(DiagReportLevel.ERROR, input, \"\u5b8f\u4ec5\u9002\u7528\u4e8e\u7ed3\u6784\u4f53\", \"\u8bf7\u68c0\u67e5\u5b8f\u662f\u5426\u4f5c\u7528\u5728\u7ed3\u6784\u4f53\u4e0a\")\nthrow Exception(\"\u4e0d\u652f\u6301\u7684\u7c7b\u578b\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Context {\n\n    let attrs: Tokens\n    let input: Tokens\n    let structDecl: StructDecl\n    let valDecls: Array<VarDecl>\n    \n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Context {",
          "successors": [
            {
              "id": 2,
              "label": "    let attrs: Tokens",
              "successors": [
                {
                  "id": 3,
                  "label": "    let input: Tokens",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    let structDecl: StructDecl",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    let valDecls: Array<VarDecl>",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "macro package Macro_JsonSerializable.macros\n\nimport std.ast.*\n\n// \u751f\u6210\u4e0a\u4e0b\u6587\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros",
      "successors": [
        {
          "id": 2,
          "label": "import std.ast.*",
          "successors": [
            {
              "id": 3,
              "label": "// \u751f\u6210\u4e0a\u4e0b\u6587",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}