{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 35,
  "functions": [
    {
      "name": "task",
      "type": "function",
      "start_line": 9,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "simplified_code": "func task(): Int64 {\n    var n: Int64 = 0\n    let random = Random()\n    for (_ in 0..M) {\n        let x = random.nextFloat64()\n        let y = random.nextFloat64()\n        if ((x - 0.5) ** 2 + (y - 0.5) ** 2 < 0.25) {\n            n++\n        }\n    }\n    return n\n}",
      "blocks": [
        {
          "id": 1,
          "label": "var n: Int64 = 0",
          "successors": [
            {
              "id": 2,
              "label": "let random = Random()",
              "successors": [
                {
                  "id": 3,
                  "label": "for (_ in 0..M) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let x = random.nextFloat64()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let y = random.nextFloat64()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if ((x - 0.5) ** 2 + (y - 0.5) ** 2 < 0.25) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "n++",
                                  "successors": [
                                    {
                                      "id": 3,
                                      "label": "for (_ in 0..M) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 3,
                              "label": "for (_ in 0..M) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 8,
          "label": "return n",
          "successors": []
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 22,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let futures = ArrayList<Future<Int64>>()\n    for (_ in 0..N) {\n        let future = spawn { task() }\n        futures.append(future)\n    }\n    var n = 0\n    for (future in futures) {\n        n += future.get()\n    }\n    let pi = Float64(n) / Float64(M * N) * 4.0\n    println(\"\u03c0 \u2248 ${pi}\")\n    println(\"deviation: ${abs(Float64.PI - pi)}\")\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "let futures = ArrayList<Future<Int64>>()",
              "successors": [
                {
                  "id": 3,
                  "label": "for (_ in 0..N) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let future = spawn { task() }",
                      "successors": [
                        {
                          "id": 5,
                          "label": "futures.append(future)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "var n = 0",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "for (future in futures) {",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "n += future.get()",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "}",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "let pi = Float64(n) / Float64(M * N) * 4.0",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "println(\"\u03c0 \u2248 ${pi}\")",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "println(\"deviation: ${abs(Float64.PI - pi)}\")",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "}",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// \u57fa\u4e8e\u4ed3\u9889\u5e76\u53d1\u673a\u5236\uff0c\u5728\u591a\u7ebf\u7a0b\u4e2d\u968f\u673a\u6295\u70b9\u4f30\u7b97\u5706\u5468\u7387\u7684\u503c\n// cjc version: 0.53.13\nimport std.collection.*\nimport std.random.*\nimport std.math.*\n\nconst M = 200000\nconst N = 16\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.collection.*",
      "successors": [
        {
          "id": 2,
          "label": "import std.random.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.math.*",
              "successors": [
                {
                  "id": 4,
                  "label": "const M = 200000",
                  "successors": [
                    {
                      "id": 5,
                      "label": "const N = 16",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "const N = 16",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}