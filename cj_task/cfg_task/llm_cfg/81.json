{
  "name": "opds_cj.path.opds.v2.search",
  "type": "CFG",
  "start_line": 1,
  "end_line": 65,
  "functions": [
    {
      "name": "pathLoad",
      "type": "function",
      "start_line": 47,
      "end_line": 65,
      "functions": [],
      "classes": [],
      "simplified_code": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/opds/v2/search\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var query = \"\"\n            match (httpContext.request.url.query) {\n                case Some(x) => query = x.trimStart(\"query=\")\n                case None => ()\n            }\n            var cataLog = Search(query, host: host)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(cataLog.toJson())\n        }\n    )\n\n    return pathMap\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func pathLoad(): PathMap {",
          "successors": [
            {
              "id": 2,
              "label": "var pathMap = PathMap(\n        \"/opds/v2/search\",\n        {\n            httpContext =>",
              "successors": [
                {
                  "id": 3,
                  "label": "let host = httpContext.request.headers.get(\"host\").toArray()[0]",
                  "successors": [
                    {
                      "id": 4,
                      "label": "var query = \"\"",
                      "successors": [
                        {
                          "id": 5,
                          "label": "match (httpContext.request.url.query) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "case Some(x) => query = x.trimStart(\"query=\")",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "var cataLog = Search(query, host: host)",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "httpContext.responseBuilder.body(cataLog.toJson())",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "case None => ()",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "var cataLog = Search(query, host: host)",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "httpContext.responseBuilder.body(cataLog.toJson())",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "label": "return pathMap",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Search",
      "type": "class",
      "start_line": 10,
      "end_line": 45,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(query: String, host!: String = \"127.0.0.1\") {\n        var now = DateTime.now()\n        metadata = Metadata(\"Search results\", modified: now.toString())\n        links = Links(host, \"catalog\", searchPage: true)\n        initSeries(query, host: host)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(query: String, host!: String = \"127.0.0.1\") {",
              "successors": [
                {
                  "id": 2,
                  "label": "var now = DateTime.now()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "metadata = Metadata(\"Search results\", modified: now.toString())",
                      "successors": [
                        {
                          "id": 4,
                          "label": "links = Links(host, \"catalog\", searchPage: true)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "initSeries(query, host: host)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "initSeries",
          "type": "function",
          "start_line": 21,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    func initSeries(query: String, host!: String = \"127.0.0.1\") {\n        var group = Group()\n        group.metadata = Metadata(\"Series\")\n        var obj = BookSeries.query(query)\n        for (i in obj) {\n            group\n                .navigation\n                .append(\n                    Link(title: i.name, href: \"http://${host}/opds/v2/series/${i.id}\", type_u: \"application/opds+json\"))\n        }\n        this.groups.append(group)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func initSeries(query: String, host!: String = \"127.0.0.1\") {",
              "successors": [
                {
                  "id": 2,
                  "label": "var group = Group()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "group.metadata = Metadata(\"Series\")",
                      "successors": [
                        {
                          "id": 4,
                          "label": "var obj = BookSeries.query(query)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "for (i in obj) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "group.navigation.append(Link(title: i.name, href: \"http://${host}/opds/v2/series/${i.id}\", type_u: \"application/opds+json\"))",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "this.groups.append(group)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 34,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJson(): String {\n        let stream = ByteBuffer()\n        let w = JsonWriter(stream)\n        w.startObject()\n        w.writeName(\"metadata\").writeValue(metadata)\n        w.writeName(\"links\").writeValue(links)\n        w.writeName(\"groups\").writeValue<ArrayList<Group>>(groups)\n        w.endObject()\n        w.flush()\n        return String.fromUtf8(readToEnd(stream))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "let stream = ByteBuffer()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let w = JsonWriter(stream)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "w.startObject()",
                          "successors": [
                            {
                              "id": 5,
                              "label": "w.writeName(\"metadata\").writeValue(metadata)",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "w.writeName(\"links\").writeValue(links)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "w.writeName(\"groups\").writeValue<ArrayList<Group>>(groups)",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "w.endObject()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "w.flush()",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "return String.fromUtf8(readToEnd(stream))",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Search {\n    var metadata: Metadata\n    var links: Links\n    var groups: ArrayList<Group> = ArrayList<Group>()\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Search {",
          "successors": [
            {
              "id": 2,
              "label": "var metadata: Metadata",
              "successors": []
            },
            {
              "id": 3,
              "label": "var links: Links",
              "successors": []
            },
            {
              "id": 4,
              "label": "var groups: ArrayList<Group> = ArrayList<Group>()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package opds_cj.path.opds.v2.search\n\nimport net.http.*\nimport std.{time.*, convert.*, collection.*, io.ByteBuffer, io.readToEnd}\nimport encoding.json.stream.*\nimport opds_cj.config.baseConfig\nimport opds_cj.router.PathMap\nimport opds_cj.data_stru.*\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package opds_cj.path.opds.v2.search",
      "successors": []
    },
    {
      "id": 2,
      "label": "import net.http.*",
      "successors": []
    },
    {
      "id": 3,
      "label": "import std.{time.*, convert.*, collection.*, io.ByteBuffer, io.readToEnd}",
      "successors": []
    },
    {
      "id": 4,
      "label": "import encoding.json.stream.*",
      "successors": []
    },
    {
      "id": 5,
      "label": "import opds_cj.config.baseConfig",
      "successors": []
    },
    {
      "id": 6,
      "label": "import opds_cj.router.PathMap",
      "successors": []
    },
    {
      "id": 7,
      "label": "import opds_cj.data_stru.*",
      "successors": []
    },
    {
      "id": 8,
      "label": "}",
      "successors": []
    },
    {
      "id": 9,
      "label": "}",
      "successors": []
    }
  ]
}