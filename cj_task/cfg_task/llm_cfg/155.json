{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 36,
  "functions": [
    {
      "name": "isShp",
      "type": "function",
      "start_line": 2,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "func isShp(raw: Array<UInt8>, _: UInt32): Bool {\n    if (raw.size < 112) {\n        false\n    } else if (!(bigEndianUInt32(raw[0..4]) == 9994 && bigEndianUInt32(raw[4..8]) == 0 && bigEndianUInt32(raw[8..12]) ==\n        0 && bigEndianUInt32(raw[12..16]) == 0 && bigEndianUInt32(raw[16..20]) == 0 && bigEndianUInt32(raw[20..24]) == 0 &&\n        littleEndianUInt32(raw[28..32]) == 1000)) {\n        false\n    } else {\n        let shapeTypes: Array<Int32> = [\n            0, // Null shape\n            1, // Point\n            3, // Polyline\n            5, // Polygon\n            8, // MultiPoint\n            11, // PointZ\n            13, // PolylineZ\n            15, // PolygonZ\n            18, // MultiPointZ\n            21, // PointM\n            23, // PolylineM\n            25, // PolygonM\n            28, // MultiPointM\n            31 // MultiPatch\n        ]\n        for (st in shapeTypes) {\n            if (st == Int32(littleEndianUInt32(raw[108..112]))) {\n                return true\n            }\n        }\n        false\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func isShp(raw: Array<UInt8>, _: UInt32): Bool {",
          "successors": [
            {
              "id": 2,
              "label": "if (raw.size < 112) {",
              "successors": [
                {
                  "id": 3,
                  "label": "false",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else if (!(bigEndianUInt32(raw[0..4]) == 9994 && bigEndianUInt32(raw[4..8]) == 0 && bigEndianUInt32(raw[8..12]) == 0 && bigEndianUInt32(raw[12..16]) == 0 && bigEndianUInt32(raw[16..20]) == 0 && bigEndianUInt32(raw[20..24]) == 0 && littleEndianUInt32(raw[28..32]) == 1000)) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "false",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "} else {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let shapeTypes: Array<Int32> = [\n    0, // Null shape\n    1, // Point\n    3, // Polyline\n    5, // Polygon\n    8, // MultiPoint\n    11, // PointZ\n    13, // PolylineZ\n    15, // PolygonZ\n    18, // MultiPointZ\n    21, // PointM\n    23, // PolylineM\n    25, // PolygonM\n    28, // MultiPointM\n    31 // MultiPatch\n]",
                          "successors": [
                            {
                              "id": 8,
                              "label": "for (st in shapeTypes) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "if (st == Int32(littleEndianUInt32(raw[108..112]))) {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "return true",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "false",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "isShx",
      "type": "function",
      "start_line": 34,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": "func isShx(raw: Array<UInt8>, _: UInt32): Bool {\n    hasPrefix(raw, [0x00, 0x00, 0x27, 0x0A])\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func isShx(raw: Array<UInt8>, _: UInt32): Bool {",
          "successors": [
            {
              "id": 2,
              "label": "    hasPrefix(raw, [0x00, 0x00, 0x27, 0x0A])",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "package mimetype\n}\n}",
  "blocks": []
}