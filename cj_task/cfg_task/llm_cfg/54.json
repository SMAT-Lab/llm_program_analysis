{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 439,
  "functions": [],
  "classes": [
    {
      "name": "TokenJson",
      "type": "class",
      "start_line": 5,
      "end_line": 72,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    id: UInt32,\n    content: String,\n    single_word: Bool,\n    lstrip: Bool,\n    rstrip: Bool,\n    normalized: Bool,\n    special: Bool\n  ) {\n    this.id = id;\n    this.content = content;\n    this.single_word = single_word;\n    this.lstrip = lstrip;\n    this.rstrip = rstrip;\n    this.normalized = normalized;\n    this.special = special;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\n    id: UInt32,\n    content: String,\n    single_word: Bool,\n    lstrip: Bool,\n    rstrip: Bool,\n    normalized: Bool,\n    special: Bool\n  ) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.id = id;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.content = content;",
                      "successors": [
                        {
                          "id": 4,
                          "label": "this.single_word = single_word;",
                          "successors": [
                            {
                              "id": 5,
                              "label": "this.lstrip = lstrip;",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "this.rstrip = rstrip;",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "this.normalized = normalized;",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "this.special = special;",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 32,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): TokenJson {\n    var temp_id: UInt32 = 0;\n    var temp_content: String = \"\";\n    var temp_single_word: Bool = false;\n    var temp_lstrip: Bool = false;\n    var temp_rstrip: Bool = false;\n    var temp_normalized: Bool = false;\n    var temp_special: Bool = false;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"id\" => temp_id = r.readValue<UInt32>();\n              case \"content\" => temp_content = r.readValue<String>();\n              case \"single_word\" => temp_single_word = r.readValue<Bool>();\n              case \"lstrip\" => temp_lstrip = r.readValue<Bool>();\n              case \"rstrip\" => temp_rstrip = r.readValue<Bool>();\n              case \"normalized\" => temp_normalized = r.readValue<Bool>();\n              case \"special\" => temp_special = r.readValue<Bool>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for TokenJson\");\n      }\n    }\n    return TokenJson(\n      temp_id,\n      temp_content,\n      temp_single_word,\n      temp_lstrip,\n      temp_rstrip,\n      temp_normalized,\n      temp_special\n    );\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): TokenJson {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_id: UInt32 = 0;\nvar temp_content: String = \"\";\nvar temp_single_word: Bool = false;\nvar temp_lstrip: Bool = false;\nvar temp_rstrip: Bool = false;\nvar temp_normalized: Bool = false;\nvar temp_special: Bool = false;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()\nmatch (n) {",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "case \"id\" => temp_id = r.readValue<UInt32>();",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 10,
                                              "label": "case \"content\" => temp_content = r.readValue<String>();",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 11,
                                              "label": "case \"single_word\" => temp_single_word = r.readValue<Bool>();",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 12,
                                              "label": "case \"lstrip\" => temp_lstrip = r.readValue<Bool>();",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 13,
                                              "label": "case \"rstrip\" => temp_rstrip = r.readValue<Bool>();",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 14,
                                              "label": "case \"normalized\" => temp_normalized = r.readValue<Bool>();",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 15,
                                              "label": "case \"special\" => temp_special = r.readValue<Bool>();",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 16,
                                              "label": "case unkow => println(\"unkow key ${unkow}\");",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "label": "}",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 18,
                                      "label": "r.endObject();\nbreak;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 19,
                              "label": "case _ => throw Exception(\"can't deserialize for TokenJson\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 20,
                      "label": "}\nreturn TokenJson(\n  temp_id,\n  temp_content,\n  temp_single_word,\n  temp_lstrip,\n  temp_rstrip,\n  temp_normalized,\n  temp_special\n);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct TokenJson <: JsonDeserializable<TokenJson> {\n  let id: UInt32;\n  let content: String;\n  let single_word: Bool;\n  let lstrip: Bool;\n  let rstrip: Bool;\n  let normalized: Bool;\n  let special: Bool;\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct TokenJson <: JsonDeserializable<TokenJson> {",
          "successors": [
            {
              "id": 2,
              "label": "let id: UInt32;",
              "successors": []
            },
            {
              "id": 3,
              "label": "let content: String;",
              "successors": []
            },
            {
              "id": 4,
              "label": "let single_word: Bool;",
              "successors": []
            },
            {
              "id": 5,
              "label": "let lstrip: Bool;",
              "successors": []
            },
            {
              "id": 6,
              "label": "let rstrip: Bool;",
              "successors": []
            },
            {
              "id": 7,
              "label": "let normalized: Bool;",
              "successors": []
            },
            {
              "id": 8,
              "label": "let special: Bool;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "NormalizerJson",
      "type": "class",
      "start_line": 74,
      "end_line": 101,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 77,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(p_type: String) {\n    this.p_type = p_type;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(p_type: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.p_type = p_type;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 81,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): NormalizerJson {\n    var temp_p_type: String = \"\";\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"type\" => temp_p_type = r.readValue<String>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for NormalizerJson\");\n      }\n    }\n    return NormalizerJson(temp_p_type);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): NormalizerJson {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_p_type: String = \"\";",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "match (n) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "case \"type\" => temp_p_type = r.readValue<String>();",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "}",
                                                          "successors": [
                                                            {
                                                              "id": 7,
                                                              "label": "while(r.peek() != EndObject) {",
                                                              "successors": [
                                                                {
                                                                  "id": 8,
                                                                  "label": "let n = r.readName()",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 11,
                                                  "label": "case unkow => println(\"unkow key ${unkow}\");",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "}",
                                                          "successors": [
                                                            {
                                                              "id": 7,
                                                              "label": "while(r.peek() != EndObject) {",
                                                              "successors": [
                                                                {
                                                                  "id": 8,
                                                                  "label": "let n = r.readName()",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 14,
                                      "label": "r.endObject();",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "break;",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "}",
                                              "successors": [
                                                {
                                                  "id": 18,
                                                  "label": "return NormalizerJson(temp_p_type);",
                                                  "successors": [
                                                    {
                                                      "id": 19,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 16,
                              "label": "case _ => throw Exception(\"can't deserialize for NormalizerJson\");",
                              "successors": [
                                {
                                  "id": 17,
                                  "label": "}",
                                  "successors": [
                                    {
                                      "id": 3,
                                      "label": "while (let Some(v) <- r.peek()) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct NormalizerJson <: JsonDeserializable<NormalizerJson> {\n  let p_type: String;\n\n  }\n  \n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct NormalizerJson <: JsonDeserializable<NormalizerJson> {",
          "successors": [
            {
              "id": 2,
              "label": "let p_type: String;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "PatternJson",
      "type": "class",
      "start_line": 103,
      "end_line": 131,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 106,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(p_regex: String) {\n    this.p_regex = p_regex;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(p_regex: String) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.p_regex = p_regex;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 110,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): PatternJson {\n    var temp_p_regex: String = \"\";\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"Regex\" => temp_p_regex = r.readValue<String>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return PatternJson(temp_p_regex);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): PatternJson {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_p_regex: String = \"\";",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "match (n) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "case \"Regex\" => temp_p_regex = r.readValue<String>();",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "r.endObject();",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "break;",
                                                          "successors": [
                                                            {
                                                              "id": 16,
                                                              "label": "return PatternJson(temp_p_regex);",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 11,
                                                  "label": "case unkow => println(\"unkow key ${unkow}\");",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "r.endObject();",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "break;",
                                                          "successors": [
                                                            {
                                                              "id": 16,
                                                              "label": "return PatternJson(temp_p_regex);",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 12,
                                      "label": "r.endObject();",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "break;",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "return PatternJson(temp_p_regex);",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 14,
                              "label": "case _ => throw Exception(\"can't deserialize for ProcessJson\");",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "return PatternJson(temp_p_regex);",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct PatternJson <: JsonDeserializable<PatternJson> {\n  let p_regex: String;\n\n  }\n  \n  }\n\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct PatternJson <: JsonDeserializable<PatternJson> {",
          "successors": [
            {
              "id": 2,
              "label": "let p_regex: String;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ProcessJson",
      "type": "class",
      "start_line": 134,
      "end_line": 233,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 147,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    p_type: String,\n    add_prefix_space: Bool,\n    trim_offsets: Bool,\n    use_regex: Bool\n  ) {\n    this.p_type = p_type;\n    if (this.p_type != \"ByteLevel\") {\n      throw Exception(\"this construction function only suppport ByteLevel type\");\n    }\n    this.add_prefix_space = Some(add_prefix_space);\n    this.trim_offsets = Some(trim_offsets);\n    this.use_regex = Some(use_regex);\n    this.pattern = None;\n    this.behavior = None;\n    this.invert = None;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\n    p_type: String,\n    add_prefix_space: Bool,\n    trim_offsets: Bool,\n    use_regex: Bool\n  ) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.p_type = p_type;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (this.p_type != \"ByteLevel\") {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "throw Exception(\"this construction function only suppport ByteLevel type\");",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "this.add_prefix_space = Some(add_prefix_space);",
                          "successors": [
                            {
                              "id": 7,
                              "label": "this.trim_offsets = Some(trim_offsets);",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "this.use_regex = Some(use_regex);",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "this.pattern = None;",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "this.behavior = None;",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "this.invert = None;",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 165,
          "end_line": 181,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    p_type: String,\n    pattern: PatternJson,\n    behavior: String,\n    invert: Bool\n  ) {\n    this.p_type = p_type;\n    if (p_type != \"Split\") {\n      throw Exception(\"this construction function only support Split type\")\n    }\n    this.add_prefix_space = None;\n    this.trim_offsets = None;\n    this.use_regex = None;\n    this.pattern = Some(pattern);\n    this.behavior = Some(behavior);\n    this.invert = Some(invert);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\n  p_type: String,\n  pattern: PatternJson,\n  behavior: String,\n  invert: Bool\n) {\n  this.p_type = p_type;",
              "successors": [
                {
                  "id": 2,
                  "label": "if (p_type != \"Split\") {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw Exception(\"this construction function only support Split type\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "this.add_prefix_space = None;\nthis.trim_offsets = None;\nthis.use_regex = None;\nthis.pattern = Some(pattern);\nthis.behavior = Some(behavior);\nthis.invert = Some(invert);\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 183,
          "end_line": 232,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): ProcessJson {\n    var temp_p_type: String = \"\";\n    var temp_add_prefix_space: Bool = false;\n    var temp_trim_offsets: Bool = false;\n    var temp_use_regex: Bool = false;\n    var temp_pattern: PatternJson = PatternJson(\"\");\n    var temp_behavior: String = \"\";\n    var temp_invert: Bool = false;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"type\" => temp_p_type = r.readValue<String>();\n              // ByteLevel\n              case \"add_prefix_space\" => temp_add_prefix_space = r.readValue<Bool>();\n              case \"trim_offsets\" => temp_trim_offsets = r.readValue<Bool>();\n              case \"use_regex\" => temp_use_regex = r.readValue<Bool>();\n              // Split\n              case \"pattern\" => temp_pattern = r.readValue<PatternJson>();\n              case \"behavior\" => temp_behavior = r.readValue<String>();\n              case \"invert\" => temp_invert = r.readValue<Bool>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    match (temp_p_type) {\n      case \"ByteLevel\" =>\n        ProcessJson(\n          temp_p_type,\n          temp_add_prefix_space,\n          temp_trim_offsets,\n          temp_use_regex,\n        );\n      case \"Split\" => \n        ProcessJson(\n          temp_p_type,\n          temp_pattern,\n          temp_behavior,\n          temp_invert\n        )\n      case other => throw Exception(\"unkonw process type ${other}\")\n    }\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): ProcessJson {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_p_type: String = \"\";\nvar temp_add_prefix_space: Bool = false;\nvar temp_trim_offsets: Bool = false;\nvar temp_use_regex: Bool = false;\nvar temp_pattern: PatternJson = PatternJson(\"\");\nvar temp_behavior: String = \"\";\nvar temp_invert: Bool = false;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "match (n) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "case \"type\" => temp_p_type = r.readValue<String>();",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 11,
                                                  "label": "case \"add_prefix_space\" => temp_add_prefix_space = r.readValue<Bool>();",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 12,
                                                  "label": "case \"trim_offsets\" => temp_trim_offsets = r.readValue<Bool>();",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 13,
                                                  "label": "case \"use_regex\" => temp_use_regex = r.readValue<Bool>();",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "case \"pattern\" => temp_pattern = r.readValue<PatternJson>();",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 15,
                                                  "label": "case \"behavior\" => temp_behavior = r.readValue<String>();\ncase \"invert\" => temp_invert = r.readValue<Bool>();\ncase unkow => println(\"unkow key ${unkow}\");",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "label": "}",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 17,
                                      "label": "r.endObject();",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 19,
                              "label": "case _ => throw Exception(\"can't deserialize for ProcessJson\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 20,
                      "label": "match (temp_p_type) {",
                      "successors": [
                        {
                          "id": 21,
                          "label": "case \"ByteLevel\" =>\nProcessJson(\ntemp_p_type,\ntemp_add_prefix_space,\ntemp_trim_offsets,\ntemp_use_regex,\n);",
                          "successors": []
                        },
                        {
                          "id": 22,
                          "label": "case \"Split\" => \nProcessJson(\ntemp_p_type,\ntemp_pattern,\ntemp_behavior,\ntemp_invert\n)",
                          "successors": []
                        },
                        {
                          "id": 23,
                          "label": "case other => throw Exception(\"unkonw process type ${other}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct ProcessJson <: JsonDeserializable<ProcessJson> {\n  // Union ByteLevel and SplitTokenizer\n  let p_type: String;\n  // use for ByteLevel: decoder/post_processor\n  let add_prefix_space: Option<Bool>;\n  let trim_offsets: Option<Bool>;\n  let use_regex: Option<Bool>;\n  // actived when split tokenizer\n  let pattern: Option<PatternJson>;\n  let behavior: Option<String>;\n  let invert: Option<Bool>;\n\n  // construct for decode/post_preprossor\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct ProcessJson <: JsonDeserializable<ProcessJson> {",
          "successors": [
            {
              "id": 2,
              "label": "let p_type: String;",
              "successors": [
                {
                  "id": 3,
                  "label": "let add_prefix_space: Option<Bool>;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let trim_offsets: Option<Bool>;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let use_regex: Option<Bool>;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let pattern: Option<PatternJson>;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "let behavior: Option<String>;",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "let invert: Option<Bool>;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "PreTokenizerJson",
      "type": "class",
      "start_line": 235,
      "end_line": 272,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 238,
          "end_line": 241,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(p_type: String, pretokenizers: ArrayList<ProcessJson>) {\n    this.p_type = p_type;\n    this.pretokenizers = pretokenizers;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(p_type: String, pretokenizers: ArrayList<ProcessJson>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.p_type = p_type;",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    this.pretokenizers = pretokenizers;",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "}",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 243,
          "end_line": 247,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init() {\n    // default\n    this.p_type = \"\";\n    this.pretokenizers = ArrayList<ProcessJson>();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    // default\n    this.p_type = \"\";\n    this.pretokenizers = ArrayList<ProcessJson>();\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 249,
          "end_line": 270,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): PreTokenizerJson {\n    var temp_p_type: String = \"\";\n    var temp_pre_tokenizers: ArrayList<ProcessJson> = ArrayList<ProcessJson>();\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"type\" => temp_p_type = r.readValue<String>();\n              case \"pretokenizers\" => temp_pre_tokenizers = r.readValue<ArrayList<ProcessJson>>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return PreTokenizerJson(temp_p_type, temp_pre_tokenizers);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): PreTokenizerJson {\n    var temp_p_type: String = \"\";\n    var temp_pre_tokenizers: ArrayList<ProcessJson> = ArrayList<ProcessJson>();",
              "successors": [
                {
                  "id": 2,
                  "label": "while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "match(v) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case BeginObject =>\n          r.startObject();",
                          "successors": [
                            {
                              "id": 5,
                              "label": "while(r.peek() != EndObject) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "let n = r.readName()\n            match (n) {",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "case \"type\" => temp_p_type = r.readValue<String>();",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "case \"pretokenizers\" => temp_pre_tokenizers = r.readValue<ArrayList<ProcessJson>>();",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "case unkow => println(\"unkow key ${unkow}\");",
                                              "successors": [
                                                {
                                                  "id": 5,
                                                  "label": "while(r.peek() != EndObject) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "r.endObject();\n          break;",
                              "successors": [
                                {
                                  "id": 2,
                                  "label": "while (let Some(v) <- r.peek()) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 13,
                          "label": "case _ => throw Exception(\"can't deserialize for ProcessJson\");",
                          "successors": [
                            {
                              "id": 2,
                              "label": "while (let Some(v) <- r.peek()) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 14,
                  "label": "return PreTokenizerJson(temp_p_type, temp_pre_tokenizers);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct PreTokenizerJson <: JsonDeserializable<PreTokenizerJson> {\n  let p_type: String;\n  let pretokenizers: ArrayList<ProcessJson>;\n  }\n\n  }\n\n  }\n\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct PreTokenizerJson <: JsonDeserializable<PreTokenizerJson> {",
          "successors": [
            {
              "id": 2,
              "label": "let p_type: String;",
              "successors": [
                {
                  "id": 3,
                  "label": "let pretokenizers: ArrayList<ProcessJson>;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": [
                        {
                          "id": 5,
                          "label": "}",
                          "successors": [
                            {
                              "id": 6,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "ModelJson",
      "type": "class",
      "start_line": 274,
      "end_line": 358,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 284,
          "end_line": 310,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    p_type: String,\n    dropout: Option<Float32>,\n    vocab: HashMap<String, UInt32>,\n    merges: ArrayList<String>,\n    unk_token!: Option<String> = None,\n    continuing_subword_prefix!: String = \"\",\n    end_of_word_suffix!: String = \"\",\n    fuse_unk!: Bool = false,\n    byte_fallback!: Bool = false\n  ) {\n    this.p_type = p_type;\n    if (dropout.isSome()) {\n      let dropout_value = dropout.getOrThrow();\n      if (dropout_value < 0.0 || dropout_value > 1.0) {\n        throw Exception(\"dropout can only between 0~1\")\n      }\n    }\n    this.dropout = dropout;\n    this.unk_token = unk_token;\n    this.continuing_subword_prefix = continuing_subword_prefix;\n    this.end_of_word_suffix = end_of_word_suffix;\n    this.fuse_unk = fuse_unk;\n    this.byte_fallback = byte_fallback;\n    this.vocab = vocab;\n    this.merges = merges;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(",
              "successors": [
                {
                  "id": 2,
                  "label": "p_type: String,",
                  "successors": [
                    {
                      "id": 3,
                      "label": "dropout: Option<Float32>,",
                      "successors": [
                        {
                          "id": 4,
                          "label": "vocab: HashMap<String, UInt32>,",
                          "successors": [
                            {
                              "id": 5,
                              "label": "merges: ArrayList<String>,",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "unk_token!: Option<String> = None,",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "continuing_subword_prefix!: String = \"\",",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "end_of_word_suffix!: String = \"\",",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "fuse_unk!: Bool = false,",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "byte_fallback!: Bool = false",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "{",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "label": "this.p_type = p_type;",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "label": "if (dropout.isSome()) {",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "label": "let dropout_value = dropout.getOrThrow();",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "label": "if (dropout_value < 0.0 || dropout_value > 1.0) {",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "label": "throw Exception(\"dropout can only between 0~1\")",
                                                                          "successors": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "id": 17,
                                                                      "label": "}",
                                                                      "successors": [
                                                                        {
                                                                          "id": 18,
                                                                          "label": "}",
                                                                          "successors": [
                                                                            {
                                                                              "id": 21,
                                                                              "label": "this.dropout = dropout;",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 22,
                                                                                  "label": "this.unk_token = unk_token;",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 23,
                                                                                      "label": "this.continuing_subword_prefix = continuing_subword_prefix;",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 24,
                                                                                          "label": "this.end_of_word_suffix = end_of_word_suffix;",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 25,
                                                                                              "label": "this.fuse_unk = fuse_unk;",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 26,
                                                                                                  "label": "this.byte_fallback = byte_fallback;",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 27,
                                                                                                      "label": "this.vocab = vocab;",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 28,
                                                                                                          "label": "this.merges = merges;",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 29,
                                                                                                              "label": "}",
                                                                                                              "successors": []
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "id": 19,
                                                                  "label": "}",
                                                                  "successors": [
                                                                    {
                                                                      "id": 21,
                                                                      "label": "this.dropout = dropout;",
                                                                      "successors": [
                                                                        {
                                                                          "id": 22,
                                                                          "label": "this.unk_token = unk_token;",
                                                                          "successors": [
                                                                            {
                                                                              "id": 23,
                                                                              "label": "this.continuing_subword_prefix = continuing_subword_prefix;",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 24,
                                                                                  "label": "this.end_of_word_suffix = end_of_word_suffix;",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 25,
                                                                                      "label": "this.fuse_unk = fuse_unk;",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 26,
                                                                                          "label": "this.byte_fallback = byte_fallback;",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 27,
                                                                                              "label": "this.vocab = vocab;",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 28,
                                                                                                  "label": "this.merges = merges;",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 29,
                                                                                                      "label": "}",
                                                                                                      "successors": []
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 312,
          "end_line": 357,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): ModelJson {\n    var temp_p_type: String = \"\";\n    var temp_dropout: Option<Float32> = None;\n    var temp_unk_token: Option<String> = None;\n    var temp_continuing_subword_prefix: String = \"\";\n    var temp_end_of_word_suffix: String = \"\";\n    var temp_fuse_unk: Bool = false;\n    var temp_byte_fallback: Bool = false;\n    var temp_vocab: HashMap<String, UInt32> = HashMap<String, UInt32>();\n    var temp_merges: ArrayList<String> = ArrayList<String>();\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"type\" => temp_p_type = r.readValue<String>();\n              case \"dropout\" => temp_dropout = r.readValue<Option<Float32>>();\n              case \"unk_token\" => temp_unk_token = r.readValue<Option<String>>()\n              case \"continuing_subword_prefix\" => temp_continuing_subword_prefix = r.readValue<String>();\n              case \"end_of_word_suffix\" => temp_end_of_word_suffix = r.readValue<String>();\n              case \"fuse_unk\" => temp_fuse_unk = r.readValue<Bool>();\n              case \"byte_fallback\" => temp_byte_fallback = r.readValue<Bool>();\n              case \"vocab\" => temp_vocab = r.readValue<HashMap<String, UInt32>>();\n              case \"merges\" => temp_merges = r.readValue<ArrayList<String>>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ModelJson\");\n      }\n    }\n    return ModelJson(\n      temp_p_type,\n      temp_dropout,\n      temp_vocab,\n      temp_merges,\n      unk_token: temp_unk_token,\n      continuing_subword_prefix: temp_continuing_subword_prefix,\n      end_of_word_suffix: temp_end_of_word_suffix,\n      fuse_unk: temp_fuse_unk,\n      byte_fallback: temp_byte_fallback\n    );\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): ModelJson {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_p_type: String = \"\";\nvar temp_dropout: Option<Float32> = None;\nvar temp_unk_token: Option<String> = None;\nvar temp_continuing_subword_prefix: String = \"\";\nvar temp_end_of_word_suffix: String = \"\";\nvar temp_fuse_unk: Bool = false;\nvar temp_byte_fallback: Bool = false;\nvar temp_vocab: HashMap<String, UInt32> = HashMap<String, UInt32>();\nvar temp_merges: ArrayList<String> = ArrayList<String>();",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()\nmatch (n) {",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "case \"type\" => temp_p_type = r.readValue<String>();\ncase \"dropout\" => temp_dropout = r.readValue<Option<Float32>>();\ncase \"unk_token\" => temp_unk_token = r.readValue<Option<String>>()\ncase \"continuing_subword_prefix\" => temp_continuing_subword_prefix = r.readValue<String>();\ncase \"end_of_word_suffix\" => temp_end_of_word_suffix = r.readValue<String>();\ncase \"fuse_unk\" => temp_fuse_unk = r.readValue<Bool>();\ncase \"byte_fallback\" => temp_byte_fallback = r.readValue<Bool>();\ncase \"vocab\" => temp_vocab = r.readValue<HashMap<String, UInt32>>();\ncase \"merges\" => temp_merges = r.readValue<ArrayList<String>>();\ncase unkow => println(\"unkow key ${unkow}\");",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 10,
                                      "label": "r.endObject();",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "break;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "case _ => throw Exception(\"can't deserialize for ModelJson\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "return ModelJson(\n  temp_p_type,\n  temp_dropout,\n  temp_vocab,\n  temp_merges,\n  unk_token: temp_unk_token,\n  continuing_subword_prefix: temp_continuing_subword_prefix,\n  end_of_word_suffix: temp_end_of_word_suffix,\n  fuse_unk: temp_fuse_unk,\n  byte_fallback: temp_byte_fallback\n);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct ModelJson <: JsonDeserializable<ModelJson> {\n  let p_type: String;\n  let dropout: Option<Float32>;\n  var unk_token: Option<String> = None;\n  var continuing_subword_prefix: String = \"\";\n  var end_of_word_suffix: String = \"\";\n  var fuse_unk: Bool = false;\n  var byte_fallback: Bool = false;\n  let vocab: HashMap<String, UInt32>;\n  let merges: ArrayList<String>;\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct ModelJson <: JsonDeserializable<ModelJson> {",
          "successors": [
            {
              "id": 2,
              "label": "let p_type: String;",
              "successors": [
                {
                  "id": 3,
                  "label": "let dropout: Option<Float32>;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "var unk_token: Option<String> = None;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "var continuing_subword_prefix: String = \"\";",
                          "successors": [
                            {
                              "id": 6,
                              "label": "var end_of_word_suffix: String = \"\";",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "var fuse_unk: Bool = false;",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "var byte_fallback: Bool = false;",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "let vocab: HashMap<String, UInt32>;",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "let merges: ArrayList<String>;",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "TokenizerJson",
      "type": "class",
      "start_line": 360,
      "end_line": 439,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 371,
          "end_line": 391,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    version: String,\n    truncation: Option<String>,\n    padding: Option<String>,\n    added_tokens: ArrayList<TokenJson>,\n    normalizer: NormalizerJson,\n    pre_tokenizer: PreTokenizerJson,\n    post_processor: ProcessJson,\n    decoder: ProcessJson,\n    model: ModelJson\n  ) {\n    this.version = version;\n    this.truncation = truncation;\n    this.padding = padding;\n    this.added_tokens = added_tokens;\n    this.normalizer = normalizer;\n    this.pre_tokenizer = pre_tokenizer;\n    this.post_processor = post_processor;\n    this.decoder = decoder;\n    this.model = model;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init( version: String, truncation: Option<String>, padding: Option<String>, added_tokens: ArrayList<TokenJson>, normalizer: NormalizerJson, pre_tokenizer: PreTokenizerJson, post_processor: ProcessJson, decoder: ProcessJson, model: ModelJson ) {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.version = version; this.truncation = truncation; this.padding = padding; this.added_tokens = added_tokens; this.normalizer = normalizer; this.pre_tokenizer = pre_tokenizer; this.post_processor = post_processor; this.decoder = decoder; this.model = model;",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 393,
          "end_line": 438,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): TokenizerJson {\n    var temp_version: String = \"\";\n    var temp_truncation: Option<String> = None;\n    var temp_padding: Option<String> = None;\n    var temp_added_tokens: ArrayList<TokenJson> = ArrayList<TokenJson>();\n    var temp_normalizer: NormalizerJson = NormalizerJson(\"\");\n    var temp_pre_tokenizer: PreTokenizerJson = PreTokenizerJson();\n    var temp_post_processor: Option<ProcessJson> = None;\n    var temp_decoder: Option<ProcessJson> = None;\n    var temp_model: Option<ModelJson> = None;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"version\" => temp_version = r.readValue<String>();\n              case \"truncation\" => temp_truncation = r.readValue<Option<String>>();\n              case \"padding\" => temp_padding = r.readValue<Option<String>>();\n              case \"added_tokens\" => temp_added_tokens = r.readValue<ArrayList<TokenJson>>();\n              case \"normalizer\" => temp_normalizer = r.readValue<NormalizerJson>();\n              case \"pre_tokenizer\" => temp_pre_tokenizer = r.readValue<PreTokenizerJson>();\n              case \"post_processor\" => temp_post_processor = Some(r.readValue<ProcessJson>());\n              case \"decoder\" => temp_decoder = Some(r.readValue<ProcessJson>());\n              case \"model\" => temp_model = Some(r.readValue<ModelJson>());\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return TokenizerJson(\n      temp_version,\n      temp_truncation,\n      temp_padding,\n      temp_added_tokens,\n      temp_normalizer,\n      temp_pre_tokenizer,\n      temp_post_processor.getOrThrow(),\n      temp_decoder.getOrThrow(),\n      temp_model.getOrThrow(),\n    );\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): TokenizerJson {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_version: String = \"\";\nvar temp_truncation: Option<String> = None;\nvar temp_padding: Option<String> = None;\nvar temp_added_tokens: ArrayList<TokenJson> = ArrayList<TokenJson>();\nvar temp_normalizer: NormalizerJson = NormalizerJson(\"\");\nvar temp_pre_tokenizer: PreTokenizerJson = PreTokenizerJson();\nvar temp_post_processor: Option<ProcessJson> = None;\nvar temp_decoder: Option<ProcessJson> = None;\nvar temp_model: Option<ModelJson> = None;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "r.startObject();",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "while(r.peek() != EndObject) {",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "let n = r.readName()",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "match (n) {",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "case \"version\" => temp_version = r.readValue<String>();",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 11,
                                                  "label": "case \"truncation\" => temp_truncation = r.readValue<Option<String>>();",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 12,
                                                  "label": "case \"padding\" => temp_padding = r.readValue<Option<String>>();",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 13,
                                                  "label": "case \"added_tokens\" => temp_added_tokens = r.readValue<ArrayList<TokenJson>>();",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "case \"normalizer\" => temp_normalizer = r.readValue<NormalizerJson>();",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 15,
                                                  "label": "case \"pre_tokenizer\" => temp_pre_tokenizer = r.readValue<PreTokenizerJson>();",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 16,
                                                  "label": "case \"post_processor\" => temp_post_processor = Some(r.readValue<ProcessJson>());",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 17,
                                                  "label": "case \"decoder\" => temp_decoder = Some(r.readValue<ProcessJson>());",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 18,
                                                  "label": "case \"model\" => temp_model = Some(r.readValue<ModelJson>());",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 19,
                                                  "label": "case unkow => println(\"unkow key ${unkow}\");",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 20,
                                      "label": "r.endObject();\nbreak;",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 21,
                              "label": "case _ => throw Exception(\"can't deserialize for ProcessJson\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 22,
                  "label": "return TokenizerJson(\n  temp_version,\n  temp_truncation,\n  temp_padding,\n  temp_added_tokens,\n  temp_normalizer,\n  temp_pre_tokenizer,\n  temp_post_processor.getOrThrow(),\n  temp_decoder.getOrThrow(),\n  temp_model.getOrThrow(),\n);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct TokenizerJson <: JsonDeserializable<TokenizerJson> {\n  let version: String;\n  let truncation: Option<String>;\n  let padding: Option<String>;\n  let added_tokens: ArrayList<TokenJson>;\n  let normalizer: NormalizerJson;\n  let pre_tokenizer: PreTokenizerJson;\n  let post_processor: ProcessJson;\n  let decoder: ProcessJson;\n  let model: ModelJson;\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct TokenizerJson <: JsonDeserializable<TokenizerJson> {",
          "successors": [
            {
              "id": 2,
              "label": "let version: String;",
              "successors": [
                {
                  "id": 3,
                  "label": "let truncation: Option<String>;",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let padding: Option<String>;",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let added_tokens: ArrayList<TokenJson>;",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let normalizer: NormalizerJson;",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "let pre_tokenizer: PreTokenizerJson;",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "let post_processor: ProcessJson;",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "let decoder: ProcessJson;",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "let model: ModelJson;",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "}",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "}",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package tokenizer\n\ninternal import encoding.json.stream.*\n\n}\n\n}\n\n}\n\n\n}\n\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package tokenizer",
      "successors": [
        {
          "id": 2,
          "label": "internal import encoding.json.stream",
          "successors": []
        }
      ]
    }
  ]
}