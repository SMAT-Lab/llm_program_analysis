{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 113,
  "functions": [],
  "classes": [
    {
      "name": "Repeater",
      "type": "class",
      "start_line": 6,
      "end_line": 112,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(throttle!: Bool, mode!: RepeaterMode, task!: RepeaterTask) {\n        this(throttle: throttle, config: mode.config, task: task)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(throttle!: Bool, mode!: RepeaterMode, task!: RepeaterTask) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this(throttle: throttle, config: mode.config, task: task)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 22,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(throttle!: Bool, config!: RepeaterConfig, task!: RepeaterTask) {\n        this.config = config\n        this.task = task\n        this.throttle = throttle\n        this.verifyConfig()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(throttle!: Bool, config!: RepeaterConfig, task!: RepeaterTask) { this.config = config this.task = task this.throttle = throttle this.verifyConfig() }",
              "successors": []
            }
          ]
        },
        {
          "name": "verifyConfig",
          "type": "function",
          "start_line": 31,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    func verifyConfig() {}",
          "blocks": [
            {
              "id": 1,
              "label": "func verifyConfig() {}",
              "successors": []
            }
          ]
        },
        {
          "name": "verifyConfig",
          "type": "function",
          "start_line": 35,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    func verifyConfig() {\n        if (!config.leading && !config.trailing) {\n            throw IllegalArgumentException('leading\u548ctrailing\u9700\u8981\u81f3\u5c11\u6709\u4e00\u9879\u4e3atrue')\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func verifyConfig() {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!config.leading && !config.trailing) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "throw IllegalArgumentException('leading\u548ctrailing\u9700\u8981\u81f3\u5c11\u6709\u4e00\u9879\u4e3atrue')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dealLeadingCall",
          "type": "function",
          "start_line": 54,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func dealLeadingCall() {\n        // timer\u4e0d\u5b58\u5728\uff0c\u8bf4\u660e\u6ca1\u5f00\u542f\u8fc7\u8ba1\u65f6\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u5934\u90e8\u6267\u884c\uff0c\u5219\u7acb\u5373\u6267\u884c\n        if (config.leading && canRunTask) {\n            runTask()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func dealLeadingCall() {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (config.leading && canRunTask) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    runTask()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dealTrailingCall",
          "type": "function",
          "start_line": 61,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func dealTrailingCall() {\n        if (config.trailing && timer.isNone()) {\n            // \u8fd9\u91cc\u7f6e\u4e3atrue\uff0c\u662f\u8003\u8651\u5230\u53ea\u6709trailing\u6ca1\u6709leading\u7684\u60c5\u51b5\u3002\u5047\u8bbe\u4efb\u52a1\u5df2\u6267\u884c\u4e00\u6b21\n            firstRunTask = true\n            lastRunTaskTime = getNowTime()\n            // \u542f\u52a8timer\n            timer = Timer.after(config.interval) {\n                let now = getNowTime()\n\n                if (throttle) {\n                    runTask()\n                    if (now - lastCallTime > config.interval) {\n                        cancel()\n                        return None\n                    } else {\n                        return config.interval\n                    }\n                } else {\n                    if (now - lastCallTime > config.interval) {\n                        runTask()\n                        // Timer\u7f6eNone\uff0c\u91cd\u65b0\u8ba1\u65f6\n                        cancel()\n                        // \u8fd4\u56deNone\uff0c\u8ba9timer\u751f\u6548\n                        return None\n                    } else {\n                        // \u5b9a\u65f6\u5668\u8ddd\u79bb\u4e0a\u6b21\u8c03\u7528call\u65b9\u6cd5\u7684\u65f6\u95f4\u95f4\u9694\n                        let delta = now - lastCallTime\n                        // \u8fd4\u56de\u4ece\u4e0a\u6b21\u70b9\u51fb\u540e\u5230\u4e0b\u4e00\u4e2ainterval\u7684\u65f6\u95f4\n                        return config.interval - delta\n                    }\n                }\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "if (config.trailing && timer.isNone()) {",
              "successors": [
                {
                  "id": 2,
                  "label": "firstRunTask = true\nlastRunTaskTime = getNowTime()\ntimer = Timer.after(config.interval) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let now = getNowTime()\nif (throttle) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "runTask()\nif (now - lastCallTime > config.interval) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "cancel()\nreturn None",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "label": "} else {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "return config.interval",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "} else {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (now - lastCallTime > config.interval) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "runTask()\ncancel()\nreturn None",
                                  "successors": []
                                },
                                {
                                  "id": 11,
                                  "label": "} else {",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "let delta = now - lastCallTime\nreturn config.interval - delta",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "call",
          "type": "function",
          "start_line": 96,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func call(): Unit {\n        this.dealLeadingCall()\n        this.dealTrailingCall()\n        lastCallTime = getNowTime()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func call(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "this.dealLeadingCall()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.dealTrailingCall()",
                      "successors": [
                        {
                          "id": 4,
                          "label": "lastCallTime = getNowTime()",
                          "successors": [
                            {
                              "id": 5,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "cancel",
          "type": "function",
          "start_line": 102,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func cancel(): Unit {\n        timer?.cancel()\n        timer = None\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func cancel(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    timer?.cancel()",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    timer = None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "runTask",
          "type": "function",
          "start_line": 107,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func runTask() {\n        task()\n        firstRunTask = true\n        lastRunTaskTime = getNowTime()",
          "blocks": [
            {
              "id": 1,
              "label": "private func runTask() {",
              "successors": [
                {
                  "id": 2,
                  "label": "    task()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    firstRunTask = true",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    lastRunTaskTime = getNowTime()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Repeater {\n    private var lastCallTime: MonoTime = getNowTime()\n    private var lastRunTaskTime: MonoTime = getNowTime()\n    private var firstRunTask: Bool = false\n    // \u5b9a\u65f6\u5668\uff0c\u53ea\u6709trailing\u624d\u4f1a\u4f7f\u7528\n    private var timer: ?Timer = None\n\n    // \u914d\u7f6e\u548c\u4efb\u52a1\n    private let config: RepeaterConfig\n    private let task: RepeaterTask\n    private let throttle: Bool\n\n    }\n\n    }\n\n    // release\u6761\u4ef6\u4e0b\u4e3a\u7a7a\u5b9e\u73b0\n    @When[!debug]\n    func verifyConfig() {}\n\n    // debug\u4e0b\u5b9e\u73b0\u5177\u4f53\u903b\u8f91\n    @When[debug]\n    }\n\n    // \u662f\u5426\u53ef\u4ee5\u8fd0\u884c\u4efb\u52a1\n    private prop canRunTask: Bool {\n        get() {\n            if (throttle) {\n                let delta = getNowTime() - lastRunTaskTime\n                (delta > config.interval) || !this.firstRunTask\n            } else {\n                let delta = getNowTime() - lastCallTime\n                (delta > config.interval) || !this.firstRunTask\n            }\n        }\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n        lastRunTaskTime = getNowTime()\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Repeater {",
          "successors": [
            {
              "id": 2,
              "label": "private var lastCallTime: MonoTime = getNowTime()",
              "successors": [
                {
                  "id": 3,
                  "label": "private var lastRunTaskTime: MonoTime = getNowTime()",
                  "successors": [
                    {
                      "id": 4,
                      "label": "private var firstRunTask: Bool = false",
                      "successors": [
                        {
                          "id": 5,
                          "label": "private var timer: ?Timer = None",
                          "successors": [
                            {
                              "id": 6,
                              "label": "private let config: RepeaterConfig",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "private let task: RepeaterTask",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "private let throttle: Bool",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "// release\u6761\u4ef6\u4e0b\u4e3a\u7a7a\u5b9e\u73b0\n@When[!debug]\nfunc verifyConfig() {}",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "// debug\u4e0b\u5b9e\u73b0\u5177\u4f53\u903b\u8f91\n@When[debug]",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "private prop canRunTask: Bool {",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "get() {",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "if (throttle) {",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "let delta = getNowTime() - lastRunTaskTime\n(delta > config.interval) || !this.firstRunTask",
                                                              "successors": [
                                                                {
                                                                  "id": 17,
                                                                  "label": "lastRunTaskTime = getNowTime()",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "id": 15,
                                                              "label": "} else {",
                                                              "successors": [
                                                                {
                                                                  "id": 16,
                                                                  "label": "let delta = getNowTime() - lastCallTime\n(delta > config.interval) || !this.firstRunTask",
                                                                  "successors": [
                                                                    {
                                                                      "id": 17,
                                                                      "label": "lastRunTaskTime = getNowTime()",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "// cjlint-ignore -start !G.NAM.02 !G.EXP.03\npackage cj_debounce_throttle.repeater\n\npublic import std.sync.Timer\n\n}\n// cjlint-ignore -end",
  "blocks": []
}