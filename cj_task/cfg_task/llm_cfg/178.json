{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 54,
  "functions": [],
  "classes": [
    {
      "name": "UnpackFilter",
      "type": "class",
      "start_line": 9,
      "end_line": 54,
      "functions": [
        {
          "name": "getBlockLength",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getBlockLength(): Int32 {\n        return BlockLength\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getBlockLength(): Int32 {",
              "successors": [
                {
                  "id": 2,
                  "label": "return BlockLength",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setBlockLength",
          "type": "function",
          "start_line": 21,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setBlockLength(blockLength: Int32) {\n        BlockLength = blockLength\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setBlockLength(blockLength: Int32) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    BlockLength = blockLength",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getBlockStart",
          "type": "function",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getBlockStart(): Int32 {\n        return BlockStart\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getBlockStart(): Int32 {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return BlockStart",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setBlockStart",
          "type": "function",
          "start_line": 27,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setBlockStart(blockStart: Int32) {\n        BlockStart = blockStart\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setBlockStart(blockStart: Int32) {",
              "successors": [
                {
                  "id": 2,
                  "label": "BlockStart = blockStart",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getExecCount",
          "type": "function",
          "start_line": 30,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getExecCount(): Int32 {\n        return ExecCount\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getExecCount(): Int32 {",
              "successors": [
                {
                  "id": 2,
                  "label": "return ExecCount",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setExecCount",
          "type": "function",
          "start_line": 33,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setExecCount(execCount: Int32) {\n        ExecCount = execCount\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setExecCount(execCount: Int32) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    ExecCount = execCount",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isNextWindow",
          "type": "function",
          "start_line": 36,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func isNextWindow(): Bool {\n        return NextWindow\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func isNextWindow(): Bool {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return NextWindow",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setNextWindow",
          "type": "function",
          "start_line": 39,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setNextWindow( nextWindow: Bool) {\n        NextWindow = nextWindow\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setNextWindow( nextWindow: Bool) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    NextWindow = nextWindow",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getParentFilter",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getParentFilter() : Int32{\n        return ParentFilter\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getParentFilter() : Int32{",
              "successors": [
                {
                  "id": 2,
                  "label": "    return ParentFilter",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setParentFilter",
          "type": "function",
          "start_line": 45,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setParentFilter(parentFilter: Int32) {\n        ParentFilter = parentFilter\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setParentFilter(parentFilter: Int32) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    ParentFilter = parentFilter",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getPrg",
          "type": "function",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getPrg(): VMPreparedProgram {\n        return Prg\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getPrg(): VMPreparedProgram {",
              "successors": [
                {
                  "id": 2,
                  "label": "    return Prg",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setPrg",
          "type": "function",
          "start_line": 51,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setPrg(prg: VMPreparedProgram) {\n        Prg = prg\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setPrg(prg: VMPreparedProgram) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    Prg = prg",
                  "successors": [
                    {
                      "id": 3,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class UnpackFilter {\n    private var BlockStart: Int32 = 0\n    private var BlockLength: Int32 = 0\n    private var ExecCount: Int32 = 0\n    private var NextWindow: Bool = false\n    // position of parent filter in Filters array used as prototype for filter\n    // in PrgStack array. Not defined for filters in Filters array.\n    private var ParentFilter: Int32 = 0\n    private var Prg :VMPreparedProgram = VMPreparedProgram()\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class UnpackFilter {",
          "successors": [
            {
              "id": 2,
              "label": "    private var BlockStart: Int32 = 0\n    private var BlockLength: Int32 = 0\n    private var ExecCount: Int32 = 0\n    private var NextWindow: Bool = false\n    private var ParentFilter: Int32 = 0\n    private var Prg :VMPreparedProgram = VMPreparedProgram()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package compress4cj.archivers.rar.unpack\nimport std.log.*\nimport std.io.*\nimport std.fs.*\nimport std.collection.*\nimport compress4cj.archivers.rar.unpack.decode.Compress\nimport compress4cj.utils.internals.URS\nimport compress4cj.archivers.rar.unpack.vm.VMPreparedProgram\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package compress4cj.archivers.rar.unpack",
      "successors": [
        {
          "id": 2,
          "label": "import std.log.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.io.*",
              "successors": [
                {
                  "id": 4,
                  "label": "import std.fs.*",
                  "successors": [
                    {
                      "id": 5,
                      "label": "import std.collection.*",
                      "successors": [
                        {
                          "id": 6,
                          "label": "import compress4cj.archivers.rar.unpack.decode.Compress",
                          "successors": [
                            {
                              "id": 7,
                              "label": "import compress4cj.utils.internals.URS",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "import compress4cj.archivers.rar.unpack.vm.VMPreparedProgram",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}