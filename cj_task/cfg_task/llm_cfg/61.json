{
  "name": "opds_cj.data_stru",
  "type": "CFG",
  "start_line": 1,
  "end_line": 36,
  "functions": [],
  "classes": [
    {
      "name": "User",
      "type": "class",
      "start_line": 7,
      "end_line": 36,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(authStr:Option<String>){\n        var auth:String=\"\"\n        match(authStr){\n            case Some(x) => auth = x.trimStart(\"Basic \")\n            case None => return\n        }\n        let decode = String.fromUtf8(fromBase64String(auth).getOrThrow()).split(\":\")\n        this.email = decode[0]\n        this.password = decode[1]\n        this.id = getID(this.email)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(authStr:Option<String>){",
              "successors": [
                {
                  "id": 2,
                  "label": "var auth:String=\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "label": "match(authStr){",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case Some(x) => auth = x.trimStart(\"Basic \")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "let decode = String.fromUtf8(fromBase64String(auth).getOrThrow()).split(\":\")",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "this.email = decode[0]",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "this.password = decode[1]",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "this.id = getID(this.email)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "case None => return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getID",
          "type": "function",
          "start_line": 23,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    func getID(email:String):String{\n        var sql = \"SELECT ID FROM USER WHERE EMAIL='${email}';\"\n        var ppDb: CPointer<CPointer<Unit>> = sqlOpen(baseConfig.database)\n        var ppStmt = sqlPrepare(ppDb, sql)\n        var id = \"\"\n        while (sqlStep(ppStmt) != SQLITE_DONE) {\n            id = sqlColumnText(ppStmt, 0)\n        }\n        sqlFinalize(ppStmt)\n        sqlClose(ppDb)\n\n        return id\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "var sql = \"SELECT ID FROM USER WHERE EMAIL='${email}';\"",
              "successors": [
                {
                  "id": 2,
                  "label": "var ppDb: CPointer<CPointer<Unit>> = sqlOpen(baseConfig.database)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "var ppStmt = sqlPrepare(ppDb, sql)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "var id = \"\"",
                          "successors": [
                            {
                              "id": 5,
                              "label": "while (sqlStep(ppStmt) != SQLITE_DONE) {",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    id = sqlColumnText(ppStmt, 0)",
                                  "successors": [
                                    {
                                      "id": 5,
                                      "label": "while (sqlStep(ppStmt) != SQLITE_DONE) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "sqlFinalize(ppStmt)",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "sqlClose(ppDb)",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "return id",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class User{\n    public var id:String = \"\"\n    public var email:String = \"\"\n    var password:String = \"\"\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class User{",
          "successors": [
            {
              "id": 2,
              "label": "public var id:String = \"\"",
              "successors": []
            },
            {
              "id": 3,
              "label": "public var email:String = \"\"",
              "successors": []
            },
            {
              "id": 4,
              "label": "var password:String = \"\"",
              "successors": []
            },
            {
              "id": 5,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package opds_cj.data_stru\n\nimport encoding.base64.*\nimport opds_cj.sqlite.*\nimport opds_cj.config.baseConfig\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package opds_cj.data_stru",
      "successors": []
    },
    {
      "id": 2,
      "label": "import encoding.base64.*",
      "successors": []
    },
    {
      "id": 3,
      "label": "import opds_cj.sqlite.*",
      "successors": []
    },
    {
      "id": 4,
      "label": "import opds_cj.config.baseConfig",
      "successors": []
    }
  ]
}