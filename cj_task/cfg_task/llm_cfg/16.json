{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 49,
  "functions": [],
  "classes": [
    {
      "name": "StructInitFunctionGenerator",
      "type": "class",
      "start_line": 7,
      "end_line": 49,
      "functions": [
        {
          "name": "generate",
          "type": "function",
          "start_line": 9,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func generate(context: Context): Unit {\n        var tokens = context.attrs\n        if (tokens.size == 0) {\n            tokens = Token(TokenKind.PRIVATE, \"private\").toTokens()\n        } else if (tokens.size > 1) {\n            diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u591a\u4e2a\u5173\u952e\u5b57\")\n            throw Exception(\"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\")\n        }\n        let illegal = match (tokens[0].kind) {\n            case TokenKind.PUBLIC => false\n            case TokenKind.PRIVATE => false\n            case TokenKind.PROTECTED => false\n            case TokenKind.INTERNAL => false\n            case _ => true\n        }\n        if (illegal) {\n            diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")\n            return\n        }\n        let params = ArrayList<FuncParam>()\n        let body = quote()\n        for (reval in context.valDecls) {\n            if (reval.assign.kind == TokenKind.ASSIGN) {\n                continue\n            }\n            params.append(FuncParam(quote(\n                $(reval.identifier)!: $(reval.declType)\n            )))\n            body.append(quote(\n                this.$(reval.identifier) = $(reval.identifier)\n            ))\n        }\n        let funcDecl = FuncDecl(quote(\n            $(tokens) init() {\n                $(body)\n            }\n        ))\n        funcDecl.funcParams = params\n        context.structDecl.body.decls.append(funcDecl)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "var tokens = context.attrs",
              "successors": [
                {
                  "id": 2,
                  "label": "if (tokens.size == 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "tokens = Token(TokenKind.PRIVATE, \"private\").toTokens()",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let illegal = match (tokens[0].kind) {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "case TokenKind.PUBLIC => false",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (illegal) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "return",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 15,
                                  "label": "let params = ArrayList<FuncParam>()",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "let body = quote()",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "for (reval in context.valDecls) {",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "if (reval.assign.kind == TokenKind.ASSIGN) {",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "continue",
                                                  "successors": [
                                                    {
                                                      "id": 23,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 24,
                                                          "label": "let funcDecl = FuncDecl(quote(",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "$(tokens) init() {",
                                                              "successors": [
                                                                {
                                                                  "id": 26,
                                                                  "label": "$(body)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 27,
                                                                      "label": "}",
                                                                      "successors": [
                                                                        {
                                                                          "id": 28,
                                                                          "label": "funcDecl.funcParams = params",
                                                                          "successors": [
                                                                            {
                                                                              "id": 29,
                                                                              "label": "context.structDecl.body.decls.append(funcDecl)",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "case TokenKind.PRIVATE => false",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (illegal) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "return",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 15,
                                  "label": "let params = ArrayList<FuncParam>()",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "let body = quote()",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "for (reval in context.valDecls) {",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "if (reval.assign.kind == TokenKind.ASSIGN) {",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "continue",
                                                  "successors": [
                                                    {
                                                      "id": 23,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 24,
                                                          "label": "let funcDecl = FuncDecl(quote(",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "$(tokens) init() {",
                                                              "successors": [
                                                                {
                                                                  "id": 26,
                                                                  "label": "$(body)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 27,
                                                                      "label": "}",
                                                                      "successors": [
                                                                        {
                                                                          "id": 28,
                                                                          "label": "funcDecl.funcParams = params",
                                                                          "successors": [
                                                                            {
                                                                              "id": 29,
                                                                              "label": "context.structDecl.body.decls.append(funcDecl)",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "case TokenKind.PROTECTED => false",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (illegal) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "return",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 15,
                                  "label": "let params = ArrayList<FuncParam>()",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "let body = quote()",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "for (reval in context.valDecls) {",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "if (reval.assign.kind == TokenKind.ASSIGN) {",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "continue",
                                                  "successors": [
                                                    {
                                                      "id": 23,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 24,
                                                          "label": "let funcDecl = FuncDecl(quote(",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "$(tokens) init() {",
                                                              "successors": [
                                                                {
                                                                  "id": 26,
                                                                  "label": "$(body)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 27,
                                                                      "label": "}",
                                                                      "successors": [
                                                                        {
                                                                          "id": 28,
                                                                          "label": "funcDecl.funcParams = params",
                                                                          "successors": [
                                                                            {
                                                                              "id": 29,
                                                                              "label": "context.structDecl.body.decls.append(funcDecl)",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "case TokenKind.INTERNAL => false",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (illegal) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "return",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 15,
                                  "label": "let params = ArrayList<FuncParam>()",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "let body = quote()",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "for (reval in context.valDecls) {",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "if (reval.assign.kind == TokenKind.ASSIGN) {",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "continue",
                                                  "successors": [
                                                    {
                                                      "id": 23,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 24,
                                                          "label": "let funcDecl = FuncDecl(quote(",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "$(tokens) init() {",
                                                              "successors": [
                                                                {
                                                                  "id": 26,
                                                                  "label": "$(body)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 27,
                                                                      "label": "}",
                                                                      "successors": [
                                                                        {
                                                                          "id": 28,
                                                                          "label": "funcDecl.funcParams = params",
                                                                          "successors": [
                                                                            {
                                                                              "id": 29,
                                                                              "label": "context.structDecl.body.decls.append(funcDecl)",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 20,
                              "label": "case _ => true",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "if (illegal) {",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u7684\u5173\u952e\u5b57: ${tokens[0].value}\")",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "return",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 15,
                                  "label": "let params = ArrayList<FuncParam>()",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "let body = quote()",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "for (reval in context.valDecls) {",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "if (reval.assign.kind == TokenKind.ASSIGN) {",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "continue",
                                                  "successors": [
                                                    {
                                                      "id": 23,
                                                      "label": "}",
                                                      "successors": [
                                                        {
                                                          "id": 24,
                                                          "label": "let funcDecl = FuncDecl(quote(",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "$(tokens) init() {",
                                                              "successors": [
                                                                {
                                                                  "id": 26,
                                                                  "label": "$(body)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 27,
                                                                      "label": "}",
                                                                      "successors": [
                                                                        {
                                                                          "id": 28,
                                                                          "label": "funcDecl.funcParams = params",
                                                                          "successors": [
                                                                            {
                                                                              "id": 29,
                                                                              "label": "context.structDecl.body.decls.append(funcDecl)",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "else if (tokens.size > 1) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "diagReport(DiagReportLevel.ERROR, context.attrs, \"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\", \"\u4e0d\u652f\u6301\u591a\u4e2a\u5173\u952e\u5b57\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "throw Exception(\"\u6784\u9020\u51fd\u6570\u53ef\u89c1\u6027\u8bbe\u7f6e\u9519\u8bef\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class StructInitFunctionGenerator <: Generator {\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class StructInitFunctionGenerator <: Generator {",
          "successors": [
            {
              "id": 2,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "macro package Macro_JsonSerializable.macros\n\nimport std.ast.*\nimport std.collection.*\n\n// \u7ed3\u6784\u4f53\u547d\u540d\u6784\u9020\u51fd\u6570\u751f\u6210\u5668\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros",
      "successors": [
        {
          "id": 2,
          "label": "import std.ast.*",
          "successors": [
            {
              "id": 3,
              "label": "import std.collection.*",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}