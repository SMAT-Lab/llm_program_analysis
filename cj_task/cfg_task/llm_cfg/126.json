{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 92,
  "functions": [],
  "classes": [
    {
      "name": "EquatableColor",
      "type": "class",
      "start_line": 8,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": "public enum EquatableColor {\n    | Red\n    | Yellow\n    | Green(Bool)\n    | Orange(Bool)\n    | Blue(Rune)\n    | Pink(Rune)\n    | YCbCr(UInt8, Int32, Float64)\n    | RGBA(Rune, Int32, Bool)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum EquatableColor {",
          "successors": [
            {
              "id": 2,
              "label": "| Red",
              "successors": []
            },
            {
              "id": 3,
              "label": "| Yellow",
              "successors": []
            },
            {
              "id": 4,
              "label": "| Green(Bool)",
              "successors": []
            },
            {
              "id": 5,
              "label": "| Orange(Bool)",
              "successors": []
            },
            {
              "id": 6,
              "label": "| Blue(Rune)",
              "successors": []
            },
            {
              "id": 7,
              "label": "| Pink(Rune)",
              "successors": []
            },
            {
              "id": 8,
              "label": "| YCbCr(UInt8, Int32, Float64)",
              "successors": []
            },
            {
              "id": 9,
              "label": "| RGBA(Rune, Int32, Bool)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "EqutableEnumTest",
      "type": "class",
      "start_line": 20,
      "end_line": 92,
      "functions": [
        {
          "name": "noArgTest",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    func noArgTest(): Unit {\n        let red1 = EquatableColor.Red\n        let red2 = EquatableColor.Red\n        let yellow = EquatableColor.Yellow\n\n        @Expect(red1 == red2)\n        @Expect(red1 != yellow)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func noArgTest(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let red1 = EquatableColor.Red",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    let red2 = EquatableColor.Red",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    let yellow = EquatableColor.Yellow",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    @Expect(red1 == red2)",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    @Expect(red1 != yellow)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "boolTest",
          "type": "function",
          "start_line": 32,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    func boolTest(): Unit {\n        let green1 = EquatableColor.Green(true)\n        let green2 = EquatableColor.Green(true)\n        let green3 = EquatableColor.Green(false)\n        let orange1 = EquatableColor.Orange(true)\n        let orange2 = EquatableColor.Orange(false)\n\n        @Expect(green1 == green2)\n        @Expect(green1 != green3)\n        @Expect(green1 != orange1)\n        @Expect(green1 != orange2)\n        @Expect(green3 != orange1)\n        @Expect(green3 != orange2)\n        @Expect(orange1 != orange2)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let green1 = EquatableColor.Green(true)\nlet green2 = EquatableColor.Green(true)\nlet green3 = EquatableColor.Green(false)\nlet orange1 = EquatableColor.Orange(true)\nlet orange2 = EquatableColor.Orange(false)",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(green1 == green2)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "@Expect(green1 != green3)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "@Expect(green1 != orange1)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "@Expect(green1 != orange2)",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "@Expect(green3 != orange1)",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "@Expect(green3 != orange2)",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "@Expect(orange1 != orange2)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "runeTest",
          "type": "function",
          "start_line": 49,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    func runeTest(): Unit {\n        let blue1 = EquatableColor.Blue(r\"A\")\n        let blue2 = EquatableColor.Blue(r\"A\")\n        let blue3 = EquatableColor.Blue(r\"B\")\n        let blue4 = EquatableColor.Blue(r\"\\\\\")\n        let pink1 = EquatableColor.Pink(r\"A\")\n        let pink2 = EquatableColor.Pink(r\"B\")\n        let pink3 = EquatableColor.Pink(r\"\\\\\")\n        \n        @Expect(blue1 == blue2)\n        @Expect(blue1 != blue3)\n        @Expect(blue1 != pink1)\n        @Expect(blue1 != pink2)\n        @Expect(blue1 != blue4)\n        @Expect(blue3 != pink1)\n        @Expect(blue3 != pink2)\n        @Expect(blue4 != pink3)\n        @Expect(pink1 != pink2)\n        @Expect(pink1 != blue4)\n        @Expect(pink3 != blue4)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func runeTest(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let blue1 = EquatableColor.Blue(r\"A\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "let blue2 = EquatableColor.Blue(r\"A\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "let blue3 = EquatableColor.Blue(r\"B\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "let blue4 = EquatableColor.Blue(r\"\\\\\")",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "let pink1 = EquatableColor.Pink(r\"A\")",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "let pink2 = EquatableColor.Pink(r\"B\")",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "let pink3 = EquatableColor.Pink(r\"\\\\\")",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "@Expect(blue1 == blue2)",
                  "successors": []
                },
                {
                  "id": 10,
                  "label": "@Expect(blue1 != blue3)",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "@Expect(blue1 != pink1)",
                  "successors": []
                },
                {
                  "id": 12,
                  "label": "@Expect(blue1 != pink2)",
                  "successors": []
                },
                {
                  "id": 13,
                  "label": "@Expect(blue1 != blue4)",
                  "successors": []
                },
                {
                  "id": 14,
                  "label": "@Expect(blue3 != pink1)",
                  "successors": []
                },
                {
                  "id": 15,
                  "label": "@Expect(blue3 != pink2)",
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "@Expect(blue4 != pink3)",
                  "successors": []
                },
                {
                  "id": 17,
                  "label": "@Expect(pink1 != pink2)",
                  "successors": []
                },
                {
                  "id": 18,
                  "label": "@Expect(pink1 != blue4)",
                  "successors": []
                },
                {
                  "id": 19,
                  "label": "@Expect(pink3 != blue4)",
                  "successors": []
                },
                {
                  "id": 20,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "nultiArgTest",
          "type": "function",
          "start_line": 72,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": "    func nultiArgTest(): Unit {\n        let ycbcr1 = EquatableColor.YCbCr(255, 1024, 0.5)\n        let ycbcr2 = EquatableColor.YCbCr(255, 1024, 0.5)\n        let ycbcr3 = EquatableColor.YCbCr(128, 2048, 0.75)\n        \n        let rgba1 = EquatableColor.RGBA(r\"A\", 1024, true)\n        let rgba2 = EquatableColor.RGBA(r\"A\", 1024, true)\n        let rgba3 = EquatableColor.RGBA(r\"B\", 2048, false)\n        let rgba4 = EquatableColor.RGBA(r\"A\", 2048, true)\n        \n        @Expect(ycbcr1 == ycbcr2)\n        @Expect(ycbcr1 != ycbcr3)\n        @Expect(ycbcr1 != rgba1)\n        @Expect(ycbcr1 != rgba3)\n        \n        @Expect(rgba1 == rgba2)\n        @Expect(rgba1 != rgba3)\n        @Expect(rgba1 != rgba4)\n        @Expect(rgba1 != ycbcr1)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func nultiArgTest(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let ycbcr1 = EquatableColor.YCbCr(255, 1024, 0.5)\nlet ycbcr2 = EquatableColor.YCbCr(255, 1024, 0.5)\nlet ycbcr3 = EquatableColor.YCbCr(128, 2048, 0.75)\n\nlet rgba1 = EquatableColor.RGBA(r\"A\", 1024, true)\nlet rgba2 = EquatableColor.RGBA(r\"A\", 1024, true)\nlet rgba3 = EquatableColor.RGBA(r\"B\", 2048, false)\nlet rgba4 = EquatableColor.RGBA(r\"A\", 2048, true)\n\n@Expect(ycbcr1 == ycbcr2)\n@Expect(ycbcr1 != ycbcr3)\n@Expect(ycbcr1 != rgba1)\n@Expect(ycbcr1 != rgba3)\n\n@Expect(rgba1 == rgba2)\n@Expect(rgba1 != rgba3)\n@Expect(rgba1 != rgba4)\n@Expect(rgba1 != ycbcr1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class EqutableEnumTest {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class EqutableEnumTest {",
          "successors": [
            {
              "id": 2,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 3,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 4,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 5,
              "label": "@TestCase",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package enum_enhance.test\n\n// import std.unittest.testmacro.*\n// import std.unittest.*\nimport enum_enhance.{EquatableEnum, ToStringEnum}\n\n@EquatableEnum\n}\n\n@Test\n}",
  "blocks": []
}