{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 70,
  "functions": [],
  "classes": [
    {
      "name": "ObservableConcatMap",
      "type": "class",
      "start_line": 2,
      "end_line": 12,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 4,
          "end_line": 6,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(sources: Collection<Observable<T>>) {\n        this.sources = ArrayList<Observable<T>>(sources)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(sources: Collection<Observable<T>>) {\n    this.sources = ArrayList<Observable<T>>(sources)",
              "successors": []
            }
          ]
        },
        {
          "name": "subscribeActual",
          "type": "function",
          "start_line": 7,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func subscribeActual(observer: Observer<T>) {\n        let disposable = ConcatMapObserver(observer, sources)\n        observer.onSubscribe(disposable)\n        disposable.drain()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func subscribeActual(observer: Observer<T>) {\nlet disposable = ConcatMapObserver(observer, sources)",
              "successors": [
                {
                  "id": 3,
                  "label": "observer.onSubscribe(disposable)\ndisposable.drain()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ObservableConcatMap<T> <: Observable<T> {\n    private let sources: ArrayList<Observable<T>>\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class ObservableConcatMap<T> <: Observable<T> {\n    private let sources: ArrayList<Observable<T>>",
          "successors": []
        }
      ]
    },
    {
      "name": "ConcatMapObserver",
      "type": "class",
      "start_line": 13,
      "end_line": 45,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 20,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(downstream: Observer<T>, sources: ArrayList<Observable<T>>) {\n        this.downstream = downstream\n        this.sources = sources\n        this.observer = InnerObserver<T>(downstream)\n        this.observer.parent = this\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(downstream: Observer<T>, sources: ArrayList<Observable<T>>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.downstream = downstream",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    this.sources = sources",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    this.observer = InnerObserver<T>(downstream)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    this.observer.parent = this",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "drain",
          "type": "function",
          "start_line": 26,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    func drain() {\n        if (!active || isDisposed()) {\n            return\n        }\n        if (index >= sources.size) {\n            downstream.onComplete()\n            return\n        }\n        let o: Observable<T> = sources[index]\n        index++\n        o.subscribe(observer)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "if (!active || isDisposed()) {\n    return",
              "successors": []
            }
          ]
        },
        {
          "name": "dispose",
          "type": "function",
          "start_line": 38,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func dispose(): Unit {\n        cancelled = true\n        observer.dispose()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func dispose(): Unit {\n    cancelled = true",
              "successors": [
                {
                  "id": 3,
                  "label": "    observer.dispose()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "isDisposed",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func isDisposed(): Bool {\n        return cancelled\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func isDisposed(): Bool {\n    return cancelled",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ConcatMapObserver<T> <: EquatableDisposable {\n    private let downstream: Observer<T>\n    protected let observer: InnerObserver<T>\n    private let sources: ArrayList<Observable<T>>\n    private var index: Int64 = 0\n    private var cancelled: Bool = false\n    protected var active: Bool = true\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class ConcatMapObserver<T> <: EquatableDisposable {",
          "successors": [
            {
              "id": 2,
              "label": "private let downstream: Observer<T>",
              "successors": []
            },
            {
              "id": 3,
              "label": "protected let observer: InnerObserver<T>",
              "successors": []
            },
            {
              "id": 4,
              "label": "private let sources: ArrayList<Observable<T>>",
              "successors": []
            },
            {
              "id": 5,
              "label": "private var index: Int64 = 0",
              "successors": []
            },
            {
              "id": 6,
              "label": "private var cancelled: Bool = false",
              "successors": []
            },
            {
              "id": 7,
              "label": "protected var active: Bool = true",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "InnerObserver",
      "type": "class",
      "start_line": 46,
      "end_line": 70,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 50,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(downstream: Observer<T>) {\n        this.downstream = downstream\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(downstream: Observer<T>) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.downstream = downstream",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "onSubscribe",
          "type": "function",
          "start_line": 53,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func onSubscribe(disposable: Disposable): Unit {\n        disposableReference.setOnce(disposable)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func onSubscribe(disposable: Disposable): Unit {\n    disposableReference.setOnce(disposable)",
              "successors": []
            }
          ]
        },
        {
          "name": "onNext",
          "type": "function",
          "start_line": 56,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func onNext(value: T) {\n        downstream.onNext(value)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func onNext(value: T) {\n    downstream.onNext(value)",
              "successors": []
            }
          ]
        },
        {
          "name": "onError",
          "type": "function",
          "start_line": 59,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func onError(exception: Exception) {\n        parent?.active = false\n        parent?.drain()\n        downstream.onError(exception)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func onError(exception: Exception) {\n    parent?.active = false\n    parent?.drain()\n    downstream.onError(exception)",
              "successors": []
            }
          ]
        },
        {
          "name": "onComplete",
          "type": "function",
          "start_line": 64,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func onComplete(): Unit {\n        parent?.drain()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func onComplete(): Unit {\n    parent?.drain()",
              "successors": []
            }
          ]
        },
        {
          "name": "dispose",
          "type": "function",
          "start_line": 67,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func dispose(): Unit {\n        DisposableHelper.dispose(disposableReference)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func dispose(): Unit {\n    DisposableHelper.dispose(disposableReference)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class InnerObserver<T> <: Observer<T> {\n    private let downstream: Observer<T>\n    protected var parent: ?ConcatMapObserver<T> = Option.None\n    private var disposableReference: DisposableReference = DisposableReference()\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class InnerObserver<T> <: Observer<T> {",
          "successors": [
            {
              "id": 2,
              "label": "    private let downstream: Observer<T>",
              "successors": []
            },
            {
              "id": 3,
              "label": "    protected var parent: ?ConcatMapObserver<T> = Option.None",
              "successors": []
            },
            {
              "id": 4,
              "label": "    private var disposableReference: DisposableReference = DisposableReference()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package rx.observables\n}\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package rx.observables",
      "successors": []
    }
  ]
}