{
  "name": "silo_spirit_dao_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 129,
  "functions": [],
  "classes": [
    {
      "name": "SiloSpiritDao",
      "type": "class",
      "start_line": 10,
      "end_line": 129,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(configuration: GlobalConfiguration, sqlRunner: SqlRunner, connection: Connection,\n        closeFun!: () -> Unit = {=>}) {\n        super(configuration)\n        this.sqlRunner = sqlRunner\n        this.connection = connection\n        this.closeFun = closeFun\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(configuration: GlobalConfiguration, sqlRunner: SqlRunner, connection: Connection, closeFun!: () -> Unit = {=>}) {\n    super(configuration)",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.sqlRunner = sqlRunner\n    this.connection = connection",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    this.closeFun = closeFun\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "select",
          "type": "function",
          "start_line": 21,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): ArrayList<Reflectable> {\n        try {\n            let sqlStatement = getSqlStatement(sqlID)\n            sqlRunner.query(sqlStatement, inputParam, clazz)\n        } catch (e: Exception) {\n            throw wrapException(e)\n        } finally {\n            ExceptionContext.close()\n            closeFun()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): ArrayList<Reflectable> {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "let sqlStatement = getSqlStatement(sqlID)\nsqlRunner.query(sqlStatement, inputParam, clazz)\nfinally {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "ExceptionContext.close()\ncloseFun()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "catch (e: Exception) {\nthrow wrapException(e)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "finally {\nExceptionContext.close()\ncloseFun()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "selectCursor",
          "type": "function",
          "start_line": 32,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func selectCursor(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): Cursor<Reflectable> {\n        try {\n            let sqlStatement = getSqlStatement(sqlID)\n            sqlRunner.queryCursor(sqlStatement, inputParam, clazz)\n        } catch (e: Exception) {\n            throw wrapException(e)\n        } finally {\n            ExceptionContext.close()\n            closeFun()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func selectCursor(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): Cursor<Reflectable> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nlet sqlStatement = getSqlStatement(sqlID)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "sqlRunner.queryCursor(sqlStatement, inputParam, clazz)\nExceptionContext.close()",
                      "successors": [
                        {
                          "id": 7,
                          "label": "closeFun()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "} catch (e: Exception) {\nthrow wrapException(e)",
                  "successors": [
                    {
                      "id": 6,
                      "label": "ExceptionContext.close()\ncloseFun()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "select",
          "type": "function",
          "start_line": 43,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class,\n        resultItemCallback: (Reflectable) -> Bool): Unit {\n        try {\n            let sqlStatement = getSqlStatement(sqlID)\n            sqlRunner.query(sqlStatement, inputParam, clazz, resultItemCallback)\n        } catch (e: Exception) {\n            throw wrapException(e)\n        } finally {\n            ExceptionContext.close()\n            closeFun()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func select(sqlID: String, inputParam: Option<Reflectable>, clazz: Class, resultItemCallback: (Reflectable) -> Bool): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "let sqlStatement = getSqlStatement(sqlID) sqlRunner.query(sqlStatement, inputParam, clazz, resultItemCallback)\nExceptionContext.close() closeFun()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "} catch (e: Exception) {\nthrow wrapException(e)",
                      "successors": [
                        {
                          "id": 6,
                          "label": "ExceptionContext.close() closeFun()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "} finally { ExceptionContext.close() closeFun() } }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "execute",
          "type": "function",
          "start_line": 55,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func execute(sqlID: String, inputParam: Option<Reflectable>, clazz: Class): Any {\n        try {\n            let sqlStatement = getSqlStatement(sqlID)\n            let updateResult = sqlRunner.update(sqlStatement, inputParam)\n            return adaptUpdateResult(updateResult, clazz)\n        } catch (e: Exception) {\n            throw wrapException(e)\n        } finally {\n            ExceptionContext.close()\n            closeFun()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "try {",
              "successors": [
                {
                  "id": 2,
                  "label": "    let sqlStatement = getSqlStatement(sqlID)\n    let updateResult = sqlRunner.update(sqlStatement, inputParam)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    return adaptUpdateResult(updateResult, clazz)\nExceptionContext.close()\ncloseFun()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "catch (e: Exception) {\n    throw wrapException(e)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "ExceptionContext.close()\ncloseFun()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "batchExecute",
          "type": "function",
          "start_line": 67,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func batchExecute(sqlID: String, inputParam: Option<Reflectable>, _: Class): Any {\n        try {\n            let sqlStatement = getSqlStatement(sqlID)\n            sqlRunner.batchUpdate(sqlStatement, inputParam)\n        } catch (e: Exception) {\n            throw wrapException(e)\n        } finally {\n            ExceptionContext.close()\n            closeFun()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func batchExecute(sqlID: String, inputParam: Option<Reflectable>, _: Class): Any {\ntry {",
              "successors": [
                {
                  "id": 3,
                  "label": "let sqlStatement = getSqlStatement(sqlID)\nsqlRunner.batchUpdate(sqlStatement, inputParam)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "ExceptionContext.close()\ncloseFun()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "} catch (e: Exception) {\nthrow wrapException(e)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "ExceptionContext.close()\ncloseFun()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} finally {",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "commit",
          "type": "function",
          "start_line": 78,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func commit(): Unit {\n        sqlRunner.commit()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func commit(): Unit {\n    sqlRunner.commit()",
              "successors": []
            }
          ]
        },
        {
          "name": "rollback",
          "type": "function",
          "start_line": 81,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func rollback(): Unit {\n        sqlRunner.rollback()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func rollback(): Unit {\n    sqlRunner.rollback()",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "beginTransaction",
          "type": "function",
          "start_line": 84,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func beginTransaction(): Unit {\n        sqlRunner.beginTransaction()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func beginTransaction(): Unit {\n    sqlRunner.beginTransaction()",
              "successors": []
            }
          ]
        },
        {
          "name": "close",
          "type": "function",
          "start_line": 87,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func close(): Unit {\n        sqlRunner.close()\n        connection.close()\n        closeFlag = true\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func close(): Unit {\n    sqlRunner.close()",
              "successors": [
                {
                  "id": 3,
                  "label": "    connection.close()\n    closeFlag = true",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "adaptUpdateResult",
          "type": "function",
          "start_line": 92,
          "end_line": 101,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func adaptUpdateResult(updateResult: Int64, clazz: Class): Any {\n        let instance = clazz.newInstance()\n        if (instance is Bool) {\n            if (updateResult > 0) {\n                return true\n            }\n            return false\n        }\n        return convertNumberToType(updateResult, clazz)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func adaptUpdateResult(updateResult: Int64, clazz: Class): Any {\nlet instance = clazz.newInstance()",
              "successors": [
                {
                  "id": 3,
                  "label": "if (instance is Bool) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if (updateResult > 0) {\nreturn true",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "return false",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "return convertNumberToType(updateResult, clazz)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "convertNumberToType",
          "type": "function",
          "start_line": 102,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func convertNumberToType(number: Int64, clazz: Class): Any {\n        match (clazz.getName()) {\n            case \"Int64\" => Int64(number)\n            case \"Int32\" => Int32(number)\n            case \"Int16\" => Int16(number)\n            case \"Int8\" => Int8(number)\n            case \"IntNative\" => IntNative(number)\n            case \"UInt64\" => UInt64(number)\n            case \"UInt32\" => UInt32(number)\n            case \"UInt16\" => UInt16(number)\n            case \"UInt8\" => UInt8(number)\n            case \"UIntNative\" => UIntNative(number)\n            case \"Float64\" => Float64(number)\n            case \"Float32\" => Float32(number)\n            case \"Float16\" => Float16(number)\n            case \"Char\" => Char(number)\n            case \"Bool\" => number != 0\n            case \"String\" => \"${number}\"\n            case _ => throw ResultHandleException(\n                \"update sql result only support Bool and numberic type, not support ${clazz.getName()}, please change it\"\n            )\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "match (clazz.getName())",
              "successors": [
                {
                  "id": 2,
                  "label": "case \"Int64\" => Int64(number)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "case \"Int32\" => Int32(number)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case \"Int16\" => Int16(number)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "case \"Int8\" => Int8(number)",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "case \"IntNative\" => IntNative(number)",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "case \"UInt64\" => UInt64(number)",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "case \"UInt32\" => UInt32(number)",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "case \"UInt16\" => UInt16(number)",
                  "successors": []
                },
                {
                  "id": 10,
                  "label": "case \"UInt8\" => UInt8(number)",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "case \"UIntNative\" => UIntNative(number)",
                  "successors": []
                },
                {
                  "id": 12,
                  "label": "case \"Float64\" => Float64(number)",
                  "successors": []
                },
                {
                  "id": 13,
                  "label": "case \"Float32\" => Float32(number)",
                  "successors": []
                },
                {
                  "id": 14,
                  "label": "case \"Float16\" => Float16(number)",
                  "successors": []
                },
                {
                  "id": 15,
                  "label": "case \"Char\" => Char(number)",
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "case \"Bool\" => number != 0",
                  "successors": []
                },
                {
                  "id": 17,
                  "label": "case \"String\" => \"${number}\"",
                  "successors": []
                },
                {
                  "id": 18,
                  "label": "case _ => throw ResultHandleException(\"update sql result only support Bool and numberic type, not support ${clazz.getName()}, please change it\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "flushStatements",
          "type": "function",
          "start_line": 125,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func flushStatements(): Int64 {\n        var result = sqlRunner.flushStatements()\n        return result\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func flushStatements(): Int64 {\nvar result = sqlRunner.flushStatements()",
              "successors": [
                {
                  "id": 3,
                  "label": "return result",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class SiloSpiritDao <: Dao {\n    let sqlRunner: SqlRunner\n    let connection: Connection\n    public var closeFun: () -> Unit = { => }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class SiloSpiritDao <: Dao {\n    let sqlRunner: SqlRunner",
          "successors": [
            {
              "id": 3,
              "label": "    let connection: Connection\n    public var closeFun: () -> Unit = { => }",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package silo.spirit.dao\nfrom std import collection.*\nfrom std import database.sql.Connection\nfrom cangjie_spirit import spirit.session.Dao\nfrom cangjie_spirit import spirit.runner.SqlRunner\nfrom cangjie_spirit import spirit.exception.{ExceptionContext, wrapException, ResultHandleException}\nfrom cangjie_spirit import spirit.cursor.{Cursor, ProxyCursor, DefaultCursor}\nfrom cangjie_spirit import spirit.configuration.GlobalConfiguration\nfrom crystal import reflection.{Reflectable, Class}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package silo.spirit.dao\nfrom std import collection.*\nfrom std import database.sql.Connection\nfrom cangjie_spirit import spirit.session.Dao\nfrom cangjie_spirit import spirit.runner.SqlRunner\nfrom cangjie_spirit import spirit.exception.{ExceptionContext, wrapException, ResultHandleException}\nfrom cangjie_spirit import spirit.cursor.{Cursor, ProxyCursor, DefaultCursor}\nfrom cangjie_spirit import spirit.configuration.GlobalConfiguration\nfrom crystal import reflection.{Reflectable, Class}\n}",
      "successors": []
    }
  ]
}