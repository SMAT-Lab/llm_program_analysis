{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 31,
  "functions": [],
  "classes": [
    {
      "name": "Result",
      "type": "class",
      "start_line": 3,
      "end_line": 6,
      "functions": [],
      "classes": [],
      "simplified_code": "public enum Result<T, E> {\n    | Ok(T)\n    | Err(E)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum Result<T, E> {\n| Ok(T)",
          "successors": [
            {
              "id": 3,
              "label": "| Err(E)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ResultExt",
      "type": "class",
      "start_line": 8,
      "end_line": 8,
      "functions": [],
      "classes": [],
      "simplified_code": "public interface ResultExt {}",
      "blocks": [
        {
          "id": 1,
          "label": "public interface ResultExt {}",
          "successors": []
        }
      ]
    },
    {
      "name": "Result",
      "type": "class",
      "start_line": 10,
      "end_line": 31,
      "functions": [
        {
          "name": "map",
          "type": "function",
          "start_line": 11,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func map<U>(f: (T) -> U): Result<U, E> {\n        match (this) {\n            case Ok(v) => Ok(f(v))\n            case Err(e) => Err(e)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func map<U>(f: (T) -> U): Result<U, E> {\nmatch (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Ok(v) => Ok(f(v))",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case Err(e) => Err(e)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "mapErr",
          "type": "function",
          "start_line": 18,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func mapErr<F>(f: (E) -> F): Result<T, F> {\n        match (this) {\n            case Ok(t) => Ok(t)\n            case Err(e) => Err(f(e))\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func mapErr<F>(f: (E) -> F): Result<T, F> {\nmatch (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Ok(t) => Ok(t)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case Err(e) => Err(f(e))",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "andThen",
          "type": "function",
          "start_line": 25,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func andThen<U>(f: (T) -> Result<U, E>): Result<U, E> {\n        match (this) {\n            case Ok(v) => f(v)\n            case Err(e) => Err(e)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func andThen<U>(f: (T) -> Result<U, E>): Result<U, E> {\nmatch (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Ok(v) => f(v)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case Err(e) => Err(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<T, E> Result<T, E> <: ResultExt {\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "extend<T, E> Result<T, E> <: ResultExt {\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package simple_math_interpreter.ext\n\n}\n\npublic interface ResultExt {}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package simple_math_interpreter.ext",
      "successors": []
    }
  ]
}