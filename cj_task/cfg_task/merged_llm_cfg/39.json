{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [],
  "classes": [
    {
      "name": "MySqlDriver",
      "type": "class",
      "start_line": 3,
      "end_line": 62,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 4,
          "end_line": 7,
          "functions": [],
          "classes": [],
          "simplified_code": "    static init() {\n        println(\"mysql register MySqlDriver\")\n        DriverManager.register(\"mysql\", MySqlDriver())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "static init() {\n    println(\"mysql register MySqlDriver\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    DriverManager.register(\"mysql\", MySqlDriver())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "name",
          "type": "function",
          "start_line": 9,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": "    public prop name: String {\n        get() {\n            return \"mysql\"\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public prop name: String {\n    get() {",
              "successors": [
                {
                  "id": 3,
                  "label": "        return \"mysql\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "version",
          "type": "function",
          "start_line": 14,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    public prop version: String {\n        get() {\n            return \"0.0.1\"\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public prop version: String {\nget() {",
              "successors": [
                {
                  "id": 3,
                  "label": "return \"0.0.1\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "preferredPooling",
          "type": "function",
          "start_line": 19,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    public prop preferredPooling: Bool {\n        get() {\n            return true\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public prop preferredPooling: Bool {\nget() {",
              "successors": [
                {
                  "id": 3,
                  "label": "return true",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "open",
          "type": "function",
          "start_line": 28,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func open(connectionString: String, opts: Array<(String, String)>): Datasource {\n        // let connectionString = \"username:password@protocol(192.168.4.44:3307)/dbname\"\n        let config = parseConnectStringAndParams(connectionString, opts)\n        return MySqlDatasource(config)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func open(connectionString: String, opts: Array<(String, String)>): Datasource {\nlet config = parseConnectStringAndParams(connectionString, opts)",
              "successors": [
                {
                  "id": 3,
                  "label": "return MySqlDatasource(config)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "parseConnectStringAndParams",
          "type": "function",
          "start_line": 34,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func parseConnectStringAndParams(connectionString: String, opts: Array<(String, String)>): Config {\n        let usernameEnd = connectionString.indexOf(\":\", 0).getOrDefault({ => -1})\n        let passwordEnd = connectionString.indexOf(\"@\").getOrDefault({ => -1})\n        let protocolEnd = connectionString.indexOf(\"(\").getOrDefault({ => -1})\n        let addressEnd = connectionString.indexOf(\")\").getOrDefault({ => -1})\n        let dbnameStart = addressEnd + 2\n        let username = connectionString[0..usernameEnd]\n        let password = connectionString[usernameEnd + 1 .. passwordEnd]\n        let protocol = connectionString[passwordEnd + 1 .. protocolEnd]\n        let address  = connectionString[protocolEnd + 1 .. addressEnd]\n        let dbname = connectionString[dbnameStart .. ]\n\n        println(\"username = ${username}, password = ${password}, protocol = ${protocol}, address = ${address}, \" \n        + \"dbname = ${dbname}\")\n\n        let config = Config()\n        config.address = address\n        config.username = username\n        config.password = password\n        config.protocol = protocol\n        config.dbname = dbname\n\n        for((key, value) in opts) {\n            config.params.put(key, value)\n        }\n\n        return config\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let usernameEnd = connectionString.indexOf(\":\", 0).getOrDefault({ => -1})\nlet passwordEnd = connectionString.indexOf(\"@\").getOrDefault({ => -1})",
              "successors": [
                {
                  "id": 3,
                  "label": "let protocolEnd = connectionString.indexOf(\"(\").getOrDefault({ => -1})\nlet addressEnd = connectionString.indexOf(\")\").getOrDefault({ => -1})",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let dbnameStart = addressEnd + 2\nlet username = connectionString[0..usernameEnd]",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let password = connectionString[usernameEnd + 1 .. passwordEnd]\nlet protocol = connectionString[passwordEnd + 1 .. protocolEnd]",
                          "successors": [
                            {
                              "id": 9,
                              "label": "let address = connectionString[protocolEnd + 1 .. addressEnd]\nlet dbname = connectionString[dbnameStart .. ]",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "println(\"username = ${username}, password = ${password}, protocol = ${protocol}, address = ${address}, dbname = ${dbname}\")\nlet config = Config()",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "config.address = address\nconfig.username = username\nconfig.password = password\nconfig.protocol = protocol\nconfig.dbname = dbname\nfor((key, value) in opts) {",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "config.params.put(key, value)\n}",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "return config",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class MySqlDriver <: Driver {\n    }\n\n    }\n    }\n    }\n\n    // 要实现的第一个方法\n    // connectionString 格式  username:password@protocol(address)/dbname\n    // opts 目前仅支持 charset\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class MySqlDriver <: Driver {\n}",
          "successors": [
            {
              "id": 3,
              "label": "}\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package cangjieWeb.mysql\nimport std.database.sql.{Driver, DriverManager, Datasource}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package cangjieWeb.mysql",
      "successors": []
    }
  ]
}