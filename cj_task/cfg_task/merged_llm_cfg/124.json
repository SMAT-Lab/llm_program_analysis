{
  "name": "enum_enhance",
  "type": "CFG",
  "start_line": 1,
  "end_line": 104,
  "functions": [
    {
      "name": "EquatableEnum",
      "type": "function",
      "start_line": 6,
      "end_line": 104,
      "functions": [],
      "classes": [],
      "simplified_code": "public macro EquatableEnum(input: Tokens): Tokens {\n    let enumm = EnumDecl(input)\n    // match表达式\n    let hashMatchExpr = MatchExpr()\n    hashMatchExpr.selector = RefExpr(quote(this))\n    hashMatchExpr.lParen = Token(TokenKind.LPAREN)\n    hashMatchExpr.rParen = Token(TokenKind.RPAREN)\n    // 基础类型无嵌套参数构造器\n    let noNestedPrimConstr = enumm.constructors |>\n        filter {\n        i: Constructor => i.typeArguments |>\n            all {\n            i: TypeNode => match (i) {\n                case a: PrimitiveType => true\n                case _ => throw ASTException(\"All args of Constructor shall be primitive type\")\n            }\n        }\n    }\n    // 构造case\n    let noNestedPrimCases = ArrayList<MatchCase>()\n    var hashIndex = 0i64\n    for (constr in noNestedPrimConstr) {\n        let matchCase = MatchCase()\n        let blockNodes = matchCase.block.nodes\n        let enumPatt = EnumPattern()\n\n        blockNodes.append(VarDecl(quote(var hasher = DefaultHasher(res: $(hashIndex)))))\n        enumPatt.constructor = parseExpr(constr.identifier.toTokens())\n\n        for (item in constr.typeArguments |> enumerate) {\n            let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())\n            enumPatt.patterns.append(TypePattern(quote($(id): $(item[1]))))\n            blockNodes.append(CallExpr(quote(hasher.write($(id)))))\n        }\n        blockNodes.append(CallExpr(quote(hasher.finish())))\n\n        matchCase.patterns.append(enumPatt)\n        noNestedPrimCases.append(matchCase)\n        hashIndex++\n    }\n    noNestedPrimCases.iterator().forEach {i => hashMatchExpr.matchCases.append(i)}\n    // hashCode函数\n    let block = Block()\n    block.nodes.append(hashMatchExpr)\n    let hashCode = FuncDecl(\n        quote(\n            \n        public func hashCode(): Int64 {\n            $block\n        }))\n    // == 函数\n    let equal = FuncDecl(\n        quote(\n        public operator func ==(that: $(enumm.identifier)): Bool {\n            this.hashCode() == that.hashCode()\n        })\n    )\n    // != 函数\n    let notEqual = FuncDecl(\n        quote(\n        public operator func !=(that: $(enumm.identifier)): Bool {\n            this.hashCode() != that.hashCode()\n        })\n    )\n    // 将函数加入枚举\n    let funcs = ArrayList<String>()\n    for (decl in enumm.decls) {\n        match (decl) {\n            // case d: FuncDecl => funcSet.put(d.identifier.toTokens().toString())\n            case d: FuncDecl => funcs.append(d.identifier.value)\n            case _ => ()\n        }\n    }\n    if (!funcs.contains(\"hashCode\")) {\n        enumm.decls.append(hashCode)\n    }\n    if (!funcs.contains(\"==\")) {\n        enumm.decls.append(equal)\n    }\n    if (!funcs.contains(\"!=\")) {\n        enumm.decls.append(notEqual)\n    }\n    // 继承接口\n    let intfs = ArrayList<String>()\n    for (i in enumm.superTypes) {\n        match (i) {\n            case r: RefType => intfs.append(r.toTokens().toString())\n            case r: TypeNode => ()\n        }\n    }\n    if (!intfs.contains(\"Hashable\")) {\n        enumm.superTypes.append(RefType(quote(Hashable)))\n    }\n    if (!intfs.contains(\"Equatable\")) {\n        enumm.superTypes.append(RefType(quote(Equatable<$(enumm.identifier)>)))\n    }\n\n    enumm.toTokens()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public macro EquatableEnum(input: Tokens): Tokens {\nlet enumm = EnumDecl(input)",
          "successors": [
            {
              "id": 3,
              "label": "let hashMatchExpr = MatchExpr()\nhashMatchExpr.selector = RefExpr(quote(this))",
              "successors": [
                {
                  "id": 5,
                  "label": "hashMatchExpr.lParen = Token(TokenKind.LPAREN)\nhashMatchExpr.rParen = Token(TokenKind.RPAREN)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "let noNestedPrimConstr = enumm.constructors |> filter {\ni: Constructor => i.typeArguments |> all {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "i: TypeNode => match (i) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "case a: PrimitiveType => true",
                              "successors": []
                            },
                            {
                              "id": 11,
                              "label": "case _ => throw ASTException(\"All args of Constructor shall be primitive type\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "let noNestedPrimCases = ArrayList<MatchCase>()",
                      "successors": [
                        {
                          "id": 13,
                          "label": "var hashIndex = 0i64",
                          "successors": [
                            {
                              "id": 14,
                              "label": "for (constr in noNestedPrimConstr) {",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "let matchCase = MatchCase()\nlet blockNodes = matchCase.block.nodes",
                                  "successors": [
                                    {
                                      "id": 17,
                                      "label": "let enumPatt = EnumPattern()\nblockNodes.append(VarDecl(quote(var hasher = DefaultHasher(res: $(hashIndex)))))",
                                      "successors": [
                                        {
                                          "id": 19,
                                          "label": "enumPatt.constructor = parseExpr(constr.identifier.toTokens())",
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "for (item in constr.typeArguments |> enumerate) {",
                                              "successors": [
                                                {
                                                  "id": 21,
                                                  "label": "let id = Token(TokenKind.IDENTIFIER, \"v\" + item[0].toString())\nenumPatt.patterns.append(TypePattern(quote($(id): $(item[1]))))",
                                                  "successors": [
                                                    {
                                                      "id": 23,
                                                      "label": "blockNodes.append(CallExpr(quote(hasher.write($(id)))))",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 24,
                                              "label": "blockNodes.append(CallExpr(quote(hasher.finish())))\nmatchCase.patterns.append(enumPatt)",
                                              "successors": [
                                                {
                                                  "id": 26,
                                                  "label": "noNestedPrimCases.append(matchCase)\nhashIndex++",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 28,
                          "label": "noNestedPrimCases.iterator().forEach {i => hashMatchExpr.matchCases.append(i)}\nlet block = Block()",
                          "successors": [
                            {
                              "id": 30,
                              "label": "block.nodes.append(hashMatchExpr)\nlet hashCode = FuncDecl(quote(public func hashCode(): Int64 { $block }))",
                              "successors": [
                                {
                                  "id": 32,
                                  "label": "let equal = FuncDecl(quote(public operator func ==(that: $(enumm.identifier)): Bool { this.hashCode() == that.hashCode() }))\nlet notEqual = FuncDecl(quote(public operator func !=(that: $(enumm.identifier)): Bool { this.hashCode() != that.hashCode() }))",
                                  "successors": [
                                    {
                                      "id": 34,
                                      "label": "let funcs = ArrayList<String>()",
                                      "successors": [
                                        {
                                          "id": 35,
                                          "label": "for (decl in enumm.decls) {",
                                          "successors": [
                                            {
                                              "id": 36,
                                              "label": "match (decl) {",
                                              "successors": [
                                                {
                                                  "id": 37,
                                                  "label": "case d: FuncDecl => funcs.append(d.identifier.value)",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 38,
                                                  "label": "case _ => ()",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 39,
                                          "label": "if (!funcs.contains(\"hashCode\")) {\nenumm.decls.append(hashCode)",
                                          "successors": []
                                        },
                                        {
                                          "id": 41,
                                          "label": "if (!funcs.contains(\"==\")) {\nenumm.decls.append(equal)",
                                          "successors": []
                                        },
                                        {
                                          "id": 43,
                                          "label": "if (!funcs.contains(\"!=\")) {\nenumm.decls.append(notEqual)",
                                          "successors": []
                                        },
                                        {
                                          "id": 45,
                                          "label": "let intfs = ArrayList<String>()",
                                          "successors": [
                                            {
                                              "id": 46,
                                              "label": "for (i in enumm.superTypes) {",
                                              "successors": [
                                                {
                                                  "id": 47,
                                                  "label": "match (i) {",
                                                  "successors": [
                                                    {
                                                      "id": 48,
                                                      "label": "case r: RefType => intfs.append(r.toTokens().toString())",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 49,
                                                      "label": "case r: TypeNode => ()",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 50,
                                              "label": "if (!intfs.contains(\"Hashable\")) {\nenumm.superTypes.append(RefType(quote(Hashable)))",
                                              "successors": []
                                            },
                                            {
                                              "id": 52,
                                              "label": "if (!intfs.contains(\"Equatable\")) {\nenumm.superTypes.append(RefType(quote(Equatable<$(enumm.identifier)>)))",
                                              "successors": []
                                            },
                                            {
                                              "id": 54,
                                              "label": "enumm.toTokens()",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "macro package enum_enhance\n\nimport std.ast.*\nimport std.collection.{ArrayList, enumerate, filter, all}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package enum_enhance",
      "successors": []
    }
  ]
}