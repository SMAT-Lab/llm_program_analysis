{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 190,
  "functions": [],
  "classes": [
    {
      "name": "ByteArrayUtils",
      "type": "class",
      "start_line": 6,
      "end_line": 190,
      "functions": [
        {
          "name": "indexByte",
          "type": "function",
          "start_line": 9,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func indexByte(source: Array<Byte>, target: Byte): Int64 {\n        for (i in 0 .. source.size) {\n            if (source[i] == target) {\n                return i\n            }\n        }\n        return -1\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func indexByte(source: Array<Byte>, target: Byte): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (i in 0 .. source.size) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (source[i] == target) {\nreturn i",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "}\nreturn -1",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "littleEndianUint16",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func littleEndianUint16(b: Array<Byte>):UInt16 {\n        return UInt16(b[0]) | UInt16(b[1])<<8\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func littleEndianUint16(b: Array<Byte>):UInt16 {\nreturn UInt16(b[0]) | UInt16(b[1])<<8",
              "successors": []
            }
          ]
        },
        {
          "name": "littleEndianUint32",
          "type": "function",
          "start_line": 22,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func littleEndianUint32(b: Array<Byte>):UInt32 {\n        return UInt32(b[0]) | UInt32(b[1])<<8 | UInt32(b[2])<<16 | UInt32(b[3]) << 24\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func littleEndianUint32(b: Array<Byte>):UInt32 {\nreturn UInt32(b[0]) | UInt32(b[1])<<8 | UInt32(b[2])<<16 | UInt32(b[3]) << 24",
              "successors": []
            }
          ]
        },
        {
          "name": "scrambleCachingSha2",
          "type": "function",
          "start_line": 26,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func scrambleCachingSha2(cipher: Array<Byte>, passwd: Array<Byte>):Array<Byte> {\n        // 使用本包需要外部依赖 OpenSSL 3 的 crypto 动态库文件，故使用前需安装相关工具。\n        // 并配置环境变量\n        var sha2Instance = SHA256()\n        var dig1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n        var dig2 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n        var scramble1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n        \n        sha2Instance.write(passwd)\n        dig1 = sha2Instance.finish()\n        sha2Instance.reset()\n        sha2Instance.write(dig1)\n        dig2 = sha2Instance.finish()\n        sha2Instance.reset()\n        sha2Instance.write(dig2)\n        sha2Instance.write(cipher)\n        scramble1 = sha2Instance.finish()\n        sha2Instance.reset()\n        var mysqlScrambleBuff = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n        xorString(dig1, mysqlScrambleBuff, scramble1, CACHING_SHA2_DIGEST_LENGTH)\n        return mysqlScrambleBuff\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func scrambleCachingSha2(cipher: Array<Byte>, passwd: Array<Byte>):Array<Byte> {\n    var sha2Instance = SHA256()\n    var dig1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n    var dig2 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n    var scramble1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n    \n    sha2Instance.write(passwd)\n    dig1 = sha2Instance.finish()\n    sha2Instance.reset()\n    sha2Instance.write(dig1)\n    dig2 = sha2Instance.finish()\n    sha2Instance.reset()\n    sha2Instance.write(dig2)\n    sha2Instance.write(cipher)\n    scramble1 = sha2Instance.finish()\n    sha2Instance.reset()\n    var mysqlScrambleBuff = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n    xorString(dig1, mysqlScrambleBuff, scramble1, CACHING_SHA2_DIGEST_LENGTH)",
              "successors": [
                {
                  "id": 3,
                  "label": "return mysqlScrambleBuff",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "scrambleRSA",
          "type": "function",
          "start_line": 49,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func scrambleRSA(password: String, publicKey: Array<Byte>, cipher: Array<Byte>): Array<Byte> {\n        var input: Array<Byte>\n        if(password.toArray().size == 0) {\n            input = Array<Byte>(1, item: 0)\n        } else {\n            input = Array<Byte>(password.toArray().size + 1, item: 0)\n            password.toArray().copyTo(input, 0, 0, password.toArray().size)\n            input[password.toArray().size] = 0\n        }\n\n        var mysqlScrambleBuff = Array<Byte>(input.size, item: 0)\n        xorString(input, mysqlScrambleBuff, cipher, input.size)\n        var rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))\n       \n        var byteArraySteam1 = ByteArrayStream()\n        byteArraySteam1.write(mysqlScrambleBuff)\n        \n        var byteArraySteam2 = ByteArrayStream()\n        var opt = OAEPOption(SHA1(),SHA1())\n        rsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))\n        // rsaPub.encrypt(byteArraySteam1, byteArraySteam2, padType: PadOption.PKCS1)\n        var buffer = Array<Byte>(1024, item: 0)\n        var len = byteArraySteam2.read(buffer)\n        var res = Array<Byte>(len, item: 0)\n        buffer.copyTo(res, 0, 0, len)\n        return res\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func scrambleRSA(password: String, publicKey: Array<Byte>, cipher: Array<Byte>): Array<Byte> {\nvar input: Array<Byte>",
              "successors": [
                {
                  "id": 3,
                  "label": "if(password.toArray().size == 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "input = Array<Byte>(1, item: 0)\nvar mysqlScrambleBuff = Array<Byte>(input.size, item: 0)\nxorString(input, mysqlScrambleBuff, cipher, input.size)\nvar rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))\n\nvar byteArraySteam1 = ByteArrayStream()\nbyteArraySteam1.write(mysqlScrambleBuff)\n\nvar byteArraySteam2 = ByteArrayStream()\nvar opt = OAEPOption(SHA1(),SHA1())\nrsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))\nvar buffer = Array<Byte>(1024, item: 0)\nvar len = byteArraySteam2.read(buffer)\nvar res = Array<Byte>(len, item: 0)\nbuffer.copyTo(res, 0, 0, len)\nreturn res",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} else {\ninput = Array<Byte>(password.toArray().size + 1, item: 0)\npassword.toArray().copyTo(input, 0, 0, password.toArray().size)\ninput[password.toArray().size] = 0",
                      "successors": [
                        {
                          "id": 9,
                          "label": "var mysqlScrambleBuff = Array<Byte>(input.size, item: 0)\nxorString(input, mysqlScrambleBuff, cipher, input.size)\nvar rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))\n\nvar byteArraySteam1 = ByteArrayStream()\nbyteArraySteam1.write(mysqlScrambleBuff)\n\nvar byteArraySteam2 = ByteArrayStream()\nvar opt = OAEPOption(SHA1(),SHA1())\nrsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))\nvar buffer = Array<Byte>(1024, item: 0)\nvar len = byteArraySteam2.read(buffer)\nvar res = Array<Byte>(len, item: 0)\nbuffer.copyTo(res, 0, 0, len)\nreturn res",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "xorString",
          "type": "function",
          "start_line": 77,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func xorString(src: Array<Byte>, to: Array<Byte>,scramble:Array<Byte>,len:Int64) {\n        var pos = 0\n        var scrambleLen = scramble.size\n        while (pos < len) {\n            to[pos] = src[pos] ^ scramble[pos % scrambleLen]\n            pos++\n        }\n    }  ",
          "blocks": [
            {
              "id": 1,
              "label": "public static func xorString(src: Array<Byte>, to: Array<Byte>, scramble:Array<Byte>, len:Int64) {\nvar pos = 0\nvar scrambleLen = scramble.size",
              "successors": [
                {
                  "id": 3,
                  "label": "while (pos < len) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "to[pos] = src[pos] ^ scramble[pos % scrambleLen]\npos++",
                      "successors": [
                        {
                          "id": 3,
                          "label": "while (pos < len) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "appendLengthEncodedInteger",
          "type": "function",
          "start_line": 86,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func appendLengthEncodedInteger(n: UInt64): Array<Byte> {\n        let result = ArrayList<Byte>()\n        if (n <= 250) {\n            result.append(UInt8(n))\n        } else if (n <= 0xffff) {\n            result.append(0xfc)\n            result.append(UInt8(n & 0xff))\n            result.append(UInt8(n >> 8 & 0xff))\n        } else if (n <= 0xffffff) {\n            result.append(0xfd)\n            result.append(UInt8(n & 0xff))\n            result.append(UInt8(n >> 8 & 0xff))\n            result.append(UInt8(n >> 16 & 0xff))\n        } else {\n            result.append(0xfe)\n            result.append(UInt8(n & 0xff))\n            result.append(UInt8(n >> 8 & 0xff))\n            result.append(UInt8(n >> 16 & 0xff))\n            result.append(UInt8(n >> 24 & 0xff))\n            result.append(UInt8(n >> 32 & 0xff))\n            result.append(UInt8(n >> 40 & 0xff))\n            result.append(UInt8(n >> 48 & 0xff))\n            result.append(UInt8(n >> 56 & 0xff))\n        }\n        return result.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func appendLengthEncodedInteger(n: UInt64): Array<Byte> {\nlet result = ArrayList<Byte>()",
              "successors": [
                {
                  "id": 3,
                  "label": "if (n <= 250) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "result.append(UInt8(n))\nreturn result.toArray()",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} else if (n <= 0xffff) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "result.append(0xfc)\nresult.append(UInt8(n & 0xff))",
                          "successors": [
                            {
                              "id": 8,
                              "label": "result.append(UInt8(n >> 8 & 0xff))\nreturn result.toArray()",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "} else if (n <= 0xffffff) {",
                          "successors": [
                            {
                              "id": 10,
                              "label": "result.append(0xfd)\nresult.append(UInt8(n & 0xff))",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "result.append(UInt8(n >> 8 & 0xff))\nresult.append(UInt8(n >> 16 & 0xff))",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "return result.toArray()",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 14,
                              "label": "} else {\nresult.append(0xfe)",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "result.append(UInt8(n & 0xff))\nresult.append(UInt8(n >> 8 & 0xff))",
                                  "successors": [
                                    {
                                      "id": 18,
                                      "label": "result.append(UInt8(n >> 16 & 0xff))\nresult.append(UInt8(n >> 24 & 0xff))",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "result.append(UInt8(n >> 32 & 0xff))\nresult.append(UInt8(n >> 40 & 0xff))",
                                          "successors": [
                                            {
                                              "id": 22,
                                              "label": "result.append(UInt8(n >> 48 & 0xff))\nresult.append(UInt8(n >> 56 & 0xff))",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "return result.toArray()",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "uint64ToBytes",
          "type": "function",
          "start_line": 113,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func uint64ToBytes(n: UInt64): Array<Byte> {\n        let result = ArrayList<Byte>()\n        result.append(UInt8(n & 0xff))\n        result.append(UInt8(n >> 8 & 0xff))\n        result.append(UInt8(n >> 16 & 0xff))\n        result.append(UInt8(n >> 24 & 0xff))\n        result.append(UInt8(n >> 32 & 0xff))\n        result.append(UInt8(n >> 40 & 0xff))\n        result.append(UInt8(n >> 48 & 0xff))\n        result.append(UInt8(n >> 56 & 0xff))\n        return result.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func uint64ToBytes(n: UInt64): Array<Byte> {\n    let result = ArrayList<Byte>()\n    result.append(UInt8(n & 0xff))\n    result.append(UInt8(n >> 8 & 0xff))\n    result.append(UInt8(n >> 16 & 0xff))\n    result.append(UInt8(n >> 24 & 0xff))\n    result.append(UInt8(n >> 32 & 0xff))\n    result.append(UInt8(n >> 40 & 0xff))\n    result.append(UInt8(n >> 48 & 0xff))\n    result.append(UInt8(n >> 56 & 0xff))",
              "successors": [
                {
                  "id": 3,
                  "label": "return result.toArray()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "uint32ToBytes",
          "type": "function",
          "start_line": 126,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func uint32ToBytes(n: UInt32): Array<Byte> {\n        let result = ArrayList<Byte>()\n        result.append(UInt8(n & 0xff))\n        result.append(UInt8(n >> 8 & 0xff))\n        result.append(UInt8(n >> 16 & 0xff))\n        result.append(UInt8(n >> 24 & 0xff))\n        return result.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func uint32ToBytes(n: UInt32): Array<Byte> {\nlet result = ArrayList<Byte>()",
              "successors": [
                {
                  "id": 3,
                  "label": "result.append(UInt8(n & 0xff))\nresult.append(UInt8(n >> 8 & 0xff))",
                  "successors": [
                    {
                      "id": 5,
                      "label": "result.append(UInt8(n >> 16 & 0xff))\nresult.append(UInt8(n >> 24 & 0xff))",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return result.toArray()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readLengthEncodedString",
          "type": "function",
          "start_line": 135,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func readLengthEncodedString(data: Array<Byte>) {\n        let result = readLengthEncodedInteger(data)\n        var num = result[0]\n        var isNull = result[1]\n        var n = result[2]\n        if (num < 1) {\n            return (data[n..n], isNull, n)\n        }\n\n        n += Int64(num)\n        if (data.size >= n) {\n            return (data[n - Int64(num) .. n], false, n)\n        }\n        return (Array<Byte>(), false, n)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let result = readLengthEncodedInteger(data)\nvar num = result[0]\nvar isNull = result[1]\nvar n = result[2]\nif (num < 1) {",
              "successors": [
                {
                  "id": 3,
                  "label": "return (data[n..n], isNull, n)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}\nn += Int64(num)",
                  "successors": [
                    {
                      "id": 6,
                      "label": "if (data.size >= n) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return (data[n - Int64(num) .. n], false, n)",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "}\nreturn (Array<Byte>(), false, n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "lengthEncoderInteger",
          "type": "function",
          "start_line": 150,
          "end_line": 160,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func lengthEncoderInteger(number: UInt64): Array<Byte> {\n        let result = ArrayList<Byte>()\n        if (number <= 250) {\n            result.append(UInt8(number))\n        } else if (number <= 0xffff) {\n             result.append(UInt8(0xfc))\n\n        }\n\n        return result.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func lengthEncoderInteger(number: UInt64): Array<Byte> {\nlet result = ArrayList<Byte>()",
              "successors": [
                {
                  "id": 3,
                  "label": "if (number <= 250) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "result.append(UInt8(number))\nreturn result.toArray()",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "else if (number <= 0xffff) {\nresult.append(UInt8(0xfc))",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return result.toArray()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readLengthEncodedInteger",
          "type": "function",
          "start_line": 167,
          "end_line": 187,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {\n        match(data[0]) {\n            case 251 => \n                return (0, true, 1)\n            case 252 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8, false, 3\n                )\n            case 253 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16, false, 4\n                )\n            case 254 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16 | UInt64(data[4]) << 24 |\n                    UInt64(data[5]) << 32 | UInt64(data[6]) << 40 | UInt64(data[7]) << 48 | UInt64(data[8]) << 56,\n                    false, 9\n                )\n            case _ => return (UInt64(data[0]), false , 1)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "match(data[0]) {",
              "successors": [
                {
                  "id": 2,
                  "label": "case 251 => \n                return (0, true, 1)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "case 252 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8, false, 3\n                )",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case 253 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16, false, 4\n                )",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "case 254 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16 | UInt64(data[4]) << 24 |\n                    UInt64(data[5]) << 32 | UInt64(data[6]) << 40 | UInt64(data[7]) << 48 | UInt64(data[8]) << 56,\n                    false, 9\n                )",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "case _ => return (UInt64(data[0]), false , 1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class ByteArrayUtils {\n    private static var CACHING_SHA2_DIGEST_LENGTH = 32\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }  \n\n    }\n\n    }\n\n    }\n\n    }\n    }\n\n    /*\n        第一个参数，the number\n        第二个参数，数值是否为NULL\n        第三个参数，所占字节数\n    */\n    }\n\n\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class ByteArrayUtils {",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package cangjieWeb.utils\nimport std.collection.{ArrayList}\nimport crypto.digest.{SHA256, SHA1}\nimport crypto.keys.{RSAPublicKey, PadOption, OAEPOption}\nimport std.io.ByteArrayStream\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package cangjieWeb.utils\nimport std.collection.{ArrayList}",
      "successors": [
        {
          "id": 3,
          "label": "import crypto.digest.{SHA256, SHA1}\nimport crypto.keys.{RSAPublicKey, PadOption, OAEPOption}",
          "successors": [
            {
              "id": 5,
              "label": "import std.io.ByteArrayStream",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}