{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [
    {
      "name": "pathLoad",
      "type": "function",
      "start_line": 38,
      "end_line": 57,
      "functions": [],
      "classes": [],
      "simplified_code": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/opds/v2/series/:id\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.path.split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {\n                case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\n                case None => ()\n            }\n            var cataLog = Series(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(cataLog.toJson())\n        }\n    )\n\n    return pathMap\n}",
      "blocks": [
        {
          "id": 1,
          "label": "var pathMap = PathMap(\n    \"/opds/v2/series/:id\",\n    {\n        httpContext =>\nlet host = httpContext.request.headers.get(\"host\").toArray()[0]\nlet id = httpContext.request.url.path.split(\"/\")[4]\nvar page = 0",
          "successors": [
            {
              "id": 3,
              "label": "match (httpContext.request.url.query) {",
              "successors": [
                {
                  "id": 4,
                  "label": "case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))\nvar cataLog = Series(id, host: host, page: page)\nhttpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\nhttpContext.responseBuilder.body(cataLog.toJson())",
                  "successors": [
                    {
                      "id": 7,
                      "label": "return pathMap",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "case None => ()\nvar cataLog = Series(id, host: host, page: page)\nhttpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\nhttpContext.responseBuilder.body(cataLog.toJson())",
                  "successors": [
                    {
                      "id": 7,
                      "label": "return pathMap",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Series",
      "type": "class",
      "start_line": 10,
      "end_line": 36,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(id: String, host!: String = \"127.0.0.1\", page!: Int64 = 0) {\n        let series = BookSeries.fromId(id)\n        metadata = Metadata(series.name, itemsPerPage: 20, currentPage: page + 1,\n            numberOfItems: BookSeries.getCount(id: id), modified: series.lastModifiedDate)\n        metadata.addBookDesc(id)\n        links = Links(host, \"series/${id}\", page: page)\n        var obj = Books.formDatabase(baseConfig.database, page: page + 1, count: 20, seriesId: id)\n        for (i in obj) {\n            publications.append(Publication(i, host))\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(id: String, host!: String = \"127.0.0.1\", page!: Int64 = 0) {\nlet series = BookSeries.fromId(id)",
              "successors": [
                {
                  "id": 3,
                  "label": "metadata = Metadata(series.name, itemsPerPage: 20, currentPage: page + 1, numberOfItems: BookSeries.getCount(id: id), modified: series.lastModifiedDate)\nmetadata.addBookDesc(id)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "links = Links(host, \"series/${id}\", page: page)\nvar obj = Books.formDatabase(baseConfig.database, page: page + 1, count: 20, seriesId: id)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "for (i in obj) {",
                          "successors": [
                            {
                              "id": 8,
                              "label": "publications.append(Publication(i, host))",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 25,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJson(): String {\n        let stream = ByteBuffer()\n        let w = JsonWriter(stream)\n        w.startObject()\n        w.writeName(\"metadata\").writeValue(metadata)\n        w.writeName(\"links\").writeValue(links)\n        w.writeName(\"publications\").writeValue<ArrayList<Publication>>(publications)\n        w.endObject()\n        w.flush()\n        return String.fromUtf8(readToEnd(stream))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(): String {\nlet stream = ByteBuffer()",
              "successors": [
                {
                  "id": 3,
                  "label": "let w = JsonWriter(stream)\nw.startObject()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "w.writeName(\"metadata\").writeValue(metadata)\nw.writeName(\"links\").writeValue(links)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "w.writeName(\"publications\").writeValue<ArrayList<Publication>>(publications)\nw.endObject()",
                          "successors": [
                            {
                              "id": 9,
                              "label": "w.flush()\nreturn String.fromUtf8(readToEnd(stream))",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Series {\n    var metadata: Metadata\n    var links: Links\n    var publications: ArrayList<Publication> = ArrayList<Publication>()\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Series {\nvar metadata: Metadata",
          "successors": [
            {
              "id": 3,
              "label": "var links: Links\nvar publications: ArrayList<Publication> = ArrayList<Publication>()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package opds_cj.path.opds.v2.series\n\nimport net.http.*\nimport encoding.json.stream.*\nimport std.{io.ByteBuffer, io.readToEnd, collection.*, convert.*}\nimport opds_cj.config.baseConfig\nimport opds_cj.router.PathMap\nimport opds_cj.data_stru.*\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package opds_cj.path.opds.v2.series\nimport net.http.*",
      "successors": [
        {
          "id": 3,
          "label": "import encoding.json.stream.*\nimport std.{io.ByteBuffer, io.readToEnd, collection.*, convert.*}",
          "successors": [
            {
              "id": 5,
              "label": "import opds_cj.config.baseConfig\nimport opds_cj.router.PathMap",
              "successors": [
                {
                  "id": 7,
                  "label": "import opds_cj.data_stru.*",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}