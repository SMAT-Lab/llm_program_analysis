{
  "name": "AlignmentPatternFinder",
  "type": "CFG",
  "start_line": 6,
  "end_line": 208,
  "functions": [],
  "classes": [
    {
      "name": "AlignmentPatternFinder",
      "type": "class",
      "start_line": 6,
      "end_line": 208,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 16,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(\n        image: BitMatrix,\n        startX: Int64,\n        startY: Int64,\n        width: Int64,\n        height: Int64,\n        moduleSize: Float32,\n        resultPointCallback: ?ResultPointCallback\n    ) {\n        this.image = image\n        this.possibleCenters = ArrayList<AlignmentPattern>(5)\n        this.startX = startX\n        this.startY = startY\n        this.width = width\n        this.height = height\n        this.moduleSize = moduleSize\n        this.crossCheckStateCount = Array<Int64>(3, item: 0)\n        this.resultPointCallback = resultPointCallback\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(\nimage: BitMatrix,",
              "successors": [
                {
                  "id": 3,
                  "label": "startX: Int64,\nstartY: Int64,",
                  "successors": [
                    {
                      "id": 5,
                      "label": "width: Int64,\nheight: Int64,",
                      "successors": [
                        {
                          "id": 7,
                          "label": "moduleSize: Float32,\nresultPointCallback: ?ResultPointCallback",
                          "successors": [
                            {
                              "id": 9,
                              "label": ") {\nthis.image = image",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "this.possibleCenters = ArrayList<AlignmentPattern>(5)\nthis.startX = startX",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "this.startY = startY\nthis.width = width",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "this.height = height\nthis.moduleSize = moduleSize",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "this.crossCheckStateCount = Array<Int64>(3, item: 0)\nthis.resultPointCallback = resultPointCallback",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "find",
          "type": "function",
          "start_line": 35,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "    func find(): AlignmentPattern {\n        let startX: Int64 = this.startX;\n        let height: Int64 = this.height;\n        let maxJ: Int64 = startX + width\n        let middleI: Int64 = startY + (height / 2)\n        // We are looking for black/white/black modules in 1:1:1 ratio;\n        // this tracks the number of black/white/black modules seen so far\n        var stateCount: Array<Int64> = Array<Int64>(3, item: 0);\n        for (iGen in 0..height) {\n            // Search from middle outwards\n            let iGenResult: Int64 = if ((iGen & 0x01) == 0) {\n                (iGen + 1) / 2\n            } else {\n                -(iGen + 1) / 2\n            }\n            var i: Int64 = middleI + iGenResult\n            stateCount[0] = 0\n            stateCount[1] = 0\n            stateCount[2] = 0\n            var j: Int64 = startX\n            // Burn off leading white pixels before anything else; if we start in the middle of\n            // a white run, it doesn't make sense to count its length, since we don't know if the\n            // white run continued to the left of the start point\n            while (j < maxJ && !image.get(j, i)) {\n                j++\n            }\n            var currentState: Int64 = 0;\n            while (j < maxJ) {\n                if (image.get(j, i)) {\n                    // Black pixel\n                    var res: Option<AlignmentPattern>\n                    (currentState, res) = exfind(currentState, stateCount, i, j)\n                    if (let Some(con) <- res) {\n                        return con\n                    }\n                } else { // White pixel\n                    if (currentState == 1) { // Counting black pixels\n                        currentState++\n                    }\n                    //currentState++\n                    stateCount[Int64(currentState)] += 1\n                }\n                j++\n            }\n            if (foundPatternCross(stateCount)) {\n                let confirmed: Option<AlignmentPattern> = handlePossibleCenter(stateCount, i, maxJ);\n                if (let Some(con) <- confirmed) {\n                    return con\n                }\n            }\n        }\n        // Hmm, nothing we saw was observed and confirmed twice. If we had\n        // any guess at all, return it.\n        if (!possibleCenters.isEmpty()) {\n            return possibleCenters[0]\n        }\n        throw Qrcoder4cjNotFoundException.getNotFoundInstance();\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func find(): AlignmentPattern {\nlet startX: Int64 = this.startX;\nlet height: Int64 = this.height;\nlet maxJ: Int64 = startX + width\nlet middleI: Int64 = startY + (height / 2)\nvar stateCount: Array<Int64> = Array<Int64>(3, item: 0);",
              "successors": [
                {
                  "id": 3,
                  "label": "for (iGen in 0..height) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let iGenResult: Int64 = if ((iGen & 0x01) == 0) {\n    (iGen + 1) / 2\n} else {\n    -(iGen + 1) / 2\n}\nvar i: Int64 = middleI + iGenResult\nstateCount[0] = 0\nstateCount[1] = 0\nstateCount[2] = 0\nvar j: Int64 = startX",
                      "successors": [
                        {
                          "id": 6,
                          "label": "while (j < maxJ && !image.get(j, i)) {\n    j++\n}",
                          "successors": [
                            {
                              "id": 7,
                              "label": "var currentState: Int64 = 0;",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "while (j < maxJ) {",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "if (image.get(j, i)) {",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "var res: Option<AlignmentPattern>\n(currentState, res) = exfind(currentState, stateCount, i, j)\nif (let Some(con) <- res) {\n    return con\n}",
                                          "successors": []
                                        },
                                        {
                                          "id": 12,
                                          "label": "} else { // White pixel\nif (currentState == 1) { // Counting black pixels\n    currentState++\n}\nstateCount[Int64(currentState)] += 1\n}\nj++",
                                          "successors": [
                                            {
                                              "id": 8,
                                              "label": "while (j < maxJ) {",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 14,
                                      "label": "if (foundPatternCross(stateCount)) {\n    let confirmed: Option<AlignmentPattern> = handlePossibleCenter(stateCount, i, maxJ);\n    if (let Some(con) <- confirmed) {\n        return con\n    }\n}\nj++",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "while (j < maxJ) {",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "label": "if (!possibleCenters.isEmpty()) {\n    return possibleCenters[0]\n}\nthrow Qrcoder4cjNotFoundException.getNotFoundInstance();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "exfind",
          "type": "function",
          "start_line": 93,
          "end_line": 115,
          "functions": [],
          "classes": [],
          "simplified_code": "    func exfind(currentState: Int64, stateCount: Array<Int64>, i: Int64, j: Int64): (Int64, Option<AlignmentPattern>) {\n        var currentState_p = currentState\n        if (currentState == 1) { // Counting black pixels\n            stateCount[1] += 1\n        } else {\n            if (currentState_p == 2) { // A winner?\n                if (foundPatternCross(stateCount)) { // Yes\n                    let confirmed: Option<AlignmentPattern> = handlePossibleCenter(stateCount, i, j);\n                    if (let Some(con) <- confirmed) {\n                        return (0, con)\n                    }\n                }\n                stateCount[0] = stateCount[2]\n                stateCount[1] = 1\n                stateCount[2] = 0\n                currentState_p = 1\n            } else {\n                currentState_p++\n                stateCount[Int64(currentState_p)] += 1\n            }\n        }\n        return (currentState_p, None)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "var currentState_p = currentState\nif (currentState == 1) {",
              "successors": [
                {
                  "id": 3,
                  "label": "stateCount[1] += 1\nreturn (currentState_p, None)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "if (currentState_p == 2) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (foundPatternCross(stateCount)) {\nlet confirmed: Option<AlignmentPattern> = handlePossibleCenter(stateCount, i, j);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (let Some(con) <- confirmed) {\nreturn (0, con)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "stateCount[0] = stateCount[2] stateCount[1] = 1 stateCount[2] = 0 currentState_p = 1\nreturn (currentState_p, None)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "currentState_p++ stateCount[Int64(currentState_p)] += 1\nreturn (currentState_p, None)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "centerFromEnd",
          "type": "function",
          "start_line": 116,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func centerFromEnd(stateCount: Array<Int64>, end: Int64): Float32 {\n        return Float32(end - stateCount[2]) - Float32(stateCount[1]) / 2.0f32\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func centerFromEnd(stateCount: Array<Int64>, end: Int64): Float32 {\n    return Float32(end - stateCount[2]) - Float32(stateCount[1]) / 2.0f32",
              "successors": []
            }
          ]
        },
        {
          "name": "foundPatternCross",
          "type": "function",
          "start_line": 119,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func foundPatternCross(stateCount: Array<Int64>): Bool {\n        let moduleSize: Float32 = this.moduleSize;\n        let maxVariance: Float32 = moduleSize / 2.0f32\n        for (i in 0..3) {\n            if (abs(moduleSize - Float32(stateCount[i])) >= maxVariance) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func foundPatternCross(stateCount: Array<Int64>): Bool {\nlet moduleSize: Float32 = this.moduleSize;",
              "successors": [
                {
                  "id": 3,
                  "label": "let maxVariance: Float32 = moduleSize / 2.0f32",
                  "successors": [
                    {
                      "id": 4,
                      "label": "for (i in 0..3) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (abs(moduleSize - Float32(stateCount[i])) >= maxVariance) {\nreturn false;",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "}\nreturn true;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "crossCheckVertical",
          "type": "function",
          "start_line": 129,
          "end_line": 179,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func crossCheckVertical(\n        startI: Int64,\n        centerJ: Int64,\n        maxCount: Int64,\n        originalStateCountTotal: Int64\n    ): Float32 {\n        let image: BitMatrix = this.image;\n        let maxI: Int64 = image.getHeight();\n        let stateCount: Array<Int64> = crossCheckStateCount\n        stateCount[0] = 0\n        stateCount[1] = 0\n        stateCount[2] = 0\n        // Start counting up from center\n        var i: Int64 = startI\n        while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1] += 1\n            i--\n        }\n        // If already too many modules in this state or ran off the edge:\n        if (i < 0 || stateCount[1] > maxCount) {\n            return Float32.NaN;\n        }\n        while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\n            stateCount[0] += 1\n            i--\n        }\n        if (stateCount[0] > maxCount) {\n            return Float32.NaN;\n        }\n        // Now also count down from center\n        i = startI + 1\n        while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1] += 1\n            i++\n        }\n        if (i == maxI || stateCount[1] > maxCount) {\n            return Float32.NaN;\n        }\n        while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\n            stateCount[2] += 1\n            i++\n        }\n        if (stateCount[2] > maxCount) {\n            return Float32.NaN;\n        }\n        let stateCountTotal: Int64 = stateCount[0] + stateCount[1] + stateCount[2]\n        if (5 * abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n            return Float32.NaN;\n        }\n        return excrossCheckVertical(stateCount, i)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let image: BitMatrix = this.image;\nlet maxI: Int64 = image.getHeight();\nlet stateCount: Array<Int64> = crossCheckStateCount\nstateCount[0] = 0\nstateCount[1] = 0\nstateCount[2] = 0\nvar i: Int64 = startI",
              "successors": [
                {
                  "id": 2,
                  "label": "while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n    stateCount[1] += 1\n    i--\n}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (i < 0 || stateCount[1] > maxCount) {\n    return Float32.NaN;\n}",
                      "successors": [
                        {
                          "id": 4,
                          "label": "while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\n    stateCount[0] += 1\n    i--\n}",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if (stateCount[0] > maxCount) {\n    return Float32.NaN;\n}\ni = startI + 1",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n    stateCount[1] += 1\n    i++\n}",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "if (i == maxI || stateCount[1] > maxCount) {\n    return Float32.NaN;\n}",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\n    stateCount[2] += 1\n    i++\n}",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "if (stateCount[2] > maxCount) {\n    return Float32.NaN;\n}\nlet stateCountTotal: Int64 = stateCount[0] + stateCount[1] + stateCount[2]",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "if (5 * abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n    return Float32.NaN;\n}\nreturn excrossCheckVertical(stateCount, i)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "excrossCheckVertical",
          "type": "function",
          "start_line": 180,
          "end_line": 186,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func excrossCheckVertical(stateCount: Array<Int64>, i: Int64) {\n        if (foundPatternCross(stateCount)) {\n            centerFromEnd(stateCount, i)\n        } else {\n            Float32.NaN\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func excrossCheckVertical(stateCount: Array<Int64>, i: Int64) {\nif (foundPatternCross(stateCount)) {",
              "successors": [
                {
                  "id": 3,
                  "label": "centerFromEnd(stateCount, i)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else {\nFloat32.NaN",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "handlePossibleCenter",
          "type": "function",
          "start_line": 187,
          "end_line": 207,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func handlePossibleCenter(stateCount: Array<Int64>, i: Int64, j: Int64): Option<AlignmentPattern> {\n        let stateCountTotal: Int64 = stateCount[0] + stateCount[1] + stateCount[2]\n        let centerJ: Float32 = centerFromEnd(stateCount, j);\n        let centerI: Float32 = crossCheckVertical(i, Int64(centerJ), 2 * stateCount[1], stateCountTotal);\n        if (!centerI.isNaN()) {\n            let estimatedModuleSize: Float32 = Float32(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f32\n            for (i in 0..possibleCenters.size) {\n                // Look for about the same center and module size:\n                if (possibleCenters[i].aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n                    return possibleCenters[i].combineEstimate(centerI, centerJ, estimatedModuleSize);\n                }\n            }\n            // Hadn't found this before; save it\n            let point: AlignmentPattern = AlignmentPattern(centerJ, centerI, estimatedModuleSize);\n            possibleCenters.append(point);\n            if (let Some(res) <- resultPointCallback) {\n                res.foundPossibleResultPoint(point);\n            }\n        }\n        return None\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let stateCountTotal: Int64 = stateCount[0] + stateCount[1] + stateCount[2]\nlet centerJ: Float32 = centerFromEnd(stateCount, j);\nlet centerI: Float32 = crossCheckVertical(i, Int64(centerJ), 2 * stateCount[1], stateCountTotal);",
              "successors": [
                {
                  "id": 2,
                  "label": "if (!centerI.isNaN()) {\n    let estimatedModuleSize: Float32 = Float32(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f32",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    for (i in 0..possibleCenters.size) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        if (possibleCenters[i].aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n            return possibleCenters[i].combineEstimate(centerI, centerJ, estimatedModuleSize);",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "    let point: AlignmentPattern = AlignmentPattern(centerJ, centerI, estimatedModuleSize);\n    possibleCenters.append(point);\n    if (let Some(res) <- resultPointCallback) {\n        res.foundPossibleResultPoint(point);\n    }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "return None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class AlignmentPatternFinder {\n    private var image: BitMatrix = BitMatrix();\n    private var possibleCenters: ArrayList<AlignmentPattern> = ArrayList<AlignmentPattern>();\n    private var startX: Int64 = 0;\n    private var startY: Int64 = 0;\n    private var width: Int64 = 0;\n    private var height: Int64 = 0;\n    private var moduleSize: Float32 = 0.0f32;\n    private var crossCheckStateCount: Array<Int64> = Array<Int64>();\n    private var resultPointCallback: ?ResultPointCallback = None\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class AlignmentPatternFinder {",
          "successors": [
            {
              "id": 2,
              "label": "private var image: BitMatrix = BitMatrix();",
              "successors": []
            },
            {
              "id": 3,
              "label": "private var possibleCenters: ArrayList<AlignmentPattern> = ArrayList<AlignmentPattern>();",
              "successors": []
            },
            {
              "id": 4,
              "label": "private var startX: Int64 = 0;",
              "successors": []
            },
            {
              "id": 5,
              "label": "private var startY: Int64 = 0;",
              "successors": []
            },
            {
              "id": 6,
              "label": "private var width: Int64 = 0;",
              "successors": []
            },
            {
              "id": 7,
              "label": "private var height: Int64 = 0;",
              "successors": []
            },
            {
              "id": 8,
              "label": "private var moduleSize: Float32 = 0.0f32;",
              "successors": []
            },
            {
              "id": 9,
              "label": "private var crossCheckStateCount: Array<Int64> = Array<Int64>();",
              "successors": []
            },
            {
              "id": 10,
              "label": "private var resultPointCallback: ?ResultPointCallback = None",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "}",
  "blocks": [
    {
      "id": 1,
      "label": "\n# Example input code\n",
      "successors": []
    }
  ]
}