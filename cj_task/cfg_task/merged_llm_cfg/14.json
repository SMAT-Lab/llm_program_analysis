{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 26,
  "functions": [],
  "classes": [
    {
      "name": "StructValDeclTransfromGenerator",
      "type": "class",
      "start_line": 6,
      "end_line": 26,
      "functions": [
        {
          "name": "generate",
          "type": "function",
          "start_line": 8,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func generate(context: Context): Unit {\n        for (decl in context.valDecls) {\n            match (decl.declType) {\n                case t: PrefixType =>\n                    var reval = t.baseType.toTokens()\n                    for (op in t.prefixOps) {\n                        if (op.kind == TokenKind.QUEST) {\n                            reval = quote(Option<$(reval)>)    \n                        } else {\n                            diagReport(DiagReportLevel.ERROR, op.toTokens(), \"不支持的标识\", \"仅支持问号\")\n                            throw Exception(\"不支持的标识\")\n                        }\n                    }\n                    decl.declType = RefType(reval.toTokens())\n                case _ => continue\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func generate(context: Context): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (decl in context.valDecls) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "match (decl.declType) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case t: PrefixType =>\nvar reval = t.baseType.toTokens()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "for (op in t.prefixOps) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "if (op.kind == TokenKind.QUEST) {\nreval = quote(Option<$(reval)>)",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "decl.declType = RefType(reval.toTokens())",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 9,
                                  "label": "} else {\ndiagReport(DiagReportLevel.ERROR, op.toTokens(), \"不支持的标识\", \"仅支持问号\")",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "throw Exception(\"不支持的标识\")",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 13,
                          "label": "case _ => continue",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class StructValDeclTransfromGenerator <: Generator {\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class StructValDeclTransfromGenerator <: Generator {\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "macro package Macro_JsonSerializable.macros\n\nimport std.ast.*\n\n// 将属性中 ?T 转换为 Option<T>\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros\nimport std.ast.*",
      "successors": [
        {
          "id": 3,
          "label": "// 将属性中 ?T 转换为 Option<T>\n}",
          "successors": []
        }
      ]
    }
  ]
}