{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 206,
  "functions": [],
  "classes": [
    {
      "name": "JSONTests",
      "type": "class",
      "start_line": 11,
      "end_line": 206,
      "functions": [
        {
          "name": "jsonEqual",
          "type": "function",
          "start_line": 13,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    func jsonEqual() {\n        const jsonStr = \"\"\"\n                        {\n                          \"name\": \"John Doe\",\n                          \"age\": 30,\n                          \"city\": \"New York\"\n                        }\n                        \"\"\"\n\n        var jsonVal = JsonValue.fromStr(jsonStr)\n        var jsonVal2 = JsonValue.fromStr(jsonStr)\n\n        assertJson(jsonVal, jsonVal2)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func jsonEqual() {\nconst jsonStr = \"\"\"\n                        {\n                          \"name\": \"John Doe\",\n                          \"age\": 30,\n                          \"city\": \"New York\"\n                        }\n                        \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "var jsonVal = JsonValue.fromStr(jsonStr)\nvar jsonVal2 = JsonValue.fromStr(jsonStr)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "assertJson(jsonVal, jsonVal2)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "basic",
          "type": "function",
          "start_line": 29,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    func basic() {\n        assertJson(@Json( 1 + 2 ), JsonInt(3))\n        assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))\n        assertJson(@Json( \"Hello, \" + \"world!\" ), JsonString(\"Hello, world!\"))\n        assertJson(@Json( true ), JsonBool(true))\n        assertJson(@Json( false ), JsonBool(false))\n        assertJson(@Json( null ), JsonNull())\n        assertJson(@Json( None ), JsonNull())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func basic() {\n    assertJson(@Json( 1 + 2 ), JsonInt(3))",
              "successors": [
                {
                  "id": 3,
                  "label": "    assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))\n    assertJson(@Json( \"Hello, \" + \"world!\" ), JsonString(\"Hello, world!\"))",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    assertJson(@Json( true ), JsonBool(true))\n    assertJson(@Json( false ), JsonBool(false))",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    assertJson(@Json( null ), JsonNull())\n    assertJson(@Json( None ), JsonNull())",
                          "successors": [
                            {
                              "id": 9,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "variable",
          "type": "function",
          "start_line": 40,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    func variable() {\n        var a = 1\n        var b = 2\n        var c = \"Hello, \"\n        var d = \"world!\"\n        var e = true\n        var f = false\n        var h = None<Int>\n\n        assertJson(@Json( a + b ), JsonInt(3))\n        assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))\n        assertJson(@Json( c + d ), JsonString(\"Hello, world!\"))\n        assertJson(@Json( e ), JsonBool(true))\n        assertJson(@Json( f ), JsonBool(false))\n        assertJson(@Json( h ), JsonNull())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func variable() {\n    var a = 1\n    var b = 2\n    var c = \"Hello, \"\n    var d = \"world!\"\n    var e = true\n    var f = false\n    var h = None<Int>",
              "successors": [
                {
                  "id": 3,
                  "label": "    assertJson(@Json( a + b ), JsonInt(3))\n    assertJson(@Json( 1.0 + 2.0 ), JsonFloat(3.0))",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    assertJson(@Json( c + d ), JsonString(\"Hello, world!\"))\n    assertJson(@Json( e ), JsonBool(true))",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    assertJson(@Json( f ), JsonBool(false))\n    assertJson(@Json( h ), JsonNull())",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "array",
          "type": "function",
          "start_line": 58,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    func array() {\n        assertJson(@Json( [1, 2, 3] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))\n        assertJson(@Json( [\"apple\", \"banana\", \"cherry\"] ),\n            JsonArray([JsonString(\"apple\"), JsonString(\"banana\"), JsonString(\"cherry\")]))\n        assertJson(\n            @Json( [1, \"two\", true, null ] ),\n            JsonArray([JsonInt(1), JsonString(\"two\"), JsonBool(true), JsonNull()])\n        )\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func array() {\n    assertJson(@Json( [1, 2, 3] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))",
              "successors": [
                {
                  "id": 3,
                  "label": "    assertJson(@Json( [\"apple\", \"banana\", \"cherry\"] ), JsonArray([JsonString(\"apple\"), JsonString(\"banana\"), JsonString(\"cherry\")]))\n    assertJson(\n        @Json( [1, \"two\", true, null ] ),\n        JsonArray([JsonInt(1), JsonString(\"two\"), JsonBool(true), JsonNull()])\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "object",
          "type": "function",
          "start_line": 69,
          "end_line": 191,
          "functions": [],
          "classes": [],
          "simplified_code": "    func object() {\n        const jsonStr = \"\"\"\n                        {\n                          \"name\": \"John Doe\",\n                          \"age\": 30,\n                          \"city\": \"New York\"\n                        }\n                        \"\"\"\n        let jsonVal = JsonValue.fromStr(jsonStr)\n        let jsonMVal = @Json(\n            {\n                \"name\": \"John Doe\",\n                \"age\": 30,\n                \"city\": \"New York\"\n            }\n        )\n        assertJson(jsonVal, jsonMVal)\n\n        const jsonStr2 = \"\"\"\n                        {\n                          \"fruits\": [\"apple\", \"banana\", \"cherry\"],\n                          \"numbers\": [1, 2, 3, 4, 5],\n                          \"mixed\": [1, \"two\", true, null]\n                        }\n                        \"\"\"\n        let jsonVal2 = JsonValue.fromStr(jsonStr2)\n        let jsonMVal2 = @Json(\n            {\n                \"fruits\": [\"apple\", \"banana\", \"cherry\"],\n                \"numbers\": [1, 2, 3, 4, 5],\n                \"mixed\": [1, \"two\", true, null]\n            }\n        )\n        assertJson(jsonVal2, jsonMVal2)\n\n        const jsonStr3 = \"\"\"\n                        {\n                          \"person\": {\n                            \"name\": {\n                              \"first\": \"Jane\",\n                              \"last\": \"Smith\"\n                            },\n                            \"age\": 28,\n                            \"address\": {\n                              \"street\": \"123 Main St\",\n                              \"city\": \"Boston\",\n                              \"country\": \"USA\"\n                            }\n                          }\n                        }\n                        \"\"\"\n        let jsonVal3 = JsonValue.fromStr(jsonStr3)\n        let jsonMVal3 = @Json(\n            {\n                \"person\": {\n                    \"name\": {\n                        \"first\": \"Jane\",\n                        \"last\": \"Smith\"\n                    },\n                    \"age\": 28,\n                    \"address\": {\n                        \"street\": \"123 Main St\",\n                        \"city\": \"Boston\",\n                        \"country\": \"USA\"\n                    }\n                }\n            }\n        )\n        assertJson(jsonVal3, jsonMVal3)\n\n        const jsonStr4 = \"\"\"\n                        {\n                          \"company\": \"Tech Corp\",\n                          \"employees\": [\n                            {\n                              \"id\": 1,\n                              \"name\": \"Alice\",\n                              \"department\": \"Engineering\",\n                              \"projects\": [\"Project A\", \"Project B\"]\n                            },\n                            {\n                              \"id\": 2,\n                              \"name\": \"Bob\",\n                              \"department\": \"Marketing\",\n                              \"campaigns\": {\n                                \"online\": [\"Social Media\", \"Email\"],\n                                \"offline\": [\"TV\", \"Radio\"]\n                              }\n                            }\n                          ],\n                          \"founded\": 1995,\n                          \"active\": true,\n                          \"CEO\": null\n                        }\n                        \"\"\"\n        let jsonVal4 = JsonValue.fromStr(jsonStr4)\n        let jsonMVal4 = @Json(\n            {\n                \"company\": \"Tech Corp\",\n                \"employees\": [\n                    {\n                        \"id\": 1,\n                        \"name\": \"Alice\",\n                        \"department\": \"Engineering\",\n                        \"projects\": [\"Project A\", \"Project B\"]\n                    },\n                    {\n                        \"id\": 2,\n                        \"name\": \"Bob\",\n                        \"department\": \"Marketing\",\n                        \"campaigns\": {\n                            \"online\": [\"Social Media\", \"Email\"],\n                            \"offline\": [\"TV\", \"Radio\"]\n                        }\n                    }\n                ],\n                \"founded\": 1995,\n                \"active\": true,\n                \"CEO\": null\n            }\n        )\n        assertJson(jsonVal4, jsonMVal4)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func object() {\nconst jsonStr = \"\"\"\n                        {\n                          \"name\": \"John Doe\",\n                          \"age\": 30,\n                          \"city\": \"New York\"\n                        }\n                        \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "let jsonVal = JsonValue.fromStr(jsonStr)\nlet jsonMVal = @Json(\n            {\n                \"name\": \"John Doe\",\n                \"age\": 30,\n                \"city\": \"New York\"\n            }\n        )",
                  "successors": [
                    {
                      "id": 5,
                      "label": "assertJson(jsonVal, jsonMVal)\nconst jsonStr2 = \"\"\"\n                        {\n                          \"fruits\": [\"apple\", \"banana\", \"cherry\"],\n                          \"numbers\": [1, 2, 3, 4, 5],\n                          \"mixed\": [1, \"two\", true, null]\n                        }\n                        \"\"\"",
                      "successors": [
                        {
                          "id": 7,
                          "label": "let jsonVal2 = JsonValue.fromStr(jsonStr2)\nlet jsonMVal2 = @Json(\n            {\n                \"fruits\": [\"apple\", \"banana\", \"cherry\"],\n                \"numbers\": [1, 2, 3, 4, 5],\n                \"mixed\": [1, \"two\", true, null]\n            }\n        )",
                          "successors": [
                            {
                              "id": 9,
                              "label": "assertJson(jsonVal2, jsonMVal2)\nconst jsonStr3 = \"\"\"\n                        {\n                          \"person\": {\n                            \"name\": {\n                              \"first\": \"Jane\",\n                              \"last\": \"Smith\"\n                            },\n                            \"age\": 28,\n                            \"address\": {\n                              \"street\": \"123 Main St\",\n                              \"city\": \"Boston\",\n                              \"country\": \"USA\"\n                            }\n                          }\n                        }\n                        \"\"\"",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "let jsonVal3 = JsonValue.fromStr(jsonStr3)\nlet jsonMVal3 = @Json(\n            {\n                \"person\": {\n                    \"name\": {\n                        \"first\": \"Jane\",\n                        \"last\": \"Smith\"\n                    },\n                    \"age\": 28,\n                    \"address\": {\n                        \"street\": \"123 Main St\",\n                        \"city\": \"Boston\",\n                        \"country\": \"USA\"\n                    }\n                }\n            }\n        )",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "assertJson(jsonVal3, jsonMVal3)\nconst jsonStr4 = \"\"\"\n                        {\n                          \"company\": \"Tech Corp\",\n                          \"employees\": [\n                            {\n                              \"id\": 1,\n                              \"name\": \"Alice\",\n                              \"department\": \"Engineering\",\n                              \"projects\": [\"Project A\", \"Project B\"]\n                            },\n                            {\n                              \"id\": 2,\n                              \"name\": \"Bob\",\n                              \"department\": \"Marketing\",\n                              \"campaigns\": {\n                                \"online\": [\"Social Media\", \"Email\"],\n                                \"offline\": [\"TV\", \"Radio\"]\n                              }\n                            }\n                          ],\n                          \"founded\": 1995,\n                          \"active\": true,\n                          \"CEO\": null\n                        }\n                        \"\"\"",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "let jsonVal4 = JsonValue.fromStr(jsonStr4)\nlet jsonMVal4 = @Json(\n            {\n                \"company\": \"Tech Corp\",\n                \"employees\": [\n                    {\n                        \"id\": 1,\n                        \"name\": \"Alice\",\n                        \"department\": \"Engineering\",\n                        \"projects\": [\"Project A\", \"Project B\"]\n                    },\n                    {\n                        \"id\": 2,\n                        \"name\": \"Bob\",\n                        \"department\": \"Marketing\",\n                        \"campaigns\": {\n                            \"online\": [\"Social Media\", \"Email\"],\n                            \"offline\": [\"TV\", \"Radio\"]\n                        }\n                    }\n                ],\n                \"founded\": 1995,\n                \"active\": true,\n                \"CEO\": null\n            }\n        )",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "assertJson(jsonVal4, jsonMVal4)",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "empty",
          "type": "function",
          "start_line": 194,
          "end_line": 199,
          "functions": [],
          "classes": [],
          "simplified_code": "    func empty() {\n        assertJson(@Json( {} ), JsonObject())\n        assertJson(@Json( [] ), JsonArray())\n\n        @Assert((), @Json())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func empty() {\n    assertJson(@Json( {} ), JsonObject())",
              "successors": [
                {
                  "id": 3,
                  "label": "    assertJson(@Json( [] ), JsonArray())\n    @Assert((), @Json())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "trailingComma",
          "type": "function",
          "start_line": 202,
          "end_line": 205,
          "functions": [],
          "classes": [],
          "simplified_code": "    func trailingComma() {\n        assertJson(@Json( [1, 2, 3,] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))\n        assertJson(@Json( {\"a\": 1, \"b\": 2, \"c\": 3,} ), @Json( {\"a\": 1, \"b\": 2, \"c\": 3} ))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func trailingComma() {\n    assertJson(@Json( [1, 2, 3,] ), JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)]))",
              "successors": [
                {
                  "id": 3,
                  "label": "    assertJson(@Json( {\"a\": 1, \"b\": 2, \"c\": 3,} ), @Json( {\"a\": 1, \"b\": 2, \"c\": 3} ))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class JSONTests {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class JSONTests {",
          "successors": [
            {
              "id": 2,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package json_cj.test\n\nimport std.unittest.*\nimport std.ast.*\nimport std.unittest.testmacro.{Test, Assert, TestCase, Fail}\nimport encoding.json.*\nimport json_cj.*\nimport json_cj.testutil.assertJson\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package json_cj.test\nimport std.unittest.*",
      "successors": [
        {
          "id": 3,
          "label": "import std.ast.*\nimport std.unittest.testmacro.{Test, Assert, TestCase, Fail}",
          "successors": [
            {
              "id": 5,
              "label": "import encoding.json.*\nimport json_cj.*",
              "successors": [
                {
                  "id": 7,
                  "label": "import json_cj.testutil.assertJson\n@Test",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}