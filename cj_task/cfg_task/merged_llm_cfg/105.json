{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 24,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 18,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    var tree = Node('A',\n        left: Node('B', left: Node('C', right: Node('D'))),\n        right: Node('E', left: Node('F'), right: Node('G')))\n    println(tree.param)\n    tree.param = 128\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    var tree = Node('A',\n        left: Node('B', left: Node('C', right: Node('D'))),\n        right: Node('E', left: Node('F'), right: Node('G')))",
          "successors": [
            {
              "id": 3,
              "label": "    println(tree.param)\n    tree.param = 128",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Node",
      "type": "class",
      "start_line": 1,
      "end_line": 16,
      "functions": [
        {
          "name": "Node",
          "type": "function",
          "start_line": 3,
          "end_line": 5,
          "functions": [],
          "classes": [],
          "simplified_code": "    public Node(private var name: Rune,\n        private let left!: ?Node = None,\n        private let right!: ?Node = None) {}",
          "blocks": [
            {
              "id": 1,
              "label": "public Node(private var name: Rune, private let left!: ?Node = None, private let right!: ?Node = None) {}",
              "successors": []
            }
          ]
        },
        {
          "name": "param",
          "type": "function",
          "start_line": 7,
          "end_line": 15,
          "functions": [
            {
              "name": "set",
              "type": "function",
              "start_line": 8,
              "end_line": 13,
              "functions": [],
              "classes": [],
              "simplified_code": "        set(number) {\n            value = number\n            println(\"${name}: ${value}\")\n            left?.param = number / 2\n            right?.param = number / 2\n        }",
              "blocks": [
                {
                  "id": 1,
                  "label": "set(number) {\n    value = number",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    println(\"${name}: ${value}\")\n    left?.param = number / 2",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    right?.param = number / 2",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "get",
              "type": "function",
              "start_line": 14,
              "end_line": 14,
              "functions": [],
              "classes": [],
              "simplified_code": "        get() { value }",
              "blocks": [
                {
                  "id": 1,
                  "label": "get() { value }",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    public mut prop param: Int64 {\n        }\n        get() { value }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public mut prop param: Int64 {\nget() { value }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Node {\n    private var value: Int64 = 0\n        private let right!: ?Node = None) {}\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Node {",
          "successors": [
            {
              "id": 2,
              "label": "private var value: Int64 = 0",
              "successors": []
            },
            {
              "id": 3,
              "label": "private let right!: ?Node = None)",
              "successors": []
            },
            {
              "id": 4,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "}\n\n}",
  "blocks": []
}