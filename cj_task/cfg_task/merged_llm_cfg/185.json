{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 31,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 10,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let soc = TcpSocket(\"okhttp\", portTrans(50066))\n    soc.connect()\n    let sc = SocketClient.SocketC(soc)\n    let socket = OKSocket(sc, Option<Duration>.None, Option<Duration>.None)\n    let h2conn = H2Connection(sc, BufferedOutputStream(socket), OkBuffer(socket))\n    let formBody = FormBody.builder().add(\"username\", \"admin\").add(\"password\", \"123456\").add(\"host\", \"%6D\").build()\n    let request = httpclient4cj.Request.builder()\n        .url(\"http://okhttp:${portTrans(50066)}/cangjie_test-1.0-SNAPSHOT/hello\")\n        .header(\"User-Agent\", \"OkHttp-Example\")\n        .put(formBody)\n        .header(\"content-type\", formBody.contentType().getOrThrow().toString())\n        .build()\n    h2conn.start()\n    let h1 = h2conn.isHealthy()\n    h2conn.close()\n    let h2 = h2conn.isHealthy()\n    if (h1 == true && h2 == false) {\n        return 0\n    }\n    return 1\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {\nlet soc = TcpSocket(\"okhttp\", portTrans(50066))\nsoc.connect()\nlet sc = SocketClient.SocketC(soc)\nlet socket = OKSocket(sc, Option<Duration>.None, Option<Duration>.None)\nlet h2conn = H2Connection(sc, BufferedOutputStream(socket), OkBuffer(socket))\nlet formBody = FormBody.builder().add(\"username\", \"admin\").add(\"password\", \"123456\").add(\"host\", \"%6D\").build()\nlet request = httpclient4cj.Request.builder()\n    .url(\"http://okhttp:${portTrans(50066)}/cangjie_test-1.0-SNAPSHOT/hello\")\n    .header(\"User-Agent\", \"OkHttp-Example\")\n    .put(formBody)\n    .header(\"content-type\", formBody.contentType().getOrThrow().toString())\n    .build()\nh2conn.start()\nlet h1 = h2conn.isHealthy()\nh2conn.close()\nlet h2 = h2conn.isHealthy()",
          "successors": [
            {
              "id": 3,
              "label": "if (h1 == true && h2 == false) {",
              "successors": [
                {
                  "id": 4,
                  "label": "return 0",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "return 1",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// DEPENDENCE: ../z_test.cj\n// EXEC: cjc %import-path %L %l %f z_test.cj\n// EXEC: ./main\nfrom httpclient4cj import httpclient4cj.*\nfrom std import collection.*\nfrom std import io.*\nfrom std import time.*\nfrom net import http.*\nfrom std import socket.*\n}",
  "blocks": [
    {
      "id": 1,
      "label": "// DEPENDENCE: ../z_test.cj\n// EXEC: cjc %import-path %L %l %f z_test.cj",
      "successors": [
        {
          "id": 3,
          "label": "// EXEC: ./main\nfrom httpclient4cj import httpclient4cj.*",
          "successors": [
            {
              "id": 5,
              "label": "from std import collection.*\nfrom std import io.*",
              "successors": [
                {
                  "id": 7,
                  "label": "from std import time.*\nfrom net import http.*",
                  "successors": [
                    {
                      "id": 9,
                      "label": "from std import socket.*",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}