{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 270,
  "functions": [],
  "classes": [
    {
      "name": "PatternTests",
      "type": "class",
      "start_line": 7,
      "end_line": 270,
      "functions": [
        {
          "name": "testPatternFromStr",
          "type": "function",
          "start_line": 9,
          "end_line": 17,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testPatternFromStr() {\n        let p1 = Pattern(\"a*b\")\n        @Assert(p1.matches(\"a_b\"), true)\n\n        let e = @AssertThrows[PatternException]({\n            let _ = Pattern(\"a/**b\")\n        })\n        @Assert(e.pos, 4)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testPatternFromStr() {\nlet p1 = Pattern(\"a*b\")",
              "successors": [
                {
                  "id": 3,
                  "label": "@Assert(p1.matches(\"a_b\"), true)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let e = @AssertThrows[PatternException]({\nlet _ = Pattern(\"a/**b\")",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "})\n@Assert(e.pos, 4)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "assertInitException",
          "type": "function",
          "start_line": 19,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    func assertInitException(pattern: String, pos: Int) {\n        let e = @AssertThrows[PatternException]({\n            let _ = Pattern(pattern)\n        })\n        @Assert(e.pos, pos)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func assertInitException(pattern: String, pos: Int) {",
              "successors": [
                {
                  "id": 2,
                  "label": "let e = @AssertThrows[PatternException]({\nlet _ = Pattern(pattern)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "})\n@Assert(e.pos, pos)",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testWildcardErrors",
          "type": "function",
          "start_line": 27,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testWildcardErrors() {\n        assertInitException(\"a/**b\", 4)\n        assertInitException(\"a/bc**\", 3)\n        assertInitException(\"a/*****\", 4)\n        assertInitException(\"a/b**c**d\", 2)\n        assertInitException(\"a**b\", 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testWildcardErrors() {\n    assertInitException(\"a/**b\", 4)",
              "successors": [
                {
                  "id": 3,
                  "label": "    assertInitException(\"a/bc**\", 3)\n    assertInitException(\"a/*****\", 4)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    assertInitException(\"a/b**c**d\", 2)\n    assertInitException(\"a**b\", 0)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testUnclosedBracketErrors",
          "type": "function",
          "start_line": 36,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testUnclosedBracketErrors() {\n        assertInitException(\"abc[def\", 3)\n        assertInitException(\"abc[!def\", 3)\n        assertInitException(\"abc[\", 3)\n        assertInitException(\"abc[!\", 3)\n        assertInitException(\"abc[d\", 3)\n        assertInitException(\"abc[!d\", 3)\n        assertInitException(\"abc[]\", 3)\n        assertInitException(\"abc[!]\", 3)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testUnclosedBracketErrors() {\nassertInitException(\"abc[def\", 3)",
              "successors": [
                {
                  "id": 3,
                  "label": "assertInitException(\"abc[!def\", 3)\nassertInitException(\"abc[\", 3)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "assertInitException(\"abc[!\", 3)\nassertInitException(\"abc[d\", 3)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "assertInitException(\"abc[!d\", 3)\nassertInitException(\"abc[]\", 3)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "assertInitException(\"abc[!]\", 3)\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testWildcards",
          "type": "function",
          "start_line": 48,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testWildcards() {\n        let p1 = Pattern(\"a*b\")\n        @Assert(p1.matches(\"a_b\"), true)\n\n        let p2 = Pattern(\"a*b*c\")\n        @Assert(p2.matches(\"abc\"), true)\n        @Assert(p2.matches(\"abcd\"), false)\n        @Assert(p2.matches(\"a_b_c\"), true)\n        @Assert(p2.matches(\"a___b___c\"), true)\n\n        let p3 = Pattern(\"abc*abc*abc\")\n        @Assert(p3.matches(\"abcabcabcabcabcabcabc\"), true)\n        @Assert(p3.matches(\"abcabcabcabcabcabcabca\"), false)\n\n        let p4 = Pattern(\"a*a*a*a*a*a*a*a*a\")\n        @Assert(p4.matches(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"), true)\n\n        let p5 = Pattern(\"a*b[xyz]c*d\")\n        @Assert(p5.matches(\"abxcdbxcddd\"), true)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testWildcards() {\nlet p1 = Pattern(\"a*b\")",
              "successors": [
                {
                  "id": 3,
                  "label": "@Assert(p1.matches(\"a_b\"), true)\nlet p2 = Pattern(\"a*b*c\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "@Assert(p2.matches(\"abc\"), true)\n@Assert(p2.matches(\"abcd\"), false)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "@Assert(p2.matches(\"a_b_c\"), true)\n@Assert(p2.matches(\"a___b___c\"), true)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "let p3 = Pattern(\"abc*abc*abc\")\n@Assert(p3.matches(\"abcabcabcabcabcabcabc\"), true)",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "@Assert(p3.matches(\"abcabcabcabcabcabcabca\"), false)\nlet p4 = Pattern(\"a*a*a*a*a*a*a*a*a\")",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "@Assert(p4.matches(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"), true)\nlet p5 = Pattern(\"a*b[xyz]c*d\")",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "@Assert(p5.matches(\"abxcdbxcddd\"), true)\n}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testRecursiveWildcards",
          "type": "function",
          "start_line": 70,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testRecursiveWildcards() {\n        let pat = Pattern(\"some/**/needle.txt\")\n        @Assert(pat.matches(\"some/needle.txt\"), true)\n        @Assert(pat.matches(\"some/one/needle.txt\"), true)\n        @Assert(pat.matches(\"some/one/two/needle.txt\"), true)\n        @Assert(pat.matches(\"some/other/needle.txt\"), true)\n        @Assert(pat.matches(\"some/other/notthis.txt\"), false)\n\n        let pat2 = Pattern(\"**\")\n        @Assert(pat2.matches(\"abcde\"), true)\n        @Assert(pat2.matches(\"\"), true)\n        @Assert(pat2.matches(\".asdf\"), true)\n        @Assert(pat2.matches(\"/x/.asdf\"), true)\n\n        let pat3 = Pattern(\"some/**/**/needle.txt\")\n        @Assert(pat3.matches(\"some/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/one/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/one/two/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/other/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/other/notthis.txt\"), false)\n\n        let pat4 = Pattern(\"**/test\")\n        @Assert(pat4.matches(\"one/two/test\"), true)\n        @Assert(pat4.matches(\"one/test\"), true)\n        @Assert(pat4.matches(\"test\"), true)\n\n        let pat5 = Pattern(\"/**/test\")\n        @Assert(pat5.matches(\"/one/two/test\"), true)\n        @Assert(pat5.matches(\"/one/test\"), true)\n        @Assert(pat5.matches(\"/test\"), true)\n        @Assert(pat5.matches(\"/one/notthis\"), false)\n        @Assert(pat5.matches(\"/notthis\"), false)\n\n        let pat6 = Pattern(\"**/.*\")\n        @Assert(pat6.matches(\".abc\"), true)\n        @Assert(pat6.matches(\"abc/.abc\"), true)\n        @Assert(pat6.matches(\"ab.c\"), false)\n        @Assert(pat6.matches(\"abc/ab.c\"), false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testRecursiveWildcards() {\nlet pat = Pattern(\"some/**/needle.txt\")",
              "successors": [
                {
                  "id": 3,
                  "label": "@Assert(pat.matches(\"some/needle.txt\"), true)\n@Assert(pat.matches(\"some/one/needle.txt\"), true)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "@Assert(pat.matches(\"some/one/two/needle.txt\"), true)\n@Assert(pat.matches(\"some/other/needle.txt\"), true)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "@Assert(pat.matches(\"some/other/notthis.txt\"), false)\nlet pat2 = Pattern(\"**\")",
                          "successors": [
                            {
                              "id": 9,
                              "label": "@Assert(pat2.matches(\"abcde\"), true)\n@Assert(pat2.matches(\"\"), true)",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "@Assert(pat2.matches(\".asdf\"), true)\n@Assert(pat2.matches(\"/x/.asdf\"), true)",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "let pat3 = Pattern(\"some/**/**/needle.txt\")\n@Assert(pat3.matches(\"some/needle.txt\"), true)",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "@Assert(pat3.matches(\"some/one/needle.txt\"), true)\n@Assert(pat3.matches(\"some/one/two/needle.txt\"), true)",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "@Assert(pat3.matches(\"some/other/needle.txt\"), true)\n@Assert(pat3.matches(\"some/other/notthis.txt\"), false)",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "let pat4 = Pattern(\"**/test\")\n@Assert(pat4.matches(\"one/two/test\"), true)",
                                                  "successors": [
                                                    {
                                                      "id": 21,
                                                      "label": "@Assert(pat4.matches(\"one/test\"), true)\n@Assert(pat4.matches(\"test\"), true)",
                                                      "successors": [
                                                        {
                                                          "id": 23,
                                                          "label": "let pat5 = Pattern(\"/**/test\")\n@Assert(pat5.matches(\"/one/two/test\"), true)",
                                                          "successors": [
                                                            {
                                                              "id": 25,
                                                              "label": "@Assert(pat5.matches(\"/one/test\"), true)\n@Assert(pat5.matches(\"/test\"), true)",
                                                              "successors": [
                                                                {
                                                                  "id": 27,
                                                                  "label": "@Assert(pat5.matches(\"/one/notthis\"), false)\n@Assert(pat5.matches(\"/notthis\"), false)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 29,
                                                                      "label": "let pat6 = Pattern(\"**/.*\")\n@Assert(pat6.matches(\".abc\"), true)",
                                                                      "successors": [
                                                                        {
                                                                          "id": 31,
                                                                          "label": "@Assert(pat6.matches(\"abc/.abc\"), true)\n@Assert(pat6.matches(\"ab.c\"), false)",
                                                                          "successors": [
                                                                            {
                                                                              "id": 33,
                                                                              "label": "@Assert(pat6.matches(\"abc/ab.c\"), false)",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testRangePattern",
          "type": "function",
          "start_line": 111,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testRangePattern() {\n        let pat = Pattern(\"a[0-9]b\")\n        for (i in 0..10) {\n            @Assert(pat.matches(\"a${i}b\"), true)\n        }\n        @Assert(pat.matches(\"a_b\"), false)\n\n        let pat2 = Pattern(\"a[!0-9]b\")\n        for (i in 0..10) {\n            @Assert(pat2.matches(\"a${i}b\"), false)\n        }\n        @Assert(pat2.matches(\"a_b\"), true)\n\n        let pats = [\"[a-z123]\", \"[1a-z23]\", \"[123a-z]\"]\n        for (p in pats) {\n            let pat = Pattern(p)\n            for (c in \"abcdefghijklmnopqrstuvwxyz\".toRuneArray()) {\n                @Assert(pat.matches(String(c)), true)\n            }\n            for (c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toRuneArray()) {\n                var options = MatchOptions()\n                options.caseSensitive = false\n                @Assert(pat.matchesWith(String(c), options), true)\n            }\n            @Assert(pat.matches(\"1\"), true)\n            @Assert(pat.matches(\"2\"), true)\n            @Assert(pat.matches(\"3\"), true)\n        }\n\n        let pats2 = [\"[abc-]\", \"[-abc]\", \"[a-c-]\"]\n        for (p in pats2) {\n            let pat = Pattern(p)\n            @Assert(pat.matches(\"a\"), true)\n            @Assert(pat.matches(\"b\"), true)\n            @Assert(pat.matches(\"c\"), true)\n            @Assert(pat.matches(\"-\"), true)\n            @Assert(pat.matches(\"d\"), false)\n        }\n\n        let pat3 = Pattern(\"[2-1]\")\n        @Assert(pat3.matches(\"1\"), false)\n        @Assert(pat3.matches(\"2\"), false)\n\n        let pat4 = Pattern(\"[-]\")\n        @Assert(pat4.matches(\"-\"), true)\n        let pat5 = Pattern(\"[!-]\")\n        @Assert(pat5.matches(\"-\"), false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let pat = Pattern(\"a[0-9]b\")",
              "successors": [
                {
                  "id": 2,
                  "label": "for (i in 0..10) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    @Assert(pat.matches(\"a${i}b\"), true)\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "@Assert(pat.matches(\"a_b\"), false)\nlet pat2 = Pattern(\"a[!0-9]b\")",
                  "successors": [
                    {
                      "id": 7,
                      "label": "for (i in 0..10) {",
                      "successors": [
                        {
                          "id": 8,
                          "label": "    @Assert(pat2.matches(\"a${i}b\"), false)\n}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "@Assert(pat2.matches(\"a_b\"), true)\nlet pats = [\"[a-z123]\", \"[1a-z23]\", \"[123a-z]\"]",
                      "successors": [
                        {
                          "id": 12,
                          "label": "for (p in pats) {",
                          "successors": [
                            {
                              "id": 13,
                              "label": "    let pat = Pattern(p)",
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "    for (c in \"abcdefghijklmnopqrstuvwxyz\".toRuneArray()) {",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "        @Assert(pat.matches(String(c)), true)\n    }",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 17,
                                  "label": "    for (c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toRuneArray()) {",
                                  "successors": [
                                    {
                                      "id": 18,
                                      "label": "        var options = MatchOptions()\n        options.caseSensitive = false",
                                      "successors": [
                                        {
                                          "id": 20,
                                          "label": "        @Assert(pat.matchesWith(String(c), options), true)\n    }",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 22,
                                  "label": "@Assert(pat.matches(\"1\"), true)\n@Assert(pat.matches(\"2\"), true)",
                                  "successors": [
                                    {
                                      "id": 24,
                                      "label": "@Assert(pat.matches(\"3\"), true)\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 26,
                          "label": "let pats2 = [\"[abc-]\", \"[-abc]\", \"[a-c-]\"]",
                          "successors": [
                            {
                              "id": 27,
                              "label": "for (p in pats2) {",
                              "successors": [
                                {
                                  "id": 28,
                                  "label": "    let pat = Pattern(p)\n    @Assert(pat.matches(\"a\"), true)",
                                  "successors": [
                                    {
                                      "id": 30,
                                      "label": "    @Assert(pat.matches(\"b\"), true)\n    @Assert(pat.matches(\"c\"), true)",
                                      "successors": [
                                        {
                                          "id": 32,
                                          "label": "    @Assert(pat.matches(\"-\"), true)\n    @Assert(pat.matches(\"d\"), false)",
                                          "successors": [
                                            {
                                              "id": 34,
                                              "label": "}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 35,
                                  "label": "let pat3 = Pattern(\"[2-1]\")\n@Assert(pat3.matches(\"1\"), false)",
                                  "successors": [
                                    {
                                      "id": 37,
                                      "label": "@Assert(pat3.matches(\"2\"), false)\nlet pat4 = Pattern(\"[-]\")",
                                      "successors": [
                                        {
                                          "id": 39,
                                          "label": "@Assert(pat4.matches(\"-\"), true)\nlet pat5 = Pattern(\"[!-]\")",
                                          "successors": [
                                            {
                                              "id": 41,
                                              "label": "@Assert(pat5.matches(\"-\"), false)",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testPatternMatches",
          "type": "function",
          "start_line": 161,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testPatternMatches() {\n        let txtPat = Pattern(\"*hello.txt\")\n        @Assert(txtPat.matches(\"hello.txt\"), true)\n        @Assert(txtPat.matches(\"gareth_says_hello.txt\"), true)\n        @Assert(txtPat.matches(\"some/path/to/hello.txt\"), true)\n        @Assert(txtPat.matches(\"some\\\\path\\\\to\\\\hello.txt\"), true)\n        @Assert(txtPat.matches(\"/an/absolute/path/to/hello.txt\"), true)\n        @Assert(txtPat.matches(\"hello.txt-and-then-some\"), false)\n        @Assert(txtPat.matches(\"goodbye.txt\"), false)\n\n        let dirPat = Pattern(\"*some/path/to/hello.txt\")\n        @Assert(dirPat.matches(\"some/path/to/hello.txt\"), true)\n        @Assert(dirPat.matches(\"a/bigger/some/path/to/hello.txt\"), true)\n        @Assert(dirPat.matches(\"some/path/to/hello.txt-and-then-some\"), false)\n        @Assert(dirPat.matches(\"some/other/path/to/hello.txt\"), false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testPatternMatches() {\n    let txtPat = Pattern(\"*hello.txt\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    @Assert(txtPat.matches(\"hello.txt\"), true)\n    @Assert(txtPat.matches(\"gareth_says_hello.txt\"), true)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    @Assert(txtPat.matches(\"some/path/to/hello.txt\"), true)\n    @Assert(txtPat.matches(\"some\\path\\to\\hello.txt\"), true)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    @Assert(txtPat.matches(\"/an/absolute/path/to/hello.txt\"), true)\n    @Assert(txtPat.matches(\"hello.txt-and-then-some\"), false)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    @Assert(txtPat.matches(\"goodbye.txt\"), false)\n    let dirPat = Pattern(\"*some/path/to/hello.txt\")",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "    @Assert(dirPat.matches(\"some/path/to/hello.txt\"), true)\n    @Assert(dirPat.matches(\"a/bigger/some/path/to/hello.txt\"), true)",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "    @Assert(dirPat.matches(\"some/path/to/hello.txt-and-then-some\"), false)\n    @Assert(dirPat.matches(\"some/other/path/to/hello.txt\"), false)",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testPatternMatchesWith",
          "type": "function",
          "start_line": 179,
          "end_line": 187,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testPatternMatchesWith() {\n        let pat = Pattern(\"aBcDeFg\")\n        var options = MatchOptions()\n        options.caseSensitive = false\n        @Assert(pat.matchesWith(\"aBcDeFg\", options), true)\n        @Assert(pat.matchesWith(\"abcdefg\", options), true)\n        @Assert(pat.matchesWith(\"ABCDEFG\", options), true)\n        @Assert(pat.matchesWith(\"AbCdEfG\", options), true)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testPatternMatchesWith() {\n    let pat = Pattern(\"aBcDeFg\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    var options = MatchOptions()\n    options.caseSensitive = false",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    @Assert(pat.matchesWith(\"aBcDeFg\", options), true)\n    @Assert(pat.matchesWith(\"abcdefg\", options), true)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    @Assert(pat.matchesWith(\"ABCDEFG\", options), true)\n    @Assert(pat.matchesWith(\"AbCdEfG\", options), true)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testPatternMatchesWithLiteralSeparator",
          "type": "function",
          "start_line": 190,
          "end_line": 200,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testPatternMatchesWithLiteralSeparator() {\n        let pat = Pattern(\"a/b/c\")\n        var options = MatchOptions()\n        options.requireLiteralSeparator = true\n        @Assert(pat.matchesWith(\"a/b/c\", options), true)\n        @Assert(pat.matchesWith(\"a/b/c/d\", options), false)\n        @Assert(pat.matchesWith(\"a/b/cd\", options), false)\n        @Assert(pat.matchesWith(\"a/b/c/\", options), false)\n        @Assert(pat.matchesWith(\"a/b/c//\", options), false)\n        @Assert(pat.matchesWith(\"a/b/c//d\", options), false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testPatternMatchesWithLiteralSeparator() {\n    let pat = Pattern(\"a/b/c\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    var options = MatchOptions()\n    options.requireLiteralSeparator = true",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    @Assert(pat.matchesWith(\"a/b/c\", options), true)\n    @Assert(pat.matchesWith(\"a/b/c/d\", options), false)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    @Assert(pat.matchesWith(\"a/b/cd\", options), false)\n    @Assert(pat.matchesWith(\"a/b/c/\", options), false)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    @Assert(pat.matchesWith(\"a/b/c//\", options), false)\n    @Assert(pat.matchesWith(\"a/b/c//d\", options), false)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testPatternMatchesRequireLiteralSeparator",
          "type": "function",
          "start_line": 203,
          "end_line": 223,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testPatternMatchesRequireLiteralSeparator() {\n        var optionsRequireLiteral = MatchOptions()\n        optionsRequireLiteral.caseSensitive = true\n        optionsRequireLiteral.requireLiteralSeparator = true\n        optionsRequireLiteral.requireLiteralLeadingDot = false\n\n        var optionsNotRequireLiteral = MatchOptions()\n        optionsNotRequireLiteral.caseSensitive = true\n        optionsNotRequireLiteral.requireLiteralSeparator = false\n        optionsNotRequireLiteral.requireLiteralLeadingDot = false\n\n        @Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsRequireLiteral), true)\n        @Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n        @Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n        @Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n\n        @Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n        @Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n        @Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n        @Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testPatternMatchesRequireLiteralSeparator() {\nvar optionsRequireLiteral = MatchOptions()\noptionsRequireLiteral.caseSensitive = true\noptionsRequireLiteral.requireLiteralSeparator = true\noptionsRequireLiteral.requireLiteralLeadingDot = false",
              "successors": [
                {
                  "id": 3,
                  "label": "var optionsNotRequireLiteral = MatchOptions()\noptionsNotRequireLiteral.caseSensitive = true\noptionsNotRequireLiteral.requireLiteralSeparator = false\noptionsNotRequireLiteral.requireLiteralLeadingDot = false\n@Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsRequireLiteral), true)\n@Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n@Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n@Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "@Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n@Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n@Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n@Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testPatternMatchesWithLiteralLeadingDot",
          "type": "function",
          "start_line": 226,
          "end_line": 260,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testPatternMatchesWithLiteralLeadingDot() {\n        var optionsRequireLiteralLeadingDot = MatchOptions()\n        optionsRequireLiteralLeadingDot.caseSensitive = true\n        optionsRequireLiteralLeadingDot.requireLiteralSeparator = false\n        optionsRequireLiteralLeadingDot.requireLiteralLeadingDot = true\n\n        var optionsNotRequireLiteralLeadingDot = MatchOptions()\n        optionsNotRequireLiteralLeadingDot.caseSensitive = true\n        optionsNotRequireLiteralLeadingDot.requireLiteralSeparator = false\n        optionsNotRequireLiteralLeadingDot.requireLiteralLeadingDot = false\n\n        @Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), true)\n\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsRequireLiteralLeadingDot), true)\n\n        @Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), true)\n\n        @Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsRequireLiteralLeadingDot), false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testPatternMatchesWithLiteralLeadingDot() {\nvar optionsRequireLiteralLeadingDot = MatchOptions()\noptionsRequireLiteralLeadingDot.caseSensitive = true\noptionsRequireLiteralLeadingDot.requireLiteralSeparator = false\noptionsRequireLiteralLeadingDot.requireLiteralLeadingDot = true",
              "successors": [
                {
                  "id": 3,
                  "label": "var optionsNotRequireLiteralLeadingDot = MatchOptions()\noptionsNotRequireLiteralLeadingDot.caseSensitive = true\noptionsNotRequireLiteralLeadingDot.requireLiteralSeparator = false\noptionsNotRequireLiteralLeadingDot.requireLiteralLeadingDot = false\n@Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), false)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "@Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), false)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "@Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), true)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "@Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)\n@Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "@Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsNotRequireLiteralLeadingDot), true)\n@Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsRequireLiteralLeadingDot), false)\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testGlob",
          "type": "function",
          "start_line": 263,
          "end_line": 269,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testGlob() {\n        let g1 = glob(\"/\")\n        @Assert(g1.next().isSome(), true)\n\n        let g2 = glob(\"src/*\")\n        @Assert(g2.next().isSome(), true)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testGlob() {\n    let g1 = glob(\"/\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    @Assert(g1.next().isSome(), true)\n    let g2 = glob(\"src/*\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    @Assert(g2.next().isSome(), true)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class PatternTests {\n    @TestCase\n    }\n\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package glob\n\nimport std.unittest.*\nimport std.unittest.testmacro.*\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package glob\nimport std.unittest.*",
      "successors": [
        {
          "id": 3,
          "label": "import std.unittest.testmacro.*\n@Test",
          "successors": []
        }
      ]
    }
  ]
}