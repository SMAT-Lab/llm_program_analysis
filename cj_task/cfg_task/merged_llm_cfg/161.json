{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 238,
  "functions": [],
  "classes": [
    {
      "name": "Base64",
      "type": "class",
      "start_line": 8,
      "end_line": 238,
      "functions": [
        {
          "name": "convertCharToByte(c: Int64): Byte",
          "type": "function",
          "start_line": 87,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func convertCharToByte(c: Int64): Byte {\n        convertCharToByte(toBase64[c])\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func convertCharToByte(c: Int64): Byte {\nconvertCharToByte(toBase64[c])",
              "successors": []
            }
          ]
        },
        {
          "name": "convertCharToByte(c: Char): Byte",
          "type": "function",
          "start_line": 90,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func convertCharToByte(c: Char): Byte {\n        UInt8(UInt32(c))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func convertCharToByte(c: Char): Byte {\n    UInt8(UInt32(c))",
              "successors": []
            }
          ]
        },
        {
          "name": "encode(data: Array<Byte>): ByteArrayStream",
          "type": "function",
          "start_line": 93,
          "end_line": 98,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func encode(data: Array<Byte>): ByteArrayStream {\n        let bytes = ByteArrayStream()\n        let input: InputStream = ByteCollectionInputStream(data)\n        encode(input, bytes)\n        bytes\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func encode(data: Array<Byte>): ByteArrayStream {\n    let bytes = ByteArrayStream()",
              "successors": [
                {
                  "id": 3,
                  "label": "    let input: InputStream = ByteCollectionInputStream(data)\n    encode(input, bytes)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    bytes",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "encode(input: InputStream, output: OutputStream): Unit",
          "type": "function",
          "start_line": 99,
          "end_line": 146,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func encode(input: InputStream, output: OutputStream): Unit {\n        let bufout = BufferedOutputStream(output)\n        let bufsize = 128\n        var buf = Array<Byte>(bufsize, item: 0)\n        var enc = Array<Byte>(4, item: 0)\n        var resultLen = 0\n        var tmp = 0\n        var bufLen = input.read(buf)\n        while (bufLen > 0) {\n            var i = 0\n            while (i < bufLen) {\n                var b = buf[i]\n                match (resultLen % 4) {\n                    case 0 =>\n                        enc[0] = convertCharToByte(Int64(b) >> 2)\n                        tmp = Int64(b << 6) >> 2\n                        resultLen++\n                    case 1 =>\n                        enc[1] = convertCharToByte(tmp | (Int64(b) >> 4))\n                        tmp == Int64(b << 4) >> 2\n                        resultLen++\n                    case 2 =>\n                        enc[2] = convertCharToByte(tmp | (Int64(b) >> 6))\n                        tmp == Int64(b << 2) >> 2\n                        enc[3] = convertCharToByte(tmp)\n                        bufout.write(enc)\n                        resultLen += 2\n                    case _ => throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")\n                }\n                i++\n            }\n            bufLen = input.read(buf)\n        }\n        match (resultLen % 4) {\n            case 0 => ()\n            case 1 =>\n                enc[1] = convertCharToByte(tmp)\n                enc[2] = tailSymbol\n                enc[3] = tailSymbol\n                bufout.write(enc)\n            case 2 =>\n                enc[2] = convertCharToByte(tmp)\n                enc[3] = tailSymbol\n                bufout.write(enc)\n            case _ => throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")\n        }\n        bufout.flush()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func encode(input: InputStream, output: OutputStream): Unit {\nlet bufout = BufferedOutputStream(output)\nlet bufsize = 128\nvar buf = Array<Byte>(bufsize, item: 0)\nvar enc = Array<Byte>(4, item: 0)\nvar resultLen = 0\nvar tmp = 0\nvar bufLen = input.read(buf)",
              "successors": [
                {
                  "id": 3,
                  "label": "while (bufLen > 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "var i = 0\nwhile (i < bufLen) {\nvar b = buf[i]\nmatch (resultLen % 4) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "case 0 =>\n    enc[0] = convertCharToByte(Int64(b) >> 2)\n    tmp = Int64(b << 6) >> 2\n    resultLen++\ni++",
                          "successors": [
                            {
                              "id": 13,
                              "label": "}\nvar i = 0\nwhile (i < bufLen) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "case 1 =>\n    enc[1] = convertCharToByte(tmp | (Int64(b) >> 4))\n    tmp == Int64(b << 4) >> 2\n    resultLen++\ni++",
                          "successors": [
                            {
                              "id": 13,
                              "label": "}\nvar i = 0\nwhile (i < bufLen) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "case 2 =>\n    enc[2] = convertCharToByte(tmp | (Int64(b) >> 6))\n    tmp == Int64(b << 2) >> 2\n    enc[3] = convertCharToByte(tmp)\n    bufout.write(enc)\n    resultLen += 2\ni++",
                          "successors": [
                            {
                              "id": 13,
                              "label": "}\nvar i = 0\nwhile (i < bufLen) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "case _ => throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")\ni++",
                          "successors": [
                            {
                              "id": 13,
                              "label": "}\nvar i = 0\nwhile (i < bufLen) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "bufLen = input.read(buf)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (bufLen > 0) {",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "match (resultLen % 4) {",
                  "successors": [
                    {
                      "id": 12,
                      "label": "case 0 => ()\n}",
                      "successors": [
                        {
                          "id": 16,
                          "label": "bufout.flush()\n}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "case 1 =>\n    enc[1] = convertCharToByte(tmp)\n    enc[2] = tailSymbol\n    enc[3] = tailSymbol\n    bufout.write(enc)\n}",
                      "successors": [
                        {
                          "id": 16,
                          "label": "bufout.flush()\n}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 14,
                      "label": "case 2 =>\n    enc[2] = convertCharToByte(tmp)\n    enc[3] = tailSymbol\n    bufout.write(enc)\n}",
                      "successors": [
                        {
                          "id": 16,
                          "label": "bufout.flush()\n}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "case _ => throw UnreachableException(\"${resultLen} ${tmp} ${enc}\")\n}",
                      "successors": [
                        {
                          "id": 16,
                          "label": "bufout.flush()\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "charsetEncode(data: String, charset: Charset): Array<Byte>",
          "type": "function",
          "start_line": 147,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func charsetEncode(data: String, charset: Charset): Array<Byte> {\n        charset.newEncoder().encode(data)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func charsetEncode(data: String, charset: Charset): Array<Byte> {\n    charset.newEncoder().encode(data)",
              "successors": []
            }
          ]
        },
        {
          "name": "charsetDecode(data: Array<Byte>, charset: Charset): String",
          "type": "function",
          "start_line": 150,
          "end_line": 152,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func charsetDecode(data: Array<Byte>, charset: Charset): String {\n        charset.newDecoder().decode(data)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func charsetDecode(data: Array<Byte>, charset: Charset): String {\ncharset.newDecoder().decode(data)",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit",
          "type": "function",
          "start_line": 153,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func encodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {\n        encode(ByteCollectionInputStream(data), output)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func encodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {\n    encode(ByteCollectionInputStream(data), output)",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToBytes(data: Array<Byte>): Array<Byte>",
          "type": "function",
          "start_line": 156,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func encodeToBytes(data: Array<Byte>): Array<Byte> {\n        encode(data).readToEnd()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func encodeToBytes(data: Array<Byte>): Array<Byte> {\n    encode(data).readToEnd()",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToString(data: Array<Byte>): String",
          "type": "function",
          "start_line": 159,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func encodeToString(data: Array<Byte>): String {\n        String.fromUtf8(encodeToBytes(data))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func encodeToString(data: Array<Byte>): String {\n    String.fromUtf8(encodeToBytes(data))",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToOutputStream(data: String, output: OutputStream, charset!: Charset = Charsets.UTF8): Unit",
          "type": "function",
          "start_line": 162,
          "end_line": 164,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func encodeToOutputStream(data: String, output: OutputStream, charset!: Charset = Charsets.UTF8): Unit {\n        encodeToOutputStream(charsetEncode(data, charset), output)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func encodeToOutputStream(data: String, output: OutputStream, charset!: Charset = Charsets.UTF8): Unit {\nencodeToOutputStream(charsetEncode(data, charset), output)",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToBytes(data: String, charset!: Charset = Charsets.UTF8): Array<Byte>",
          "type": "function",
          "start_line": 165,
          "end_line": 167,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func encodeToBytes(data: String, charset!: Charset = Charsets.UTF8): Array<Byte> {\n        encodeToBytes(charsetEncode(data, charset))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func encodeToBytes(data: String, charset!: Charset = Charsets.UTF8): Array<Byte> {\n    encodeToBytes(charsetEncode(data, charset))",
              "successors": []
            }
          ]
        },
        {
          "name": "encodeToString(data: String, charset!: Charset = Charsets.UTF8): String",
          "type": "function",
          "start_line": 168,
          "end_line": 170,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func encodeToString(data: String, charset!: Charset = Charsets.UTF8): String {\n        String.fromUtf8(encodeToBytes(data, charset: charset))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func encodeToString(data: String, charset!: Charset = Charsets.UTF8): String {\n    String.fromUtf8(encodeToBytes(data, charset: charset))",
              "successors": []
            }
          ]
        },
        {
          "name": "decode(data: Array<Byte>): ByteArrayStream",
          "type": "function",
          "start_line": 171,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func decode(data: Array<Byte>): ByteArrayStream {\n        let bytes = ByteArrayStream()\n        let input: InputStream = ByteCollectionInputStream(data)\n        decode(input, bytes)\n        bytes\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func decode(data: Array<Byte>): ByteArrayStream {\nlet bytes = ByteArrayStream()",
              "successors": [
                {
                  "id": 3,
                  "label": "let input: InputStream = ByteCollectionInputStream(data)\ndecode(input, bytes)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "bytes",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "decode(input: InputStream, output: OutputStream): Unit",
          "type": "function",
          "start_line": 177,
          "end_line": 219,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func decode(input: InputStream, output: OutputStream): Unit {\n        let bufout = BufferedOutputStream(output)\n        let bufsize = 128\n        var buf = Array<Byte>(bufsize, item: 0)\n        var dec = Array<Byte>(3, item: 0)\n        var resultLen = 0\n        var bufLen = input.read(buf)\n        while (bufLen > 0) {\n            var i = 0\n            while (i < bufLen) {\n                var b = buf[i]\n                if (b == tailSymbol) {\n                    let mod = resultLen % 4\n                    if (i + 1 == bufLen && mod == 2) {\n                        input.read(Array<Byte>(1, item: 0))\n                    }\n                    if (mod != 3) {\n                        bufout.write(dec.slice(0, 3 - mod))\n                    }\n                    bufout.flush()\n                    return\n                }\n                let idx = fromBase64[b]\n                match (resultLen % 4) {\n                    case 0 => dec[0] = idx << 2\n                    case 1 =>\n                        dec[0] |= idx >> 4\n                        dec[1] = idx << 4\n                    case 2 =>\n                        dec[1] |= idx >> 2\n                        dec[2] = idx << 6\n                    case 3 =>\n                        dec[2] |= idx\n                        bufout.write(dec)\n                    case _ => throw UnreachableException()\n                }\n                i++\n                resultLen++\n            }\n            bufLen = input.read(buf)\n        }\n        bufout.flush()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func decode(input: InputStream, output: OutputStream): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "let bufout = BufferedOutputStream(output)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "let bufsize = 128",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "var buf = Array<Byte>(bufsize, item: 0)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "var dec = Array<Byte>(3, item: 0)",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "var resultLen = 0",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "var bufLen = input.read(buf)",
                  "successors": [
                    {
                      "id": 8,
                      "label": "while (bufLen > 0) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "var i = 0",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "while (i < bufLen) {",
                          "successors": [
                            {
                              "id": 11,
                              "label": "var b = buf[i]",
                              "successors": []
                            },
                            {
                              "id": 12,
                              "label": "if (b == tailSymbol) {",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "let mod = resultLen % 4",
                                  "successors": []
                                },
                                {
                                  "id": 14,
                                  "label": "if (i + 1 == bufLen && mod == 2) {\ninput.read(Array<Byte>(1, item: 0))",
                                  "successors": []
                                },
                                {
                                  "id": 16,
                                  "label": "if (mod != 3) {\nbufout.write(dec.slice(0, 3 - mod))",
                                  "successors": []
                                },
                                {
                                  "id": 18,
                                  "label": "bufout.flush()",
                                  "successors": []
                                },
                                {
                                  "id": 19,
                                  "label": "return",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 20,
                              "label": "let idx = fromBase64[b]",
                              "successors": []
                            },
                            {
                              "id": 21,
                              "label": "match (resultLen % 4) {",
                              "successors": [
                                {
                                  "id": 22,
                                  "label": "case 0 => dec[0] = idx << 2",
                                  "successors": []
                                },
                                {
                                  "id": 23,
                                  "label": "case 1 =>",
                                  "successors": [
                                    {
                                      "id": 24,
                                      "label": "dec[0] |= idx >> 4",
                                      "successors": []
                                    },
                                    {
                                      "id": 25,
                                      "label": "dec[1] = idx << 4",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 26,
                                  "label": "case 2 =>",
                                  "successors": [
                                    {
                                      "id": 27,
                                      "label": "dec[1] |= idx >> 2",
                                      "successors": []
                                    },
                                    {
                                      "id": 28,
                                      "label": "dec[2] = idx << 6",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 29,
                                  "label": "case 3 =>",
                                  "successors": [
                                    {
                                      "id": 30,
                                      "label": "dec[2] |= idx",
                                      "successors": []
                                    },
                                    {
                                      "id": 31,
                                      "label": "bufout.write(dec)",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 32,
                                  "label": "case _ => throw UnreachableException()",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 33,
                              "label": "i++",
                              "successors": []
                            },
                            {
                              "id": 34,
                              "label": "resultLen++",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 35,
                          "label": "bufLen = input.read(buf)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 36,
                      "label": "bufout.flush()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "decodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit",
          "type": "function",
          "start_line": 220,
          "end_line": 222,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func decodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {\n        decode(ByteCollectionInputStream(data), output)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func decodeToOutputStream(data: Array<Byte>, output: OutputStream): Unit {\n    decode(ByteCollectionInputStream(data), output)",
              "successors": []
            }
          ]
        },
        {
          "name": "decodeToBytes(data: Array<Byte>): Array<Byte>",
          "type": "function",
          "start_line": 223,
          "end_line": 225,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func decodeToBytes(data: Array<Byte>): Array<Byte> {\n        decode(data).readToEnd()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func decodeToBytes(data: Array<Byte>): Array<Byte> {\n    decode(data).readToEnd()",
              "successors": []
            }
          ]
        },
        {
          "name": "decodeToString(data: Array<Byte>, charset!: Charset = Charsets.UTF8): String",
          "type": "function",
          "start_line": 226,
          "end_line": 228,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func decodeToString(data: Array<Byte>, charset!: Charset = Charsets.UTF8): String {\n        charsetDecode(decodeToBytes(data), charset)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func decodeToString(data: Array<Byte>, charset!: Charset = Charsets.UTF8): String {\n    charsetDecode(decodeToBytes(data), charset)",
              "successors": []
            }
          ]
        },
        {
          "name": "decodeToOutputStream(data: String, output: OutputStream): Unit",
          "type": "function",
          "start_line": 229,
          "end_line": 231,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func decodeToOutputStream(data: String, output: OutputStream): Unit {\n        decodeToOutputStream(data.toArray(), output)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func decodeToOutputStream(data: String, output: OutputStream): Unit {\n    decodeToOutputStream(data.toArray(), output)",
              "successors": []
            }
          ]
        },
        {
          "name": "decodeToBytes(data: String): Array<Byte>",
          "type": "function",
          "start_line": 232,
          "end_line": 234,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func decodeToBytes(data: String): Array<Byte> {\n        decodeToBytes(data.toArray())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func decodeToBytes(data: String): Array<Byte> {\n    decodeToBytes(data.toArray())",
              "successors": []
            }
          ]
        },
        {
          "name": "decodeToString(data: String, charset!: Charset = Charsets.UTF8): String",
          "type": "function",
          "start_line": 235,
          "end_line": 237,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func decodeToString(data: String, charset!: Charset = Charsets.UTF8): String {\n        charsetDecode(decodeToBytes(data), charset)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func decodeToString(data: String, charset!: Charset = Charsets.UTF8): String {\n    charsetDecode(decodeToBytes(data), charset)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Base64 {\n    private static let tailSymbol = convertCharToByte('=')\n    private static let toBase64 = [\n        'A',\n        'B',\n        'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n        'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n        'Y',\n        'Z',\n        'a',\n        'b',\n        'c',\n        'd',\n        'e',\n        'f',\n        'g',\n        'h',\n        'i',\n        'j',\n        'k',\n        'l',\n        'm',\n        'n',\n        'o',\n        'p',\n        'q',\n        'r',\n        's',\n        't',\n        'u',\n        'v',\n        'w',\n        'x',\n        'y',\n        'z',\n        '0',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '+',\n        '/'\n    ]\n    private static let fromBase64: Map<Byte, Byte> = {\n         =>\n        let map = HashMap<Byte, Byte>()\n        var i = 0\n        let size = toBase64.size\n        while (i < size) {\n            map[convertCharToByte(i)] = UInt8(i)\n            i++\n        }\n        map\n    }()\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Base64 {\nprivate static let tailSymbol = convertCharToByte('=')",
          "successors": [
            {
              "id": 3,
              "label": "private static let toBase64 = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e',\n    'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\n    't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6',\n    '7', '8', '9', '+', '/' ]\nprivate static let fromBase64: Map<Byte, Byte> = {",
              "successors": [
                {
                  "id": 5,
                  "label": "let map = HashMap<Byte, Byte>()\nvar i = 0\nlet size = toBase64.size",
                  "successors": [
                    {
                      "id": 6,
                      "label": "while (i < size) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "map[convertCharToByte(i)] = UInt8(i)\ni++",
                          "successors": [
                            {
                              "id": 6,
                              "label": "while (i < size) {",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "map[convertCharToByte(i)] = UInt8(i)\ni++",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "map",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package util\nfrom std import io.{ByteArrayStream, OutputStream, InputStream, BufferedOutputStream}\nfrom std import collection.{HashMap, Map}\nfrom charset import charset.*\nfrom charset import charset.encoding.*\nimport base.exception.UnreachableException\nimport io.ByteCollectionInputStream\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package util\nfrom std import io.{ByteArrayStream, OutputStream, InputStream, BufferedOutputStream}",
      "successors": [
        {
          "id": 3,
          "label": "from std import collection.{HashMap, Map}\nfrom charset import charset.*",
          "successors": [
            {
              "id": 5,
              "label": "from charset import charset.encoding.*\nimport base.exception.UnreachableException",
              "successors": [
                {
                  "id": 7,
                  "label": "import io.ByteCollectionInputStream",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}