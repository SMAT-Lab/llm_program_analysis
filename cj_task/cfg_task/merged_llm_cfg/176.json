{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 5,
      "end_line": 30,
      "functions": [
        {
          "name": "spawn_inline_function",
          "type": "function",
          "start_line": 6,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    let fut = spawn { =>\n        mon.lock()\n        while (flag) {\n            println(\"New thread: before wait\")\n            // Monitor 对象执行 wait 时，必须在锁的保护下进行，\n            // 否则 wait 中释放锁的操作会抛出异常。\n            mon.wait()\n            println(\"New thread: after wait\")\n        }\n        mon.unlock()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let fut = spawn { =>\nmon.lock()",
              "successors": [
                {
                  "id": 3,
                  "label": "while (flag) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "println(\"New thread: before wait\")\nmon.wait()",
                      "successors": [
                        {
                          "id": 6,
                          "label": "println(\"New thread: after wait\")",
                          "successors": [
                            {
                              "id": 3,
                              "label": "while (flag) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "mon.unlock()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "main(): Int64 {\n    }\n    // sleep for 10ms, make sure the new thread can be executed\n    sleep(10 * Duration.millisecond)\n    mon.lock()\n    println(\"Main thread: set flag\")\n    flag = false\n    mon.unlock()\n    mon.lock()\n    println(\"Main thread: notify\")\n    mon.notify()\n    mon.unlock()\n    // wait for the new thread nished\n    fut.get()\n    return 0\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main(): Int64 {\n    sleep(10 * Duration.millisecond)",
          "successors": [
            {
              "id": 3,
              "label": "    mon.lock()\n    println(\"Main thread: set flag\")",
              "successors": [
                {
                  "id": 5,
                  "label": "    flag = false\n    mon.unlock()",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    mon.lock()\n    println(\"Main thread: notify\")",
                      "successors": [
                        {
                          "id": 9,
                          "label": "    mon.notify()\n    mon.unlock()",
                          "successors": [
                            {
                              "id": 11,
                              "label": "    fut.get()\n    return 0",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from std import sync.*\nfrom std import time.*\nvar mon = Monitor()\nvar flag: Bool = true\n}",
  "blocks": [
    {
      "id": 1,
      "label": "from std import sync.*\nfrom std import time.*",
      "successors": [
        {
          "id": 3,
          "label": "var mon = Monitor()\nvar flag: Bool = true",
          "successors": []
        }
      ]
    }
  ]
}