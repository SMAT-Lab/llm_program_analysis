{
  "name": "httpclient",
  "type": "CFG",
  "start_line": 1,
  "end_line": 19,
  "functions": [],
  "classes": [
    {
      "name": "FileDownload",
      "type": "class",
      "start_line": 5,
      "end_line": 19,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 6,
          "end_line": 6,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init () {}",
          "blocks": [
            {
              "id": 1,
              "label": "public init () {}",
              "successors": []
            }
          ]
        },
        {
          "name": "builder",
          "type": "function",
          "start_line": 7,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func builder (pathname: String, fileData: String) {\n        var filePathValid = FileUtils().isFilePathValid(pathname)\n        var fs: File = File(pathname,Open(false, true))\n        if (fs.canWrite()) {\n        \tlet toWrite: Array<UInt8> = fileData.toUtf8Array()\n        \tlet writeFile = fs.write(toWrite)\n        \tfs.flush()\n        \tfs.close()\n        } else {\n            throw WriteException(\"Can not write file\")\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func builder (pathname: String, fileData: String) {\nvar filePathValid = FileUtils().isFilePathValid(pathname)\nvar fs: File = File(pathname,Open(false, true))",
              "successors": [
                {
                  "id": 3,
                  "label": "if (fs.canWrite()) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let toWrite: Array<UInt8> = fileData.toUtf8Array()\nlet writeFile = fs.write(toWrite)\nfs.flush()\nfs.close()",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} else {\nthrow WriteException(\"Can not write file\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class FileDownload {\n    public init () {}\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class FileDownload {\npublic init () {}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package httpclient\nfrom std import io.*\nfrom std import collection.*\nfrom std import fs.*\n}",
  "blocks": []
}