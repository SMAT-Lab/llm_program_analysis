{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 48,
  "functions": [
    {
      "name": "CursorQueryDataInternalCreate",
      "type": "function",
      "start_line": 2,
      "end_line": 4,
      "functions": [],
      "classes": [],
      "simplified_code": "protected func CursorQueryDataInternalCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>): CursorQuery<E> where E <: EntityType {\n    return CursorQueryDataCreate<E>(dao, sql, initialValues, -1, -1)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "protected func CursorQueryDataInternalCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>): CursorQuery<E> where E <: EntityType {\n    return CursorQueryDataCreate<E>(dao, sql, initialValues, -1, -1)",
          "successors": []
        }
      ]
    },
    {
      "name": "CursorQueryDataCreate",
      "type": "function",
      "start_line": 5,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": "protected func CursorQueryDataCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64): CursorQuery<E> where E <: EntityType  {\n    let queryData = CursorQueryData<E>(dao, sql, initialValues, limitPosition,\n            offsetPosition)\n    return queryData.forCurrentThread()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "protected func CursorQueryDataCreate<E>(dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64): CursorQuery<E> where E <: EntityType  {\n    let queryData = CursorQueryData<E>(dao, sql, initialValues, limitPosition, offsetPosition)",
          "successors": [
            {
              "id": 3,
              "label": "    return queryData.forCurrentThread()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "CursorQueryData",
      "type": "class",
      "start_line": 10,
      "end_line": 21,
      "functions": [
        {
          "name": "createQuery",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected func createQuery(): CursorQuery<T> {\n        CursorQuery<T>(this, this.dao, this.sql, this.initialValues, limitPosition, offsetPosition)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "protected func createQuery(): CursorQuery<T> {\n    CursorQuery<T>(this, this.dao, this.sql, this.initialValues, limitPosition, offsetPosition)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class CursorQueryData<T> <: AbstractQueryData<T, CursorQuery<T>> where T <: EntityType {\n    private let limitPosition: Int64\n    private let offsetPosition: Int64\n    protected init(dao: IAbstractDao,sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {\n        super(dao, sql, initialValues)\n        this.limitPosition = limitPosition\n        this.offsetPosition = offsetPosition\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class CursorQueryData<T> <: AbstractQueryData<T, CursorQuery<T>> where T <: EntityType {\nprivate let limitPosition: Int64",
          "successors": [
            {
              "id": 3,
              "label": "private let offsetPosition: Int64\nprotected init(dao: IAbstractDao,sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {",
              "successors": [
                {
                  "id": 5,
                  "label": "super(dao, sql, initialValues)\nthis.limitPosition = limitPosition",
                  "successors": [
                    {
                      "id": 7,
                      "label": "this.offsetPosition = offsetPosition",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "CursorQuery",
      "type": "class",
      "start_line": 22,
      "end_line": 48,
      "functions": [
        {
          "name": "forCurrentThread",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func forCurrentThread(): CursorQuery<T> {\n        return queryData.forCurrentThread(this)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func forCurrentThread(): CursorQuery<T> {\n    return queryData.forCurrentThread(this)",
              "successors": []
            }
          ]
        },
        {
          "name": "query",
          "type": "function",
          "start_line": 31,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func query(): ResultSet {\n        checkThread()\n        return match (sql) {\n            case SQL(v) => dao.getDatabase().querySql(v, bindArgs: parameters)\n            case PREDICATES(v) => dao.getDatabase().query(v.rdbPredicates, [])\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func query(): ResultSet {\ncheckThread()",
              "successors": [
                {
                  "id": 3,
                  "label": "return match (sql) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case SQL(v) => dao.getDatabase().querySql(v, bindArgs: parameters)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case PREDICATES(v) => dao.getDatabase().query(v.rdbPredicates, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setParameter",
          "type": "function",
          "start_line": 39,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func setParameter(index: Int64, parameter: ValueType ): AbstractQueryWithLimit<T> {\n        return super.setParameter(index, parameter)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func setParameter(index: Int64, parameter: ValueType ): AbstractQueryWithLimit<T> {\nreturn super.setParameter(index, parameter)",
              "successors": []
            }
          ]
        },
        {
          "name": "setParameter",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func setParameter(index: Int64, parameter: ?DateTime): AbstractQuery<T> {\n        return super.setParameter(index, parameter)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func setParameter(index: Int64, parameter: ?DateTime): AbstractQuery<T> {\nreturn super.setParameter(index, parameter)",
              "successors": []
            }
          ]
        },
        {
          "name": "setParameter",
          "type": "function",
          "start_line": 45,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func setParameter(index: Int64, parameter: ?Bool): AbstractQuery<T> {\n        return super.setParameter(index, parameter)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func setParameter(index: Int64, parameter: ?Bool): AbstractQuery<T> {\n    return super.setParameter(index, parameter)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class CursorQuery<T> <: AbstractQueryWithLimit<T> where T <: EntityType {\n    private let queryData: CursorQueryData<T>\n    init(queryData: CursorQueryData<T>, dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {\n        super(dao, sql, initialValues, limitPosition, offsetPosition)\n        this.queryData = queryData\n    }\n    }\n    }\n    // copy setParameter methods to allow easy chaining\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class CursorQuery<T> <: AbstractQueryWithLimit<T> where T <: EntityType {",
          "successors": [
            {
              "id": 2,
              "label": "private let queryData: CursorQueryData<T>",
              "successors": []
            },
            {
              "id": 3,
              "label": "init(queryData: CursorQueryData<T>, dao: IAbstractDao, sql: sqlType, initialValues: Array<ValueType>, limitPosition: Int64, offsetPosition: Int64) {",
              "successors": [
                {
                  "id": 4,
                  "label": "super(dao, sql, initialValues, limitPosition, offsetPosition)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "this.queryData = queryData",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package dataorm4cj\n}\n}\n}\n}",
  "blocks": []
}