{
  "name": "SimpleJsonReader",
  "type": "CFG",
  "start_line": 1,
  "end_line": 27,
  "functions": [],
  "classes": [
    {
      "name": "JsonFloat64Test",
      "type": "class",
      "start_line": 7,
      "end_line": 27,
      "functions": [
        {
          "name": "testFloat64Option",
          "type": "function",
          "start_line": 9,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testFloat64Option() {\n        @Expect(Json(str: #\"{ \"float64\" : 123.0 }\"#)[\"float64\"].float64, Option.Some(123.0))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testFloat64Option() {\n@Expect(Json(str: \"{ \"float64\" : 123.0 }\")['float64'].float64, Option.Some(123.0))",
              "successors": []
            }
          ]
        },
        {
          "name": "testFloat64",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testFloat64() {\n        @Expect(Json(str: #\"{ \"float64\" : 123.0 }\"#)[\"float64\"].float64Value, 123.0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testFloat64() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(Json(str: #\"{ \"float64\" : 123.0 }\"#)[\"float64\"].float64Value, 123.0)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testFloat64Default",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testFloat64Default() {\n        @Expect(Json(str: #\"{}\"#)[\"float64\"].float64Value, 0.0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testFloat64Default() {\n@Expect(Json(str: \"{}\")['float64'].float64Value, 0.0)",
              "successors": []
            }
          ]
        },
        {
          "name": "testFloat64OptionNone",
          "type": "function",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testFloat64OptionNone() {\n        @Expect(Json(str: #\"{}\"#)[\"float64\"].float64, Option.None)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testFloat64OptionNone() {\n@Expect(Json(str: #\"{}\"#)[\"float64\"].float64, Option.None)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class JsonFloat64Test {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class JsonFloat64Test {",
          "successors": [
            {
              "id": 2,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 3,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 4,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 5,
              "label": "@TestCase",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package SimpleJsonReader\n\nimport std.unittest.*\nimport std.unittest.testmacro.*\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package SimpleJsonReader\nimport std.unittest.*",
      "successors": [
        {
          "id": 3,
          "label": "import std.unittest.testmacro.*\n@Test",
          "successors": [
            {
              "id": 5,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}