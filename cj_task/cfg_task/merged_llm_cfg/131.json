{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 49,
  "functions": [
    {
      "name": "f_gold",
      "type": "function",
      "start_line": 2,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": "func f_gold (seq:String):String{\n  let n = seq.size\n  if ( n >= 9 ) {return \"-1\"}\n  let result = Array<Char>(n+1,item:' ')\n  var count:Int32 = 1\n  for(i in 0..n+1){\n    if ( i == n || seq[i] == b'I' ) {\n      for (j in i-1..-2:-1) {\n        result [ j + 1 ] = Char( Int32(b'0') + count)\n        count++\n        if ( j >= 0 && seq[j] == b'I' ) {break}\n      }\n    }\n  }\n  return String(result)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func f_gold (seq:String):String{\nlet n = seq.size",
          "successors": [
            {
              "id": 3,
              "label": "if ( n >= 9 ) {return \"-1\"}\nlet result = Array<Char>(n+1,item:' ')",
              "successors": [
                {
                  "id": 5,
                  "label": "var count:Int32 = 1\nfor(i in 0..n+1){",
                  "successors": [
                    {
                      "id": 7,
                      "label": "if ( i == n || seq[i] == b'I' ) {",
                      "successors": [
                        {
                          "id": 8,
                          "label": "for (j in i-1..-2:-1) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "result [ j + 1 ] = Char( Int32(b'0') + count)\ncount++\nif ( j >= 0 && seq[j] == b'I' ) {break}",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "continue;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 12,
                          "label": "continue;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 19,
      "end_line": 49,
      "functions": [],
      "classes": [],
      "simplified_code": "main(){\n    var n_success = 0\n    let param0 = ArrayList<String>()\n    param0.append(\"D\")\n    param0.append(\"I\")\n    param0.append(\"DD\")\n    param0.append(\"II\")\n    param0.append(\"DIDI\")\n    param0.append(\"IIDDD\")\n    param0.append(\"DDIDDIID\")\n    param0.append(\"176297\")\n    param0.append(\"1\")\n    param0.append(\"XHkhZq\")\n    let param1 = ArrayList<String>()\n    param1.append(\"D\")\n    param1.append(\"I\")\n    param1.append(\"DD\")\n    param1.append(\"II\")\n    param1.append(\"DIDI\")\n    param1.append(\"IIDDD\")\n    param1.append(\"DDIDDIID\")\n    param1.append(\"176297\")\n    param1.append(\"1\")\n    param1.append(\"XHkhZq\")\n    for (i in 0..param0.size){\n        if (f_gold(param0[i]) == f_filled(param1[i])){\n            n_success += 1\n        }\n    }\n    println(\"#Results: ${n_success}, ${param0.size}\\n\")\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main()\nvar n_success = 0\nlet param0 = ArrayList<String>()\nparam0.append(\"D\")\nparam0.append(\"I\")\nparam0.append(\"DD\")\nparam0.append(\"II\")\nparam0.append(\"DIDI\")\nparam0.append(\"IIDDD\")\nparam0.append(\"DDIDDIID\")\nparam0.append(\"176297\")\nparam0.append(\"1\")\nparam0.append(\"XHkhZq\")\nlet param1 = ArrayList<String>()\nparam1.append(\"D\")\nparam1.append(\"I\")\nparam1.append(\"DD\")\nparam1.append(\"II\")\nparam1.append(\"DIDI\")\nparam1.append(\"IIDDD\")\nparam1.append(\"DDIDDIID\")\nparam1.append(\"176297\")\nparam1.append(\"1\")\nparam1.append(\"XHkhZq\")",
          "successors": [
            {
              "id": 3,
              "label": "for (i in 0..param0.size)",
              "successors": [
                {
                  "id": 4,
                  "label": "if (f_gold(param0[i]) == f_filled(param1[i]))",
                  "successors": [
                    {
                      "id": 5,
                      "label": "n_success += 1",
                      "successors": [
                        {
                          "id": 3,
                          "label": "for (i in 0..param0.size)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "",
                      "successors": [
                        {
                          "id": 3,
                          "label": "for (i in 0..param0.size)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "label": "println(\"#Results: ${n_success}, ${param0.size}\\n\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": " from std import collection.*\n}\n//TOFILL\n}",
  "blocks": []
}