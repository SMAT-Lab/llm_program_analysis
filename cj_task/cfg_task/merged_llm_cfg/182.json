{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 72,
  "functions": [],
  "classes": [
    {
      "name": "UserGroup",
      "type": "class",
      "start_line": 2,
      "end_line": 72,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 8,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(name: String) {\n        this.name = name\n        this.userMap = HashMap<String, User>()\n        this.policyMap = HashMap<String, Policy>()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(name: String) {\n    this.name = name",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.userMap = HashMap<String, User>()\n    this.policyMap = HashMap<String, Policy>()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getName",
          "type": "function",
          "start_line": 13,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getName(): String {\n        name\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getName(): String {\nname",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "addUser",
          "type": "function",
          "start_line": 16,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func addUser(user: User) {\n        this.userMap[user.getName()] = user\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func addUser(user: User) {\nthis.userMap[user.getName()] = user",
              "successors": []
            }
          ]
        },
        {
          "name": "addUser",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    func addUser(user: String) {\n        addUser(User(user))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func addUser(user: String) {\n    addUser(User(user))",
              "successors": []
            }
          ]
        },
        {
          "name": "getUserMap",
          "type": "function",
          "start_line": 22,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    func getUserMap(): Array<User> {\n        userMap.values().toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func getUserMap(): Array<User> {\n    userMap.values().toArray()",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "removeUser",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    func removeUser(user: User): ?User {\n        removeUser(user.getName())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func removeUser(user: User): ?User {\n    removeUser(user.getName())",
              "successors": []
            }
          ]
        },
        {
          "name": "removeUser",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    func removeUser(user: String): ?User {\n        this.userMap.remove(user)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func removeUser(user: String): ?User {\n    this.userMap.remove(user)",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "addPolicy",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func addPolicy(policy: Policy) {\n        this.policyMap[policy.getName()] = policy\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func addPolicy(policy: Policy) {\nthis.policyMap[policy.getName()] = policy",
              "successors": []
            }
          ]
        },
        {
          "name": "removePolicy",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    func removePolicy(policy: Policy): ?Policy {\n        removePolicy(policy.getName())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func removePolicy(policy: Policy): ?Policy {\n    removePolicy(policy.getName())",
              "successors": []
            }
          ]
        },
        {
          "name": "removePolicy",
          "type": "function",
          "start_line": 37,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    func removePolicy(policy: String): ?Policy {\n        this.policyMap.remove(policy)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func removePolicy(policy: String): ?Policy {\n    this.policyMap.remove(policy)",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "checkUser",
          "type": "function",
          "start_line": 40,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    func checkUser(user: User): Bool {\n        let result = userMap.contains(user.getName())\n        if (!result) {\n            user.removeUserGroup(this)\n        }\n        result\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func checkUser(user: User): Bool {\nlet result = userMap.contains(user.getName())",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!result) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "user.removeUserGroup(this)\n}",
                      "successors": [
                        {
                          "id": 6,
                          "label": "result",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "}\nresult",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "checkPolicy",
          "type": "function",
          "start_line": 47,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    func checkPolicy(policy: Policy): Bool {\n        let result = policyMap.contains(policy.getName())\n        if (!result) {\n            policy.removeUserGroup(this)\n        }\n        result\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func checkPolicy(policy: Policy): Bool {\nlet result = policyMap.contains(policy.getName())",
              "successors": [
                {
                  "id": 3,
                  "label": "if (!result) {\n    policy.removeUserGroup(this)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}\nresult",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "start_line": 54,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func reset() {\n        this.userMap.clear()\n        this.policyMap.clear()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func reset() {\n    this.userMap.clear()",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.policyMap.clear()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "operator ==",
          "type": "function",
          "start_line": 58,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func ==(other: AccessInfo): Bool {\n        if (let Some(o) = (other as UserGroup)) {\n            this.getName() == other.getName() || refEq(this, o)\n        } else {\n            false\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func ==(other: AccessInfo): Bool {\nif (let Some(o) = (other as UserGroup)) {",
              "successors": [
                {
                  "id": 3,
                  "label": "this.getName() == other.getName() || refEq(this, o)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else {\nfalse",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "operator !=",
          "type": "function",
          "start_line": 65,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func !=(other: AccessInfo): Bool {\n        !(this == other)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func !=(other: AccessInfo): Bool {\n    !(this == other)",
              "successors": []
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 68,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toString(): String {\n        \"{\\\"name\\\": \\\"${getName()}\\\", \\\"user-list\\\": ${getUserMap()}}\"\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toString(): String {\n\"{\"name\": \"${getName()}\", \"user-list\": ${getUserMap()}}\"",
              "successors": []
            }
          ]
        },
        {
          "name": "addUserGroup",
          "type": "function",
          "start_line": 71,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func addUserGroup(userGroup: UserGroup): Unit {}",
          "blocks": [
            {
              "id": 1,
              "label": "public func addUserGroup(userGroup: UserGroup): Unit {}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class UserGroup <: AccessInfo & AccessorContext {\n    public let name: String\n    // 用户\n    let userMap: HashMap<String, User>\n    // 策略\n    let policyMap: HashMap<String, Policy>\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    public func addUserGroup(userGroup: UserGroup): Unit {}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class UserGroup <: AccessInfo & AccessorContext {\npublic let name: String",
          "successors": [
            {
              "id": 3,
              "label": "let userMap: HashMap<String, User>\nlet policyMap: HashMap<String, Policy>",
              "successors": [
                {
                  "id": 5,
                  "label": "public func addUserGroup(userGroup: UserGroup): Unit {}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package access\n}",
  "blocks": []
}