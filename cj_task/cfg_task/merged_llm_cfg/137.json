{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 117,
  "functions": [],
  "classes": [
    {
      "name": "RawIO",
      "type": "class",
      "start_line": 2,
      "end_line": 117,
      "functions": [
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 6,
          "end_line": 9,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readLongLittleEndian(randomAccessFile: RandomAccessFile): Int64 {\n        randomAccessFile.readFully(longBuff)\n        return readLongLittleEndian(longBuff, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readLongLittleEndian(randomAccessFile: RandomAccessFile): Int64 {\nrandomAccessFile.readFully(longBuff)",
              "successors": [
                {
                  "id": 3,
                  "label": "return readLongLittleEndian(longBuff, 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 10,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readLongLittleEndian(randomAccessFile: RandomAccessFile, readLen: Int64): Int64 {\n        resetBytes(longBuff)\n        randomAccessFile.readFully(longBuff[0..readLen])\n        return readLongLittleEndian(longBuff, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readLongLittleEndian(randomAccessFile: RandomAccessFile, readLen: Int64): Int64 {\nresetBytes(longBuff)",
              "successors": [
                {
                  "id": 3,
                  "label": "randomAccessFile.readFully(longBuff[0..readLen])\nreturn readLongLittleEndian(longBuff, 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 15,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readLongLittleEndian(inputStream: InputStream): Int64 {\n        readFully(inputStream, longBuff, longBuff.size)\n        return readLongLittleEndian(longBuff, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readLongLittleEndian(inputStream: InputStream): Int64 {\nreadFully(inputStream, longBuff, longBuff.size)",
              "successors": [
                {
                  "id": 3,
                  "label": "return readLongLittleEndian(longBuff, 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 19,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readLongLittleEndian(inputStream: InputStream, readLen: Int64): Int64 {\n        resetBytes(longBuff)\n        readFully(inputStream, longBuff, readLen)\n        return readLongLittleEndian(longBuff, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readLongLittleEndian(inputStream: InputStream, readLen: Int64): Int64 {\nresetBytes(longBuff)",
              "successors": [
                {
                  "id": 3,
                  "label": "readFully(inputStream, longBuff, readLen)\nreturn readLongLittleEndian(longBuff, 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 24,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readLongLittleEndian(array: Array<Byte>, pos: Int64) {\n        if (array.size - pos < 8) {\n            resetBytes(longBuff)\n        }\n        ArrayCopy(array, pos, longBuff, 0, min(array.size - pos, 8))\n        var temp = 0\n        temp |= Int64(longBuff[7] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[6] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[5] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[4] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[3] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[2] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[1] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[0] & 0xff)\n        return temp\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readLongLittleEndian(array: Array<Byte>, pos: Int64) {\nif (array.size - pos < 8) {",
              "successors": [
                {
                  "id": 3,
                  "label": "resetBytes(longBuff)\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "ArrayCopy(array, pos, longBuff, 0, min(array.size - pos, 8))\nvar temp = 0",
                      "successors": [
                        {
                          "id": 7,
                          "label": "temp |= Int64(longBuff[7] & 0xff)\ntemp <<= 8",
                          "successors": [
                            {
                              "id": 9,
                              "label": "temp |= Int64(longBuff[6] & 0xff)\ntemp <<= 8",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "temp |= Int64(longBuff[5] & 0xff)\ntemp <<= 8",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "label": "temp |= Int64(longBuff[4] & 0xff)\ntemp <<= 8",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "temp |= Int64(longBuff[3] & 0xff)\ntemp <<= 8",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "temp |= Int64(longBuff[2] & 0xff)\ntemp <<= 8",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "label": "temp |= Int64(longBuff[1] & 0xff)\ntemp <<= 8",
                                                  "successors": [
                                                    {
                                                      "id": 21,
                                                      "label": "temp |= Int64(longBuff[0] & 0xff)\nreturn temp",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 47,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readIntLittleEndian(randomAccessFile: RandomAccessFile): Int32 {\n        randomAccessFile.readFully(intBuff)\n        return readIntLittleEndian(intBuff)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readIntLittleEndian(randomAccessFile: RandomAccessFile): Int32 {\n    randomAccessFile.readFully(intBuff)",
              "successors": [
                {
                  "id": 3,
                  "label": "    return readIntLittleEndian(intBuff)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 51,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readIntLittleEndian(inputStream: InputStream): Int32 {\n        readFully(inputStream, intBuff, 4)\n        return readIntLittleEndian(intBuff)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readIntLittleEndian(inputStream: InputStream): Int32 {\n    readFully(inputStream, intBuff, 4)",
              "successors": [
                {
                  "id": 3,
                  "label": "    return readIntLittleEndian(intBuff)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 55,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readIntLittleEndian(b: Array<Byte>): Int32 {\n        return readIntLittleEndian(b, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readIntLittleEndian(b: Array<Byte>): Int32 {\nreturn readIntLittleEndian(b, 0)",
              "successors": []
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 58,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readIntLittleEndian(b: Array<Byte>, pos: Int64): Int32 {\n        return (Int32(b[pos] & 0xff) | Int32(b[1 + pos] & 0xff) << 8) |\n            (Int32(b[2 + pos] & 0xff) | Int32(b[3 + pos] & 0xff) << 8) << 16\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readIntLittleEndian(b: Array<Byte>, pos: Int64): Int32 {\n    return (Int32(b[pos] & 0xff) | Int32(b[1 + pos] & 0xff) << 8) | (Int32(b[2 + pos] & 0xff) | Int32(b[3 + pos] & 0xff) << 8) << 16",
              "successors": []
            }
          ]
        },
        {
          "name": "readShortLittleEndian",
          "type": "function",
          "start_line": 62,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readShortLittleEndian(randomAccessFile: RandomAccessFile): Int32 {\n        randomAccessFile.readFully(shortBuff)\n        return readShortLittleEndian(shortBuff, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readShortLittleEndian(randomAccessFile: RandomAccessFile): Int32 {\n    randomAccessFile.readFully(shortBuff)",
              "successors": [
                {
                  "id": 3,
                  "label": "    return readShortLittleEndian(shortBuff, 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readShortLittleEndian",
          "type": "function",
          "start_line": 66,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readShortLittleEndian(inputStream: InputStream): Int32 {\n        readFully(inputStream, shortBuff, shortBuff.size)\n        return readShortLittleEndian(shortBuff, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readShortLittleEndian(inputStream: InputStream): Int32 {\n    readFully(inputStream, shortBuff, shortBuff.size)",
              "successors": [
                {
                  "id": 3,
                  "label": "    return readShortLittleEndian(shortBuff, 0)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readShortLittleEndian",
          "type": "function",
          "start_line": 70,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func readShortLittleEndian(buff: Array<Byte>, position: Int64): Int32 {\n        return Int32(buff[position] & 0xff) | Int32(buff[1 + position] & 0xff) << 8\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func readShortLittleEndian(buff: Array<Byte>, position: Int64): Int32 {\nreturn Int32(buff[position] & 0xff) | Int32(buff[1 + position] & 0xff) << 8",
              "successors": []
            }
          ]
        },
        {
          "name": "writeShortLittleEndian",
          "type": "function",
          "start_line": 73,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func writeShortLittleEndian(outputStream: OutputStream, value: Int32): Unit {\n        writeShortLittleEndian(shortBuff, 0, value)\n        outputStream.write(shortBuff)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func writeShortLittleEndian(outputStream: OutputStream, value: Int32): Unit {\n    writeShortLittleEndian(shortBuff, 0, value)",
              "successors": [
                {
                  "id": 3,
                  "label": "    outputStream.write(shortBuff)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "writeShortLittleEndian",
          "type": "function",
          "start_line": 78,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func writeShortLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {\n        array[pos + 1] = UInt8(value[8])\n        array[pos] = UInt8(value & 0xFF)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func writeShortLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {\n    array[pos + 1] = UInt8(value[8])",
              "successors": [
                {
                  "id": 3,
                  "label": "    array[pos] = UInt8(value & 0xFF)\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "writeIntLittleEndian",
          "type": "function",
          "start_line": 82,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func writeIntLittleEndian(outputStream: OutputStream, value: Int32): Unit {\n        writeIntLittleEndian(intBuff, 0, value)\n        outputStream.write(intBuff)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func writeIntLittleEndian(outputStream: OutputStream, value: Int32): Unit {\nwriteIntLittleEndian(intBuff, 0, value)",
              "successors": [
                {
                  "id": 3,
                  "label": "outputStream.write(intBuff)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "writeIntLittleEndian",
          "type": "function",
          "start_line": 87,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func writeIntLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {\n        array[pos + 3] = UInt8(value[24])\n        array[pos + 2] = UInt8(value[16])\n        array[pos + 1] = UInt8(value[8])\n        array[pos] = UInt8(value & 0xFF)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func writeIntLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {\n    array[pos + 3] = UInt8(value[24])",
              "successors": [
                {
                  "id": 3,
                  "label": "    array[pos + 2] = UInt8(value[16])\n    array[pos + 1] = UInt8(value[8])",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    array[pos] = UInt8(value & 0xFF)\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "writeLongLittleEndian",
          "type": "function",
          "start_line": 93,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func writeLongLittleEndian(outputStream: OutputStream, value: Int64): Unit {\n        writeLongLittleEndian(longBuff, 0, value)\n        outputStream.write(longBuff)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func writeLongLittleEndian(outputStream: OutputStream, value: Int64): Unit {\nwriteLongLittleEndian(longBuff, 0, value)",
              "successors": [
                {
                  "id": 3,
                  "label": "outputStream.write(longBuff)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "writeLongLittleEndian",
          "type": "function",
          "start_line": 98,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func writeLongLittleEndian(array: Array<Byte>, pos: Int64, value: Int64): Unit {\n        array[pos + 7] = UInt8(value[56])\n        array[pos + 6] = UInt8(value[48])\n        array[pos + 5] = UInt8(value[40])\n        array[pos + 4] = UInt8(value[32])\n        array[pos + 3] = UInt8(value[24])\n        array[pos + 2] = UInt8(value[16])\n        array[pos + 1] = UInt8(value[8])\n        array[pos] = UInt8(value & 0xFF)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func writeLongLittleEndian(array: Array<Byte>, pos: Int64, value: Int64): Unit {\n    array[pos + 7] = UInt8(value[56])",
              "successors": [
                {
                  "id": 3,
                  "label": "    array[pos + 6] = UInt8(value[48])\n    array[pos + 5] = UInt8(value[40])",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    array[pos + 4] = UInt8(value[32])\n    array[pos + 3] = UInt8(value[24])",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    array[pos + 2] = UInt8(value[16])\n    array[pos + 1] = UInt8(value[8])",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    array[pos] = UInt8(value & 0xFF)\n}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readFully",
          "type": "function",
          "start_line": 108,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func readFully(inputStream: InputStream, buff: Array<Byte>, readLen: Int64): Unit {\n        var actualReadLength = Zip4cjUtil.readFully(inputStream, buff, 0, readLen)\n        if (actualReadLength != readLen) {\n            throw ZipException(\"Could not fill buffer\")\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func readFully(inputStream: InputStream, buff: Array<Byte>, readLen: Int64): Unit {\nvar actualReadLength = Zip4cjUtil.readFully(inputStream, buff, 0, readLen)",
              "successors": [
                {
                  "id": 3,
                  "label": "if (actualReadLength != readLen) {\nthrow ZipException(\"Could not fill buffer\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "resetBytes",
          "type": "function",
          "start_line": 114,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func resetBytes(b: Array<Byte>) {\n        fill(b, 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func resetBytes(b: Array<Byte>) {\n    fill(b, 0)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class RawIO {\n    public let shortBuff = Array<Byte>(2, repeat: 0)\n    public let intBuff = Array<Byte>(4, repeat: 0)\n    public let longBuff = Array<Byte>(8, repeat: 0)\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    @OverflowWrapping\n    }\n    }\n    @OverflowWrapping\n    }\n    }\n    @OverflowWrapping\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class RawIO {\npublic let shortBuff = Array<Byte>(2, repeat: 0)",
          "successors": [
            {
              "id": 3,
              "label": "public let intBuff = Array<Byte>(4, repeat: 0)\npublic let longBuff = Array<Byte>(8, repeat: 0)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package zip4cj.util\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package zip4cj.util",
      "successors": []
    }
  ]
}