{
  "name": "SimpleJsonReader",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [],
  "classes": [
    {
      "name": "Person",
      "type": "class",
      "start_line": 7,
      "end_line": 28,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(name!: String) {\n        this.name = name\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(name!: String) {\n    this.name = name",
              "successors": []
            }
          ]
        },
        {
          "name": "deserialize",
          "type": "function",
          "start_line": 15,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    static public func deserialize(dm: DataModel): Person {\n        let dms = match(dm) {\n            case d: DataModelStruct => d\n            case _ => throw Exception(\"This data is not DataModelStruct\")\n        }\n        return Person(name: String.deserialize(dms.get(\"name\")))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "static public func deserialize(dm: DataModel): Person {\nlet dms = match(dm) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case d: DataModelStruct => d\nreturn Person(name: String.deserialize(dms.get(\"name\")))",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case _ => throw Exception(\"This data is not DataModelStruct\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "serialize",
          "type": "function",
          "start_line": 23,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func serialize(): DataModel {\n        let dms = DataModelStruct()\n        dms.add(field(\"name\", this.name))\n        return dms\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func serialize(): DataModel {\nlet dms = DataModelStruct()",
              "successors": [
                {
                  "id": 3,
                  "label": "dms.add(field(\"name\", this.name))\nreturn dms",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "private struct Person <: Serializable<Person> {\n\n    let name: String\n\n    }\n\n    }\n    \n    }\n}",
      "blocks": []
    },
    {
      "name": "JsonDeserializeTest",
      "type": "class",
      "start_line": 31,
      "end_line": 43,
      "functions": [
        {
          "name": "test",
          "type": "function",
          "start_line": 34,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    func test() {\n        let jsonStr = #\"\n        {\n            \"name\": \"Arror\"\n        }\"#\n        let json = Json(str: jsonStr)\n        let person = json.deserialize<Person>()\n        @Expect(person.isSome())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func test() {\nlet jsonStr = #\" { \"name\": \"Arror\" } \"#",
              "successors": [
                {
                  "id": 3,
                  "label": "let json = Json(str: jsonStr)\nlet person = json.deserialize<Person>()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "@Expect(person.isSome())",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class JsonDeserializeTest {\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class JsonDeserializeTest {\n@TestCase",
          "successors": [
            {
              "id": 3,
              "label": "}\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package SimpleJsonReader\n\nimport std.unittest.*\nimport std.unittest.testmacro.*\nimport serialization.serialization.*\n\n}\n\n@Test\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package SimpleJsonReader\nimport std.unittest.*",
      "successors": [
        {
          "id": 3,
          "label": "import std.unittest.testmacro.*\nimport serialization.serialization.*",
          "successors": []
        }
      ]
    }
  ]
}