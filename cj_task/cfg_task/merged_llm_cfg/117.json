{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 35,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 26,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let tree = Node(1,\n        Node(2, Node(3, Empty, Leaf(4)), Empty),\n        Node(5, Leaf(6), Leaf(7)))\n    tree.traverse()\n\n    println()\n    let fullTree = Tree.generate(5)\n    fullTree.traverse()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let tree = Node(1,\n        Node(2, Node(3, Empty, Leaf(4)), Empty),\n        Node(5, Leaf(6), Leaf(7)))\ntree.traverse()",
          "successors": [
            {
              "id": 3,
              "label": "println()\nlet fullTree = Tree.generate(5)",
              "successors": [
                {
                  "id": 5,
                  "label": "fullTree.traverse()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Tree",
      "type": "class",
      "start_line": 3,
      "end_line": 24,
      "functions": [
        {
          "name": "traverse",
          "type": "function",
          "start_line": 6,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func traverse(): Unit {\n        match (this) {\n            case Empty => ()\n            case Leaf(value) => print(value)\n            case Node(value, left, right) =>\n                left.traverse()\n                print(value)\n                right.traverse()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func traverse(): Unit {\nmatch (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Empty => ()",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case Leaf(value) => print(value)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "case Node(value, left, right) =>\nleft.traverse()",
                  "successors": [
                    {
                      "id": 7,
                      "label": "print(value)\nright.traverse()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "generate",
          "type": "function",
          "start_line": 17,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    static public func generate(depth: UInt8): Tree {\n        if (depth == 1) {\n            return Leaf(1)\n        }\n        return Node(Int64(depth),\n            generate(depth - 1), generate(depth - 1))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "static public func generate(depth: UInt8): Tree {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (depth == 1) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return Leaf(1)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "return Node(Int64(depth), generate(depth - 1), generate(depth - 1))",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "enum Tree {\n    Empty | Leaf(Int64) | Node(Int64, Tree, Tree)\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "enum Tree {\n    Empty | Leaf(Int64) | Node(Int64, Tree, Tree)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "// 基于 enum 实现二叉树\n// cjc version: 0.53.13\n}\n\n}",
  "blocks": []
}