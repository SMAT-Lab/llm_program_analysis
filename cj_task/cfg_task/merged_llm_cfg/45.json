{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 37,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 13,
      "end_line": 37,
      "functions": [
        {
          "name": "anonymous_spawn",
          "type": "function",
          "start_line": 17,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    spawn {\n        while (!g_quit) {\n            let data = Array<Byte>(BUFFER_SIZE, repeat: 0)\n            var count = 0\n            // 如果对端正常关闭连接，不会抛出异常，read 返回 0\n            try { count = socket.read(data) } catch (e: SocketException) {\n                g_quit = true\n            }\n            if (g_quit || count == 0) { break }\n            println(String.fromUtf8(data))\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "spawn {",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (!g_quit) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        let data = Array<Byte>(BUFFER_SIZE, repeat: 0)\n        var count = 0",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        try { count = socket.read(data) } catch (e: SocketException) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "            g_quit = true\n        if (g_quit || count == 0) { break }",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "            println(String.fromUtf8(data))\n...",
                                  "successors": []
                                },
                                {
                                  "id": 8,
                                  "label": "    }",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "label": "        if (g_quit || count == 0) { break }",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "            println(String.fromUtf8(data))\n...",
                                  "successors": []
                                },
                                {
                                  "id": 8,
                                  "label": "    }",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "        if (g_quit || count == 0) { break }",
                          "successors": [
                            {
                              "id": 7,
                              "label": "            println(String.fromUtf8(data))\n...",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "    }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "main() {\n    let socket = TcpSocket(IP, PORT)\n    socket.connect()\n    // 读取服务器发来的消息\n    }\n    // 向服务器发送消息\n    while (!g_quit) {\n        let input = Console.stdIn.readln().getOrDefault {\"\\n\"}\n        try { socket.write(input.toArray()) } catch (e: SocketException) {\n            g_quit = true\n        }\n    }\n    socket.close()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let socket = TcpSocket(IP, PORT)\nsocket.connect()",
          "successors": [
            {
              "id": 2,
              "label": "while (!g_quit) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let input = Console.stdIn.readln().getOrDefault {\"\\n\"}\ntry { socket.write(input.toArray()) }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "catch (e: SocketException) {\n    g_quit = true\n}",
                      "successors": [
                        {
                          "id": 2,
                          "label": "while (!g_quit) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 2,
                  "label": "while (!g_quit) {",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "socket.close()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// 群聊程序-客户端\n// 仓颉语言团队 刘俊杰 2024/10/21\nimport std.net.*\nimport std.time.*\nimport std.sync.*\nimport std.console.*\n\nconst IP = \"127.0.0.1\"\nconst PORT: UInt16 = 24621\nconst BUFFER_SIZE = 1024\nvar g_quit = false\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.net.*\nimport std.time.*",
      "successors": [
        {
          "id": 3,
          "label": "import std.sync.*\nimport std.console.*",
          "successors": [
            {
              "id": 5,
              "label": "const IP = \"127.0.0.1\"\nconst PORT: UInt16 = 24621",
              "successors": [
                {
                  "id": 7,
                  "label": "const BUFFER_SIZE = 1024\nvar g_quit = false",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}