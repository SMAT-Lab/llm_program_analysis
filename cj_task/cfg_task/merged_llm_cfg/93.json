{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 84,
  "functions": [
    {
      "name": "debounceAction",
      "type": "function",
      "start_line": 4,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": "func debounceAction(action: () -> Unit) {\n    action()\n\n    sleep(Duration.millisecond * 10)\n    action()\n\n    sleep(Duration.millisecond * 20)\n    action()\n\n    sleep(Duration.millisecond * 30)\n    action()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func debounceAction(action: () -> Unit) {\n    action()",
          "successors": [
            {
              "id": 3,
              "label": "    sleep(Duration.millisecond * 10)\n    action()",
              "successors": [
                {
                  "id": 5,
                  "label": "    sleep(Duration.millisecond * 20)\n    action()",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    sleep(Duration.millisecond * 30)\n    action()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "throttleAction",
      "type": "function",
      "start_line": 17,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": "func throttleAction(action: () -> Unit) {\n    action()\n\n    sleep(Duration.millisecond * 20)\n    action()\n\n    sleep(Duration.millisecond * 40)\n    action()\n\n    sleep(Duration.millisecond * 80)\n    action()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func throttleAction(action: () -> Unit) {\n    action()",
          "successors": [
            {
              "id": 3,
              "label": "    sleep(Duration.millisecond * 20)\n    action()",
              "successors": [
                {
                  "id": 5,
                  "label": "    sleep(Duration.millisecond * 40)\n    action()",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    sleep(Duration.millisecond * 80)\n    action()",
                      "successors": [
                        {
                          "id": 9,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "debounceRepeater",
      "type": "function",
      "start_line": 30,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": "func debounceRepeater() {\n    let start = getNowTime()\n    // let config = RepeaterConfig(interval: Duration.millisecond * 100, leading: false, trailing: true)\n    // Repeater(throttle: false, config: config){}\n    Repeater(throttle: false, mode: Trailing(100)) {\n        println('testDebounce执行间隔 ${getNowTime()-start}')\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func debounceRepeater() {\n    let start = getNowTime()",
          "successors": [
            {
              "id": 3,
              "label": "    Repeater(throttle: false, mode: Trailing(100)) {\n        println('testDebounce执行间隔 ${getNowTime()-start}')",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "throttleRepeater",
      "type": "function",
      "start_line": 39,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": "func throttleRepeater() {\n    let start = getNowTime()\n    Repeater(throttle: true, mode: Trailing(50)) {\n        println('testThrottle执行间隔 ${getNowTime()-start}')\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func throttleRepeater() {\nlet start = getNowTime()",
          "successors": [
            {
              "id": 3,
              "label": "Repeater(throttle: true, mode: Trailing(50)) {\nprintln('testThrottle执行间隔 ${getNowTime()-start}')",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "debounceFunc",
      "type": "function",
      "start_line": 48,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": "func debounceFunc() {\n    println('myDebounce执行间隔 ${getNowTime()-start}')\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func debounceFunc() {\n    println('myDebounce执行间隔 ${getNowTime()-start}')",
          "successors": []
        }
      ]
    },
    {
      "name": "throttleFunc",
      "type": "function",
      "start_line": 53,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": "func throttleFunc() {\n    println('myThrottle执行间隔 ${getNowTime()-start}')\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func throttleFunc() {\n    println('myThrottle执行间隔 ${getNowTime()-start}')",
          "successors": []
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 71,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "simplified_code": "main(): Int64 {\n    // 直接使用Repeater\n    // debounceAction(debounceRepeater().call)\n    // throttleAction(throttleRepeater().call)\n    // 全局函数 使用宏\n    // debounceAction(debounceFunc)\n    // throttleAction(throttleFunc)\n    // 类的实例成员方法 使用宏\n    // debounceAction(RepeaterMemberMacro().myDebounce)\n    throttleAction(RepeaterMemberMacro().myThrottle)\n\n    sleep(Duration.second * 2)\n    return 0\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main(): Int64 {\n    throttleAction(RepeaterMemberMacro().myThrottle)",
          "successors": [
            {
              "id": 3,
              "label": "    sleep(Duration.second * 2)\n    return 0",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "RepeaterMemberMacro",
      "type": "class",
      "start_line": 57,
      "end_line": 69,
      "functions": [
        {
          "name": "myDebounce",
          "type": "function",
          "start_line": 61,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": "    func myDebounce() {\n        println('myDebounce执行间隔 ${getNowTime()-start}')\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func myDebounce() {\n    println('myDebounce执行间隔 ${getNowTime()-start}')",
              "successors": []
            }
          ]
        },
        {
          "name": "myThrottle",
          "type": "function",
          "start_line": 66,
          "end_line": 68,
          "functions": [],
          "classes": [],
          "simplified_code": "    func myThrottle() {\n        println('myThrottle执行间隔 ${getNowTime()-start}')\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func myThrottle() {\n    println('myThrottle执行间隔 ${getNowTime()-start}')",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class RepeaterMemberMacro {\n    let start = getNowTime()\n\n    @Debounce[100]\n    }\n\n    @Throttle[50]\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class RepeaterMemberMacro {",
          "successors": [
            {
              "id": 2,
              "label": "let start = getNowTime()",
              "successors": []
            },
            {
              "id": 3,
              "label": "@Debounce[100]",
              "successors": []
            },
            {
              "id": 4,
              "label": "@Throttle[50]",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package cj_debounce_throttle\nimport cj_debounce_throttle.macros.*\n\n}\n\n}\n\n}\n\n}\n\nlet start = getNowTime()\n@Debounce[100]\n}\n\n@Throttle[50]\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package cj_debounce_throttle",
      "successors": []
    }
  ]
}