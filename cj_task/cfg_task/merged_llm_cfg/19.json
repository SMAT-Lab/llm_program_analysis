{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [
    {
      "name": "InitNone",
      "type": "function",
      "start_line": 6,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": "public macro InitNone(input: Tokens):Tokens{\n    var clazz= getClassDecl(input)\n    return addDefaultNones(clazz).toTokens()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public macro InitNone(input: Tokens):Tokens{\nvar clazz = getClassDecl(input)",
          "successors": [
            {
              "id": 3,
              "label": "return addDefaultNones(clazz).toTokens()",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "addDefaultNones",
      "type": "function",
      "start_line": 12,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": "func addDefaultNones(classDecl: ClassDecl): ClassDecl {\n    classDecl.body.decls = classDecl.body.decls |> map(addDefaultNone) |> collectArrayList\n    return classDecl\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func addDefaultNones(classDecl: ClassDecl): ClassDecl {",
          "successors": [
            {
              "id": 2,
              "label": "    classDecl.body.decls = classDecl.body.decls |> map(addDefaultNone) |> collectArrayList",
              "successors": []
            },
            {
              "id": 3,
              "label": "    return classDecl",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "addDefaultNone",
      "type": "function",
      "start_line": 17,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "func addDefaultNone(decl: Decl): Decl {\n    if (isFunc(decl.keyword)) {\n        return decl\n    }\n    match (decl) {\n        case m: MacroExpandDecl =>\n            let vd = (m.macroInputDecl as VarDecl).getOrThrow()\n            vd.expr = parseExpr(quote(None))\n            vd.assign = Token(ASSIGN, '=')\n        case v: VarDecl =>\n            v.expr = parseExpr(quote(None))\n            v.assign = Token(ASSIGN, '=')\n        case _ => decl\n    }\n    return decl\n}",
      "blocks": [
        {
          "id": 1,
          "label": "if (isFunc(decl.keyword)) {",
          "successors": [
            {
              "id": 2,
              "label": "    return decl",
              "successors": []
            },
            {
              "id": 3,
              "label": "match (decl) {",
              "successors": [
                {
                  "id": 4,
                  "label": "    case m: MacroExpandDecl =>\n        let vd = (m.macroInputDecl as VarDecl).getOrThrow()",
                  "successors": [
                    {
                      "id": 6,
                      "label": "        vd.expr = parseExpr(quote(None))\n        vd.assign = Token(ASSIGN, '=')",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return decl",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "    case v: VarDecl =>\n        v.expr = parseExpr(quote(None))",
                  "successors": [
                    {
                      "id": 10,
                      "label": "        v.assign = Token(ASSIGN, '=')\nreturn decl",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "    case _ => decl",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "macro package cj_easy_data.macros\n\nimport std.ast.*\nimport std.collection.*\n\n}\n\n\n}\n//给加了问号的参数自动添加None\n}\n\n",
  "blocks": [
    {
      "id": 1,
      "label": "macro package cj_easy_data.macros\nimport std.ast.*",
      "successors": [
        {
          "id": 3,
          "label": "import std.collection.*",
          "successors": []
        }
      ]
    }
  ]
}