{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 44,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 35,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    Parser.parse(\"1 2 3 456 789\")\n    Parser.parse(\"1ab2c3\")\n    Parser.parse(\"apple 30 banana 45\")\n    Parser.parse(\"1.2 3.4\")\n    Parser.parse(\"9- -3 -2\")\n    Parser.parse(\"3-2\")\n    Parser.parse(\"1 2 3-2\")\n    Parser.parse(\"xxx-3.14. .56-238jk12\")\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    Parser.parse(\"1 2 3 456 789\")\n    Parser.parse(\"1ab2c3\")\n    Parser.parse(\"apple 30 banana 45\")\n    Parser.parse(\"1.2 3.4\")\n    Parser.parse(\"9- -3 -2\")\n    Parser.parse(\"3-2\")\n    Parser.parse(\"1 2 3-2\")\n    Parser.parse(\"xxx-3.14. .56-238jk12\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Parser",
      "type": "class",
      "start_line": 5,
      "end_line": 33,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 7,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": "    static init() {\n        states[0][45..58] = [1, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // INIT\n        states[1][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // -\n        states[2][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // . | -. | N. | -N.\n        states[3][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // N or -N\n        states[4][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // ACCEPT\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "states[0][45..58] = [1, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // INIT\nstates[1][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // -",
              "successors": [
                {
                  "id": 3,
                  "label": "states[2][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // . | -. | N. | -N.\nstates[3][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // N or -N",
                  "successors": [
                    {
                      "id": 5,
                      "label": "states[4][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // ACCEPT",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "parse",
          "type": "function",
          "start_line": 15,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    static public func parse(text: String) {\n        var i = 0\n        while (i < text.size) {\n            var s = 0\n            while (i < text.size && states[s][Int64(text[i])] == 0) {\n                i++\n            }\n            let j = i\n            while (i < text.size && states[s][Int64(text[i])] != 0) {\n                s = states[s][Int64(text[i])]\n                i++\n            }\n            if (s == 3 || s == 4) {\n                print(text[j..i] + ' ')\n            }\n        }\n        println()\n    } ",
          "blocks": [
            {
              "id": 1,
              "label": "static public func parse(text: String) {\nvar i = 0",
              "successors": [
                {
                  "id": 3,
                  "label": "while (i < text.size) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "var s = 0",
                      "successors": [
                        {
                          "id": 5,
                          "label": "while (i < text.size && states[s][Int64(text[i])] == 0) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "i++",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "while (i < text.size && states[s][Int64(text[i])] == 0) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "let j = i",
                          "successors": [
                            {
                              "id": 8,
                              "label": "while (i < text.size && states[s][Int64(text[i])] != 0) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "s = states[s][Int64(text[i])]\ni++",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "while (i < text.size && states[s][Int64(text[i])] != 0) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "if (s == 3 || s == 4) {\nprint(text[j..i] + ' ')",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 13,
                  "label": "println()",
                  "successors": []
                },
                {
                  "id": 14,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Parser {\n    static let states = Array(5, {_ => Array(128, item: 0)})\n    }\n\n    } \n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Parser {\nstatic let states = Array(5, {_ => Array(128, item: 0)})",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "// 基于数组构造 DFA 状态表，解析出一个字符串中的所有整数和小数\n// cjc version: 0.53.13\nimport std.collection.* \n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.collection.*",
      "successors": []
    }
  ]
}