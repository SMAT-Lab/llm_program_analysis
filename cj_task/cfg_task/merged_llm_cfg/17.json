{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [],
  "classes": [
    {
      "name": "Context",
      "type": "class",
      "start_line": 6,
      "end_line": 30,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 13,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(attrs: Tokens, input: Tokens) {\n        this.attrs = attrs\n        this.input = input\n        this.structDecl = match (parseDecl(input)) {\n            case d: StructDecl => d\n            case _ =>\n                diagReport(DiagReportLevel.ERROR, input, \"宏仅适用于结构体\", \"请检查宏是否作用在结构体上\")\n                throw Exception(\"不支持的类型\")\n        }\n        if (!findInterface(\"Serializable\", this.structDecl)) {\n            diagReport(DiagReportLevel.ERROR, input, \"结构体需要声明 Serializable 接口\", \"请检查结构体是否声明要实现 Serializable 接口\")\n            throw Exception(\"未声明 Serializable 接口\")\n        }\n        let visitor = StructDeclVisitor()\n        this.structDecl.traverse(visitor)\n        this.valDecls = visitor.varDecls.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "this.attrs = attrs\nthis.input = input\nthis.structDecl = match (parseDecl(input))",
              "successors": [
                {
                  "id": 3,
                  "label": "case d: StructDecl => d\nif (!findInterface(\"Serializable\", this.structDecl))",
                  "successors": [
                    {
                      "id": 7,
                      "label": "diagReport(DiagReportLevel.ERROR, input, \"结构体需要声明 Serializable 接口\", \"请检查结构体是否声明要实现 Serializable 接口\")\nthrow Exception(\"未声明 Serializable 接口\")",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "let visitor = StructDeclVisitor()\nthis.structDecl.traverse(visitor)\nthis.valDecls = visitor.varDecls.toArray()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "case _\ndiagReport(DiagReportLevel.ERROR, input, \"宏仅适用于结构体\", \"请检查宏是否作用在结构体上\")\nthrow Exception(\"不支持的类型\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Context {\n\n    let attrs: Tokens\n    let input: Tokens\n    let structDecl: StructDecl\n    let valDecls: Array<VarDecl>\n    \n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Context {\n    let attrs: Tokens",
          "successors": [
            {
              "id": 3,
              "label": "    let input: Tokens\n    let structDecl: StructDecl",
              "successors": [
                {
                  "id": 5,
                  "label": "    let valDecls: Array<VarDecl>\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "macro package Macro_JsonSerializable.macros\n\nimport std.ast.*\n\n// 生成上下文\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros\nimport std.ast.*",
      "successors": [
        {
          "id": 3,
          "label": "// 生成上下文",
          "successors": []
        }
      ]
    }
  ]
}