{
  "name": "cj_debounce_throttle.macros",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [
    {
      "name": "Debounce",
      "type": "function",
      "start_line": 15,
      "end_line": 19,
      "functions": [
        {
          "name": "mustBeFunc",
          "type": "function",
          "start_line": 16,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    mustBeFunc(input) {\n        funcDecl: FuncDecl => impDebounceOrThrottle(false, attr, funcDecl)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "mustBeFunc(input) {\nfuncDecl: FuncDecl => impDebounceOrThrottle(false, attr, funcDecl)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public macro Debounce(attr: Tokens, input: Tokens): Tokens {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public macro Debounce(attr: Tokens, input: Tokens): Tokens {\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Throttle",
      "type": "function",
      "start_line": 30,
      "end_line": 34,
      "functions": [
        {
          "name": "mustBeFunc",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    mustBeFunc(input) {\n        funcDecl: FuncDecl => impDebounceOrThrottle(true, attr, funcDecl)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "mustBeFunc(input) {\nfuncDecl: FuncDecl => impDebounceOrThrottle(true, attr, funcDecl)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public macro Throttle(attr: Tokens, input: Tokens): Tokens {\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public macro Throttle(attr: Tokens, input: Tokens): Tokens {\n    }",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "macro package cj_debounce_throttle.macros\n/**\n * Debounce实现\n * @author unravel\n * @description\n\n    debounce简单实现，高频动作连续触发时，实际动作往后顺移\n\n    使用方式如下\n    300毫秒,开始前和结束后都回调\n    300这个数字是必须的，leading和trailing是可选的。他们三个使用逗号分割\n    leading和trailing都没有时，默认为trailing\n    @Debounce[300,leading, trailing]\n */\n}\n\n/**\n * Throttle实现\n * @author unravel\n * @description\n\n    throttle简单实现，高频动作连续触发时，每隔interval调用一次实际动作\n\n    使用方式和 Debounce 一样\n */\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package cj_debounce_throttle.macros",
      "successors": [
        {
          "id": 2,
          "label": "/**\n * Debounce实现\n * @description\n\n    debounce简单实现，高频动作连续触发时，实际动作往后顺移\n\n    使用方式如下\n    300毫秒,开始前和结束后都回调\n    300这个数字是必须的，leading和trailing是可选的。他们三个使用逗号分割\n    leading和trailing都没有时，默认为trailing\n    @Debounce[300,leading, trailing]\n */",
          "successors": []
        },
        {
          "id": 3,
          "label": "/**\n * Throttle实现\n * @description\n\n    throttle简单实现，高频动作连续触发时，每隔interval调用一次实际动作\n\n    使用方式和 Debounce 一样\n */",
          "successors": []
        }
      ]
    }
  ]
}