{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 18,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 13,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    var tree = Node('A',\n        left: Node('B', left: Node('C', right: Node('D'))),\n        right: Node('E', left: Node('F'), right: Node('G')))\n    tree.traverse()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {\nvar tree = Node('A',\n    left: Node('B', left: Node('C', right: Node('D'))),\n    right: Node('E', left: Node('F'), right: Node('G')))",
          "successors": [
            {
              "id": 3,
              "label": "tree.traverse()\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Node",
      "type": "class",
      "start_line": 1,
      "end_line": 11,
      "functions": [
        {
          "name": "traverse",
          "type": "function",
          "start_line": 6,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func traverse(): Unit {\n        left?.traverse()\n        print(value)\n        right?.traverse()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func traverse(): Unit {\nleft?.traverse()",
              "successors": [
                {
                  "id": 3,
                  "label": "print(value)\nright?.traverse()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "struct Node {\n    public Node(var value: Rune,\n        let left!: ?Node = None,\n        let right!: ?Node = None) {}\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "struct Node {",
          "successors": [
            {
              "id": 2,
              "label": "    public Node(var value: Rune,\n        let left!: ?Node = None,",
              "successors": [
                {
                  "id": 4,
                  "label": "        let right!: ?Node = None) {}\n    }",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "}\n\n}",
  "blocks": []
}