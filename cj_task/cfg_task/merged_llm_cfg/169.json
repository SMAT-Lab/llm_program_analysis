{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 89,
  "functions": [],
  "classes": [
    {
      "name": "Deque",
      "type": "class",
      "start_line": 2,
      "end_line": 89,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init() {\n        size = 0\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init() {\n    size = 0",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(max_size: Int64) {\n        arr = Array<Any>(max_size * 2, item: 0)\n        size = 0\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(max_size: Int64) {\n    arr = Array<Any>(max_size * 2, item: 0)",
              "successors": [
                {
                  "id": 3,
                  "label": "    size = 0\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 15,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(initArr: Array<T>) {\n        size = initArr.size\n        tail = size - 1\n        for (i in 0..arr.size) {\n            this.arr[i + 1000001] = initArr[i]\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(initArr: Array<T>) {\nsize = initArr.size\ntail = size - 1",
              "successors": [
                {
                  "id": 3,
                  "label": "for (i in 0..arr.size) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "this.arr[i + 1000001] = initArr[i]\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(maxSize: Int64, initArr: Array<T>) {\n        arr = Array<Any>(maxSize, item: 0)\n        size = initArr.size\n        tail += size\n        for (i in 0..arr.size) {\n            this.arr[i + 1000001] = initArr[i]\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(maxSize: Int64, initArr: Array<T>) {\narr = Array<Any>(maxSize, item: 0)",
              "successors": [
                {
                  "id": 3,
                  "label": "size = initArr.size\ntail += size",
                  "successors": [
                    {
                      "id": 5,
                      "label": "for (i in 0..arr.size) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "this.arr[i + 1000001] = initArr[i]",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "pushBack",
          "type": "function",
          "start_line": 30,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func pushBack(val: T) {\n        this.tail++\n        arr[tail] = val\n        this.size++\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func pushBack(val: T) {\n    this.tail++",
              "successors": [
                {
                  "id": 3,
                  "label": "    arr[tail] = val\n    this.size++",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "popBack",
          "type": "function",
          "start_line": 35,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func popBack() {\n        if (size == 0) {\n            try {\n                var exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")\n                throw (exc)\n            } catch (exc: IndexOutOfBoundsException) {\n                println(\"${exc}\");\n            }\n        } else {\n            this.arr[tail] = 0\n            this.tail--\n            this.size--\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func popBack() {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (size == 0) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try {\nvar exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")\nthrow (exc)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "catch (exc: IndexOutOfBoundsException) {\n    println(\"${exc}\");\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "} else {\nthis.arr[tail] = 0\nthis.tail--\nthis.size--",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "pushFront",
          "type": "function",
          "start_line": 49,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func pushFront(val: T) {\n        if (this.head == 0) {\n            try {\n                throw IndexOutOfBoundsException(\"There are too many elements in the front end of the deque\")\n            } catch (exc: IndexOutOfBoundsException) {\n                println(\"${exc}\")\n            }\n        } else {\n            this.head--\n            this.arr[head] = val\n            this.size++\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func pushFront(val: T) {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (this.head == 0) {\ntry {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "throw IndexOutOfBoundsException(\"There are too many elements in the front end of the deque\")",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} catch (exc: IndexOutOfBoundsException) {\nprintln(\"${exc}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} else {\nthis.head--",
                  "successors": [
                    {
                      "id": 9,
                      "label": "this.arr[head] = val\nthis.size++",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "popFront",
          "type": "function",
          "start_line": 62,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func popFront()\n    {\n        if (size == 0) {\n            try {\n                var exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")\n                throw (exc)\n            } catch (exc: IndexOutOfBoundsException) {\n                println(\"${exc}\");\n            }\n        } else {\n            this.arr[head] = 0\n            this.head++\n            this.size--\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "if (size == 0) {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nvar exc: IndexOutOfBoundsException = IndexOutOfBoundsException(\"The queue is empty\")\nthrow (exc)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "catch (exc: IndexOutOfBoundsException) {\nprintln(\"${exc}\");\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "this.arr[head] = 0\nthis.head++\nthis.size--",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "front",
          "type": "function",
          "start_line": 77,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func front() {\n        return arr[head]\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func front() {\n    return arr[head]",
              "successors": []
            }
          ]
        },
        {
          "name": "back",
          "type": "function",
          "start_line": 80,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func back() {\n        return arr[tail]\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func back() {\nreturn arr[tail]",
              "successors": []
            }
          ]
        },
        {
          "name": "empty",
          "type": "function",
          "start_line": 83,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func empty(): Bool {\n        return (this.size == 0)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func empty(): Bool {\n    return (this.size == 0)",
              "successors": []
            }
          ]
        },
        {
          "name": "[]",
          "type": "function",
          "start_line": 86,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func [](i: Int64) {\n        return arr[i+1000001]\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func [](i: Int64) {\n    return arr[i+1000001]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Deque<T> {\n    var arr: Array<Any> = Array<Any>(2000000, item: 0)\n    //numbers of value\n    public var size: Int64 = 0\n    var head: Int64 = 1000001\n    var tail: Int64 = 1000000\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Deque<T> {\n    var arr: Array<Any> = Array<Any>(2000000, item: 0)",
          "successors": [
            {
              "id": 3,
              "label": "    //numbers of value\n    public var size: Int64 = 0",
              "successors": [
                {
                  "id": 5,
                  "label": "    var head: Int64 = 1000001\n    var tail: Int64 = 1000000",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    }\n    }",
                      "successors": [
                        {
                          "id": 9,
                          "label": "    }\n    }",
                          "successors": [
                            {
                              "id": 11,
                              "label": "    }\n    }",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "    }\n    }",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "    }\n    }",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "    }\n    }",
                                          "successors": [
                                            {
                                              "id": 19,
                                              "label": "    }\n}",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "//已知限制：无法拓展空间\n}",
  "blocks": []
}