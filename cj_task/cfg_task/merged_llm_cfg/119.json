{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 27,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 7,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    // 常量定义是为编译期数据命名，可用于常量表达式中\n    const N = 100000u32\n    // 变量定义是为运行时数据存储单元命名，以便后续程序引用\n    // 如果需要对这份存储单元进行读/写，可使用 var 定义可变变量\n    var n: UInt32 = 0 // 可以显式指定变量的类型\n    let random = Random() // 如果省略类型标注，则以初值表达式的类型确定变量类型\n    for (_ in 0..N) {\n        // 如果对这份存储单元只读不写，可使用 let 定义不可变变量\n        let x = random.nextFloat64()\n        // 不可变变量的初值在运行时确定，这是它和常量的最大区别\n        let y = random.nextFloat64()\n        // 读取不可变变量的值\n        if ((x - 0.5) ** 2 + (y - 0.5) ** 2 < 0.25) {\n            n++ // 修改可变变量的值\n        }\n    }\n    let pi = Float64(n) / Float64(N) * 4.0\n    println(\"π ≈ ${pi}\")\n    println(\"deviation: ${abs(Float64.PI - pi)}\")\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    const N = 100000u32",
          "successors": [
            {
              "id": 3,
              "label": "    var n: UInt32 = 0\n    let random = Random()",
              "successors": [
                {
                  "id": 5,
                  "label": "    for (_ in 0..N) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "        let x = random.nextFloat64()\n        let y = random.nextFloat64()",
                      "successors": [
                        {
                          "id": 8,
                          "label": "        if ((x - 0.5) ** 2 + (y - 0.5) ** 2 < 0.25) {\n            n++",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    for (_ in 0..N) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "    for (_ in 0..N) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "    let pi = Float64(n) / Float64(N) * 4.0\n    println(\"π ≈ ${pi}\")",
                      "successors": [
                        {
                          "id": 12,
                          "label": "    println(\"deviation: ${abs(Float64.PI - pi)}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// 基于蒙特卡洛算法估算圆周率\n// 涉及特性：常量，变量，可变性，类型转换，幂运算符\n// cjc version: 0.53.13\nimport std.random.*\nimport std.math.*\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.random.*\nimport std.math.*",
      "successors": []
    }
  ]
}