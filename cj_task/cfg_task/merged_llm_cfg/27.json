{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 672,
  "functions": [
    {
      "name": "isSeparator",
      "type": "function",
      "start_line": 74,
      "end_line": 76,
      "functions": [],
      "classes": [],
      "simplified_code": "func isSeparator(c: Rune): Bool {\n    return c.isAscii() && (c == r'/' || c == r'\\\\')\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func isSeparator(c: Rune): Bool {\n    return c.isAscii() && (c == r'/' || c == r'\\\\')",
          "successors": []
        }
      ]
    },
    {
      "name": "parseCharSpecifiers",
      "type": "function",
      "start_line": 78,
      "end_line": 91,
      "functions": [],
      "classes": [],
      "simplified_code": "func parseCharSpecifiers(s: Array<Rune>): Array<CharSpecifier> {\n    let ret = ArrayList<CharSpecifier>()\n    var i = 0\n    while (i < s.size) {\n        if (i + 3 <= s.size && s[i + 1] == r'-') {\n            ret.append(CharSpecifier.CharRange(s[i], s[i + 2]))\n            i += 3\n        } else {\n            ret.append(CharSpecifier.SingleChar(s[i]))\n            i += 1\n        }\n    }\n    return ret.toArray()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func parseCharSpecifiers(s: Array<Rune>): Array<CharSpecifier> {\nlet ret = ArrayList<CharSpecifier>()\nvar i = 0",
          "successors": [
            {
              "id": 3,
              "label": "while (i < s.size) {",
              "successors": [
                {
                  "id": 4,
                  "label": "if (i + 3 <= s.size && s[i + 1] == r'-') {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "ret.append(CharSpecifier.CharRange(s[i], s[i + 2]))\ni += 3",
                      "successors": [
                        {
                          "id": 3,
                          "label": "while (i < s.size) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "ret.append(CharSpecifier.SingleChar(s[i]))\ni += 1",
                      "successors": [
                        {
                          "id": 3,
                          "label": "while (i < s.size) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "label": "return ret.toArray()",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "charsEq",
      "type": "function",
      "start_line": 117,
      "end_line": 123,
      "functions": [],
      "classes": [],
      "simplified_code": "func charsEq(a: Rune, b: Rune, caseSensitive: Bool): Bool {\n    if (!caseSensitive && a.isAscii() && b.isAscii()) {\n        a.toAsciiLowerCase() == b.toAsciiLowerCase()\n    } else {\n        a == b\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func charsEq(a: Rune, b: Rune, caseSensitive: Bool): Bool\nif (!caseSensitive && a.isAscii() && b.isAscii())",
          "successors": [
            {
              "id": 3,
              "label": "a.toAsciiLowerCase() == b.toAsciiLowerCase()",
              "successors": []
            },
            {
              "id": 4,
              "label": "a == b",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "inCharSpecifiers",
      "type": "function",
      "start_line": 126,
      "end_line": 159,
      "functions": [],
      "classes": [],
      "simplified_code": "func inCharSpecifiers(cs: Array<CharSpecifier>, c: Rune, options: MatchOptions): Bool {\n    for (spec in cs) {\n        match (spec) {\n            case CharSpecifier.SingleChar(cs) =>\n                if (charsEq(c, cs, options.caseSensitive)) {\n                    return true\n                } else {\n                    continue\n                }\n\n            case CharSpecifier.CharRange(start, end) =>\n                if (!options.caseSensitive && c.isAscii() && start.isAscii() && end.isAscii()) {\n                    let sl = start.toAsciiLowerCase()\n                    let el = end.toAsciiLowerCase()\n\n                    let su = sl.toAsciiUpperCase()\n                    let eu = el.toAsciiUpperCase()\n\n                    if (sl != su && el != eu) {\n                        let cl = c.toAsciiLowerCase()\n                        if (cl >= sl && cl <= el) {\n                            return true;\n                        }\n                    }\n                }\n\n                if (c >= start && c <= end) {\n                    return true\n                }\n        }\n    }\n\n    return false\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func inCharSpecifiers(cs: Array<CharSpecifier>, c: Rune, options: MatchOptions): Bool {",
          "successors": [
            {
              "id": 2,
              "label": "for (spec in cs) {",
              "successors": [
                {
                  "id": 3,
                  "label": "match (spec) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case CharSpecifier.SingleChar(cs) =>",
                      "successors": [
                        {
                          "id": 5,
                          "label": "if (charsEq(c, cs, options.caseSensitive)) {\nreturn true",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "else {\ncontinue",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "case CharSpecifier.CharRange(start, end) =>",
                      "successors": [
                        {
                          "id": 10,
                          "label": "if (!options.caseSensitive && c.isAscii() && start.isAscii() && end.isAscii()) {",
                          "successors": [
                            {
                              "id": 11,
                              "label": "let sl = start.toAsciiLowerCase()",
                              "successors": []
                            },
                            {
                              "id": 12,
                              "label": "let el = end.toAsciiLowerCase()",
                              "successors": []
                            },
                            {
                              "id": 13,
                              "label": "let su = sl.toAsciiUpperCase()",
                              "successors": []
                            },
                            {
                              "id": 14,
                              "label": "let eu = el.toAsciiUpperCase()",
                              "successors": []
                            },
                            {
                              "id": 15,
                              "label": "if (sl != su && el != eu) {",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "let cl = c.toAsciiLowerCase()",
                                  "successors": []
                                },
                                {
                                  "id": 17,
                                  "label": "if (cl >= sl && cl <= el) {\nreturn true",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 19,
                          "label": "if (c >= start && c <= end) {\nreturn true",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 21,
              "label": "return false",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "checkWindowsVerbatim",
      "type": "function",
      "start_line": 349,
      "end_line": 370,
      "functions": [],
      "classes": [],
      "simplified_code": "func checkWindowsVerbatim(path: String): Bool {\n    if (path.size < 4) {\n        return false\n    }\n    let chars = path.toRuneArray()\n\n    let c0 = chars[0]\n    let c1 = chars[1]\n    let c2 = chars[2]\n    let c3 = chars[3]\n\n    // \\\\.\\\n    if (c0 == r'\\\\' && c1 == r'\\\\' && c2 == r'.' && c3 == r'\\\\') {\n        return true\n    }\n    // \\\\?\\\n    if (c0 == r'\\\\' && c1 == r'\\\\' && c2 == r'?' && c3 == r'\\\\') {\n        return true\n    }\n\n    return false\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func checkWindowsVerbatim(path: String): Bool {",
          "successors": [
            {
              "id": 2,
              "label": "if (path.size < 4) {\nreturn false",
              "successors": []
            },
            {
              "id": 4,
              "label": "let chars = path.toRuneArray()\nlet c0 = chars[0]",
              "successors": [
                {
                  "id": 6,
                  "label": "let c1 = chars[1]\nlet c2 = chars[2]",
                  "successors": [
                    {
                      "id": 8,
                      "label": "let c3 = chars[3]",
                      "successors": [
                        {
                          "id": 9,
                          "label": "if (c0 == r'\\\\' && c1 == r'\\\\' && c2 == r'.' && c3 == r'\\\\') {\nreturn true",
                          "successors": []
                        },
                        {
                          "id": 11,
                          "label": "if (c0 == r'\\\\' && c1 == r'\\\\' && c2 == r'?' && c3 == r'\\\\') {\nreturn true",
                          "successors": []
                        },
                        {
                          "id": 13,
                          "label": "return false",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "fillTodo",
      "type": "function",
      "start_line": 387,
      "end_line": 467,
      "functions": [],
      "classes": [],
      "simplified_code": "func fillTodo(\n    todo: ArrayList<(PathWrapper, Int64)>,\n    patterns: Array<Pattern>,\n    idx: Int,\n    path: PathWrapper,\n    options: MatchOptions\n): Unit {\n    let pattern = patterns[idx]\n    let isDir = path.isDirectory\n    let curDir = path.path.toString() == \".\"\n\n    let add = {\n        todo: ArrayList<(PathWrapper, Int64)>, nextPath: PathWrapper => if (idx + 1 == patterns.size) {\n            todo.append((nextPath, Int64.Max))\n        } else {\n            fillTodo(todo, patterns, idx + 1, nextPath, options)\n        }\n    }\n\n    match (pattern.toCharString()) {\n        case Some(s) =>\n            let special = s == \".\" || s == \"..\"\n            let nextPath = if (curDir) {\n                Path(s)\n            } else {\n                path.path.join(s)\n            }\n            let nextPathWrapper: PathWrapper\n            try {\n                nextPathWrapper = PathWrapper(nextPath)\n            } catch (e: FSException) {\n                return\n            }\n            if ((special && isDir) || !special) {\n                add(todo, nextPathWrapper)\n            }\n        case None =>\n            if (isDir) {\n                let dirFiles = Directory.readFrom(path.path)\n                let dirs = ArrayList<PathWrapper>()\n                for (e in dirFiles) {\n                    if (curDir) {\n                        dirs.append(PathWrapper(Path(e.path.fileName), e.isDirectory()))\n                    } else {\n                        dirs.append(PathWrapper(e.path, e.isDirectory()))\n                    }\n                }\n                var children = dirs.iterator()\n                if (options.requireLiteralLeadingDot) {\n                    children = children.filter {\n                        c => !(c.path.fileName.startsWith(\".\"))\n                    }\n                }\n                let cc = ArrayList<PathWrapper>()\n                for (c in children) {\n                    cc.append(c)\n                }\n                cc.sortBy {\n                    l: PathWrapper, r: PathWrapper => if (l.path.fileName > r.path.fileName) {\n                        Ordering.GT\n                    } else if (l.path.fileName < r.path.fileName) {\n                        Ordering.LT\n                    } else {\n                        Ordering.EQ\n                    }\n                }\n\n                for (c in cc) {\n                    todo.append((c, idx))\n                }\n\n                if (!pattern.tokens.isEmpty() && pattern.tokens[0] == PatternToken.Char(r'.')) {\n                    for (sp in [\".\", \"..\"]) {\n                        if (pattern.matchesWith(sp, options)) {\n                            add(todo, PathWrapper(path.path.join(sp)))\n                        }\n                    }\n                }\n            }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let pattern = patterns[idx]\nlet isDir = path.isDirectory",
          "successors": [
            {
              "id": 3,
              "label": "let curDir = path.path.toString() == \".\"\nlet add = { todo: ArrayList<(PathWrapper, Int64)>, nextPath: PathWrapper => if (idx + 1 == patterns.size) { todo.append((nextPath, Int64.Max)) } else { fillTodo(todo, patterns, idx + 1, nextPath, options) } }",
              "successors": [
                {
                  "id": 5,
                  "label": "match (pattern.toCharString())",
                  "successors": [
                    {
                      "id": 6,
                      "label": "case Some(s) =>\nlet special = s == \".\" || s == \"..\"",
                      "successors": [
                        {
                          "id": 8,
                          "label": "let nextPath = if (curDir) { Path(s) } else { path.path.join(s) }\nlet nextPathWrapper: PathWrapper",
                          "successors": [
                            {
                              "id": 10,
                              "label": "try",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "nextPathWrapper = PathWrapper(nextPath)\nif ((special && isDir) || !special) { add(todo, nextPathWrapper) }",
                                  "successors": []
                                },
                                {
                                  "id": 13,
                                  "label": "catch (e: FSException)\nreturn",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "label": "case None =>\nif (isDir) { let dirFiles = Directory.readFrom(path.path) let dirs = ArrayList<PathWrapper>() for (e in dirFiles) { if (curDir) { dirs.append(PathWrapper(Path(e.path.fileName), e.isDirectory())) } else { dirs.append(PathWrapper(e.path, e.isDirectory())) } } var children = dirs.iterator() if (options.requireLiteralLeadingDot) { children = children.filter { c => !(c.path.fileName.startsWith(\".\")) } } let cc = ArrayList<PathWrapper>() for (c in children) { cc.append(c) } cc.sortBy { l: PathWrapper, r: PathWrapper => if (l.path.fileName > r.path.fileName) { Ordering.GT } else if (l.path.fileName < r.path.fileName) { Ordering.LT } else { Ordering.EQ } } for (c in cc) { todo.append((c, idx)) } if (!pattern.tokens.isEmpty() && pattern.tokens[0] == PatternToken.Char(r'.')) { for (sp in [\".\", \"..\"]) { if (pattern.matchesWith(sp, options)) { add(todo, PathWrapper(path.path.join(sp))) } } } }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "getRoot",
      "type": "function",
      "start_line": 562,
      "end_line": 580,
      "functions": [],
      "classes": [],
      "simplified_code": "func getRoot(pattern: String): Option<String> {\n    let chars = pattern.toRuneArray()\n\n    if (chars.size == 0) {\n        return \"\"\n    }\n\n    if (chars[0] == r'/') {\n        return \"/\"\n    }\n\n    if (chars.size >= 2) {\n        if (chars[0].isAsciiLetter() && chars[1] == r':') {\n            return pattern[0..2] + \"\\\\\"\n        }\n    }\n\n    None\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func getRoot(pattern: String): Option<String> {\nlet chars = pattern.toRuneArray()",
          "successors": [
            {
              "id": 3,
              "label": "if (chars.size == 0) {\nreturn \"\"",
              "successors": []
            },
            {
              "id": 5,
              "label": "if (chars[0] == r'/') {\nreturn \"/\"",
              "successors": []
            },
            {
              "id": 7,
              "label": "if (chars.size >= 2) {\nif (chars[0].isAsciiLetter() && chars[1] == r':') {",
              "successors": [
                {
                  "id": 9,
                  "label": "return pattern[0..2] + \"\\\\\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "label": "None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "glob",
      "type": "function",
      "start_line": 612,
      "end_line": 614,
      "functions": [],
      "classes": [],
      "simplified_code": "public func glob(pattern: String): Paths {\n    globWith(pattern, MatchOptions())\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func glob(pattern: String): Paths {\n    globWith(pattern, MatchOptions())",
          "successors": []
        }
      ]
    },
    {
      "name": "globWith",
      "type": "function",
      "start_line": 622,
      "end_line": 670,
      "functions": [],
      "classes": [],
      "simplified_code": "public func globWith(pattern: String, options: MatchOptions): Paths {\n    let _ = Pattern(pattern)\n\n    if (checkWindowsVerbatim(pattern)) {\n        throw PatternException(0, \"verbatim paths are not supported\")\n    }\n\n    var root: String\n    var foundRoot = false\n\n    match (getRoot(pattern)) {\n        case Some(r) =>\n            root = r\n            foundRoot = true\n        case None =>\n            root = \".\"\n            foundRoot = false\n    }\n\n    let dirPatterns = ArrayList<Pattern>()\n    let skip = if (foundRoot) {\n        root.size\n    } else {\n        0\n    }\n    let components = pattern[(min(skip, pattern.size))..].split(isSeparator)\n    for (c in components) {\n        dirPatterns.append(Pattern(c))\n    }\n\n    if (foundRoot && root.size == pattern.size) {\n        dirPatterns.append(Pattern(\"\"))\n    }\n\n    let lastIsSeparator = if (pattern.size > 0) {\n        let ra = pattern.toRuneArray()\n        isSeparator(ra[ra.size - 1])\n    } else {\n        false\n    }\n\n    return Paths(\n        dirPatterns.toArray(),\n        lastIsSeparator,\n        options,\n        ArrayList<(PathWrapper, Int64)>(),\n        PathWrapper(Path(root))\n    )\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func globWith(pattern: String, options: MatchOptions): Paths {\n    let _ = Pattern(pattern)",
          "successors": [
            {
              "id": 3,
              "label": "if (checkWindowsVerbatim(pattern)) {\n    throw PatternException(0, \"verbatim paths are not supported\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "var root: String\nvar foundRoot = false\nmatch (getRoot(pattern)) {",
              "successors": [
                {
                  "id": 7,
                  "label": "    case Some(r) =>\n        root = r\n        foundRoot = true\nlet dirPatterns = ArrayList<Pattern>()",
                  "successors": [
                    {
                      "id": 11,
                      "label": "let skip = if (foundRoot) {\n    root.size\n} else {\n    0\n}\nlet components = pattern[(min(skip, pattern.size))..].split(isSeparator)",
                      "successors": [
                        {
                          "id": 13,
                          "label": "for (c in components) {\n    dirPatterns.append(Pattern(c))\n}",
                          "successors": [
                            {
                              "id": 14,
                              "label": "if (foundRoot && root.size == pattern.size) {\n    dirPatterns.append(Pattern(\"\"))\n}\nlet lastIsSeparator = if (pattern.size > 0) {\n    let ra = pattern.toRuneArray()\n    isSeparator(ra[ra.size - 1])\n} else {\n    false\n}",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "return Paths(\n    dirPatterns.toArray(),\n    lastIsSeparator,\n    options,\n    ArrayList<(PathWrapper, Int64)>(),\n    PathWrapper(Path(root))\n)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "    case None =>\n        root = \".\"\n        foundRoot = false\nlet dirPatterns = ArrayList<Pattern>()",
                  "successors": [
                    {
                      "id": 11,
                      "label": "let skip = if (foundRoot) {\n    root.size\n} else {\n    0\n}\nlet components = pattern[(min(skip, pattern.size))..].split(isSeparator)",
                      "successors": [
                        {
                          "id": 13,
                          "label": "for (c in components) {\n    dirPatterns.append(Pattern(c))\n}",
                          "successors": [
                            {
                              "id": 14,
                              "label": "if (foundRoot && root.size == pattern.size) {\n    dirPatterns.append(Pattern(\"\"))\n}\nlet lastIsSeparator = if (pattern.size > 0) {\n    let ra = pattern.toRuneArray()\n    isSeparator(ra[ra.size - 1])\n} else {\n    false\n}",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "return Paths(\n    dirPatterns.toArray(),\n    lastIsSeparator,\n    options,\n    ArrayList<(PathWrapper, Int64)>(),\n    PathWrapper(Path(root))\n)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "PatternException",
      "type": "class",
      "start_line": 61,
      "end_line": 72,
      "functions": [
        {
          "name": "getClassName",
          "type": "function",
          "start_line": 69,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func getClassName(): String {\n        \"PatternException\"\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func getClassName(): String {\n\"PatternException\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class PatternException <: Exception {\n    public let pos: Int\n\n    public init(pos: Int, message: String) {\n        super(message)\n        this.pos = pos\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class PatternException <: Exception {\n    public let pos: Int",
          "successors": [
            {
              "id": 3,
              "label": "    public init(pos: Int, message: String) {",
              "successors": [
                {
                  "id": 4,
                  "label": "        super(message)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "        this.pos = pos",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "CharsIterator",
      "type": "class",
      "start_line": 93,
      "end_line": 115,
      "functions": [
        {
          "name": "clone",
          "type": "function",
          "start_line": 102,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func clone(): CharsIterator {\n        return CharsIterator(this.chars, i: this.i)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func clone(): CharsIterator {\n    return CharsIterator(this.chars, i: this.i)",
              "successors": []
            }
          ]
        },
        {
          "name": "next",
          "type": "function",
          "start_line": 106,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func next(): Option<Rune> {\n        if (this.i < this.chars.size) {\n            let c = this.chars[this.i]\n            this.i++\n            return Some(c)\n        } else {\n            return None\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func next(): Option<Rune> {\nif (this.i < this.chars.size) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let c = this.chars[this.i]\nthis.i++\nreturn Some(c)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "} else {\nreturn None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class CharsIterator <: Iterator<Rune> {\n    let chars: Array<Rune>\n    var i: Int\n\n    init(c: Array<Rune>, i!: Int = 0) {\n        this.chars = c\n        this.i = i\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class CharsIterator <: Iterator<Rune> {\nlet chars: Array<Rune>\nvar i: Int",
          "successors": [
            {
              "id": 3,
              "label": "init(c: Array<Rune>, i!: Int = 0) {\nthis.chars = c\nthis.i = i",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Pattern",
      "type": "class",
      "start_line": 161,
      "end_line": 347,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 166,
          "end_line": 246,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(pattern: String) {\n        let chars = pattern.toRuneArray()\n        let tokens = ArrayList<PatternToken>()\n        var is_recursive = false\n        var i = 0\n\n        while (i < chars.size) {\n            match (chars[i]) {\n                case r'?' =>\n                    tokens.append(PatternToken.AnyChar)\n                    i++\n                case r'*' =>\n                    let old = i\n\n                    while (i < chars.size && chars[i] == r'*') {\n                        i++\n                    }\n\n                    let count = i - old\n\n                    if (count > 2) {\n                        throw PatternException(old + 2, ERROR_WILDCARDS)\n                    } else if (count == 2) {\n                        let is_valid = if (i == 2 || isSeparator(chars[i - count - 1])) {\n                            if (i < chars.size && isSeparator(chars[i])) {\n                                i++\n                                true\n                            } else if (i == chars.size) {\n                                true\n                            } else {\n                                throw PatternException(i, ERROR_RECURSIVE_WILDCARDS)\n                            }\n                        } else {\n                            throw PatternException(old - 1, ERROR_RECURSIVE_WILDCARDS)\n                        }\n\n                        if (is_valid) {\n                            let tokens_len = tokens.size\n\n                            if (!(tokens_len > 1 && tokens.get(tokens_len - 1) == PatternToken.AnyRecursiveSequence)) {\n                                is_recursive = true\n                                tokens.append(PatternToken.AnyRecursiveSequence)\n                            }\n                        }\n                    } else {\n                        tokens.append(PatternToken.AnySequence)\n                    }\n                case r'[' =>\n                    if (i + 4 <= chars.size && chars[i + 1] == r'!') {\n                        match (chars[i + 3..].indexOf(r']')) {\n                            case None => ()\n                            case Some(j) =>\n                                let subChars = chars[i + 2..i + 3 + j]\n                                let cs = parseCharSpecifiers(subChars)\n                                tokens.append(PatternToken.AnyExcept(cs))\n                                i += 4 + j\n                                continue\n                        }\n                    } else if (i + 3 <= chars.size && chars[i + 1] != r'!') {\n                        match (chars[i + 2..].indexOf(r']')) {\n                            case None => ()\n                            case Some(j) =>\n                                let subChars = chars[i + 1..i + 2 + j]\n                                let cs = parseCharSpecifiers(subChars)\n                                tokens.append(PatternToken.AnyWithin(cs))\n                                i += 3 + j\n                                continue\n                        }\n                    }\n\n                    throw PatternException(i, ERROR_INVALID_RANGE)\n                case c =>\n                    tokens.append(PatternToken.Char(c))\n                    i++\n            }\n        }\n\n        this.original = pattern\n        this.tokens = tokens\n        this.isRecursive = is_recursive\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(pattern: String) {\nlet chars = pattern.toRuneArray()\nlet tokens = ArrayList<PatternToken>()\nvar is_recursive = false\nvar i = 0",
              "successors": [
                {
                  "id": 3,
                  "label": "while (i < chars.size) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "match (chars[i]) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case r'?' =>\ntokens.append(PatternToken.AnyChar)\ni++",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "case r'*' =>\nlet old = i\nwhile (i < chars.size && chars[i] == r'*') {\ni++ }",
                          "successors": [
                            {
                              "id": 9,
                              "label": "let count = i - old\nif (count > 2) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "throw PatternException(old + 2, ERROR_WILDCARDS)",
                                  "successors": []
                                },
                                {
                                  "id": 11,
                                  "label": "} else if (count == 2) {",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "let is_valid = if (i == 2 || isSeparator(chars[i - count - 1])) {\nif (i < chars.size && isSeparator(chars[i])) {\ni++\ntrue\n} else if (i == chars.size) {\ntrue\n} else {\nthrow PatternException(i, ERROR_RECURSIVE_WILDCARDS)\n}",
                                      "successors": []
                                    },
                                    {
                                      "id": 14,
                                      "label": "} else {\nthrow PatternException(old - 1, ERROR_RECURSIVE_WILDCARDS)\n}\nif (is_valid) {\nlet tokens_len = tokens.size\nif (!(tokens_len > 1 && tokens.get(tokens_len - 1) == PatternToken.AnyRecursiveSequence)) {\nis_recursive = true\ntokens.append(PatternToken.AnyRecursiveSequence)\n}\n}",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 16,
                                  "label": "} else {\ntokens.append(PatternToken.AnySequence)\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 17,
                          "label": "case r'[' =>",
                          "successors": [
                            {
                              "id": 18,
                              "label": "if (i + 4 <= chars.size && chars[i + 1] == r'!') {\nmatch (chars[i + 3..].indexOf(r']')) {",
                              "successors": [
                                {
                                  "id": 20,
                                  "label": "case None => ()",
                                  "successors": []
                                },
                                {
                                  "id": 21,
                                  "label": "case Some(j) =>\nlet subChars = chars[i + 2..i + 3 + j]\nlet cs = parseCharSpecifiers(subChars)\ntokens.append(PatternToken.AnyExcept(cs))\ni += 4 + j\ncontinue",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 23,
                              "label": "} else if (i + 3 <= chars.size && chars[i + 1] != r'!') {\nmatch (chars[i + 2..].indexOf(r']')) {",
                              "successors": [
                                {
                                  "id": 25,
                                  "label": "case None => ()",
                                  "successors": []
                                },
                                {
                                  "id": 26,
                                  "label": "case Some(j) =>\nlet subChars = chars[i + 1..i + 2 + j]\nlet cs = parseCharSpecifiers(subChars)\ntokens.append(PatternToken.AnyWithin(cs))\ni += 3 + j\ncontinue",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 28,
                              "label": "throw PatternException(i, ERROR_INVALID_RANGE)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 29,
                          "label": "case c =>\ntokens.append(PatternToken.Char(c))\ni++",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 31,
                  "label": "this.original = pattern\nthis.tokens = tokens\nthis.isRecursive = is_recursive",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "matches",
          "type": "function",
          "start_line": 248,
          "end_line": 250,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func matches(str: String): Bool {\n        this.matchesWith(str, MatchOptions())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func matches(str: String): Bool {\nthis.matchesWith(str, MatchOptions())",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "matchesWith",
          "type": "function",
          "start_line": 252,
          "end_line": 257,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func matchesWith(\n        str: String,\n        options: MatchOptions\n    ): Bool {\n        this.matchesFrom(true, CharsIterator(str.toRuneArray()), 0, options) == MatchResult.Match\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func matchesWith( str: String, options: MatchOptions ): Bool {\nthis.matchesFrom(true, CharsIterator(str.toRuneArray()), 0, options) == MatchResult.Match",
              "successors": []
            }
          ]
        },
        {
          "name": "matchesFrom",
          "type": "function",
          "start_line": 259,
          "end_line": 335,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func matchesFrom(\n        followsSeparator: Bool,\n        file: CharsIterator,\n        i: Int,\n        options: MatchOptions\n    ): MatchResult {\n        var fs = followsSeparator\n        for ((ti, token) in this.tokens[i..].iterator().enumerate()) {\n            match (token) {\n                case AnySequence | AnyRecursiveSequence =>\n                    match (this.matchesFrom(fs, file.clone(), i + ti + 1, options)) {\n                        case MatchResult.SubPatternDoesntMatch => ()\n                        case m => return m\n                    }\n\n                    while (let Some(c) <- file.next()) {\n                        if (fs && options.requireLiteralLeadingDot && c == r'.') {\n                            return MatchResult.SubPatternDoesntMatch\n                        }\n                        fs = isSeparator(c)\n                        match (token) {\n                            case PatternToken.AnyRecursiveSequence =>\n                                if (!fs) {\n                                    continue\n                                }\n                            case PatternToken.AnySequence =>\n                                if (options.requireLiteralSeparator && fs) {\n                                    return MatchResult.SubPatternDoesntMatch\n                                }\n                            case _ => ()\n                        }\n\n                        match (this.matchesFrom(fs, file.clone(), i + ti + 1, options)) {\n                            case MatchResult.SubPatternDoesntMatch => ()\n                            case m => return m\n                        }\n                    }\n                case _ =>\n                    let c = match (file.next()) {\n                        case Some(c) => c\n                        case None => return MatchResult.EntirePatternDoesntMatch\n                    }\n\n                    let is_sep = isSeparator(c)\n\n                    if (!match (token) {\n                        case PatternToken.AnyChar | PatternToken.AnyWithin(_) | AnyExcept(_) =>\n                            if ((options.requireLiteralSeparator && is_sep) || (fs && options.requireLiteralLeadingDot &&\n                                c == r'.')) {\n                                false\n                            } else {\n                                true\n                            }\n                        case _ => true\n                    }) {\n                        return MatchResult.SubPatternDoesntMatch\n                    }\n\n                    if (!match (token) {\n                        case PatternToken.AnyChar => true\n                        case PatternToken.AnyWithin(cs) => inCharSpecifiers(cs, c, options)\n                        case PatternToken.AnyExcept(cs) => !inCharSpecifiers(cs, c, options)\n                        case PatternToken.Char(tc) => charsEq(c, tc, options.caseSensitive)\n                        case _ => throw Exception(\"unreachable\")\n                    }) {\n                        return MatchResult.SubPatternDoesntMatch\n                    }\n                    fs = is_sep\n            }\n        }\n\n        if (file.next().isNone()) {\n            return MatchResult.Match\n        } else {\n            return MatchResult.SubPatternDoesntMatch\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "var fs = followsSeparator",
              "successors": [
                {
                  "id": 2,
                  "label": "for ((ti, token) in this.tokens[i..].iterator().enumerate()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "match (token) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case AnySequence | AnyRecursiveSequence =>\nmatch (this.matchesFrom(fs, file.clone(), i + ti + 1, options)) {",
                          "successors": [
                            {
                              "id": 6,
                              "label": "case MatchResult.SubPatternDoesntMatch => ()",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "while (let Some(c) <- file.next()) {",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "if (fs && options.requireLiteralLeadingDot && c == r'.') {\nreturn MatchResult.SubPatternDoesntMatch",
                                      "successors": []
                                    },
                                    {
                                      "id": 13,
                                      "label": "fs = isSeparator(c)\nmatch (token) {",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "label": "case PatternToken.AnyRecursiveSequence =>\nif (!fs) {",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "label": "continue",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "while (let Some(c) <- file.next()) {",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 18,
                                          "label": "case PatternToken.AnySequence =>\nif (options.requireLiteralSeparator && fs) {",
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "return MatchResult.SubPatternDoesntMatch",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 21,
                                          "label": "case _ => ()\nmatch (this.matchesFrom(fs, file.clone(), i + ti + 1, options)) {",
                                          "successors": [
                                            {
                                              "id": 23,
                                              "label": "case MatchResult.SubPatternDoesntMatch => ()",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "while (let Some(c) <- file.next()) {",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 24,
                                              "label": "case m => return m",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "case m => return m",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "case _ =>\nlet c = match (file.next()) {",
                          "successors": [
                            {
                              "id": 25,
                              "label": "case Some(c) => c\nlet is_sep = isSeparator(c)",
                              "successors": [
                                {
                                  "id": 27,
                                  "label": "if (!match (token) {",
                                  "successors": [
                                    {
                                      "id": 28,
                                      "label": "case PatternToken.AnyChar | PatternToken.AnyWithin(_) | AnyExcept(_) =>",
                                      "successors": [
                                        {
                                          "id": 29,
                                          "label": "if ((options.requireLiteralSeparator && is_sep) || (fs && options.requireLiteralLeadingDot && c == r'.')) {\nfalse",
                                          "successors": []
                                        },
                                        {
                                          "id": 31,
                                          "label": "else {\ntrue",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 33,
                                      "label": "case _ => true\nif (!match (token) {",
                                      "successors": [
                                        {
                                          "id": 35,
                                          "label": "case PatternToken.AnyChar => true",
                                          "successors": []
                                        },
                                        {
                                          "id": 36,
                                          "label": "case PatternToken.AnyWithin(cs) => inCharSpecifiers(cs, c, options)",
                                          "successors": []
                                        },
                                        {
                                          "id": 37,
                                          "label": "case PatternToken.AnyExcept(cs) => !inCharSpecifiers(cs, c, options)",
                                          "successors": []
                                        },
                                        {
                                          "id": 38,
                                          "label": "case PatternToken.Char(tc) => charsEq(c, tc, options.caseSensitive)",
                                          "successors": []
                                        },
                                        {
                                          "id": 39,
                                          "label": "case _ => throw Exception(\"unreachable\")",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 40,
                                  "label": "return MatchResult.SubPatternDoesntMatch",
                                  "successors": []
                                },
                                {
                                  "id": 41,
                                  "label": "fs = is_sep",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 42,
                              "label": "case None => return MatchResult.EntirePatternDoesntMatch",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 43,
                  "label": "if (file.next().isNone()) {\nreturn MatchResult.Match",
                  "successors": []
                },
                {
                  "id": 45,
                  "label": "else {\nreturn MatchResult.SubPatternDoesntMatch",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toCharString",
          "type": "function",
          "start_line": 337,
          "end_line": 346,
          "functions": [],
          "classes": [],
          "simplified_code": "    func toCharString(): Option<String> {\n        let ret = StringBuilder()\n        for (token in this.tokens) {\n            match (token) {\n                case Char(c) => ret.append(c)\n                case _ => return None\n            }\n        }\n        return ret.toString()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let ret = StringBuilder()",
              "successors": [
                {
                  "id": 2,
                  "label": "for (token in this.tokens):",
                  "successors": [
                    {
                      "id": 3,
                      "label": "match (token):",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case Char(c) => ret.append(c)",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for (token in this.tokens):",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "case _ => return None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return ret.toString()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct Pattern {\n    let original: String\n    let tokens: ArrayList<PatternToken>\n    let isRecursive: Bool\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct Pattern {\nlet original: String",
          "successors": [
            {
              "id": 3,
              "label": "let tokens: ArrayList<PatternToken>\nlet isRecursive: Bool",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "PathWrapper",
      "type": "class",
      "start_line": 372,
      "end_line": 385,
      "functions": [],
      "classes": [],
      "simplified_code": "public struct PathWrapper {\n    public let path: Path\n    let isDirectory: Bool\n\n    init(path: Path) {\n        this.path = path\n        this.isDirectory = FileInfo(path).isDirectory()\n    }\n\n    init(path: Path, isDirectory: Bool) {\n        this.path = path\n        this.isDirectory = isDirectory\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct PathWrapper {\npublic let path: Path",
          "successors": [
            {
              "id": 3,
              "label": "let isDirectory: Bool\ninit(path: Path) {",
              "successors": [
                {
                  "id": 5,
                  "label": "this.path = path\nthis.isDirectory = FileInfo(path).isDirectory()",
                  "successors": [
                    {
                      "id": 7,
                      "label": "}\ninit(path: Path, isDirectory: Bool) {",
                      "successors": [
                        {
                          "id": 9,
                          "label": "this.path = path\nthis.isDirectory = isDirectory",
                          "successors": [
                            {
                              "id": 11,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Paths",
      "type": "class",
      "start_line": 469,
      "end_line": 560,
      "functions": [
        {
          "name": "next",
          "type": "function",
          "start_line": 491,
          "end_line": 559,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func next(): Option<Path> {\n        if (!this.initialized) {\n            this.initialized = true\n            if (!this.dirPatterns.isEmpty()) {\n                fillTodo(this.todo, this.dirPatterns, 0, this.scope, this.options)\n            }\n        }\n        while (true) {\n            if (this.dirPatterns.isEmpty() || this.todo.isEmpty()) {\n                return None\n            }\n\n            let t = this.todo.remove(this.todo.size - 1)\n            let path = t[0]\n            var idx = t[1]\n\n            if (idx == Int64.Max) {\n                if (this.requireDir && !path.isDirectory) {\n                    continue\n                }\n                return Some(path.path)\n            }\n\n            if (this.dirPatterns[idx].isRecursive) {\n                var next = idx\n                while (next + 1 < this.dirPatterns.size && this.dirPatterns[next + 1].isRecursive) {\n                    next++\n                }\n\n                if (path.isDirectory) {\n                    fillTodo(\n                        this.todo,\n                        this.dirPatterns,\n                        next,\n                        path,\n                        this.options\n                    )\n\n                    if (next == this.dirPatterns.size - 1) {\n                        return Some(path.path)\n                    } else {\n                        idx = next + 1\n                    }\n                } else if (next == this.dirPatterns.size - 1) {\n                    continue\n                } else {\n                    idx = next + 1\n                }\n            }\n\n            if (this.dirPatterns[idx].matchesWith(path.path.fileName, this.options)) {\n                if (idx == this.dirPatterns.size - 1) {\n                    if (!this.requireDir || path.isDirectory) {\n                        return Some(path.path)\n                    }\n                } else {\n                    fillTodo(\n                        this.todo,\n                        this.dirPatterns,\n                        idx + 1,\n                        path,\n                        this.options\n                    )\n                }\n            }\n        }\n\n        None\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func next(): Option<Path> {\n    if (!this.initialized) {\nthis.initialized = true\n        if (!this.dirPatterns.isEmpty()) {",
              "successors": [
                {
                  "id": 3,
                  "label": "fillTodo(this.todo, this.dirPatterns, 0, this.scope, this.options)\n}\n    }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "while (true) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (this.dirPatterns.isEmpty() || this.todo.isEmpty()) {\nreturn None",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "let t = this.todo.remove(this.todo.size - 1)\n            let path = t[0]\n            var idx = t[1]\n\n            if (idx == Int64.Max) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (this.requireDir && !path.isDirectory) {\ncontinue",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "while (true) { [...] end",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "return Some(path.path)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 12,
                          "label": "if (this.dirPatterns[idx].isRecursive) {",
                          "successors": [
                            {
                              "id": 13,
                              "label": "var next = idx\n                while (next + 1 < this.dirPatterns.size && this.dirPatterns[next + 1].isRecursive) {\nnext++",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "while (next + 1 < this.dirPatterns.size && this.dirPatterns[next + 1].isRecursive) { [...] end",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 15,
                              "label": "if (path.isDirectory) {",
                              "successors": [
                                {
                                  "id": 16,
                                  "label": "fillTodo(\n                    this.todo,\n                    this.dirPatterns,\n                    next,\n                    path,\n                    this.options\n                )\n\n                if (next == this.dirPatterns.size - 1) {\nreturn Some(path.path)",
                                  "successors": []
                                },
                                {
                                  "id": 18,
                                  "label": "idx = next + 1",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 19,
                              "label": "else if (next == this.dirPatterns.size - 1) {\ncontinue",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "while (true) { [...] end",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 21,
                              "label": "idx = next + 1",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 22,
                          "label": "if (this.dirPatterns[idx].matchesWith(path.path.fileName, this.options)) {",
                          "successors": [
                            {
                              "id": 23,
                              "label": "if (idx == this.dirPatterns.size - 1) {\nif (!this.requireDir || path.isDirectory) {",
                              "successors": [
                                {
                                  "id": 25,
                                  "label": "return Some(path.path)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 26,
                              "label": "fillTodo(\n                this.todo,\n                this.dirPatterns,\n                idx + 1,\n                path,\n                this.options\n            )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Paths <: Iterator<Path> {\n    let dirPatterns: Array<Pattern>\n    let requireDir: Bool\n    let options: MatchOptions\n    let todo: ArrayList<(PathWrapper, Int64)>\n    let scope: PathWrapper\n    var initialized: Bool = false\n\n    init(\n        dirPatterns: Array<Pattern>,\n        requireDir: Bool,\n        options: MatchOptions,\n        todo: ArrayList<(PathWrapper, Int64)>,\n        scope: PathWrapper\n    ) {\n        this.dirPatterns = dirPatterns\n        this.requireDir = requireDir\n        this.options = options\n        this.todo = todo\n        this.scope = scope\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Paths <: Iterator<Path> {",
          "successors": [
            {
              "id": 2,
              "label": "let dirPatterns: Array<Pattern>",
              "successors": []
            },
            {
              "id": 3,
              "label": "let requireDir: Bool",
              "successors": []
            },
            {
              "id": 4,
              "label": "let options: MatchOptions",
              "successors": []
            },
            {
              "id": 5,
              "label": "let todo: ArrayList<(PathWrapper, Int64)>",
              "successors": []
            },
            {
              "id": 6,
              "label": "let scope: PathWrapper",
              "successors": []
            },
            {
              "id": 7,
              "label": "var initialized: Bool = false",
              "successors": []
            },
            {
              "id": 8,
              "label": "init(",
              "successors": [
                {
                  "id": 9,
                  "label": "dirPatterns: Array<Pattern>,",
                  "successors": []
                },
                {
                  "id": 10,
                  "label": "requireDir: Bool,",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "options: MatchOptions,",
                  "successors": []
                },
                {
                  "id": 12,
                  "label": "todo: ArrayList<(PathWrapper, Int64)>,",
                  "successors": []
                },
                {
                  "id": 13,
                  "label": "scope: PathWrapper",
                  "successors": []
                }
              ]
            },
            {
              "id": 14,
              "label": ") {",
              "successors": [
                {
                  "id": 15,
                  "label": "this.dirPatterns = dirPatterns",
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "this.requireDir = requireDir",
                  "successors": []
                },
                {
                  "id": 17,
                  "label": "this.options = options",
                  "successors": []
                },
                {
                  "id": 18,
                  "label": "this.todo = todo",
                  "successors": []
                },
                {
                  "id": 19,
                  "label": "this.scope = scope",
                  "successors": []
                }
              ]
            },
            {
              "id": 20,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package glob\n\nimport std.regex.Regex\nimport std.collection.ArrayList\nimport std.fs.{Directory, Path, FileInfo, FSException}\nimport std.deriving.Derive\n\n// cjlint-ignore -start !G.OPR.01 !G.NAM.04 !G.ITF.04 macro\n@Derive[Equatable]\nenum CharSpecifier {\n    SingleChar(Rune)\n    | CharRange(Rune, Rune)\n}\n\n@Derive[Equatable]\nenum PatternToken {\n    Char(Rune)\n    | AnyChar\n    | AnySequence\n    | AnyRecursiveSequence\n    | AnyWithin(Array<CharSpecifier>)\n    | AnyExcept(Array<CharSpecifier>)\n}\n\npublic struct MatchOptions {\n    /**\n     * 是否以大小写敏感的方式匹配模式。\n     * 目前只考虑 ASCII 字符之间的大/小写关系，\n     * 但将来可能会扩展到适用于 Unicode。\n     */\n    public var caseSensitive: Bool = false\n\n    /**\n     * 是否要求路径分隔符字符（例如 Posix 上的 `/`）必须由字面量 `/` 匹配，\n     * 而不是由 `*` 或 `?` 或 `[...]` 匹配。\n     */\n    public var requireLiteralSeparator: Bool = false\n\n    /**\n     * 是否要求路径组件的开头是 `.` 字符，必须由字面量 `.` 匹配，\n     * 而不是由 `*` 或 `?` 或 `**` 或 `[...]` 匹配。\n     * 这对于 Unix 系统上被传统认为是隐藏的文件很有用，\n     * 可能希望在列出文件时跳过它们。\n     */\n    public var requireLiteralLeadingDot: Bool = false\n}\n\n@Derive[Equatable]\npublic enum MatchResult {\n    Match\n    | SubPatternDoesntMatch\n    | EntirePatternDoesntMatch\n}\n\n// cjlint-ignore -end macro\n\nconst ERROR_WILDCARDS = \"wildcards are either regular `*` or recursive `**`\";\nconst ERROR_RECURSIVE_WILDCARDS = \"recursive wildcards must form a single path component\";\nconst ERROR_INVALID_RANGE = \"invalid range pattern\";\n\n}\n\n}\n\n}\n\n}\n\n}\n\n// cjlint-ignore -start !G.FUN.01 fun\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\nextend String {\n    func split(checker: (Rune) -> Bool): Array<String> {\n        let chars = this.toRuneArray()\n        let ret = ArrayList<String>()\n        var start = 0\n        var i = 0\n\n        while (i < chars.size) {\n            if (checker(chars[i])) {\n                if (start < i) {\n                    ret.append(this[start..i])\n                }\n                start = i + 1\n            }\n            i++\n        }\n\n        if (start < i) {\n            ret.append(this[start..i])\n        }\n\n        return ret.toArray()\n    }\n}\n\n/** 返回一个迭代器，使用默认匹配选项生成与给定模式匹配的所有 Path。 \n * 这些路径可以是绝对路径，也可以是相对于当前工作目录的相对路径。\n *\n * 如果模式无效，则可能会引发 PatternException。\n */\n}\n\n/** 返回一个迭代器，使用给定的匹配选项生成与给定模式匹配的所有 Path。 \n * 这些路径可以是绝对路径，也可以是相对于当前工作目录的相对路径。\n * 此函数允许您指定匹配选项，例如大小写敏感性。\n *\n * 如果模式无效，则可能会引发 PatternException。\n */\n}\n\n// cjlint-ignore -end fun",
  "blocks": [
    {
      "id": 1,
      "label": "package glob\nimport std.regex.Regex\nimport std.collection.ArrayList\nimport std.fs.{Directory, Path, FileInfo, FSException}\nimport std.deriving.Derive",
      "successors": [
        {
          "id": 3,
          "label": "@Derive[Equatable]\nenum CharSpecifier {\n    SingleChar(Rune)\n    | CharRange(Rune, Rune)\n}\n@Derive[Equatable]\nenum PatternToken {\n    Char(Rune)\n    | AnyChar\n    | AnySequence\n    | AnyRecursiveSequence\n    | AnyWithin(Array<CharSpecifier>)\n    | AnyExcept(Array<CharSpecifier>)\n}\n\npublic struct MatchOptions {\n    /**\n     * 是否以大小写敏感的方式匹配模式。\n     * 目前只考虑 ASCII 字符之间的大/小写关系，\n     * 但将来可能会扩展到适用于 Unicode。\n     */\n    public var caseSensitive: Bool = false\n\n    /**\n     * 是否要求路径分隔符字符（例如 Posix 上的 `/`）必须由字面量 `/` 匹配，\n     * 而不是由 `*` 或 `?` 或 `[...]` 匹配。\n     */\n    public var requireLiteralSeparator: Bool = false\n\n    /**\n     * 是否要求路径组件的开头是 `.` 字符，必须由字面量 `.` 匹配，\n     * 而不是由 `*` 或 `?` 或 `**` 或 `[...]` 匹配。\n     * 这对于 Unix 系统上被传统认为是隐藏的文件很有用，\n     * 可能希望在列出文件时跳过它们。\n     */\n    public var requireLiteralLeadingDot: Bool = false\n}",
          "successors": [
            {
              "id": 5,
              "label": "@Derive[Equatable]\npublic enum MatchResult {\n    Match\n    | SubPatternDoesntMatch\n    | EntirePatternDoesntMatch\n}\nconst ERROR_WILDCARDS = \"wildcards are either regular `*` or recursive `**`\";\nconst ERROR_RECURSIVE_WILDCARDS = \"recursive wildcards must form a single path component\";\nconst ERROR_INVALID_RANGE = \"invalid range pattern\";",
              "successors": [
                {
                  "id": 7,
                  "label": "extend String {\n    func split(checker: (Rune) -> Bool): Array<String> {\n        let chars = this.toRuneArray()\n        let ret = ArrayList<String>()\n        var start = 0\n        var i = 0\n\n        while (i < chars.size) {\n            if (checker(chars[i])) {\n                if (start < i) {\n                    ret.append(this[start..i])\n                }\n                start = i + 1\n            }\n            i++\n        }\n\n        if (start < i) {\n            ret.append(this[start..i])\n        }\n\n        return ret.toArray()\n    }\n}\n\n/** 返回一个迭代器，使用默认匹配选项生成与给定模式匹配的所有 Path。 \n * 这些路径可以是绝对路径，也可以是相对于当前工作目录的相对路径。\n *\n * 如果模式无效，则可能会引发 PatternException。\n */\n\n/** 返回一个迭代器，使用给定的匹配选项生成与给定模式匹配的所有 Path。 \n * 这些路径可以是绝对路径，也可以是相对于当前工作目录的相对路径。\n * 此函数允许您指定匹配选项，例如大小写敏感性。\n *\n * 如果模式无效，则可能会引发 PatternException。\n */\n",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}