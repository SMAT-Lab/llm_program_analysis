{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 101,
  "functions": [
    {
      "name": "save_env_info",
      "type": "function",
      "start_line": 59,
      "end_line": 80,
      "functions": [],
      "classes": [],
      "simplified_code": "public func save_env_info(): Unit {\n  // 该函数用于测试EnvInfo类的序列化为json的能力，顺便生成一个env_sample.json样本做为参考\n  let env_path = Path(\"env_sample.json\");\n  if (File.exists(env_path)) {\n    File.delete(env_path);\n  }\n  let file = File.create(env_path);\n  let env_info = EnvInfo(\n    \"xxxx\",\n    \"sk-xxxxxx\",\n    \"http://xxx.xxx.xxx/v1/chat/completions\",\n    \"You are a helpful assistant.\"\n  );\n  var byte_stream = ByteArrayStream();\n  var json_writer = JsonWriter(byte_stream);\n  let write_config = WriteConfig.pretty;\n  json_writer.writeConfig = write_config;\n  env_info.toJson(json_writer);\n  file.write(byte_stream.readToEnd());\n  println(\"`env_sample.json` save ok\")\n  file.close();\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func save_env_info(): Unit {\nlet env_path = Path(\"env_sample.json\");",
          "successors": [
            {
              "id": 3,
              "label": "if (File.exists(env_path)) {\nFile.delete(env_path);",
              "successors": []
            },
            {
              "id": 5,
              "label": "let file = File.create(env_path);\nlet env_info = EnvInfo(\"xxxx\", \"sk-xxxxxx\", \"http://xxx.xxx.xxx/v1/chat/completions\", \"You are a helpful assistant.\");",
              "successors": [
                {
                  "id": 7,
                  "label": "var byte_stream = ByteArrayStream();\nvar json_writer = JsonWriter(byte_stream);",
                  "successors": [
                    {
                      "id": 9,
                      "label": "let write_config = WriteConfig.pretty;\njson_writer.writeConfig = write_config;",
                      "successors": [
                        {
                          "id": 11,
                          "label": "env_info.toJson(json_writer);\nfile.write(byte_stream.readToEnd());",
                          "successors": [
                            {
                              "id": 13,
                              "label": "println(\"`env_sample.json` save ok\")\nfile.close();",
                              "successors": [
                                {
                                  "id": 15,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "load_env_info",
      "type": "function",
      "start_line": 83,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": "public func load_env_info(): EnvInfo {\n  // 用于加载配置文件\n  let env_path = Path(\"env.json\");\n  if (!File.exists(env_path)) {\n    throw Exception(\"`.env` file not exists, please check again\");\n  }\n  let file = File.openRead(env_path);\n  let file_str: Array<UInt8> = file.readToEnd();\n  var byte_stream = ByteArrayStream();\n  byte_stream.write(file_str);\n  let json_reader = JsonReader(byte_stream);\n  let env_info: EnvInfo = EnvInfo.fromJson(json_reader);\n  file.close();\n  // println(\"model: ${env_info.model}\");\n  // println(\"api_key: ${env_info.api_key}\");\n  // println(\"base_url: ${env_info.base_url}\");\n  // println(\"system_prompt: ${env_info.system_prompt}\");\n  return env_info;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func load_env_info(): EnvInfo {\nlet env_path = Path(\"env.json\");",
          "successors": [
            {
              "id": 3,
              "label": "if (!File.exists(env_path)) {\nthrow Exception(\"`.env` file not exists, please check again\");",
              "successors": []
            },
            {
              "id": 5,
              "label": "let file = File.openRead(env_path);\nlet file_str: Array<UInt8> = file.readToEnd();",
              "successors": [
                {
                  "id": 7,
                  "label": "var byte_stream = ByteArrayStream();\nbyte_stream.write(file_str);",
                  "successors": [
                    {
                      "id": 9,
                      "label": "let json_reader = JsonReader(byte_stream);\nlet env_info: EnvInfo = EnvInfo.fromJson(json_reader);",
                      "successors": [
                        {
                          "id": 11,
                          "label": "file.close();\nreturn env_info;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "EnvInfo",
      "type": "class",
      "start_line": 7,
      "end_line": 56,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 13,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(model: String, api_key: String, base_url: String, system_prompt: String) {\n    this.model = model;\n    this.api_key = api_key;\n    this.base_url = base_url;\n    this.system_prompt = system_prompt\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(model: String, api_key: String, base_url: String, system_prompt: String) {\n    this.model = model;",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.api_key = api_key;\n    this.base_url = base_url;",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    this.system_prompt = system_prompt",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 20,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): EnvInfo {\n    var temp_model: String = \"\";\n    var temp_api_key: String = \"sk-xxx\";\n    var temp_base_url: String = \"http://xxx.xxx.xxx/v1\";\n    var temp_system_prompt: String = \"You are a helpful assistant.\";\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject()\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n                case \"model\" => temp_model = r.readValue<String>()\n                case \"api_key\" => temp_api_key = r.readValue<String>()\n                case \"base_url\" => temp_base_url = r.readValue<String>()\n                case \"system_prompt\" => temp_system_prompt = r.readValue<String>()\n                case _ => ()\n            }\n          }\n          r.endObject()\n          break\n        case _ => throw Exception()\n      }\n    }\n    return EnvInfo(temp_model, temp_api_key, temp_base_url, temp_system_prompt);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): EnvInfo {\nvar temp_model: String = \"\";\nvar temp_api_key: String = \"sk-xxx\";\nvar temp_base_url: String = \"http://xxx.xxx.xxx/v1\";\nvar temp_system_prompt: String = \"You are a helpful assistant.\";",
              "successors": [
                {
                  "id": 3,
                  "label": "while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "match(v) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case BeginObject =>\nr.startObject()",
                          "successors": [
                            {
                              "id": 7,
                              "label": "while(r.peek() != EndObject) {\nlet n = r.readName()",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "match (n) {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "case \"model\" => temp_model = r.readValue<String>()\nwhile(r.peek() != EndObject) {",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "label": "case \"api_key\" => temp_api_key = r.readValue<String>()\nwhile(r.peek() != EndObject) {",
                                      "successors": []
                                    },
                                    {
                                      "id": 12,
                                      "label": "case \"base_url\" => temp_base_url = r.readValue<String>()\nwhile(r.peek() != EndObject) {",
                                      "successors": []
                                    },
                                    {
                                      "id": 13,
                                      "label": "case \"system_prompt\" => temp_system_prompt = r.readValue<String>()\nwhile(r.peek() != EndObject) {",
                                      "successors": []
                                    },
                                    {
                                      "id": 14,
                                      "label": "case _ => ()\nwhile(r.peek() != EndObject) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 15,
                              "label": "r.endObject()\nbreak\nreturn EnvInfo(temp_model, temp_api_key, temp_base_url, temp_system_prompt);",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 17,
                          "label": "case _ => throw Exception()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 47,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter): Unit {\n      w.startObject();\n      w.writeName(\"model\").writeValue(this.model);\n      w.writeName(\"api_key\").writeValue(this.api_key);\n      w.writeName(\"base_url\").writeValue(this.base_url);\n      w.writeName(\"system_prompt\").writeValue(this.system_prompt);\n      w.endObject();\n      w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter): Unit {\nw.startObject();",
              "successors": [
                {
                  "id": 3,
                  "label": "w.writeName(\"model\").writeValue(this.model);\nw.writeName(\"api_key\").writeValue(this.api_key);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "w.writeName(\"base_url\").writeValue(this.base_url);\nw.writeName(\"system_prompt\").writeValue(this.system_prompt);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "w.endObject();\nw.flush();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class EnvInfo <: JsonDeserializable<EnvInfo> & JsonSerializable {\n  public let model: String;          // 模型名称\n  public let api_key: String;        // api密钥\n  public let base_url: String;       // 调用接口路径\n  public let system_prompt: String;  // 预置系统提示词\n\n  }\n  \n  }\n  \n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class EnvInfo <: JsonDeserializable<EnvInfo> & JsonSerializable {",
          "successors": [
            {
              "id": 2,
              "label": "public let model: String;",
              "successors": []
            },
            {
              "id": 3,
              "label": "public let api_key: String;",
              "successors": []
            },
            {
              "id": 4,
              "label": "public let base_url: String;",
              "successors": []
            },
            {
              "id": 5,
              "label": "public let system_prompt: String;",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package openai_chat\nimport encoding.json.stream.*\nimport std.fs.File\nimport std.fs.Path\nimport std.io.ByteArrayStream\n\n}\n\n\n}\n\n\n}",
  "blocks": []
}