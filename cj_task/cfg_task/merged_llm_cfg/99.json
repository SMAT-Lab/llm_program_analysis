{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 582,
  "functions": [
    {
      "name": "role_type_to_str",
      "type": "function",
      "start_line": 57,
      "end_line": 65,
      "functions": [],
      "classes": [],
      "simplified_code": "public func role_type_to_str(role: RoleType): Option<String> {\n  return match(role) {\n    case RoleType.User => Some(\"user\")\n    case RoleType.Assistant => Some(\"assistant\")\n    case RoleType.System => Some(\"system\")\n    case RoleType.Function => Some(\"function\")\n    case RoleType.NULL => None\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "return match(role) {",
          "successors": [
            {
              "id": 2,
              "label": "case RoleType.User => Some(\"user\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "case RoleType.Assistant => Some(\"assistant\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "case RoleType.System => Some(\"system\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "case RoleType.Function => Some(\"function\")",
              "successors": []
            },
            {
              "id": 6,
              "label": "case RoleType.NULL => None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "str_to_role_type",
      "type": "function",
      "start_line": 67,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": "public func str_to_role_type(role_option_str: Option<String>): RoleType {\n  return match(role_option_str) {\n    case Some(role_option) => \n      match (role_option) {\n        case \"user\" => RoleType.User\n        case \"assistant\" => RoleType.Assistant\n        case \"system\" => RoleType.System\n        case \"function\" => RoleType.Function\n        case x => throw Exception(\"unknow enum ${x} for RoleType\");\n      }\n    case None => RoleType.NULL\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func str_to_role_type(role_option_str: Option<String>): RoleType {\nreturn match(role_option_str) {",
          "successors": [
            {
              "id": 3,
              "label": "case Some(role_option) =>\nmatch (role_option) {",
              "successors": [
                {
                  "id": 5,
                  "label": "case \"user\" => RoleType.User",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "case \"assistant\" => RoleType.Assistant",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "case \"system\" => RoleType.System",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "case \"function\" => RoleType.Function",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "case x => throw Exception(\"unknow enum ${x} for RoleType\");",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "label": "case None => RoleType.NULL",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_domain",
      "type": "function",
      "start_line": 413,
      "end_line": 424,
      "functions": [],
      "classes": [],
      "simplified_code": "public func get_domain(\n  url: String\n): String {\n  var temp_url = url;\n  if (temp_url.startsWith(\"https://\")) {\n    temp_url = temp_url[\"https://\".size..];\n  } else if (temp_url.startsWith(\"http://\")) {\n    temp_url = temp_url[\"http://\".size..];\n  }\n  let domain: String = temp_url.split(\"?\")[0].split(\"/\")[0];\n  return domain;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func get_domain( url: String ): String {\nvar temp_url = url;",
          "successors": [
            {
              "id": 3,
              "label": "if (temp_url.startsWith(\"https://\")) {",
              "successors": [
                {
                  "id": 4,
                  "label": "temp_url = temp_url[\"https://\".size..];",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "else if (temp_url.startsWith(\"http://\")) {\ntemp_url = temp_url[\"http://\".size..];",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "label": "let domain: String = temp_url.split(\"?\")[0].split(\"/\")[0];\nreturn domain;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "build_http_client",
      "type": "function",
      "start_line": 426,
      "end_line": 468,
      "functions": [],
      "classes": [],
      "simplified_code": "public func build_http_client(\n  prompt: String,\n  env_info: EnvInfo,\n  history: ArrayList<(String, String)>,\n  stream!: Bool\n){\n  // prepare input data\n  var array_stream = ByteArrayStream();\n  let json_writer = JsonWriter(array_stream);\n  let chat_res = ChatRequest(\n    env_info.model,\n    prompt,\n    history,\n    env_info.system_prompt,\n    stream\n  )\n  chat_res.toJson(json_writer);\n  let post_data: Array<UInt8> = array_stream.readToEnd();\n  var headers: HttpHeaders = HttpHeaders();\n  headers.add(\"Authorization\", \"Bearer ${env_info.api_key}\");\n  headers.add(\"Content-Type\", \"application/json\");\n  if (stream) {\n    headers.add(\"Accept\", \"text/event-stream\");\n  }\n  let request = HttpRequestBuilder()\n    .url(env_info.base_url)\n    .method(\"POST\")\n    .body(post_data)\n    .readTimeout(Duration.second * 120)\n    .addHeaders(headers)\n    .build();\n  let client = if (env_info.base_url.startsWith(\"https\")) {\n    var tls_client_config = TlsClientConfig();\n    tls_client_config.verifyMode = CertificateVerifyMode.TrustAll;\n    tls_client_config.domain = get_domain(env_info.base_url);\n    ClientBuilder()\n      .tlsConfig(tls_client_config)\n      .build();\n  } else {\n    ClientBuilder().build();\n  }\n  return (request, client);\n}",
      "blocks": [
        {
          "id": 1,
          "label": "var array_stream = ByteArrayStream();\nlet json_writer = JsonWriter(array_stream);\nlet chat_res = ChatRequest(\n  env_info.model,\n  prompt,\n  history,\n  env_info.system_prompt,\n  stream\n)\nchat_res.toJson(json_writer);\nlet post_data: Array<UInt8> = array_stream.readToEnd();\nvar headers: HttpHeaders = HttpHeaders();\nheaders.add(\"Authorization\", \"Bearer ${env_info.api_key}\");\nheaders.add(\"Content-Type\", \"application/json\");\nif (stream) {\n  headers.add(\"Accept\", \"text/event-stream\");\n}",
          "successors": [
            {
              "id": 3,
              "label": "let request = HttpRequestBuilder()\n  .url(env_info.base_url)\n  .method(\"POST\")\n  .body(post_data)\n  .readTimeout(Duration.second * 120)\n  .addHeaders(headers)\n  .build();\nlet client = if (env_info.base_url.startsWith(\"https\")) {\n  var tls_client_config = TlsClientConfig();\n  tls_client_config.verifyMode = CertificateVerifyMode.TrustAll;\n  tls_client_config.domain = get_domain(env_info.base_url);\n  ClientBuilder()\n    .tlsConfig(tls_client_config)\n    .build();\n} else {\n  ClientBuilder().build();\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "return (request, client);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "chat",
      "type": "function",
      "start_line": 470,
      "end_line": 512,
      "functions": [],
      "classes": [],
      "simplified_code": "public func chat(\n  prompt: String,\n  env_info: EnvInfo,\n  history: ArrayList<(String, String)>\n): Option<String> {\n  let (request, client) = build_http_client(\n    prompt,\n    env_info,\n    history,\n    stream: false\n  ); \n  var result_message: Option<String> = None;\n  var res_text = \"\";\n  try {\n    // call api\n    let response = client.send(\n      request\n    );\n    // read result (support max revice 100k data)\n    let buffer = Array<Byte>(102400, item: 0);\n    let length = response.body.read(buffer);\n    res_text = String.fromUtf8(buffer[..length]);\n    // println(\"res_text: ${res_text}\");\n    var input_stream = ByteArrayStream();\n    input_stream.write(res_text.toArray());\n    // convert text to ChatResponse object\n    let json_reader = JsonReader(input_stream);\n    let res_object = ChatResponse.fromJson(json_reader);\n    let choices: ArrayList<Choice> = res_object.choices;\n    if (choices.size > 0) {\n      let message = choices[0].message.getOrThrow();\n      // println(\"message: ${message.content}\")\n      result_message = Some(message.content);\n      \n    } else {\n      println(\"can't found any response\");\n    }\n  } catch (e: Exception) {\n    println(\"ERROR: ${e.message}, reviced text is ${res_text}\");\n  }\n  client.close();\n  return result_message;\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func chat( prompt: String, env_info: EnvInfo, history: ArrayList<(String, String)> ): Option<String> {\n  let (request, client) = build_http_client( prompt, env_info, history, stream: false );",
          "successors": [
            {
              "id": 3,
              "label": "  var result_message: Option<String> = None;\n  var res_text = \"\";",
              "successors": [
                {
                  "id": 5,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    let response = client.send( request );\n    let buffer = Array<Byte>(102400, item: 0);",
                      "successors": [
                        {
                          "id": 8,
                          "label": "    let length = response.body.read(buffer);\n    res_text = String.fromUtf8(buffer[..length]);",
                          "successors": [
                            {
                              "id": 10,
                              "label": "    var input_stream = ByteArrayStream();\n    input_stream.write(res_text.toArray());",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "    let json_reader = JsonReader(input_stream);\n    let res_object = ChatResponse.fromJson(json_reader);",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "    let choices: ArrayList<Choice> = res_object.choices;\nif (choices.size > 0) {",
                                      "successors": [
                                        {
                                          "id": 16,
                                          "label": "      let message = choices[0].message.getOrThrow();\n      result_message = Some(message.content);",
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "client.close();\nreturn result_message;",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 18,
                                          "label": "} else {\n      println(\"can't found any response\");",
                                          "successors": [
                                            {
                                              "id": 20,
                                              "label": "client.close();\nreturn result_message;",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 22,
                      "label": "} catch (e: Exception) {\n  println(\"ERROR: ${e.message}, reviced text is ${res_text}\");",
                      "successors": [
                        {
                          "id": 20,
                          "label": "client.close();\nreturn result_message;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "stream_chat",
      "type": "function",
      "start_line": 515,
      "end_line": 582,
      "functions": [],
      "classes": [],
      "simplified_code": "public func stream_chat(\n  prompt: String,\n  env_info: EnvInfo,\n  history: ArrayList<(String, String)>\n): Option<String> {\n  let (request, client) = build_http_client(\n    prompt,\n    env_info,\n    history,\n    stream: true\n  ); \n  var result_response: String = \"\";\n  var temp_text2 = \"\";\n  try {\n    // call api\n    let response = client.send(\n      request\n    );\n    // read result\n    let buffer = Array<Byte>(10240, item: 0);\n    var finish_reason: Option<String> = None;\n    while(finish_reason.isNone() && temp_text2 != \"[DONE]\") {\n      let length = response.body.read(buffer);\n      let res_text = String.fromUtf8(buffer[..length]);\n\n      for (temp_text in res_text.split(\"\\n\")) {\n        temp_text2 =  if (temp_text.startsWith(\"data: \")) {\n          temp_text[\"data: \".size..];\n        } else {\n          temp_text\n        };\n        if (temp_text2.size == 0) {\n          continue;\n        }\n        if (temp_text2 == \"[DONE]\") {\n          break;\n        }\n        // println(\"========================\");\n        // println(\"temp_text: ${temp_text2}\");\n        // println(\"========================\");\n        var input_stream = ByteArrayStream();\n        input_stream.write(temp_text2.toArray());\n        // convert text to ChatResponse object\n        let json_reader = JsonReader(input_stream);\n        let res_object = ChatResponse.fromJson(json_reader);\n        let choices: ArrayList<Choice> = res_object.choices;\n        if (choices.size > 0) {\n          finish_reason = choices[0].finish_reason;\n          if (finish_reason.isNone()) {\n            let delta = choices[0].delta.getOrThrow();\n            print(\"${delta.content}\", flush: true);\n            result_response += delta.content; \n          }\n        } else {\n          println(\"can't found any response\");\n        }\n      }\n    }\n  } catch (e: Exception) {\n    println(\"ERROR: ${e.message}, reviced text is ${temp_text2}\");\n  }\n  client.close();\n  if (result_response.size > 0) {\n    return Some(result_response);\n  } else {\n    return None;\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let (request, client) = build_http_client(\n  prompt,\n  env_info,\n  history,\n  stream: true\n);\nvar result_response: String = \"\";\nvar temp_text2 = \"\";",
          "successors": [
            {
              "id": 3,
              "label": "try {",
              "successors": [
                {
                  "id": 4,
                  "label": "let response = client.send(\n  request\n);\nlet buffer = Array<Byte>(10240, item: 0);\nvar finish_reason: Option<String> = None;",
                  "successors": [
                    {
                      "id": 6,
                      "label": "while(finish_reason.isNone() && temp_text2 != \"[DONE]\") {\nlet length = response.body.read(buffer);\nlet res_text = String.fromUtf8(buffer[..length]);",
                      "successors": [
                        {
                          "id": 8,
                          "label": "for (temp_text in res_text.split(\"\\n\")) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "temp_text2 =  if (temp_text.startsWith(\"data: \")) {\n  temp_text[\"data: \".size..];\n} else {\n  temp_text\n};",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "if (temp_text2.size == 0) {\ncontinue;",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "continue with for-loop",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 12,
                                  "label": "if (temp_text2 == \"[DONE]\") {\nbreak;",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "break from while-loop",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "label": "var input_stream = ByteArrayStream();\ninput_stream.write(temp_text2.toArray());\nlet json_reader = JsonReader(input_stream);\nlet res_object = ChatResponse.fromJson(json_reader);\nlet choices: ArrayList<Choice> = res_object.choices;",
                                  "successors": [
                                    {
                                      "id": 16,
                                      "label": "if (choices.size > 0) {",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "finish_reason = choices[0].finish_reason;\nif (finish_reason.isNone()) {",
                                          "successors": [
                                            {
                                              "id": 19,
                                              "label": "let delta = choices[0].delta.getOrThrow();\nprint(\"${delta.content}\", flush: true);\nresult_response += delta.content;\ncontinue with for-loop",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 20,
                                          "label": "else {\n  println(\"can't found any response\");\n}\ncontinue with for-loop",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 21,
                  "label": "} catch (e: Exception) {\nprintln(\"ERROR: ${e.message}, reviced text is ${temp_text2}\");",
                  "successors": []
                }
              ]
            },
            {
              "id": 23,
              "label": "client.close();\nif (result_response.size > 0) {",
              "successors": [
                {
                  "id": 25,
                  "label": "return Some(result_response);",
                  "successors": []
                },
                {
                  "id": 26,
                  "label": "else {\n  return None;\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "FunctionCall",
      "type": "class",
      "start_line": 12,
      "end_line": 51,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 16,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(name: String, arguments: String) {\n    this.name = name;\n    this.arguments = arguments;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(name: String, arguments: String) {\n    this.name = name;",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.arguments = arguments;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 21,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): FunctionCall {\n    var temp_name: String = \"\";\n    var temp_arguments: String = \"\";\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"name\" => temp_name = r.readValue<String>();\n                  case \"arguments\" => temp_arguments = r.readValue<String>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for FunctionCall\");\n      }\n    }\n    return FunctionCall(temp_name, temp_arguments);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): FunctionCall {\n    var temp_name: String = \"\";\n    var temp_arguments: String = \"\";\n    while (let Some(v) <- r.peek()) {",
              "successors": [
                {
                  "id": 2,
                  "label": "match(v) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\nlet n = r.readName()\n              match (n) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case \"name\" => temp_name = r.readValue<String>();\ncase \"arguments\" => temp_arguments = r.readValue<String>();",
                          "successors": [
                            {
                              "id": 9,
                              "label": "case unkow => println(\"unkow key ${unkow}\");\n}",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "r.endObject();\n          break;",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "case _ => throw Exception(\"can't deserialize for FunctionCall\");",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "}\n    return FunctionCall(temp_name, temp_arguments);\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 44,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"name\").writeValue<String>(this.name);\n    w.writeName(\"arguments\").writeValue<String>(this.arguments);\n    w.endObject();\n    w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter) {\nw.startObject();",
              "successors": [
                {
                  "id": 3,
                  "label": "w.writeName(\"name\").writeValue<String>(this.name);\nw.writeName(\"arguments\").writeValue<String>(this.arguments);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "w.endObject();\nw.flush();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "public struct FunctionCall <: JsonDeserializable<FunctionCall> & JsonSerializable {\n  public let name: String;\n  public let arguments: String;\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct FunctionCall <: JsonDeserializable<FunctionCall> & JsonSerializable {\n  public let name: String;",
          "successors": [
            {
              "id": 3,
              "label": "  public let arguments: String;\n}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "RoleType",
      "type": "class",
      "start_line": 53,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": "public enum RoleType {\n  User | Assistant | System | Function | NULL\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public enum RoleType {\nUser | Assistant | System | Function | NULL",
          "successors": []
        }
      ]
    },
    {
      "name": "Message",
      "type": "class",
      "start_line": 82,
      "end_line": 132,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 87,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(role: RoleType, content: String) {\n    this.role = role;\n    this.content = content;\n    this.function_call = None;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(role: RoleType, content: String) {\nthis.role = role;",
              "successors": [
                {
                  "id": 3,
                  "label": "this.content = content;\nthis.function_call = None;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 93,
          "end_line": 97,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(role: RoleType, content: String, function_call: Option<FunctionCall>) {\n    this.role = role;\n    this.content = content;\n    this.function_call = function_call;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(role: RoleType, content: String, function_call: Option<FunctionCall>) {\n    this.role = role;\n    this.content = content;\n    this.function_call = function_call;",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 99,
          "end_line": 123,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): Message {\n    var temp_role: Option<String> = None; // role may null in stream chat\n    var temp_content: String = \"\";\n    var temp_functional_call: Option<FunctionCall> = None;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"role\" => temp_role = r.readValue<Option<String>>();\n                  case \"content\" => temp_content = r.readValue<String>();\n                  case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for Message\");\n      }\n    }\n    let role_type: RoleType = str_to_role_type(temp_role);\n    return Message(role_type, temp_content);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): Message {\nvar temp_role: Option<String> = None; // role may null in stream chat",
              "successors": [
                {
                  "id": 3,
                  "label": "var temp_content: String = \"\";\nvar temp_functional_call: Option<FunctionCall> = None;",
                  "successors": [
                    {
                      "id": 5,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "case BeginObject =>\nr.startObject();",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "while(r.peek() != EndObject) {\nlet n = r.readName()",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "match (n) {",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "case \"role\" => temp_role = r.readValue<Option<String>>();\n}",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "while(r.peek() != EndObject) {",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 13,
                                          "label": "case \"content\" => temp_content = r.readValue<String>();\n}",
                                          "successors": []
                                        },
                                        {
                                          "id": 14,
                                          "label": "case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();\n}",
                                          "successors": []
                                        },
                                        {
                                          "id": 15,
                                          "label": "case unkow => println(\"unkow key ${unkow}\");\n}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 17,
                                  "label": "r.endObject();\nbreak;",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "case _ => throw Exception(\"can't deserialize for Message\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 19,
                      "label": "let role_type: RoleType = str_to_role_type(temp_role);\nreturn Message(role_type, temp_content);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 125,
          "end_line": 131,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"role\").writeValue<Option<String>>(role_type_to_str(this.role));\n    w.writeName(\"content\").writeValue<String>(this.content);\n    w.endObject();\n    w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "w.startObject();\nw.writeName(\"role\").writeValue<Option<String>>(role_type_to_str(this.role));",
              "successors": [
                {
                  "id": 3,
                  "label": "w.writeName(\"content\").writeValue<String>(this.content);\nw.endObject();",
                  "successors": [
                    {
                      "id": 5,
                      "label": "w.flush();",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "public struct Message<: JsonDeserializable<Message> & JsonSerializable {\n  public let role: RoleType;\n  public var content: String;\n  public let function_call: Option<FunctionCall>;\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct Message<: JsonDeserializable<Message> & JsonSerializable {",
          "successors": [
            {
              "id": 2,
              "label": "public let role: RoleType;",
              "successors": []
            },
            {
              "id": 3,
              "label": "public var content: String;",
              "successors": []
            },
            {
              "id": 4,
              "label": "public let function_call: Option<FunctionCall>;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ChatRequest",
      "type": "class",
      "start_line": 134,
      "end_line": 226,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 143,
          "end_line": 160,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    model: String,\n    messages: ArrayList<Message>,\n    max_tokens: Int64,\n    temperature: Float64,\n    top_p: Float64,\n    n: Int32,\n    stream: Bool\n  ) {\n    // construction function with messages\n    this.model = model;\n    this.messages = messages;\n    this.max_tokens = max_tokens;\n    this.temperature = temperature;\n    this.top_p = top_p;\n    this.n = n;\n    this.stream = stream;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\n  model: String,\n  messages: ArrayList<Message>,\n  max_tokens: Int64,\n  temperature: Float64,\n  top_p: Float64,\n  n: Int32,\n  stream: Bool\n) {\n    this.model = model;",
              "successors": [
                {
                  "id": 3,
                  "label": "    this.messages = messages;\n    this.max_tokens = max_tokens;",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    this.temperature = temperature;\n    this.top_p = top_p;",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    this.n = n;\n    this.stream = stream;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 162,
          "end_line": 188,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    model: String,\n    prompt: String,\n    history: ArrayList<(String, String)>,\n    system_prompt: String,\n    max_tokens: Int64,\n    temperature: Float64,\n    top_p: Float64,\n    n: Int32,\n    stream: Bool\n  ){\n    // construction function with prompt and system_prompt\n    this.model = model;\n    this.messages = ArrayList<Message>([\n      Message(RoleType.System, system_prompt)\n    ]);\n    for ((use_msg, bot_msg) in history) {\n      this.messages.append(Message(RoleType.User, use_msg));\n      this.messages.append(Message(RoleType.Assistant, bot_msg));\n    }\n    this.messages.append(Message(RoleType.User, prompt));\n    this.max_tokens = max_tokens;\n    this.temperature = temperature;\n    this.top_p = top_p;\n    this.n = n;\n    this.stream = stream;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\nmodel: String,\nprompt: String,\nhistory: ArrayList<(String, String)>,\nsystem_prompt: String,\nmax_tokens: Int64,\ntemperature: Float64,\ntop_p: Float64,\nn: Int32,\nstream: Bool\n){",
              "successors": [
                {
                  "id": 3,
                  "label": "// construction function with prompt and system_prompt\nthis.model = model;\nthis.messages = ArrayList<Message>([\n  Message(RoleType.System, system_prompt)\n]);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "for ((use_msg, bot_msg) in history) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "this.messages.append(Message(RoleType.User, use_msg));\nthis.messages.append(Message(RoleType.Assistant, bot_msg));\nthis.messages.append(Message(RoleType.User, prompt));\nthis.max_tokens = max_tokens;\nthis.temperature = temperature;\nthis.top_p = top_p;\nthis.n = n;\nthis.stream = stream;\n}",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "this.messages.append(Message(RoleType.User, prompt));\nthis.max_tokens = max_tokens;\nthis.temperature = temperature;\nthis.top_p = top_p;\nthis.n = n;\nthis.stream = stream;\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 190,
          "end_line": 212,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    model: String,\n    prompt: String,\n    history: ArrayList<(String, String)>,\n    system_prompt: String,\n    stream: Bool\n  ){\n    // construction function with prompt and default arguments\n    this.model = model;\n    this.messages = ArrayList<Message>([\n      Message(RoleType.System, system_prompt)\n    ]);\n    for ((use_msg, bot_msg) in history) {\n      this.messages.append(Message(RoleType.User, use_msg));\n      this.messages.append(Message(RoleType.Assistant, bot_msg));\n    }\n    this.messages.append(Message(RoleType.User, prompt));\n    this.max_tokens = 2000;\n    this.temperature = 0.7;\n    this.top_p = 1.0;\n    this.n = 1;\n    this.stream = stream;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\nthis.model = model;",
              "successors": [
                {
                  "id": 3,
                  "label": "this.messages = ArrayList<Message>([Message(RoleType.System, system_prompt)]);",
                  "successors": [
                    {
                      "id": 4,
                      "label": "for ((use_msg, bot_msg) in history) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "this.messages.append(Message(RoleType.User, use_msg));\nthis.messages.append(Message(RoleType.Assistant, bot_msg));",
                          "successors": [
                            {
                              "id": 7,
                              "label": "}\nthis.messages.append(Message(RoleType.User, prompt));",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "this.max_tokens = 2000;\nthis.temperature = 0.7;",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "this.top_p = 1.0;\nthis.n = 1;",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "this.stream = stream;",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 214,
          "end_line": 225,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"model\").writeValue<String>(this.model);\n    w.writeName(\"messages\").writeValue<ArrayList<Message>>(this.messages);\n    w.writeName(\"max_tokens\").writeValue<Int64>(this.max_tokens);\n    w.writeName(\"temperature\").writeValue<Float64>(this.temperature);\n    w.writeName(\"top_p\").writeValue<Float64>(this.top_p);\n    w.writeName(\"n\").writeValue<Int32>(this.n);\n    w.writeName(\"stream\").writeValue<Bool>(this.stream);\n    w.endObject();\n    w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter) {\nw.startObject();",
              "successors": [
                {
                  "id": 3,
                  "label": "w.writeName(\"model\").writeValue<String>(this.model);\nw.writeName(\"messages\").writeValue<ArrayList<Message>>(this.messages);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "w.writeName(\"max_tokens\").writeValue<Int64>(this.max_tokens);\nw.writeName(\"temperature\").writeValue<Float64>(this.temperature);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "w.writeName(\"top_p\").writeValue<Float64>(this.top_p);\nw.writeName(\"n\").writeValue<Int32>(this.n);",
                          "successors": [
                            {
                              "id": 9,
                              "label": "w.writeName(\"stream\").writeValue<Bool>(this.stream);\nw.endObject();",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "w.flush();",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "public struct ChatRequest <: JsonSerializable {\n  private let model: String;\n  private let messages: ArrayList<Message>;\n  private let max_tokens: Int64;\n  private let temperature: Float64;\n  private let top_p: Float64;\n  private let n: Int32;\n  private let stream: Bool;\n\n  }\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct ChatRequest <: JsonSerializable {\nprivate let model: String;",
          "successors": [
            {
              "id": 3,
              "label": "private let messages: ArrayList<Message>;\nprivate let max_tokens: Int64;",
              "successors": [
                {
                  "id": 5,
                  "label": "private let temperature: Float64;\nprivate let top_p: Float64;",
                  "successors": [
                    {
                      "id": 7,
                      "label": "private let n: Int32;\nprivate let stream: Bool;",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Choice",
      "type": "class",
      "start_line": 229,
      "end_line": 289,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 236,
          "end_line": 248,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    index: Int32,\n    message: Option<Message>,\n    delta: Option<Message>,\n    finish_reason: Option<String>,\n    logprobs: Option<Float64>\n  ) {\n    this.index = index;\n    this.message = message;\n    this.delta = delta;\n    this.finish_reason = finish_reason;\n    this.logprobs = logprobs\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\nindex: Int32,",
              "successors": [
                {
                  "id": 3,
                  "label": "message: Option<Message>,\ndelta: Option<Message>,",
                  "successors": [
                    {
                      "id": 5,
                      "label": "finish_reason: Option<String>,\nlogprobs: Option<Float64>",
                      "successors": [
                        {
                          "id": 7,
                          "label": ") {\nthis.index = index;",
                          "successors": [
                            {
                              "id": 9,
                              "label": "this.message = message;\nthis.delta = delta;",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "this.finish_reason = finish_reason;\nthis.logprobs = logprobs",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 250,
          "end_line": 277,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): Choice {\n    var temp_index: Int32 = -1;\n    var temp_message: Option<Message> = None;\n    var temp_delta: Option<Message> = None;\n    var temp_finish_reason: Option<String> = None;\n    var temp_logprobs: Option<Float64> = None;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"index\" => temp_index = r.readValue<Int32>();\n                  case \"message\" => temp_message = r.readValue<Option<Message>>();\n                  case \"delta\" => temp_delta = r.readValue<Option<Message>>();\n                  case \"finish_reason\" => temp_finish_reason = r.readValue<Option<String>>();\n                  case \"logprobs\" => temp_logprobs = r.readValue<Option<Float64>>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break\n        case _ => throw Exception(\"can't deserialize for Choice\");\n      }\n    }\n    return Choice(temp_index, temp_message, temp_delta, temp_finish_reason, temp_logprobs);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): Choice {",
              "successors": [
                {
                  "id": 2,
                  "label": "var temp_index: Int32 = -1; var temp_message: Option<Message> = None; var temp_delta: Option<Message> = None; var temp_finish_reason: Option<String> = None; var temp_logprobs: Option<Float64> = None;",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while (let Some(v) <- r.peek()) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "match(v) {",
                          "successors": [
                            {
                              "id": 5,
                              "label": "case BeginObject =>\nr.startObject();",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "while(r.peek() != EndObject) {\nlet n = r.readName()",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "match (n) {\ncase \"index\" => temp_index = r.readValue<Int32>();",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "case \"message\" => temp_message = r.readValue<Option<Message>>();\ncase \"delta\" => temp_delta = r.readValue<Option<Message>>();",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "label": "case \"finish_reason\" => temp_finish_reason = r.readValue<Option<String>>();\ncase \"logprobs\" => temp_logprobs = r.readValue<Option<Float64>>();",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "label": "case unkow => println(\"unkow key ${unkow}\");",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 16,
                                  "label": "r.endObject();\nbreak",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 18,
                              "label": "case _ => throw Exception(\"can't deserialize for Choice\");",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 19,
                  "label": "return Choice(temp_index, temp_message, temp_delta, temp_finish_reason, temp_logprobs);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 279,
          "end_line": 288,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"index\").writeValue<Int32>(this.index);\n    w.writeName(\"message\").writeValue<Option<Message>>(this.message);\n    w.writeName(\"delta\").writeValue<Option<Message>>(this.delta);\n    w.writeName(\"finish_reason\").writeValue<Option<String>>(this.finish_reason);\n    w.writeName(\"logprobs\").writeValue<Option<Float64>>(this.logprobs);\n    w.endObject();\n    w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter) {\nw.startObject();",
              "successors": [
                {
                  "id": 3,
                  "label": "w.writeName(\"index\").writeValue<Int32>(this.index);\nw.writeName(\"message\").writeValue<Option<Message>>(this.message);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "w.writeName(\"delta\").writeValue<Option<Message>>(this.delta);\nw.writeName(\"finish_reason\").writeValue<Option<String>>(this.finish_reason);",
                      "successors": [
                        {
                          "id": 7,
                          "label": "w.writeName(\"logprobs\").writeValue<Option<Float64>>(this.logprobs);\nw.endObject();",
                          "successors": [
                            {
                              "id": 9,
                              "label": "w.flush();",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "public struct Choice <: JsonDeserializable<Choice> & JsonSerializable {\n  public let index: Int32;\n  public let message: Option<Message>;\n  public let delta: Option<Message>;\n  public let finish_reason: Option<String>;\n  public let logprobs: Option<Float64>; // dashscope for qwen need\n\n  }\n\n  }\n\n  }\n}",
      "blocks": []
    },
    {
      "name": "Usage",
      "type": "class",
      "start_line": 291,
      "end_line": 335,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 296,
          "end_line": 300,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(prompt_tokens: UInt64, completion_tokens: UInt64, total_tokens: UInt64) {\n    this.prompt_tokens = prompt_tokens;\n    this.completion_tokens = completion_tokens;\n    this.total_tokens = total_tokens;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(prompt_tokens: UInt64, completion_tokens: UInt64, total_tokens: UInt64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.prompt_tokens = prompt_tokens;",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    this.completion_tokens = completion_tokens;",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    this.total_tokens = total_tokens;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 302,
          "end_line": 325,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): Usage {\n    var temp_prompt_tokens: UInt64 = 0;\n    var temp_completion_tokens: UInt64 = 0;\n    var temp_total_tokens: UInt64 = 0;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"prompt_tokens\" => temp_prompt_tokens = r.readValue<UInt64>();\n                  case \"completion_tokens\" => temp_completion_tokens = r.readValue<UInt64>();\n                  case \"total_tokens\" => temp_total_tokens = r.readValue<UInt64>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break\n        case _ => throw Exception(\"can't deserialize for Usage\");\n      }\n    }\n    return Usage(temp_prompt_tokens, temp_completion_tokens, temp_total_tokens);\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): Usage {\nvar temp_prompt_tokens: UInt64 = 0;\n    var temp_completion_tokens: UInt64 = 0;\n    var temp_total_tokens: UInt64 = 0;",
              "successors": [
                {
                  "id": 3,
                  "label": "while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "match(v) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case BeginObject =>\nr.startObject();",
                          "successors": [
                            {
                              "id": 7,
                              "label": "while(r.peek() != EndObject) {\nlet n = r.readName()",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "match (n) {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "case \"prompt_tokens\" => temp_prompt_tokens = r.readValue<UInt64>();\n}",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "label": "case \"completion_tokens\" => temp_completion_tokens = r.readValue<UInt64>();\n}",
                                      "successors": []
                                    },
                                    {
                                      "id": 12,
                                      "label": "case \"total_tokens\" => temp_total_tokens = r.readValue<UInt64>();\n}",
                                      "successors": []
                                    },
                                    {
                                      "id": 13,
                                      "label": "case unkow => println(\"unkow key ${unkow}\");\n}",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 14,
                              "label": "r.endObject();\nbreak",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 16,
                          "label": "case _ => throw Exception(\"can't deserialize for Usage\");",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 17,
                  "label": "return Usage(temp_prompt_tokens, temp_completion_tokens, temp_total_tokens);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 327,
          "end_line": 334,
          "functions": [],
          "classes": [],
          "simplified_code": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"prompt_tokens\").writeValue<UInt64>(this.prompt_tokens);\n    w.writeName(\"completion_tokens\").writeValue<UInt64>(this.completion_tokens);\n    w.writeName(\"total_tokens\").writeValue<UInt64>(this.total_tokens);\n    w.endObject();\n    w.flush();\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter) {\nw.startObject();",
              "successors": [
                {
                  "id": 3,
                  "label": "w.writeName(\"prompt_tokens\").writeValue<UInt64>(this.prompt_tokens);\nw.writeName(\"completion_tokens\").writeValue<UInt64>(this.completion_tokens);",
                  "successors": [
                    {
                      "id": 5,
                      "label": "w.writeName(\"total_tokens\").writeValue<UInt64>(this.total_tokens);\nw.endObject();",
                      "successors": [
                        {
                          "id": 7,
                          "label": "w.flush();",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "public struct Usage <: JsonDeserializable<Usage> & JsonSerializable {\n  public let prompt_tokens: UInt64;\n  public let completion_tokens: UInt64;\n  public let total_tokens: UInt64;\n\n  }\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct Usage <: JsonDeserializable<Usage> & JsonSerializable {\npublic let prompt_tokens: UInt64;",
          "successors": [
            {
              "id": 3,
              "label": "public let completion_tokens: UInt64;\npublic let total_tokens: UInt64;",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ChatResponse",
      "type": "class",
      "start_line": 337,
      "end_line": 411,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 348,
          "end_line": 366,
          "functions": [],
          "classes": [],
          "simplified_code": "  public init(\n    id: Option<String>,\n    request_id: Option<String>,\n    system_fingerprint: Option<String>,\n    model: String,\n    object: String,\n    created: UInt64,\n    choices: ArrayList<Choice>,\n    usage: Option<Usage>\n  ) {\n    this.id = id;\n    this.request_id = request_id;\n    this.system_fingerprint = system_fingerprint;\n    this.model = model;\n    this.object = object;\n    this.created = created;\n    this.choices = choices;\n    this.usage = usage;\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\nid: Option<String>,\nrequest_id: Option<String>,\nsystem_fingerprint: Option<String>,\nmodel: String,\nobject: String,\ncreated: UInt64,\nchoices: ArrayList<Choice>,\nusage: Option<Usage>",
              "successors": [
                {
                  "id": 3,
                  "label": ") {\nthis.id = id;\nthis.request_id = request_id;\nthis.system_fingerprint = system_fingerprint;\nthis.model = model;\nthis.object = object;\nthis.created = created;\nthis.choices = choices;\nthis.usage = usage;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 368,
          "end_line": 410,
          "functions": [],
          "classes": [],
          "simplified_code": "  public static func fromJson(r: JsonReader): ChatResponse {\n    var temp_id: Option<String> = None;\n    var temp_request_id: Option<String> = None;\n    var temp_system_fingerprint: Option<String> = None;\n    var temp_model: String = \"\";\n    var temp_object: String = \"\";\n    var temp_created: UInt64 = 0;\n    var temp_choices: ArrayList<Choice> = ArrayList<Choice>([]);\n    var temp_usage: Option<Usage> = None;\n    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"id\" => temp_id = r.readValue<Option<String>>();\n                  case \"request_id\" => temp_request_id = r.readValue<Option<String>>();\n                  case \"system_fingerprint\" => temp_system_fingerprint = r.readValue<Option<String>>();\n                  case \"model\" => temp_model = r.readValue<String>();\n                  case \"object\" => temp_object = r.readValue<String>();\n                  case \"created\" => temp_created = r.readValue<UInt64>();\n                  case \"choices\" => temp_choices = r.readValue<ArrayList<Choice>>();\n                  case \"usage\" => temp_usage = r.readValue<Option<Usage>>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break\n        case _ => throw Exception(\"can't deserialize for ChatResponse\")\n      }\n    }\n    return ChatResponse(\n      temp_id,\n      temp_request_id,\n      temp_system_fingerprint,\n      temp_model,\n      temp_object,\n      temp_created,\n      temp_choices,\n      temp_usage\n    );\n  }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): ChatResponse {\nvar temp_id: Option<String> = None;\nvar temp_request_id: Option<String> = None;\nvar temp_system_fingerprint: Option<String> = None;\nvar temp_model: String = \"\";\nvar temp_object: String = \"\";\nvar temp_created: UInt64 = 0;\nvar temp_choices: ArrayList<Choice> = ArrayList<Choice>([]);\nvar temp_usage: Option<Usage> = None;",
              "successors": [
                {
                  "id": 3,
                  "label": "while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "match(v) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case BeginObject =>\nr.startObject();\nwhile(r.peek() != EndObject) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "let n = r.readName()\nmatch (n) {\ncase \"id\" => temp_id = r.readValue<Option<String>>();\ncase \"request_id\" => temp_request_id = r.readValue<Option<String>>();\ncase \"system_fingerprint\" => temp_system_fingerprint = r.readValue<Option<String>>();\ncase \"model\" => temp_model = r.readValue<String>();\ncase \"object\" => temp_object = r.readValue<String>();\ncase \"created\" => temp_created = r.readValue<UInt64>();\ncase \"choices\" => temp_choices = r.readValue<ArrayList<Choice>>();\ncase \"usage\" => temp_usage = r.readValue<Option<Usage>>();\ncase unkow => println(\"unkow key ${unkow}\");",
                              "successors": []
                            },
                            {
                              "id": 9,
                              "label": "r.endObject();\nbreak",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "label": "case _ => throw Exception(\"can't deserialize for ChatResponse\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "return ChatResponse(\n  temp_id,\n  temp_request_id,\n  temp_system_fingerprint,\n  temp_model,\n  temp_object,\n  temp_created,\n  temp_choices,\n  temp_usage\n);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "public struct ChatResponse <: JsonDeserializable<ChatResponse> {\n  // some api names `id`, and some names `request_id`\n  public let id: Option<String>;\n  public let request_id: Option<String>;\n  public let system_fingerprint: Option<String>;\n  public let model: String;\n  public let object: String;\n  public let created: UInt64;\n  public let choices: ArrayList<Choice>;\n  public let usage: Option<Usage>;\n\n  }\n\n  }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct ChatResponse <: JsonDeserializable<ChatResponse> {\npublic let id: Option<String>;",
          "successors": [
            {
              "id": 3,
              "label": "public let request_id: Option<String>;\npublic let system_fingerprint: Option<String>;",
              "successors": [
                {
                  "id": 5,
                  "label": "public let model: String;\npublic let object: String;",
                  "successors": [
                    {
                      "id": 7,
                      "label": "public let created: UInt64;\npublic let choices: ArrayList<Choice>;",
                      "successors": [
                        {
                          "id": 9,
                          "label": "public let usage: Option<Usage>;",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package openai_chat\nimport encoding.json.stream.*\nimport net.http.ClientBuilder\nimport net.http.HttpHeaders\nimport net.http.HttpRequestBuilder\nimport net.tls.TlsClientConfig\nimport net.tls.CertificateVerifyMode\nimport std.collection.ArrayList\nimport std.io.ByteArrayStream\nimport std.time.Duration\n\n}\n\n}\n\n}\n\n}\n\n\n}\n\n}\n\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package openai_chat\nimport encoding.json.stream.*",
      "successors": [
        {
          "id": 3,
          "label": "import net.http.ClientBuilder\nimport net.http.HttpHeaders",
          "successors": [
            {
              "id": 5,
              "label": "import net.http.HttpRequestBuilder\nimport net.tls.TlsClientConfig",
              "successors": [
                {
                  "id": 7,
                  "label": "import net.tls.CertificateVerifyMode\nimport std.collection.ArrayList",
                  "successors": [
                    {
                      "id": 9,
                      "label": "import std.io.ByteArrayStream\nimport std.time.Duration",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}