{
  "name": "simple_math_interpreter",
  "type": "CFG",
  "start_line": 1,
  "end_line": 200,
  "functions": [
    {
      "name": "tokensFunc",
      "type": "function",
      "start_line": 69,
      "end_line": 71,
      "functions": [],
      "classes": [],
      "simplified_code": "func tokensFunc(input: List<Rune>): Option<(List<Token>, List<Rune>)> {\n    tokens.parseFunc(input)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func tokensFunc(input: List<Rune>): Option<(List<Token>, List<Rune>)> {\n    tokens.parseFunc(input)",
          "successors": []
        }
      ]
    },
    {
      "name": "atomicFunc",
      "type": "function",
      "start_line": 162,
      "end_line": 165,
      "functions": [],
      "classes": [],
      "simplified_code": "func atomicFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let expression = Combinator(expressionFunc)\n    lparen.and(expression).and(rparen).map {t => t[0][1]}.or(eNumber).parseFunc(input)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func atomicFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let expression = Combinator(expressionFunc)",
          "successors": [
            {
              "id": 3,
              "label": "    lparen.and(expression).and(rparen).map {t => t[0][1]}.or(eNumber).parseFunc(input)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "combineFunc",
      "type": "function",
      "start_line": 167,
      "end_line": 180,
      "functions": [],
      "classes": [],
      "simplified_code": "func combineFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let atomic = Combinator(atomicFunc)\n    atomic.and(multiply.or(divide).and(atomic).many(0)).map {\n        t => t[1].reduce(\n            {\n                acc, x => match ((acc, x)) {\n                    case (e1, (Multiply, e2)) => Multiply(e1, e2)\n                    case (e1, (_, e2)) => Divide(e1, e2)\n                }\n            },\n            t[0]\n        )\n    }.parseFunc(input)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func combineFunc(input: List<Token>): Option<(Expression, List<Token>)> {\nlet atomic = Combinator(atomicFunc)",
          "successors": [
            {
              "id": 3,
              "label": "atomic.and(multiply.or(divide).and(atomic).many(0)).map {\nt => t[1].reduce(",
              "successors": [
                {
                  "id": 5,
                  "label": "{",
                  "successors": [
                    {
                      "id": 6,
                      "label": "acc, x => match ((acc, x)) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "case (e1, (Multiply, e2)) => Multiply(e1, e2)",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "case (e1, (_, e2)) => Divide(e1, e2)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "},\nt[0]",
                      "successors": [
                        {
                          "id": 11,
                          "label": ")\n}.parseFunc(input)",
                          "successors": [
                            {
                              "id": 13,
                              "label": "}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "expressionFunc",
      "type": "function",
      "start_line": 182,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "simplified_code": "func expressionFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let combine = Combinator(combineFunc)\n    combine.and(plus.or(minus).and(combine).many(0)).map {\n        t => t[1].reduce(\n            {\n                acc, x => match ((acc, x)) {\n                    case (e1, (Plus, e2)) => Plus(e1, e2)\n                    case (e1, (_, e2)) => Minus(e1, e2)\n                }\n            },\n            t[0]\n        )\n    }.parseFunc(input)\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func expressionFunc(input: List<Token>): Option<(Expression, List<Token>)> {\n    let combine = Combinator(combineFunc)",
          "successors": [
            {
              "id": 3,
              "label": "    combine.and(plus.or(minus).and(combine).many(0)).map {\n        t => t[1].reduce(",
              "successors": [
                {
                  "id": 5,
                  "label": "            {\n                acc, x => match ((acc, x)) {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "                    case (e1, (Plus, e2)) => Plus(e1, e2)\n                }",
                      "successors": [
                        {
                          "id": 10,
                          "label": "            },\n            t[0]",
                          "successors": [
                            {
                              "id": 12,
                              "label": "        )\n                    case (e1, (_, e2)) => Minus(e1, e2)",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "                }\n            },",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "            t[0]\n        )",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "                    case (e1, (_, e2)) => Minus(e1, e2)\n                }",
                      "successors": [
                        {
                          "id": 10,
                          "label": "            },\n            t[0]",
                          "successors": [
                            {
                              "id": 12,
                              "label": "        )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "eval",
      "type": "function",
      "start_line": 197,
      "end_line": 200,
      "functions": [],
      "classes": [],
      "simplified_code": "public func eval(str: String): Result<Int64, String> {\n    let runes = List<Rune>.fromArray(str.trimAscii().toRuneArray())\n    Token.fromRunes(runes).andThen(Expression.fromTokens).map {e => e.eval()}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public func eval(str: String): Result<Int64, String> {\n    let runes = List<Rune>.fromArray(str.trimAscii().toRuneArray())",
          "successors": [
            {
              "id": 3,
              "label": "    Token.fromRunes(runes).andThen(Expression.fromTokens).map {e => e.eval()}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "enums": [
    {
      "name": "Token",
      "type": "enum",
      "start_line": 6,
      "end_line": 14,
      "functions": [],
      "classes": []
    },
    {
      "name": "Expression",
      "type": "enum",
      "start_line": 73,
      "end_line": 79,
      "functions": [],
      "classes": []
    }
  ],
  "extensions": [
    {
      "name": "Token",
      "type": "extension",
      "start_line": 16,
      "end_line": 23,
      "functions": [
        {
          "name": "fromRunes",
          "type": "function",
          "start_line": 17,
          "end_line": 22,
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Token <: ToString",
      "type": "extension",
      "start_line": 25,
      "end_line": 37,
      "functions": [
        {
          "name": "toString",
          "type": "function",
          "start_line": 26,
          "end_line": 36,
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Expression",
      "type": "extension",
      "start_line": 81,
      "end_line": 88,
      "functions": [
        {
          "name": "fromTokens",
          "type": "function",
          "start_line": 82,
          "end_line": 87,
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Expression",
      "type": "extension",
      "start_line": 90,
      "end_line": 100,
      "functions": [
        {
          "name": "eval",
          "type": "function",
          "start_line": 91,
          "end_line": 99,
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Expression <: ToString",
      "type": "extension",
      "start_line": 102,
      "end_line": 112,
      "functions": [
        {
          "name": "toString",
          "type": "function",
          "start_line": 103,
          "end_line": 111,
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "simplified_code": "package simple_math_interpreter\n\nimport std.convert.*\nimport simple_math_interpreter.ext.*\n\nenum Token {\n    | Value(Int)\n    | LParen\n    | RParen\n    | Plus\n    | Minus\n    | Multiply\n    | Divide\n}\n\nextend Token {\n    static func fromRunes(runes: List<Rune>): Result<List<Token>, String> {\n        match (tokensFunc(runes).map {t => t[0]}) {\n            case Some(l) => Ok(l)\n            case None => Err(\"Invalid Input!\")\n        }\n    }\n}\n\nextend Token <: ToString {\n    public func toString() {\n        match (this) {\n            case Value(n) => n.toString()\n            case LParen => \"(\"\n            case RParen => \")\"\n            case Plus => \"+\"\n            case Minus => \"-\"\n            case Multiply => \"*\"\n            case Divide => \"/\"\n        }\n    }\n}\n\nlet symbol = Combinator<Rune, Rune>.make {\n    ch => match (ch) {\n        case r'+' | r'-' | r'*' | r'/' | r'(' | r')' => true\n        case _ => false\n    }\n}.map {\n    ch: Rune => match (ch) {\n        case '+' => Plus\n        case '-' => Minus\n        case '*' => Multiply\n        case '/' => Divide\n        case '(' => LParen\n        case ')' => RParen\n        case _ => throw Exception()\n    }\n}\nlet whiteSpace = Combinator<Rune, Rune>.make {ch => ch == r' '}\nlet number = Combinator<Rune, Rune>.make {\n    ch => match (Int64.tryParse(ch.toString())) {\n        case Some(n) where n >= 0 && n <= 9 => true\n        case _ => false\n    }\n}.map {ch => Int64.parse(ch.toString())}\nlet value = number.many(1).map {\n    l => l.reduce<Int64>({acc, x => acc * 10 + x}, 0)\n}.map {v => Value(v)}\nlet tokenAndSpace = value.or(symbol).and(whiteSpace.many(1)).map {s: (Token, List<Rune>) => s[0]}\nlet token = value.or(symbol)\nlet tokens = tokenAndSpace.or(token).many(1)\n\n}\n\nenum Expression {\n    | Number(Int)\n    | Plus(Expression, Expression)\n    | Minus(Expression, Expression)\n    | Multiply(Expression, Expression)\n    | Divide(Expression, Expression)\n}\n\nextend Expression {\n    static func fromTokens(tokens: List<Token>): Result<Expression, String> {\n        match (expressionFunc(tokens).map {t => t[0]}) {\n            case Some(e) => Ok(e)\n            case None => Err(\"Invalid Expression!\")\n        }\n    }\n}\n\nextend Expression {\n    func eval(): Int64 {\n        match (this) {\n            case Number(n) => n\n            case Plus(e1, e2) => e1.eval() + e2.eval()\n            case Minus(e1, e2) => e1.eval() - e2.eval()\n            case Multiply(e1, e2) => e1.eval() * e2.eval()\n            case Divide(e1, e2) => e1.eval() / e2.eval()\n        }\n    }\n}\n\nextend Expression <: ToString {\n    public func toString(): String {\n        match (this) {\n            case Number(n) => \"${n}\"\n            case Plus(e1, e2) => \"(+ ${e1} ${e2})\"\n            case Minus(e1, e2) => \"(- ${e1} ${e2})\"\n            case Multiply(e1, e2) => \"(* ${e1} ${e2})\"\n            case Divide(e1, e2) => \"(/ ${e1} ${e2})\"\n        }\n    }\n}\n\nlet eNumber = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Value(_) => true\n        case _ => false\n    }\n}.map {\n    token => match (token) {\n        case Value(i) => Number(i)\n        case _ => throw Exception()\n    }\n}\nlet lparen = Combinator<Token, Token>.make {\n    token => match (token) {\n        case LParen => true\n        case _ => false\n    }\n}\nlet rparen = Combinator<Token, Token>.make {\n    token => match (token) {\n        case RParen => true\n        case _ => false\n    }\n}\nlet plus = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Plus => true\n        case _ => false\n    }\n}\nlet minus = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Minus => true\n        case _ => false\n    }\n}\nlet multiply = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Multiply => true\n        case _ => false\n    }\n}\nlet divide = Combinator<Token, Token>.make {\n    token => match (token) {\n        case Divide => true\n        case _ => false\n    }\n}\n\n}\n\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package simple_math_interpreter\nimport std.convert.*\nimport simple_math_interpreter.ext.*",
      "successors": [
        {
          "id": 3,
          "label": "enum Token {\n    | Value(Int)\n    | LParen\n    | RParen\n    | Plus\n    | Minus\n    | Multiply\n    | Divide\n}\nextend Token {\n    static func fromRunes(runes: List<Rune>): Result<List<Token>, String> {\n        match (tokensFunc(runes).map {t => t[0]}) {",
          "successors": [
            {
              "id": 5,
              "label": "case Some(l) => Ok(l)\n}\n    }\n}",
              "successors": [
                {
                  "id": 8,
                  "label": "extend Token <: ToString {\n    public func toString() {\n        match (this) {\ncase Value(n) => n.toString()",
                  "successors": [
                    {
                      "id": 10,
                      "label": "case LParen => \"(\"\ncase RParen => \")\"\ncase Plus => \"+\"\ncase Minus => \"-\"\ncase Multiply => \"*\"\ncase Divide => \"/\"\n}\n    }\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "label": "case None => Err(\"Invalid Input!\")\n}\n    }\n}",
              "successors": [
                {
                  "id": 8,
                  "label": "extend Token <: ToString {\n    public func toString() {\n        match (this) {\ncase Value(n) => n.toString()",
                  "successors": [
                    {
                      "id": 10,
                      "label": "case LParen => \"(\"\ncase RParen => \")\"\ncase Plus => \"+\"\ncase Minus => \"-\"\ncase Multiply => \"*\"\ncase Divide => \"/\"\n}\n    }\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}