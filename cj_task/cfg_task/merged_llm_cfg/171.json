{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 59,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 6,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "simplified_code": "main (){\n    var sum: Int64 = tesSparkMD5_01()\n    if (sum != 0) {\n        println(sum)\n        return sum\n    }\n    sum = tesSparkMD5_02()\n    if (sum != 0) {\n        println(sum)\n        return sum\n    }\n    sum = tesSparkMD5_03()\n    if (sum != 0) {\n        println(sum)\n        return sum\n    }\n    return 0\n}",
      "blocks": [
        {
          "id": 1,
          "label": "var sum: Int64 = tesSparkMD5_01()\nif (sum != 0)",
          "successors": [
            {
              "id": 3,
              "label": "println(sum)\nreturn sum",
              "successors": []
            },
            {
              "id": 4,
              "label": "sum = tesSparkMD5_02()\nif (sum != 0)",
              "successors": [
                {
                  "id": 6,
                  "label": "println(sum)\nreturn sum",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "sum = tesSparkMD5_03()\nif (sum != 0)",
                  "successors": [
                    {
                      "id": 9,
                      "label": "println(sum)\nreturn sum",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "return 0",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "tesSparkMD5_01",
      "type": "function",
      "start_line": 24,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": "func tesSparkMD5_01(): Int64 {\n    let sparkMD5: SparkMD5 = SparkMD5()\n    sparkMD5.buff = \"123456789\"\n    let str: String = sparkMD5.buff\n    println(str)\n    println(sparkMD5.length)\n    if (str == \"123456789\") {\n        return 0\n    }\n    return 1\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func tesSparkMD5_01(): Int64 {\nlet sparkMD5: SparkMD5 = SparkMD5()\nsparkMD5.buff = \"123456789\"\nlet str: String = sparkMD5.buff\nprintln(str)\nprintln(sparkMD5.length)",
          "successors": [
            {
              "id": 3,
              "label": "if (str == \"123456789\") {",
              "successors": [
                {
                  "id": 4,
                  "label": "return 0",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "return 1",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "tesSparkMD5_02",
      "type": "function",
      "start_line": 35,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "func tesSparkMD5_02(): Int64 {\n    let sparkMD5: SparkMD5 = SparkMD5()\n    sparkMD5.buff = \"20231121:123456789\"\n    sparkMD5.length = 18\n    let str: String = sparkMD5.buff\n    println(str)\n    println(sparkMD5.length)\n    if (str == \"20231121:123456789\" && sparkMD5.length == 18) {\n        return 0\n    }\n    return 2\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func tesSparkMD5_02(): Int64 {\nlet sparkMD5: SparkMD5 = SparkMD5()\nsparkMD5.buff = \"20231121:123456789\"\nsparkMD5.length = 18\nlet str: String = sparkMD5.buff\nprintln(str)\nprintln(sparkMD5.length)",
          "successors": [
            {
              "id": 3,
              "label": "if (str == \"20231121:123456789\" && sparkMD5.length == 18) {",
              "successors": [
                {
                  "id": 4,
                  "label": "return 0",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "}\nreturn 2",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "tesSparkMD5_03",
      "type": "function",
      "start_line": 47,
      "end_line": 59,
      "functions": [],
      "classes": [],
      "simplified_code": "func tesSparkMD5_03(): Int64 {\n    let sparkMD5: SparkMD5 = SparkMD5()\n    sparkMD5.buff = \"20231121:123456789\"\n    sparkMD5.length = 18\n    sparkMD5.hash = Array<Int32>()\n    let str: String = sparkMD5.buff\n    println(sparkMD5.length)\n    println(sparkMD5.hash)\n    if (str == \"20231121:123456789\" && sparkMD5.length == 18 && sparkMD5.hash.size == 0) {\n        return 0\n    }\n    return 3\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let sparkMD5: SparkMD5 = SparkMD5()\nsparkMD5.buff = \"20231121:123456789\"",
          "successors": [
            {
              "id": 3,
              "label": "sparkMD5.length = 18\nsparkMD5.hash = Array<Int32>()",
              "successors": [
                {
                  "id": 5,
                  "label": "let str: String = sparkMD5.buff\nprintln(sparkMD5.length)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "println(sparkMD5.hash)\nif (str == \"20231121:123456789\" && sparkMD5.length == 18 && sparkMD5.hash.size == 0)",
                      "successors": [
                        {
                          "id": 9,
                          "label": "return 0",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "return 3",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// EXEC: cjc %import-path %L %l %f\n// EXEC: ./main\nfrom std import fs.*\nfrom std import sync.*\nfrom gifdrawable4cj import sparkmd5.*\n}\n}\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "from std import fs.*\nfrom std import sync.*",
      "successors": [
        {
          "id": 3,
          "label": "from gifdrawable4cj import sparkmd5.*",
          "successors": []
        }
      ]
    }
  ]
}