{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 64,
  "functions": [
    {
      "name": "split_ascii_normal",
      "type": "function",
      "start_line": 7,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": "func split_ascii_normal(text: String, sep: String): ArrayList<String> {\n    let indices = ArrayList<Int64>()\n    var last = true\n    for (i in 0..text.size) {\n        let current = sep.indexOf(text[i]).isSome()\n        if (last != current) {\n            indices.append(i)\n        }\n        last = current\n    }\n    if (!last) { indices.append(text.size) }\n\n    let result = ArrayList<String>()\n    for (i in 0..indices.size:2) {\n        result.append(text[indices[i]..indices[i + 1]])\n    }\n    return result\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let indices = ArrayList<Int64>()\nvar last = true",
          "successors": [
            {
              "id": 2,
              "label": "for (i in 0..text.size) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let current = sep.indexOf(text[i]).isSome()\nif (last != current) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "indices.append(i)\nlast = current",
                      "successors": [
                        {
                          "id": 2,
                          "label": "for (i in 0..text.size) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "last = current",
                      "successors": [
                        {
                          "id": 2,
                          "label": "for (i in 0..text.size) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "label": "if (!last) { indices.append(text.size) }\nlet result = ArrayList<String>()",
              "successors": [
                {
                  "id": 10,
                  "label": "for (i in 0..indices.size:2) {",
                  "successors": [
                    {
                      "id": 11,
                      "label": "result.append(text[indices[i]..indices[i + 1]])",
                      "successors": [
                        {
                          "id": 10,
                          "label": "for (i in 0..indices.size:2) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "return result",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "split_ascii",
      "type": "function",
      "start_line": 27,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": "func split_ascii(text: String, sep: String): ArrayList<String> {\n    let indices = ArrayList<Int64>()\n    text |> enumerate |> fold(false) { state, e =>\n        let current = sep.indexOf(e[1]).isNone()\n        if (state != current) { indices.append(e[0]) }\n        current\n    } |> { valid: Bool => if (valid) {\n        indices.append(text.size)\n    }}\n\n    let result = ArrayList<String>()\n    for (i in 0..indices.size:2) {\n        result.append(text[indices[i]..indices[i + 1]])\n    }\n    return result\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let indices = ArrayList<Int64>()\ntext |> enumerate |> fold(false) { state, e =>",
          "successors": [
            {
              "id": 3,
              "label": "let current = sep.indexOf(e[1]).isNone()\nif (state != current) { indices.append(e[0]) }",
              "successors": [
                {
                  "id": 5,
                  "label": "current\n|> { valid: Bool => if (valid) { indices.append(text.size) }}",
                  "successors": [
                    {
                      "id": 7,
                      "label": "let result = ArrayList<String>()",
                      "successors": [
                        {
                          "id": 8,
                          "label": "for (i in 0..indices.size:2) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "result.append(text[indices[i]..indices[i + 1]])\n}",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "return result",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "split_unicode",
      "type": "function",
      "start_line": 45,
      "end_line": 59,
      "functions": [],
      "classes": [],
      "simplified_code": "func split_unicode(text: String, sep: String) {\n    let indices = ArrayList<Int64>()\n    text.runes() |> enumerate |> fold(false) { state, e =>\n        let current = !sep.contains(e[1].toString())\n        if (state != current) { indices.append(e[0]) }\n        current\n    } |> { valid: Bool => if (valid) { indices.append(text.size) } }\n\n    let runes = text.toRuneArray()\n    let result = ArrayList<String>()\n    for (i in 0..indices.size:2) {\n        result.append(String(runes[indices[i]..indices[i + 1]]))\n    }\n    return result\n}",
      "blocks": [
        {
          "id": 1,
          "label": "let indices = ArrayList<Int64>()",
          "successors": [
            {
              "id": 2,
              "label": "text.runes() |> enumerate |> fold(false) { state, e =>\nlet current = !sep.contains(e[1].toString())",
              "successors": [
                {
                  "id": 4,
                  "label": "if (state != current) { indices.append(e[0]) }",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "current",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "|> { valid: Bool => if (valid) { indices.append(text.size) } }",
              "successors": []
            },
            {
              "id": 7,
              "label": "let runes = text.toRuneArray()\nlet result = ArrayList<String>()",
              "successors": [
                {
                  "id": 9,
                  "label": "for (i in 0..indices.size:2) {",
                  "successors": [
                    {
                      "id": 10,
                      "label": "result.append(String(runes[indices[i]..indices[i + 1]]))",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "return result",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 61,
      "end_line": 64,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let text = \"123, 456 7&89, , 96^3, 567\"\n    println(split_ascii(text, \"&^, \"))\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    let text = \"123, 456 7&89, , 96^3, 567\"",
          "successors": [
            {
              "id": 3,
              "label": "    println(split_ascii(text, \"&^, \"))\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "// 用分隔符拆分字符串，支持多分隔符\n// 仓颉语言团队 刘俊杰 2024.10.24\nimport std.collection.*\n\n// 处理 ASCII 字符串\n// 常规实现\n}\n\n// 函数式编程实现\n}\n\n// 处理 Unicode 字符串\n}\n\n}",
  "blocks": []
}