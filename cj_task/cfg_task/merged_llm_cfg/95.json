{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 113,
  "functions": [],
  "classes": [
    {
      "name": "Repeater",
      "type": "class",
      "start_line": 6,
      "end_line": 112,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(throttle!: Bool, mode!: RepeaterMode, task!: RepeaterTask) {\n        this(throttle: throttle, config: mode.config, task: task)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(throttle!: Bool, mode!: RepeaterMode, task!: RepeaterTask) {\n    this(throttle: throttle, config: mode.config, task: task)",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 22,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(throttle!: Bool, config!: RepeaterConfig, task!: RepeaterTask) {\n        this.config = config\n        this.task = task\n        this.throttle = throttle\n        this.verifyConfig()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(throttle!: Bool, config!: RepeaterConfig, task!: RepeaterTask) { this.config = config this.task = task this.throttle = throttle this.verifyConfig() }",
              "successors": []
            }
          ]
        },
        {
          "name": "verifyConfig",
          "type": "function",
          "start_line": 31,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    func verifyConfig() {}",
          "blocks": [
            {
              "id": 1,
              "label": "func verifyConfig() {}",
              "successors": []
            }
          ]
        },
        {
          "name": "verifyConfig",
          "type": "function",
          "start_line": 35,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    func verifyConfig() {\n        if (!config.leading && !config.trailing) {\n            throw IllegalArgumentException('leading和trailing需要至少有一项为true')\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func verifyConfig() {\nif (!config.leading && !config.trailing) {",
              "successors": [
                {
                  "id": 3,
                  "label": "throw IllegalArgumentException('leading和trailing需要至少有一项为true')",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "dealLeadingCall",
          "type": "function",
          "start_line": 54,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func dealLeadingCall() {\n        // timer不存在，说明没开启过计时。如果设置了头部执行，则立即执行\n        if (config.leading && canRunTask) {\n            runTask()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func dealLeadingCall() {\nif (config.leading && canRunTask) {",
              "successors": [
                {
                  "id": 3,
                  "label": "    runTask()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "dealTrailingCall",
          "type": "function",
          "start_line": 61,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func dealTrailingCall() {\n        if (config.trailing && timer.isNone()) {\n            // 这里置为true，是考虑到只有trailing没有leading的情况。假设任务已执行一次\n            firstRunTask = true\n            lastRunTaskTime = getNowTime()\n            // 启动timer\n            timer = Timer.after(config.interval) {\n                let now = getNowTime()\n\n                if (throttle) {\n                    runTask()\n                    if (now - lastCallTime > config.interval) {\n                        cancel()\n                        return None\n                    } else {\n                        return config.interval\n                    }\n                } else {\n                    if (now - lastCallTime > config.interval) {\n                        runTask()\n                        // Timer置None，重新计时\n                        cancel()\n                        // 返回None，让timer生效\n                        return None\n                    } else {\n                        // 定时器距离上次调用call方法的时间间隔\n                        let delta = now - lastCallTime\n                        // 返回从上次点击后到下一个interval的时间\n                        return config.interval - delta\n                    }\n                }\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "if (config.trailing && timer.isNone()) {\nfirstRunTask = true\nlastRunTaskTime = getNowTime()\ntimer = Timer.after(config.interval) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let now = getNowTime()\nif (throttle) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "runTask()\nif (now - lastCallTime > config.interval) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "cancel()\nreturn None",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "} else {\nreturn config.interval",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "} else {\nif (now - lastCallTime > config.interval) {",
                      "successors": [
                        {
                          "id": 10,
                          "label": "runTask()\ncancel()\nreturn None",
                          "successors": []
                        },
                        {
                          "id": 11,
                          "label": "} else {\nlet delta = now - lastCallTime\nreturn config.interval - delta",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "call",
          "type": "function",
          "start_line": 96,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func call(): Unit {\n        this.dealLeadingCall()\n        this.dealTrailingCall()\n        lastCallTime = getNowTime()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func call(): Unit {\nthis.dealLeadingCall()",
              "successors": [
                {
                  "id": 3,
                  "label": "this.dealTrailingCall()\nlastCallTime = getNowTime()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "cancel",
          "type": "function",
          "start_line": 102,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func cancel(): Unit {\n        timer?.cancel()\n        timer = None\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func cancel(): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "    timer?.cancel()",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    timer = None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "runTask",
          "type": "function",
          "start_line": 107,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func runTask() {\n        task()\n        firstRunTask = true\n        lastRunTaskTime = getNowTime()",
          "blocks": [
            {
              "id": 1,
              "label": "private func runTask() {\n    task()",
              "successors": [
                {
                  "id": 3,
                  "label": "    firstRunTask = true\n    lastRunTaskTime = getNowTime()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class Repeater {\n    private var lastCallTime: MonoTime = getNowTime()\n    private var lastRunTaskTime: MonoTime = getNowTime()\n    private var firstRunTask: Bool = false\n    // 定时器，只有trailing才会使用\n    private var timer: ?Timer = None\n\n    // 配置和任务\n    private let config: RepeaterConfig\n    private let task: RepeaterTask\n    private let throttle: Bool\n\n    }\n\n    }\n\n    // release条件下为空实现\n    @When[!debug]\n    func verifyConfig() {}\n\n    // debug下实现具体逻辑\n    @When[debug]\n    }\n\n    // 是否可以运行任务\n    private prop canRunTask: Bool {\n        get() {\n            if (throttle) {\n                let delta = getNowTime() - lastRunTaskTime\n                (delta > config.interval) || !this.firstRunTask\n            } else {\n                let delta = getNowTime() - lastCallTime\n                (delta > config.interval) || !this.firstRunTask\n            }\n        }\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n        lastRunTaskTime = getNowTime()\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Repeater {\nprivate var lastCallTime: MonoTime = getNowTime()",
          "successors": [
            {
              "id": 3,
              "label": "private var lastRunTaskTime: MonoTime = getNowTime()\nprivate var firstRunTask: Bool = false",
              "successors": [
                {
                  "id": 5,
                  "label": "private var timer: ?Timer = None\nprivate let config: RepeaterConfig",
                  "successors": [
                    {
                      "id": 7,
                      "label": "private let task: RepeaterTask\nprivate let throttle: Bool",
                      "successors": [
                        {
                          "id": 9,
                          "label": "// release条件下为空实现\n@When[!debug]\nfunc verifyConfig() {}\n// debug下实现具体逻辑\n@When[debug]",
                          "successors": [
                            {
                              "id": 11,
                              "label": "private prop canRunTask: Bool {\nget() {",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "if (throttle) {",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "let delta = getNowTime() - lastRunTaskTime\n(delta > config.interval) || !this.firstRunTask\nlastRunTaskTime = getNowTime()",
                                      "successors": []
                                    },
                                    {
                                      "id": 15,
                                      "label": "} else {\nlet delta = getNowTime() - lastCallTime\n(delta > config.interval) || !this.firstRunTask",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "lastRunTaskTime = getNowTime()",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "// cjlint-ignore -start !G.NAM.02 !G.EXP.03\npackage cj_debounce_throttle.repeater\n\npublic import std.sync.Timer\n\n}\n// cjlint-ignore -end",
  "blocks": []
}