{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 211,
  "functions": [],
  "classes": [
    {
      "name": "MySqlStatement",
      "type": "class",
      "start_line": 5,
      "end_line": 211,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 20,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(connection: MysqlConnection, sql: String) {\n        this.connection = connection\n        this.sql = sql\n\n        this.connection.writeCommandPacketStr(comStmtPrepare, sql)\n        readPrepareResultPacket()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "init(connection: MysqlConnection, sql: String) {\n    this.connection = connection\n    this.sql = sql\n\n    this.connection.writeCommandPacketStr(comStmtPrepare, sql)\n    readPrepareResultPacket()",
              "successors": []
            }
          ]
        },
        {
          "name": "parameterColumnInfos",
          "type": "function",
          "start_line": 28,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    public prop parameterColumnInfos: Array<ColumnInfo> {\n        get() {\n            return ArrayList<ColumnInfo>().toArray()\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public prop parameterColumnInfos: Array<ColumnInfo> {\nget() {",
              "successors": [
                {
                  "id": 3,
                  "label": "return ArrayList<ColumnInfo>().toArray()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "query",
          "type": "function",
          "start_line": 35,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func query(params: Array<SqlDbType>): QueryResult {\n        // 发送\n        writeExecutePacket(params)\n        // 接收结果\n        let columnNumber = readRequstSetHeaderPacket()\n        // println(\"columnCount = ${columnNumber}\")\n        var columns: ArrayList<MySqlField> = ArrayList<MySqlField>()\n        var rows: ArrayList<Array<Byte>> = ArrayList<Array<Byte>>()\n        if (columnNumber > 0) {\n            // read columns\n            columns = this.connection.readColumns(UInt16(columnNumber))\n            // read rows\n            rows = this.connection.readRows()\n        }\n        return MysqlQueryResult(columns, rows)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func query(params: Array<SqlDbType>): QueryResult {\nwriteExecutePacket(params)",
              "successors": [
                {
                  "id": 3,
                  "label": "let columnNumber = readRequstSetHeaderPacket()\nvar columns: ArrayList<MySqlField> = ArrayList<MySqlField>()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "var rows: ArrayList<Array<Byte>> = ArrayList<Array<Byte>>()\nif (columnNumber > 0) {",
                      "successors": [
                        {
                          "id": 7,
                          "label": "columns = this.connection.readColumns(UInt16(columnNumber))\nrows = this.connection.readRows()",
                          "successors": [
                            {
                              "id": 9,
                              "label": "}\nreturn MysqlQueryResult(columns, rows)",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "label": "return MysqlQueryResult(columns, rows)\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "setOption",
          "type": "function",
          "start_line": 51,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func setOption(key: String, value: String): Unit {\n\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func setOption(key: String, value: String): Unit {",
              "successors": []
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 54,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func update(params: Array<SqlDbType>): UpdateResult {\n        // 发送\n        writeExecutePacket(params)\n\n        // 接收结果\n        let updateResult = readRequstSetHeaderPacket()        \n        return MySqlUpdateResult(rowCount, lastInsertId)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func update(params: Array<SqlDbType>): UpdateResult {\n    writeExecutePacket(params)",
              "successors": [
                {
                  "id": 3,
                  "label": "    let updateResult = readRequstSetHeaderPacket()\n    return MySqlUpdateResult(rowCount, lastInsertId)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "close",
          "type": "function",
          "start_line": 63,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func close() {\n        \n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func close() {",
              "successors": []
            }
          ]
        },
        {
          "name": "isClosed",
          "type": "function",
          "start_line": 67,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func isClosed(): Bool {\n        return false\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func isClosed(): Bool {\n    return false",
              "successors": []
            }
          ]
        },
        {
          "name": "readRequstSetHeaderPacket",
          "type": "function",
          "start_line": 71,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func readRequstSetHeaderPacket(): Int64 {\n        let data = connection.readPacket()\n        match(data[0]) {\n            case 0 => \n                handleOkPacket(data[1..])\n                return 0\n            case 255 =>\n                println(\"err, do later\")\n                return -1\n            case _ => \n                1 + 1\n                // println(\"unknow, do later\")\n                // return -1\n        }\n\n        // column count\n        let (number, isNull, n) = ByteArrayUtils.readLengthEncodedInteger(data)\n        return Int64(number)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let data = connection.readPacket()\nmatch(data[0]) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case 0 =>\nhandleOkPacket(data[1..])\nreturn 0",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "case 255 =>\nprintln(\"err, do later\")\nreturn -1",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "case _ =>\n1 + 1",
                  "successors": [
                    {
                      "id": 9,
                      "label": "// println(\"unknow, do later\")\n// return -1\nlet (number, isNull, n) = ByteArrayUtils.readLengthEncodedInteger(data)\nreturn Int64(number)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "handleOkPacket",
          "type": "function",
          "start_line": 91,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func handleOkPacket(data: Array<Byte>) {\n        // Affected rows [Length Coded Binary]\n\t    let (affectedRows, affectedRowsIsNull, n) = ByteArrayUtils.readLengthEncodedInteger(data[0..])\n\n\t    // Insert id [Length Coded Binary]\n\t    let (insertId, insertIdIsNull, m )= ByteArrayUtils.readLengthEncodedInteger(data[n..])\n        rowCount = Int64(affectedRows)\n        lastInsertId = Int64(insertId)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func handleOkPacket(data: Array<Byte>) {\nlet (affectedRows, affectedRowsIsNull, n) = ByteArrayUtils.readLengthEncodedInteger(data[0..])",
              "successors": [
                {
                  "id": 3,
                  "label": "let (insertId, insertIdIsNull, m )= ByteArrayUtils.readLengthEncodedInteger(data[n..])\nrowCount = Int64(affectedRows)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "lastInsertId = Int64(insertId)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "readPrepareResultPacket",
          "type": "function",
          "start_line": 102,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func readPrepareResultPacket() {\n        let data = this.connection.readPacket()\n        if (data[0] != iOK) {\n            println(\"error here, do later\")\n        }\n\n        id = ByteArrayUtils.littleEndianUint32(data[1..5])\n        columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\n        paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\n        if (paramCount > 0) {\n           let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)\n        } \n        if (columnCount > 0) {\n            let columns = this.connection.readColumns(columnCount)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let data = this.connection.readPacket()\nif (data[0] != iOK):",
              "successors": [
                {
                  "id": 3,
                  "label": "    println(\"error here, do later\")\nid = ByteArrayUtils.littleEndianUint32(data[1..5])",
                  "successors": [
                    {
                      "id": 5,
                      "label": "columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\nparamCount = ByteArrayUtils.littleEndianUint16(data[7..9])",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (paramCount > 0):\n    let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (columnCount > 0):\n    let columns = this.connection.readColumns(columnCount)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "if (columnCount > 0):\n    let columns = this.connection.readColumns(columnCount)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "id = ByteArrayUtils.littleEndianUint32(data[1..5])\ncolumnCount = ByteArrayUtils.littleEndianUint16(data[5..7])",
                  "successors": [
                    {
                      "id": 6,
                      "label": "paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if (paramCount > 0):\n    let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (columnCount > 0):\n    let columns = this.connection.readColumns(columnCount)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "if (columnCount > 0):\n    let columns = this.connection.readColumns(columnCount)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "writeExecutePacket",
          "type": "function",
          "start_line": 119,
          "end_line": 209,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func writeExecutePacket(params: Array<SqlDbType>) {\n        connection.sequence = 0\n        var pktLen = 1 + 4 + 1 + 4 + ((Int64(paramCount) + 7) / 8) + 1 + (Int64(paramCount) * 2)\n        let paramValues = ArrayList<Array<Byte>>() \n        let paramTypes = Array<Byte>(Int64(paramCount) * 2, item: 0)\n        var bitMask = UInt64(0)\n\n        for(i in 0 .. params.size) {\n            let param = params.get(i).getOrThrow()\n            // 先只处理 SqlBigInt 和 SqlNullableBigInt\n            match(param.name) {\n                case \"SqlNullableBigInt\" => \n                    let temp = param as SqlNullableBigInt\n                    let value = temp.getOrThrow()\n                    match(value.value) {\n                        case Some(number) => \n                            paramTypes[i<<1] = fieldTypeLongLong\n                            let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n                            paramValues.append(appenValue)\n                            pktLen += 8\n                        case None => \n                            bitMask += 1 << UInt64(i)\n                            paramTypes[i<<1] = fieldTypeNULL\n                    }\n                    \n                case \"SqlBigInt\" => \n                    let temp = param as SqlBigInt\n                    let number = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeLongLong\n                    let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n                    paramValues.append(appenValue)\n                    pktLen += 8\n\n                case \"SqlInteger\" =>\n                    let temp = param as SqlInteger\n                    let number = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeLong\n                    let appenValue = ByteArrayUtils.uint32ToBytes(UInt32(number))\n                    paramValues.append(appenValue)\n                    pktLen += 4\n\n                case \"SqlVarchar\" =>\n                    let temp = param as SqlVarchar\n                    let s = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeVarString\n                    let result = ArrayList<Byte>()\n                    var lengthBytes = ByteArrayUtils.appendLengthEncodedInteger(UInt64(s.toArray().size))\n                    result.appendAll(lengthBytes)\n                    result.appendAll(s.toArray())\n                    paramValues.append(result.toArray())\n                    pktLen = pktLen + result.toArray().size\n\n                case _ => println(\"unsupport data type\")\n            }\n        }\n\n        let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n        data[0] = UInt8(pktLen & 0xff)\n\t    data[1] = UInt8(pktLen >> 8)\n\t    data[2] = UInt8(pktLen >> 16)\n\t    data[3] = connection.sequence\n\n        data[4] = comStmtExecute\n\n        data[5] = UInt8(id)\n        data[6] = UInt8(id>>8)\n        data[7] = UInt8(id>>16)\n        data[8] = UInt8(id>>24)\n\n        data[10] = 0x01\n\n        if (paramCount > 0) {\n            var pos = 14 + ((Int64(paramCount) + 7) / 8)\n            for(i in 14 .. pos) {\n                data[i] = UInt8(bitMask >> UInt64((i - 14)* 8))\n            }\n\n            data[pos] = 0x01\n            pos ++\n\n            paramTypes.copyTo(data, 0, pos, paramTypes.size)\n            pos += paramTypes.size\n            for(i in 0 .. paramCount) {\n                let paramValue = paramValues[Int64(i)]\n                paramValue.toArray().copyTo(data, 0, pos, paramValue.toArray().size)\n                pos += paramValue.toArray().size\n            }\n        }\n        connection.writePacket(data)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func writeExecutePacket(params: Array<SqlDbType>) {\n    connection.sequence = 0\n    var pktLen = 1 + 4 + 1 + 4 + ((Int64(paramCount) + 7) / 8) + 1 + (Int64(paramCount) * 2)\n    let paramValues = ArrayList<Array<Byte>>() \n    let paramTypes = Array<Byte>(Int64(paramCount) * 2, item: 0)\n    var bitMask = UInt64(0)",
              "successors": [
                {
                  "id": 2,
                  "label": "for(i in 0 .. params.size) {\n    let param = params.get(i).getOrThrow()\nmatch(param.name) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case \"SqlNullableBigInt\" => \n    let temp = param as SqlNullableBigInt\n    let value = temp.getOrThrow()\nmatch(value.value) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "case Some(number) => \n    paramTypes[i<<1] = fieldTypeLongLong\n    let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n    paramValues.append(appenValue)\n    pktLen += 8",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "case None => \n    bitMask += 1 << UInt64(i)\n    paramTypes[i<<1] = fieldTypeNULL",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "case \"SqlBigInt\" => \n    let temp = param as SqlBigInt\n    let number = temp.getOrThrow().value\n    paramTypes[i<<1] = fieldTypeLongLong\n    let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n    paramValues.append(appenValue)\n    pktLen += 8",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "case \"SqlInteger\" =>\n    let temp = param as SqlInteger\n    let number = temp.getOrThrow().value\n    paramTypes[i<<1] = fieldTypeLong\n    let appenValue = ByteArrayUtils.uint32ToBytes(UInt32(number))\n    paramValues.append(appenValue)\n    pktLen += 4",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "case \"SqlVarchar\" =>\n    let temp = param as SqlVarchar\n    let s = temp.getOrThrow().value\n    paramTypes[i<<1] = fieldTypeVarString\n    let result = ArrayList<Byte>()\n    var lengthBytes = ByteArrayUtils.appendLengthEncodedInteger(UInt64(s.toArray().size))\n    result.appendAll(lengthBytes)\n    result.appendAll(s.toArray())\n    paramValues.append(result.toArray())\n    pktLen = pktLen + result.toArray().size",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "case _ => println(\"unsupport data type\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\ndata[0] = UInt8(pktLen & 0xff)\n    data[1] = UInt8(pktLen >> 8)\n    data[2] = UInt8(pktLen >> 16)\n    data[3] = connection.sequence\n\ndata[4] = comStmtExecute\n\ndata[5] = UInt8(id)\ndata[6] = UInt8(id>>8)\ndata[7] = UInt8(id>>16)\ndata[8] = UInt8(id>>24)\n\ndata[10] = 0x01",
                  "successors": [
                    {
                      "id": 13,
                      "label": "if (paramCount > 0) {\n    var pos = 14 + ((Int64(paramCount) + 7) / 8)\n    for(i in 14 .. pos) {\n        data[i] = UInt8(bitMask >> UInt64((i - 14)* 8))\n    }\n\n    data[pos] = 0x01\n    pos ++\n\n    paramTypes.copyTo(data, 0, pos, paramTypes.size)\n    pos += paramTypes.size\n    for(i in 0 .. paramCount) {\n        let paramValue = paramValues[Int64(i)]\n        paramValue.toArray().copyTo(data, 0, pos, paramValue.toArray().size)\n        pos += paramValue.toArray().size\n    }\n}",
                      "successors": []
                    },
                    {
                      "id": 14,
                      "label": "connection.writePacket(data)\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class MySqlStatement <: Statement {\n\n    private let connection: MysqlConnection\n    private let sql: String\n    private var id : UInt32 = 0\n    private var columnCount: UInt16 = 0\n    private var paramCount: UInt16 = 0\n    private let _parameters: Array<ColumnInfo> = Array<ColumnInfo>()\n    private let _columns: Array<ColumnInfo> = Array<ColumnInfo>()\n\n    private var rowCount: Int64 = 0\n    private var lastInsertId: Int64 = 0\n\n\n\n    }\n\n    }\n\n\n    }\n    }\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n\n    }\n\n    }\n\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class MySqlStatement <: Statement {",
          "successors": [
            {
              "id": 2,
              "label": "    private let connection: MysqlConnection",
              "successors": []
            },
            {
              "id": 3,
              "label": "    private let sql: String",
              "successors": []
            },
            {
              "id": 4,
              "label": "    private var id : UInt32 = 0",
              "successors": []
            },
            {
              "id": 5,
              "label": "    private var columnCount: UInt16 = 0",
              "successors": []
            },
            {
              "id": 6,
              "label": "    private var paramCount: UInt16 = 0",
              "successors": []
            },
            {
              "id": 7,
              "label": "    private let _parameters: Array<ColumnInfo> = Array<ColumnInfo>()",
              "successors": []
            },
            {
              "id": 8,
              "label": "    private let _columns: Array<ColumnInfo> = Array<ColumnInfo>()",
              "successors": []
            },
            {
              "id": 9,
              "label": "    private var rowCount: Int64 = 0",
              "successors": []
            },
            {
              "id": 10,
              "label": "    private var lastInsertId: Int64 = 0",
              "successors": []
            },
            {
              "id": 11,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package cangjieWeb.mysql\nimport std.database.sql.{Statement, ColumnInfo, QueryResult, SqlDbType, UpdateResult, SqlNullableBigInt, SqlBigInt, SqlVarchar, SqlInteger}\nimport std.collection.{ArrayList}\nimport cangjieWeb.utils.ByteArrayUtils\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package cangjieWeb.mysql\nimport std.database.sql.{Statement, ColumnInfo, QueryResult, SqlDbType, UpdateResult, SqlNullableBigInt, SqlBigInt, SqlVarchar, SqlInteger}",
      "successors": [
        {
          "id": 3,
          "label": "import std.collection.{ArrayList}\nimport cangjieWeb.utils.ByteArrayUtils",
          "successors": []
        }
      ]
    }
  ]
}