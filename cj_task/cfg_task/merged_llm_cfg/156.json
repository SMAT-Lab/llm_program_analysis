{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 40,
  "functions": [],
  "classes": [
    {
      "name": "FileUtils",
      "type": "class",
      "start_line": 6,
      "end_line": 40,
      "functions": [
        {
          "name": "isFilePathValid",
          "type": "function",
          "start_line": 9,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func isFilePathValid(filePath: String): (String,String) {\n        let con: Option<Int64> = filePath.lastIndexOf(\"/\")\n        var lastSlash: Int64 = 0\n        match (con) {\n           case Some(v) => lastSlash = v\n           case None => throw Exception(\"Invalid filepath\")\n        }\n        let directoryName: String = filePath[0..lastSlash]\n        let fileName: String = filePath[lastSlash + 1..]\n        let confield: Option<Int64> = fileName.lastIndexOf(\".\")\n        var len: Int64 = 0\n        match (confield) {\n           case Some(v) => len = v\n           case None => throw Exception(\"Invalid filepath. Need to include filename\")\n        }\n        let fields: String = fileName[len + 1..]\n        logger.info(\"isFilePathValid lastSlash INDEX : \"+\"${lastSlash}\"+\" directoryName : \"+\"${directoryName}\"+\" fileName : \"+\"${fileName}\")\n        let isFile: Bool = isReg(fileName)\n        let isDir: Bool = isDir(directoryName)\n        if (!isFile) {\n            logger.info(\"isFilePathValid isFile is  \" + \"${isFile}\")\n            throw Exception(\"${fileName}\" + \" not normal file\")\n        }\n        if (!isDir) {\n            logger.info(\"isFilePathValid isDir is  \" + \"${isDir}\")\n            throw Exception(\"isFilePathValid invalid directory\")\n        }\n        logger.info(\"isFilePathValid filePath is valid\")\n        logger.flush()\n        return (fileName,fields)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func isFilePathValid(filePath: String): (String,String) {\nlet con: Option<Int64> = filePath.lastIndexOf(\"/\")",
              "successors": [
                {
                  "id": 3,
                  "label": "var lastSlash: Int64 = 0\nmatch (con) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "case Some(v) => lastSlash = v\nlet directoryName: String = filePath[0..lastSlash]",
                      "successors": [
                        {
                          "id": 8,
                          "label": "let fileName: String = filePath[lastSlash + 1..]\nlet confield: Option<Int64> = fileName.lastIndexOf(\".\")",
                          "successors": [
                            {
                              "id": 10,
                              "label": "var len: Int64 = 0\nmatch (confield) {",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "case Some(v) => len = v\nlet fields: String = fileName[len + 1..]",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "logger.info(\"isFilePathValid lastSlash INDEX : \"+\"${lastSlash}\"+\" directoryName : \"+\"${directoryName}\"+\" fileName : \"+\"${fileName}\")\nlet isFile: Bool = isReg(fileName)",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "let isDir: Bool = isDir(directoryName)",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "label": "if (!isFile) {\nlogger.info(\"isFilePathValid isFile is  \" + \"${isFile}\")",
                                              "successors": [
                                                {
                                                  "id": 20,
                                                  "label": "throw Exception(\"${fileName}\" + \" not normal file\")",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 21,
                                              "label": "if (!isDir) {\nlogger.info(\"isFilePathValid isDir is  \" + \"${isDir}\")",
                                              "successors": [
                                                {
                                                  "id": 23,
                                                  "label": "throw Exception(\"isFilePathValid invalid directory\")",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 24,
                                              "label": "logger.info(\"isFilePathValid filePath is valid\")\nlogger.flush()",
                                              "successors": [
                                                {
                                                  "id": 26,
                                                  "label": "return (fileName,fields)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 13,
                                  "label": "case None => throw Exception(\"Invalid filepath. Need to include filename\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "case None => throw Exception(\"Invalid filepath\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "public class FileUtils {\n    public init() {}\n    let logger: SimpleLogger = SimpleLogger()\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class FileUtils {",
          "successors": [
            {
              "id": 2,
              "label": "    public init() {}",
              "successors": []
            },
            {
              "id": 3,
              "label": "    let logger: SimpleLogger = SimpleLogger()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package mp4parser\nimport std.os.posix.*\nimport std.collection.*\nimport std.io.*\nimport std.log.*\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package mp4parser\nimport std.os.posix.*",
      "successors": [
        {
          "id": 3,
          "label": "import std.collection.*\nimport std.io.*",
          "successors": [
            {
              "id": 5,
              "label": "import std.log.*",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}