{
  "name": "SimpleJsonReader",
  "type": "CFG",
  "start_line": 1,
  "end_line": 37,
  "functions": [],
  "classes": [
    {
      "name": "JsonBoolTest",
      "type": "class",
      "start_line": 7,
      "end_line": 37,
      "functions": [
        {
          "name": "testBoolOptionTrue",
          "type": "function",
          "start_line": 9,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testBoolOptionTrue() {\n        @Expect(Json(str: #\"{ \"true\" : true }\"#)[\"true\"].bool, Option.Some(true))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testBoolOptionTrue() {\n    @Expect(Json(str: #\"{ \\\"true\\\" : true }\"#)[\"true\"].bool, Option.Some(true))",
              "successors": []
            }
          ]
        },
        {
          "name": "testBoolTrue",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testBoolTrue() {\n        @Expect(Json(str: #\"{ \"true\" : true }\"#)[\"true\"].boolValue, true)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testBoolTrue() {\n@Expect(Json(str: \"{ \\\"true\\\" : true }\")[\"true\"].boolValue, true)",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testBoolFalse",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testBoolFalse() {\n        @Expect(Json(str: #\"{ \"false\" : false }\"#)[\"false\"].boolValue, false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testBoolFalse() {",
              "successors": [
                {
                  "id": 2,
                  "label": "@Expect(Json(str: #\"{ \"false\" : false }\"#)[\"false\"].boolValue, false)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "testBoolOptionFalse",
          "type": "function",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testBoolOptionFalse() {\n        @Expect(Json(str: #\"{ \"false\" : false }\"#)[\"false\"].boolValue, Option.Some(false))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testBoolOptionFalse() {\n    @Expect(Json(str: #\"{ \"false\" : false }\"#)[\"false\"].boolValue, Option.Some(false))",
              "successors": []
            }
          ]
        },
        {
          "name": "testBoolDefault",
          "type": "function",
          "start_line": 29,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testBoolDefault() {\n        @Expect(Json(str: #\"{}\"#)[\"key\"].boolValue, false)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testBoolDefault() {\n@Expect(Json(str: \"{}\") [\"key\"].boolValue, false)",
              "successors": []
            }
          ]
        },
        {
          "name": "testBoolOptionNone",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    func testBoolOptionNone() {\n        @Expect(Json(str: #\"{}\"#)[\"key\"].bool, Option.None)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func testBoolOptionNone() {\n@Expect(Json(str: #\"{}\"#)[\"key\"].bool, Option.None)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class JsonBoolTest {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package SimpleJsonReader\n\nimport std.unittest.*\nimport std.unittest.testmacro.*\n\n@Test\n}",
  "blocks": []
}