{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 56,
  "functions": [],
  "classes": [
    {
      "name": "DropletOption",
      "type": "class",
      "start_line": 2,
      "end_line": 56,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 7,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    private init(key: String, defaultValue: T, cacheKeyUpdater: CacheKeyUpdater<T>) {\n        super(key)\n        this.defaultValue = Some(defaultValue)\n        this.cacheKeyUpdater = cacheKeyUpdater\n        this.keyBytes = key.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private init(key: String, defaultValue: T, cacheKeyUpdater: CacheKeyUpdater<T>) {\nsuper(key)",
              "successors": [
                {
                  "id": 3,
                  "label": "this.defaultValue = Some(defaultValue)\nthis.cacheKeyUpdater = cacheKeyUpdater",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.keyBytes = key.toArray()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 13,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    private init(key: String, cacheKeyUpdater: CacheKeyUpdater<T>) {\n        super(key)\n        this.defaultValue = None\n        this.cacheKeyUpdater = cacheKeyUpdater\n        this.keyBytes = key.toArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private init(key: String, cacheKeyUpdater: CacheKeyUpdater<T>) {\nsuper(key)",
              "successors": [
                {
                  "id": 3,
                  "label": "this.defaultValue = None\nthis.cacheKeyUpdater = cacheKeyUpdater",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.keyBytes = key.toArray()\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getKeyBytes",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func getKeyBytes(): Array<UInt8> {\n        return keyBytes;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func getKeyBytes(): Array<UInt8> {\nreturn keyBytes;",
              "successors": []
            }
          ]
        },
        {
          "name": "equals",
          "type": "function",
          "start_line": 22,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func equals<V>(o: Any): Bool where V <: AnyDropletOptionValue {\n        if (o is DropletOption<V>) {\n            var other: DropletOption<V> = (o as DropletOption<V>).getOrThrow();\n            return key == other.key\n        }\n        return false;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func equals<V>(o: Any): Bool where V <: AnyDropletOptionValue {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (o is DropletOption<V>) {\nvar other: DropletOption<V> = (o as DropletOption<V>).getOrThrow();\nreturn key == other.key",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return false;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "emptyUpdater",
          "type": "function",
          "start_line": 29,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": "    private static func emptyUpdater(): CacheKeyUpdater<T> {\n        return EMPTY_UPDATER\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private static func emptyUpdater(): CacheKeyUpdater<T> {\n    return EMPTY_UPDATER",
              "successors": []
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 32,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "     func update(value: T, md5: MD5) {\n        cacheKeyUpdater.update(key, value, md5);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func update(value: T, md5: MD5) {\n    cacheKeyUpdater.update(key, value, md5);",
              "successors": []
            }
          ]
        },
        {
          "name": "getDefaultValue",
          "type": "function",
          "start_line": 35,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "     func getDefaultValue(): Option<T> {\n        return defaultValue;\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func getDefaultValue(): Option<T> {\n    return defaultValue;",
              "successors": []
            }
          ]
        },
        {
          "name": "disk",
          "type": "function",
          "start_line": 38,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func disk<V>(key: String, defaultValue: V, cacheKeyUpdater: CacheKeyUpdater<V>): DropletOption<V> where V <: AnyDropletOptionValue {\n        return DropletOption<V>(key, defaultValue, cacheKeyUpdater);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func disk<V>(key: String, defaultValue: V, cacheKeyUpdater: CacheKeyUpdater<V>): DropletOption<V> where V <: AnyDropletOptionValue {\n    return DropletOption<V>(key, defaultValue, cacheKeyUpdater);",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "disk",
          "type": "function",
          "start_line": 41,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func disk<V>(key: String, cacheKeyUpdater: CacheKeyUpdater<V>): DropletOption<V> where V <: AnyDropletOptionValue {\n        return DropletOption<V>(key, cacheKeyUpdater);\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func disk<V>(key: String, cacheKeyUpdater: CacheKeyUpdater<V>): DropletOption<V> where V <: AnyDropletOptionValue {\n    return DropletOption<V>(key, cacheKeyUpdater);",
              "successors": []
            }
          ]
        },
        {
          "name": "memory",
          "type": "function",
          "start_line": 44,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func memory(key: String, defaultValue: T): DropletOption<T> {\n        return DropletOption<T>(key, defaultValue, emptyUpdater());\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func memory(key: String, defaultValue: T): DropletOption<T> {\n    return DropletOption<T>(key, defaultValue, emptyUpdater());",
              "successors": []
            }
          ]
        },
        {
          "name": "memory",
          "type": "function",
          "start_line": 47,
          "end_line": 49,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func memory(key: String): DropletOption<T> {\n        return DropletOption<T>(key, emptyUpdater());\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func memory(key: String): DropletOption<T> {\nreturn DropletOption<T>(key, emptyUpdater());",
              "successors": []
            }
          ]
        },
        {
          "name": "operator ==",
          "type": "function",
          "start_line": 50,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func ==(that: DropletOption<T>): Bool {\n        return key == that.key\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func ==(that: DropletOption<T>): Bool {\n    return key == that.key",
              "successors": []
            }
          ]
        },
        {
          "name": "operator !=",
          "type": "function",
          "start_line": 53,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func !=(that: DropletOption<T>): Bool {\n        return key != that.key\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func !=(that: DropletOption<T>): Bool {\nreturn key != that.key",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class DropletOption<T> <: AnyDropletOptionKey & Equatable<DropletOption<T>> where T <: AnyDropletOptionValue {\n    private static let EMPTY_UPDATER: EmptyUpdater<T> = EmptyUpdater<T>()\n    private let defaultValue: Option<T>\n    private let cacheKeyUpdater: CacheKeyUpdater<T>\n    private var keyBytes: Array<UInt8>\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class DropletOption<T> <: AnyDropletOptionKey & Equatable<DropletOption<T>> where T <: AnyDropletOptionValue {\nprivate static let EMPTY_UPDATER: EmptyUpdater<T> = EmptyUpdater<T>()",
          "successors": [
            {
              "id": 3,
              "label": "private let defaultValue: Option<T>\nprivate let cacheKeyUpdater: CacheKeyUpdater<T>",
              "successors": [
                {
                  "id": 5,
                  "label": "private var keyBytes: Array<UInt8>",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package droplet.droplet\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package droplet.droplet",
      "successors": []
    }
  ]
}