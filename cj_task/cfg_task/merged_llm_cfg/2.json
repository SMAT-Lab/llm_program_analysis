{
  "name": "TestJsonTestUtils",
  "type": "CFG",
  "start_line": 8,
  "end_line": 57,
  "functions": [],
  "classes": [
    {
      "name": "TestJsonTestUtils",
      "type": "class",
      "start_line": 8,
      "end_line": 57,
      "functions": [
        {
          "name": "bool",
          "type": "function",
          "start_line": 10,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": "    func bool() {\n        let a: JsonValue = JsonBool(true)\n        let b: JsonValue = JsonBool(true)\n        assertJson(a, b)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func bool() {\n    let a: JsonValue = JsonBool(true)",
              "successors": [
                {
                  "id": 3,
                  "label": "    let b: JsonValue = JsonBool(true)\n    assertJson(a, b)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "int",
          "type": "function",
          "start_line": 17,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    func int() {\n        let a: JsonValue = JsonInt(1)\n        let b: JsonValue = JsonInt(1)\n        assertJson(a, b)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func int() {\n    let a: JsonValue = JsonInt(1)",
              "successors": [
                {
                  "id": 3,
                  "label": "    let b: JsonValue = JsonInt(1)\n    assertJson(a, b)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "float",
          "type": "function",
          "start_line": 24,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    func float() {\n        let a: JsonValue = JsonFloat(1.0)\n        let b: JsonValue = JsonFloat(1.0)\n        assertJson(a, b)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func float() {\nlet a: JsonValue = JsonFloat(1.0)",
              "successors": [
                {
                  "id": 3,
                  "label": "let b: JsonValue = JsonFloat(1.0)\nassertJson(a, b)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "string",
          "type": "function",
          "start_line": 31,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    func string() {\n        let a: JsonValue = JsonString(\"hello\")\n        let b: JsonValue = JsonString(\"hello\")\n        assertJson(a, b)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func string() {\nlet a: JsonValue = JsonString(\"hello\")",
              "successors": [
                {
                  "id": 3,
                  "label": "let b: JsonValue = JsonString(\"hello\")\nassertJson(a, b)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "array",
          "type": "function",
          "start_line": 38,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    func array() {\n        let a: JsonValue = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])\n        let b: JsonValue = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])\n        assertJson(a, b)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": " FUNC Definition   raw code ",
              "successors": []
            }
          ]
        },
        {
          "name": "object",
          "type": "function",
          "start_line": 45,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "    func object() {\n        let a = JsonObject()\n        a.put(\"a\", JsonInt(1))\n        a.put(\"b\", JsonInt(2))\n        a.put(\"c\", JsonInt(3))\n        \n        let b = JsonObject()\n        b.put(\"a\", JsonInt(1))\n        b.put(\"b\", JsonInt(2))\n        b.put(\"c\", JsonInt(3))\n        assertJson(a, b)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func object() {\nlet a = JsonObject()",
              "successors": [
                {
                  "id": 3,
                  "label": "a.put(\"a\", JsonInt(1))\na.put(\"b\", JsonInt(2))",
                  "successors": [
                    {
                      "id": 5,
                      "label": "a.put(\"c\", JsonInt(3))\nlet b = JsonObject()",
                      "successors": [
                        {
                          "id": 7,
                          "label": "b.put(\"a\", JsonInt(1))\nb.put(\"b\", JsonInt(2))",
                          "successors": [
                            {
                              "id": 9,
                              "label": "b.put(\"c\", JsonInt(3))\nassertJson(a, b)",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class TestJsonTestUtils {\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n\n    @TestCase\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class TestJsonTestUtils {",
          "successors": [
            {
              "id": 2,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 3,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 4,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 5,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 6,
              "label": "@TestCase",
              "successors": []
            },
            {
              "id": 7,
              "label": "@TestCase",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "}",
  "blocks": []
}