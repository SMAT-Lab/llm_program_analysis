{
  "name": "simple_math_interpreter",
  "type": "CFG",
  "start_line": 1,
  "end_line": 73,
  "functions": [],
  "classes": [
    {
      "name": "Combinator<I, O>",
      "type": "class",
      "start_line": 5,
      "end_line": 7,
      "functions": [],
      "classes": [],
      "simplified_code": "public class Combinator<I, O> {\n    public Combinator(public let parseFunc: (List<I>) -> Option<(O, List<I>)>) {}\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class Combinator<I, O> {\npublic Combinator(public let parseFunc: (List<I>) -> Option<(O, List<I>)>) {}",
          "successors": []
        }
      ]
    },
    {
      "name": "Combinator<I, O> Extension",
      "type": "extension",
      "start_line": 9,
      "end_line": 73,
      "functions": [
        {
          "name": "make",
          "type": "function",
          "start_line": 10,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    public static func make(predicate: (I) -> Bool): Combinator<I, I> {\n        Combinator {\n            input => match (input) {\n                case Cons(hd, tl) => if (predicate(hd)) {\n                    Some((hd, tl))\n                } else {\n                    None\n                }\n                case Nil => None\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public static func make(predicate: (I) -> Bool): Combinator<I, I> {\nCombinator {",
              "successors": [
                {
                  "id": 3,
                  "label": "input => match (input) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case Cons(hd, tl) => if (predicate(hd)) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "Some((hd, tl))\nNone",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "} else {\nNone",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "case Nil => None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "map",
          "type": "function",
          "start_line": 23,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func map<O2>(f: (O) -> O2): Combinator<I, O2> {\n        Combinator {\n            input => match (this.parseFunc(input)) {\n                case Some((value, rest)) => Some((f(value), rest))\n                case None => None\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func map<O2>(f: (O) -> O2): Combinator<I, O2> {\nCombinator {",
              "successors": [
                {
                  "id": 3,
                  "label": "input => match (this.parseFunc(input)) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case Some((value, rest)) => Some((f(value), rest))\n}",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case None => None\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "and",
          "type": "function",
          "start_line": 32,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> {\n        Combinator {\n            input => match (this.parseFunc(input)) {\n                case Some((value1, rest1)) => match (c2.parseFunc(rest1)) {\n                    case Some((value2, rest2)) => Some(((value1, value2), rest2))\n                    case None => None\n                }\n                case None => None\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> {\nCombinator {",
              "successors": [
                {
                  "id": 3,
                  "label": "input => match (this.parseFunc(input)) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case Some((value1, rest1)) => match (c2.parseFunc(rest1)) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "case Some((value2, rest2)) => Some(((value1, value2), rest2))\n} } } }",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "case None => None\n} } } }",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "case None => None\n} } } }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "or",
          "type": "function",
          "start_line": 44,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func or(c2: Combinator<I, O>): Combinator<I, O> {\n        Combinator {\n            input => match (this.parseFunc(input)) {\n                case Some(a) => Some(a)\n                case None => c2.parseFunc(input)\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func or(c2: Combinator<I, O>): Combinator<I, O> {\nCombinator {",
              "successors": [
                {
                  "id": 3,
                  "label": "input => match (this.parseFunc(input)) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case Some(a) => Some(a)\n}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "case None => c2.parseFunc(input)\n}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "many",
          "type": "function",
          "start_line": 53,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func many(min: Int64): Combinator<I, List<O>> {\n        Combinator {\n            input =>\n            var vlist = List<O>.empty()\n            var rest = input\n            while (true) {\n                match (this.parseFunc(rest)) {\n                    case None => break\n                    case Some((value, _rest)) =>\n                        rest = _rest\n                        vlist = vlist.add(value)\n                }\n            }\n            if (vlist.lenth() < min) {\n                None\n            } else {\n                Some((vlist.reverse(), rest))\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func many(min: Int64): Combinator<I, List<O>> {\nCombinator {",
              "successors": [
                {
                  "id": 3,
                  "label": "input =>\nvar vlist = List<O>.empty()\nvar rest = input",
                  "successors": [
                    {
                      "id": 5,
                      "label": "while (true) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "match (this.parseFunc(rest)) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "case None => break",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "case Some((value, _rest)) =>\nrest = _rest\nvlist = vlist.add(value)",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "while (true) {",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "match (this.parseFunc(rest)) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "if (vlist.lenth() < min) {\nNone",
                      "successors": []
                    },
                    {
                      "id": 12,
                      "label": "else {\nSome((vlist.reverse(), rest))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "extend<I, O> Combinator<I, O> {\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package simple_math_interpreter\n\nimport simple_math_interpreter.ext.*\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package simple_math_interpreter\nimport simple_math_interpreter.ext.*",
      "successors": []
    }
  ]
}