{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 69,
  "functions": [
    {
      "name": "readFile",
      "type": "function",
      "start_line": 26,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": "func readFile(path: String): String {\n    return String.fromUtf8(File.readFrom(path))\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func readFile(path: String): String {\n    return String.fromUtf8(File.readFrom(path))",
          "successors": []
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 30,
      "end_line": 69,
      "functions": [],
      "classes": [],
      "simplified_code": "main() {\n    let server = HttpServer(\"127.0.0.1\", 8080)\n    // 响应 GET 请求\n    server.route(\"/\", { req, res => \n        if (req.method == \"GET\") {\n            // 设置 http 响应头\n            let Headers = HttpHeaders()\n            Headers.add(\"Content-Type\", \"text/html;charset=utf-8;\")\n            res.setHeaders(Headers)\n            // 返回读取一个 html 文件，并返回给客户端\n            res.body(readFile(\"./index.html\"))\n        }\n    })\n    // 响应 POST 请求\n    server.route(\"/testApi\", { req, res => \n        if (req.method == \"POST\") {\n            // 读取请求内容\n            let data = Array<UInt8>(1024, repeat: 0)\n            let length = req.body.read(data)\n            let content = String.fromUtf8(data.slice(0, length))\n            println(content)\n            let object = JsonValue.fromStr(content).asObject()\n\n            // 初始化一个空的 JsonObject，并添加键值和信息\n            let response = JsonObject()\n            response.put(\"code\", JsonValue.fromStr(\"\\\"ok\\\"\"))\n            let UserName = object.get(\"name\").getOrThrow().asString().getValue()\n            response.put(\"msg\", JsonValue.fromStr(\"\\\"Cangjie：Hello ${UserName}\\\"\"))\n\n            // 设置 http 响应头\n            let headers = HttpHeaders()\n            headers.add(\"Content-Type\", \"applications/json;charset=utf-8;\")\n            res.setHeaders(headers)\n\n            // 将 JsonObject 转为 Json 字符串文本并响应返回\n            res.body(response.toJsonString())\n        }\n    })\n    server.start()\n}",
      "blocks": [
        {
          "id": 1,
          "label": "main() {",
          "successors": [
            {
              "id": 2,
              "label": "let server = HttpServer(\"127.0.0.1\", 8080)\nserver.route(\"/\", { req, res =>",
              "successors": [
                {
                  "id": 4,
                  "label": "if (req.method == \"GET\") {\nlet Headers = HttpHeaders()",
                  "successors": [
                    {
                      "id": 6,
                      "label": "Headers.add(\"Content-Type\", \"text/html;charset=utf-8;\")\nres.setHeaders(Headers)",
                      "successors": [
                        {
                          "id": 8,
                          "label": "res.body(readFile(\"./index.html\"))",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "label": "server.route(\"/testApi\", { req, res =>\nif (req.method == \"POST\") {",
              "successors": [
                {
                  "id": 11,
                  "label": "let data = Array<UInt8>(1024, repeat: 0)\nlet length = req.body.read(data)",
                  "successors": [
                    {
                      "id": 13,
                      "label": "let content = String.fromUtf8(data.slice(0, length))\nprintln(content)",
                      "successors": [
                        {
                          "id": 15,
                          "label": "let object = JsonValue.fromStr(content).asObject()\nlet response = JsonObject()",
                          "successors": [
                            {
                              "id": 17,
                              "label": "response.put(\"code\", JsonValue.fromStr(\"\\\"ok\\\"\"))\nlet UserName = object.get(\"name\").getOrThrow().asString().getValue()",
                              "successors": [
                                {
                                  "id": 19,
                                  "label": "response.put(\"msg\", JsonValue.fromStr(\"\\\"Cangjie：Hello ${UserName}\\\"\"))\nlet headers = HttpHeaders()",
                                  "successors": [
                                    {
                                      "id": 21,
                                      "label": "headers.add(\"Content-Type\", \"applications/json;charset=utf-8;\")\nres.setHeaders(headers)",
                                      "successors": [
                                        {
                                          "id": 23,
                                          "label": "res.body(response.toJsonString())",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 24,
              "label": "server.start()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "HttpServer",
      "type": "class",
      "start_line": 7,
      "end_line": 24,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 9,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(ip: String, port: UInt16) {\n        server = ServerBuilder().addr(ip).port(port).build()\n        println(\"http://${ip}:${port}\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(ip: String, port: UInt16) {\n    server = ServerBuilder().addr(ip).port(port).build()",
              "successors": [
                {
                  "id": 3,
                  "label": "    println(\"http://${ip}:${port}\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "route",
          "type": "function",
          "start_line": 14,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func route(route: String,\n        callback: (req: HttpRequest, res: HttpResponseBuilder) -> Unit) {\n        server.distributor.register(route, { context => \n            callback(context.request, context.responseBuilder)\n        })\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func route(route: String, callback: (req: HttpRequest, res: HttpResponseBuilder) -> Unit) {\nserver.distributor.register(route, { context =>",
              "successors": [
                {
                  "id": 3,
                  "label": "callback(context.request, context.responseBuilder)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "start",
          "type": "function",
          "start_line": 21,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func start() {\n        server.serve()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func start() {\n    server.serve()",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class HttpServer {\n    let server: Server\n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class HttpServer {\nlet server: Server",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "// 构建一个简单的 HTTP 服务器，可以响应 GET 与 POST 请求，并支持 JSON 数据\n// cjc version: 0.55.3\nimport std.fs.{ File, OpenOption }\nimport net.http.*\nimport encoding.json.{ JsonObject, JsonValue }\n\n}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "import std.fs.{ File, OpenOption }\nimport net.http.*\nimport encoding.json.{ JsonObject, JsonValue }",
      "successors": []
    }
  ]
}