{
  "name": "simple_math_interpreter.ext",
  "type": "CFG",
  "start_line": 1,
  "end_line": 19,
  "functions": [],
  "classes": [
    {
      "name": "Option",
      "type": "class",
      "start_line": 5,
      "end_line": 19,
      "functions": [
        {
          "name": "map",
          "type": "function",
          "start_line": 6,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func map<U>(f: (T) -> U): Option<U> {\n        match (this) {\n            case Some(v) => Some(f(v))\n            case None => None\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func map<U>(f: (T) -> U): Option<U> {\nmatch (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Some(v) => Some(f(v))",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case None => None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "okOr",
          "type": "function",
          "start_line": 13,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func okOr<E>(e: E): Result<T, E> {\n        match (this) {\n            case Some(v) => Ok(v)\n            case None => Err(e)\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func okOr<E>(e: E): Result<T, E> {\nmatch (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Some(v) => Ok(v)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case None => Err(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "extend<T> Option<T> <: OptionExt {\n    }\n\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package simple_math_interpreter.ext\n\npublic interface OptionExt {}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package simple_math_interpreter.ext",
      "successors": []
    }
  ]
}