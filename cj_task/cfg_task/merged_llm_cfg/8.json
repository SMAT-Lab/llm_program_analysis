{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 18,
  "functions": [
    {
      "name": "findInterface",
      "type": "function",
      "start_line": 6,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": "func findInterface(name: String, decl: StructDecl): Bool {\n    for (sp in decl.superTypes) {\n        match (sp) {\n            case rt: RefType => if (rt.identifier.value == name) {\n                return true\n            } else {\n                continue\n            }\n            case _ => continue\n        }\n    }\n    return false\n}",
      "blocks": [
        {
          "id": 1,
          "label": "func findInterface(name: String, decl: StructDecl): Bool {",
          "successors": [
            {
              "id": 2,
              "label": "for (sp in decl.superTypes) {",
              "successors": [
                {
                  "id": 3,
                  "label": "match (sp) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case rt: RefType => if (rt.identifier.value == name) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return true",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "continue",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for (sp in decl.superTypes) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "case _ => continue",
                      "successors": [
                        {
                          "id": 2,
                          "label": "for (sp in decl.superTypes) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "label": "return false",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "macro package Macro_JsonSerializable.macros\n\nimport std.ast.*\n\n// 工具方法，查找结构体是否需要实现某个接口\n}",
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros",
      "successors": []
    }
  ]
}