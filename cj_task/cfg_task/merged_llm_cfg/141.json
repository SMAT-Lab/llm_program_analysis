{
  "name": "ID3v2ObseleteFrame",
  "type": "CFG",
  "start_line": 2,
  "end_line": 40,
  "functions": [],
  "classes": [
    {
      "name": "ID3v2ObseleteFrame",
      "type": "class",
      "start_line": 2,
      "end_line": 40,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 7,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(buffer: Array<Int8>, offset: Int32) {\n        super(buffer, offset)\n        super.unpackFrame(buffer, offset)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(buffer: Array<Int8>, offset: Int32) {\n    super(buffer, offset)",
              "successors": [
                {
                  "id": 3,
                  "label": "    super.unpackFrame(buffer, offset)\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(id: String, data: Array<Int8>) {\n        super(id, data)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(id: String, data: Array<Int8>) {\nsuper(id, data)",
              "successors": []
            }
          ]
        },
        {
          "name": "unpackHeader",
          "type": "function",
          "start_line": 14,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected override func unpackHeader(buffer: Array<Int8>, offset: Int32): Int32 {\n        match (BufferTools.byteBufferToStringIgnoringEncodingIssues(\n            buffer,\n            offset + ID_OFFSET,\n            ID_LENGTH\n        )) {\n            case Some(x) => id = x\n            case None => ()\n        }\n        unpackDataLength(buffer, offset)\n        return offset + HEADER_LENGTH\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "protected override func unpackHeader(buffer: Array<Int8>, offset: Int32): Int32 {\nmatch (BufferTools.byteBufferToStringIgnoringEncodingIssues(buffer, offset + ID_OFFSET, ID_LENGTH)) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case Some(x) => id = x\nunpackDataLength(buffer, offset)",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return offset + HEADER_LENGTH",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "case None => ()\nunpackDataLength(buffer, offset)",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return offset + HEADER_LENGTH",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "unpackDataLength",
          "type": "function",
          "start_line": 26,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected override func unpackDataLength(buffer: Array<Int8>, offset: Int32): Unit {\n        dataLength = BufferTools.unpackInteger(\n            Int8(0),\n            buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI)],\n            buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 1],\n            buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 2]\n        )\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "protected override func unpackDataLength(buffer: Array<Int8>, offset: Int32): Unit {\ndataLength = BufferTools.unpackInteger(Int8(0), buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI)], buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 1], buffer[Int64(offset) + Int64(DATA_LENGTH_OFFSET_ZI) + 2])",
              "successors": []
            }
          ]
        },
        {
          "name": "packFrame",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func packFrame(_: Array<Int8>, _: Int32): Unit {\n        throw NotSupportedException(\"Packing Obselete frames is not supported\")\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func packFrame(_: Array<Int8>, _: Int32): Unit {\nthrow NotSupportedException(\"Packing Obselete frames is not supported\")",
              "successors": []
            }
          ]
        },
        {
          "name": "getLength",
          "type": "function",
          "start_line": 37,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    public override func getLength(): Int32 {\n        return dataLength + HEADER_LENGTH\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public override func getLength(): Int32 {\n    return dataLength + HEADER_LENGTH",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class ID3v2ObseleteFrame <: ID3v2Frame {\n    private static let HEADER_LENGTH: Int32 = 6\n    private static let ID_OFFSET: Int32 = 0\n    private static let ID_LENGTH: Int32 = 3\n    private static let DATA_LENGTH_OFFSET_ZI: Int32 = 3\n    }\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class ID3v2ObseleteFrame <: ID3v2Frame {\n    private static let HEADER_LENGTH: Int32 = 6",
          "successors": [
            {
              "id": 3,
              "label": "    private static let ID_OFFSET: Int32 = 0\n    private static let ID_LENGTH: Int32 = 3",
              "successors": [
                {
                  "id": 5,
                  "label": "    private static let DATA_LENGTH_OFFSET_ZI: Int32 = 3",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "}",
  "blocks": []
}