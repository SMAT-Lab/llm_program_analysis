{
  "name": "chardet4cj",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [],
  "classes": [
    {
      "name": "CodingStateMachine",
      "type": "class",
      "start_line": 2,
      "end_line": 30,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 7,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(model: SMModel) {\n        this.model = model\n        this.currentState = SMModel.START\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(model: SMModel) {",
              "successors": [
                {
                  "id": 2,
                  "label": "    this.model = model",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    this.currentState = SMModel.START",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "nextState",
          "type": "function",
          "start_line": 11,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func nextState(c: Byte): Int32 {\n        let byteCls: Int32 = this.model.getClass(c)\n        if (this.currentState == SMModel.START) {\n            this.currentBytePos = 0\n            this.currentCharLen = this.model.getCharLen(byteCls)\n        }\n        this.currentState = this.model.getNextState(byteCls, this.currentState)\n        this.currentBytePos++\n        return this.currentState\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func nextState(c: Byte): Int32 {\nlet byteCls: Int32 = this.model.getClass(c)",
              "successors": [
                {
                  "id": 3,
                  "label": "if (this.currentState == SMModel.START) {\n    this.currentBytePos = 0\n    this.currentCharLen = this.model.getCharLen(byteCls)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "}\nthis.currentState = this.model.getNextState(byteCls, this.currentState)\nthis.currentBytePos++\nreturn this.currentState",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getCurrentCharLen",
          "type": "function",
          "start_line": 21,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getCurrentCharLen(): Int32 {\n        return this.currentCharLen\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getCurrentCharLen(): Int32 {\nreturn this.currentCharLen",
              "successors": []
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "start_line": 24,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func reset() {\n        this.currentState = SMModel.START\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func reset() {\n    this.currentState = SMModel.START",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getCodingStateMachine",
          "type": "function",
          "start_line": 27,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func getCodingStateMachine(): String {\n        return this.model.getName()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func getCodingStateMachine(): String {\n    return this.model.getName()",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class CodingStateMachine {\n    protected var model: SMModel\n    protected var currentState: Int32\n    protected var currentCharLen: Int32 = 0\n    protected var currentBytePos: Int32 = 0\n    }\n    }\n    }\n    }\n    }\n}",
      "blocks": []
    }
  ],
  "simplified_code": "package chardet4cj\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package chardet4cj",
      "successors": []
    }
  ]
}