{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 84,
  "functions": [],
  "classes": [
    {
      "name": "Manifest",
      "type": "class",
      "start_line": 6,
      "end_line": 49,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(id: String,host: String){\n        let book = Books.formID(id)\n        this.metadata = Metadata(book.name,\n                                conformsTo: \"https://readium.org/webpub-manifest/schema/webpub-manifest.jsonld\",\n                                modified: book.lastModifiedDate,\n                                numberOfPages: book.getPageCount())\n        this.metadata.addSeriesBelongTo(book)\n        this.links.append(Link(rel: \"self\", \n                               href: \"http://${host}/api/v1/books/${id}/manifest\", \n                               type_u: \"application/divina+json\"))\n        this.links.append(Link(rel: \"http://opds-spec.org/acquisition\", \n                               href: \"http://${host}/api/v1/books/${id}/file\", \n                               type_u: \"application/vnd.comicbook+zip\"))\n        this.readingOrder = ReadingOrder(id,host,book.getPageCount())\n        this.resources.append(Link(href: \"http://${host}/api/v1/books/${id}/thumbnail\", \n                                   type_u: \"image/jpeg\"))\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(id: String,host: String){\nlet book = Books.formID(id)",
              "successors": [
                {
                  "id": 3,
                  "label": "this.metadata = Metadata(book.name,\n    conformsTo: \"https://readium.org/webpub-manifest/schema/webpub-manifest.jsonld\",\n    modified: book.lastModifiedDate,\n    numberOfPages: book.getPageCount())\nthis.metadata.addSeriesBelongTo(book)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "this.links.append(Link(rel: \"self\",\n    href: \"http://${host}/api/v1/books/${id}/manifest\",\n    type_u: \"application/divina+json\"))\nthis.links.append(Link(rel: \"http://opds-spec.org/acquisition\",\n    href: \"http://${host}/api/v1/books/${id}/file\",\n    type_u: \"application/vnd.comicbook+zip\"))",
                      "successors": [
                        {
                          "id": 7,
                          "label": "this.readingOrder = ReadingOrder(id,host,book.getPageCount())\nthis.resources.append(Link(href: \"http://${host}/api/v1/books/${id}/thumbnail\",\n    type_u: \"image/jpeg\"))",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 28,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJson(): String {\n        let stream = ByteBuffer()\n        let w = JsonWriter(stream)\n        w.startObject()\n        w.writeName(\"context\").writeValue(\"https://readium.org/webpub-manifest/context.jsonld\")\n        w.writeName(\"metadata\").writeValue(metadata)\n        w.writeName(\"links\").writeValue<ArrayList<Link>>(links)\n        w.writeName(\"images\").startArray()\n        w.endArray()\n        w.writeName(\"readingOrder\").writeValue(readingOrder)\n        w.writeName(\"resources\").writeValue<ArrayList<Link>>(resources)\n        w.writeName(\"toc\").startArray()\n        w.endArray()\n        w.writeName(\"landmarks\").startArray()\n        w.endArray()\n        w.writeName(\"pageList\").startArray()\n        w.endArray()\n        w.endObject()\n        w.flush()\n        return String.fromUtf8(readToEnd(stream))\n    }        ",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(): String {\nlet stream = ByteBuffer()\nlet w = JsonWriter(stream)\nw.startObject()\nw.writeName(\"context\").writeValue(\"https://readium.org/webpub-manifest/context.jsonld\")\nw.writeName(\"metadata\").writeValue(metadata)\nw.writeName(\"links\").writeValue<ArrayList<Link>>(links)\nw.writeName(\"images\").startArray()\nw.endArray()\nw.writeName(\"readingOrder\").writeValue(readingOrder)\nw.writeName(\"resources\").writeValue<ArrayList<Link>>(resources)\nw.writeName(\"toc\").startArray()\nw.endArray()\nw.writeName(\"landmarks\").startArray()\nw.endArray()\nw.writeName(\"pageList\").startArray()\nw.endArray()\nw.endObject()\nw.flush()",
              "successors": [
                {
                  "id": 3,
                  "label": "return String.fromUtf8(readToEnd(stream))\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class Manifest{\n    var metadata: Metadata\n    var links: ArrayList<Link> = ArrayList<Link>()\n    var readingOrder: ReadingOrder\n    var resources: ArrayList<Link> = ArrayList<Link>()\n    }\n    }        \n}",
      "blocks": [
        {
          "id": 1,
          "label": "class Manifest{\nvar metadata: Metadata",
          "successors": [
            {
              "id": 3,
              "label": "var links: ArrayList<Link> = ArrayList<Link>()\nvar readingOrder: ReadingOrder",
              "successors": [
                {
                  "id": 5,
                  "label": "var resources: ArrayList<Link> = ArrayList<Link>()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "ReadingOrder",
      "type": "class",
      "start_line": 51,
      "end_line": 84,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 55,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": "    init(id: String,host: String,count: Int64) {\n        this.host = host\n        this.id = id\n        for (i in 1..=count) {\n            this.pages.append(Page.getPage(id, i, \"\"))\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "this.host = host\nthis.id = id",
              "successors": [
                {
                  "id": 2,
                  "label": "for (i in 1..=count):",
                  "successors": [
                    {
                      "id": 3,
                      "label": "this.pages.append(Page.getPage(id, i, \"\"))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 62,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func toJson(w: JsonWriter): Unit {\n        w.startArray()\n        for (i in 0..pages.size) {\n            w.startObject()\n            w.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}\")\n            w.writeName(\"type\").writeValue(\"image/${pages[i].format}\")\n            w.writeName(\"width\").writeValue(pages[i].width)\n            w.writeName(\"height\").writeValue(pages[i].height)\n            if (pages[i].format != \"jpeg\"){\n                w.writeName(\"alternate\").startArray()\n                w.startObject()\n                w.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}?convert=jpeg\")\n                w.writeName(\"type\").writeValue(\"image/jpeg\")\n                w.writeName(\"width\").writeValue(pages[i].width)\n                w.writeName(\"height\").writeValue(pages[i].height)\n                w.endObject()\n                w.endArray()\n            }\n            w.endObject()   \n        }\n        w.endArray()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func toJson(w: JsonWriter): Unit {\nw.startArray()",
              "successors": [
                {
                  "id": 3,
                  "label": "for (i in 0..pages.size) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "w.startObject()\nw.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}\")",
                      "successors": [
                        {
                          "id": 6,
                          "label": "w.writeName(\"type\").writeValue(\"image/${pages[i].format}\")\nw.writeName(\"width\").writeValue(pages[i].width)",
                          "successors": [
                            {
                              "id": 8,
                              "label": "w.writeName(\"height\").writeValue(pages[i].height)\nif (pages[i].format != \"jpeg\") {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "w.writeName(\"alternate\").startArray()\nw.startObject()",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "w.writeName(\"href\").writeValue(\"http://${host}/api/v1/books/${id}/pages/${i+1}?convert=jpeg\")\nw.writeName(\"type\").writeValue(\"image/jpeg\")",
                                      "successors": [
                                        {
                                          "id": 14,
                                          "label": "w.writeName(\"width\").writeValue(pages[i].width)\nw.writeName(\"height\").writeValue(pages[i].height)",
                                          "successors": [
                                            {
                                              "id": 16,
                                              "label": "w.endObject()\nw.endArray()",
                                              "successors": [
                                                {
                                                  "id": 18,
                                                  "label": "} // end of if\nw.endObject()",
                                                  "successors": [
                                                    {
                                                      "id": 20,
                                                      "label": "} // end of for loop\nw.endArray()",
                                                      "successors": [
                                                        {
                                                          "id": 22,
                                                          "label": "} // end of method",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class ReadingOrder <: JsonSerializable{\n    var pages: ArrayList<Page> = ArrayList<Page>()\n    var host: String = \"\"\n    var id: String = \"\"\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "class ReadingOrder <: JsonSerializable{\nvar pages: ArrayList<Page> = ArrayList<Page>()",
          "successors": [
            {
              "id": 3,
              "label": "var host: String = \"\"\nvar id: String = \"\"",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package opds_cj.path.api.v1.books\n\nimport std.{collection.*,io.*}\nimport encoding.json.stream.*\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package opds_cj.path.api.v1.books\nimport std.{collection.*,io.*}",
      "successors": [
        {
          "id": 3,
          "label": "import encoding.json.stream.*",
          "successors": []
        }
      ]
    }
  ]
}