{
  "name": "NaiveDistributor",
  "type": "CFG",
  "start_line": 6,
  "end_line": 63,
  "functions": [],
  "classes": [
    {
      "name": "NaiveDistributor",
      "type": "class",
      "start_line": 6,
      "end_line": 38,
      "functions": [
        {
          "name": "register",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func register(path: String, handler: HttpRequestHandler): Unit {\n        routerMap.put(path, handler)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func register(path: String, handler: HttpRequestHandler): Unit {",
              "successors": [
                {
                  "id": 2,
                  "label": "routerMap.put(path, handler)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "distribute",
          "type": "function",
          "start_line": 12,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func distribute(path: String): HttpRequestHandler {\n        if (routerMap.contains(path)) {\n            return routerMap[path]\n        }\n        for ((routerPath, handler) in routerMap) {\n            var fail = false\n            var partPath = path.trimEnd(\"/\").split(\"/\")\n            var partRouterPath = routerPath.trimEnd(\"/\").split(\"/\")\n            if (partPath.size != partRouterPath.size) {\n                continue\n            }\n            for (i in 0..partPath.size) {\n                if (partRouterPath[i].startsWith(\":\")) {\n                    continue\n                }\n                if (partPath[i] != partRouterPath[i]) {\n                    fail = true\n                    break\n                }\n            }\n            if (!fail) {\n                return handler\n            }\n        }\n        return NotFoundHandler()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func distribute(path: String): HttpRequestHandler {",
              "successors": [
                {
                  "id": 2,
                  "label": "if (routerMap.contains(path)) {\nreturn routerMap[path]",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "for ((routerPath, handler) in routerMap) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "var fail = false\nvar partPath = path.trimEnd(\"/\").split(\"/\")\nvar partRouterPath = routerPath.trimEnd(\"/\").split(\"/\")",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (partPath.size != partRouterPath.size) {\ncontinue",
                          "successors": [
                            {
                              "id": 4,
                              "label": "for ((routerPath, handler) in routerMap) {",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "for (i in 0..partPath.size) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (partRouterPath[i].startsWith(\":\")) {\ncontinue",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "for (i in 0..partPath.size) {",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "if (partPath[i] != partRouterPath[i]) {\nfail = true\nbreak",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "for ((routerPath, handler) in routerMap) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 13,
                          "label": "if (!fail) {\nreturn handler",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 15,
                  "label": "return NotFoundHandler()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class NaiveDistributor <: HttpRequestDistributor {\n    let routerMap = HashMap<String, HttpRequestHandler>()\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class NaiveDistributor <: HttpRequestDistributor {\nlet routerMap = HashMap<String, HttpRequestHandler>()",
          "successors": []
        }
      ]
    },
    {
      "name": "NotFoundHandler",
      "type": "class",
      "start_line": 40,
      "end_line": 44,
      "functions": [
        {
          "name": "handle",
          "type": "function",
          "start_line": 41,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func handle(httpContext: HttpContext): Unit {\n        httpContext.responseBuilder.status(404).body(\"404 Not Found\".toArray())\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func handle(httpContext: HttpContext): Unit {\n    httpContext.responseBuilder.status(404).body(\"404 Not Found\".toArray())",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class NotFoundHandler <: HttpRequestHandler {\n    }\n}",
      "blocks": []
    },
    {
      "name": "PathMap",
      "type": "class",
      "start_line": 46,
      "end_line": 63,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 49,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init() {\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init() {}",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 52,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(path: String, handler: (HttpContext) -> Unit) {\n        this.paths.put(path, handler)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(path: String, handler: (HttpContext) -> Unit) {\n    this.paths.put(path, handler)",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "add",
          "type": "function",
          "start_line": 56,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func add(path: String, handler: (HttpContext) -> Unit): Unit {\n        this.paths.put(path, handler)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func add(path: String, handler: (HttpContext) -> Unit): Unit {\n    this.paths.put(path, handler)",
              "successors": []
            }
          ]
        },
        {
          "name": "merge",
          "type": "function",
          "start_line": 60,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func merge(addPathMap: PathMap): Unit {\n        this.paths.putAll(addPathMap.paths)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func merge(addPathMap: PathMap): Unit {\n    this.paths.putAll(addPathMap.paths)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct PathMap {\n    public var paths = HashMap<String, (HttpContext) -> Unit>()\n\n    }\n    \n    }\n\n    }\n\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct PathMap {\n    public var paths = HashMap<String, (HttpContext) -> Unit>()",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "}\n\n}\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "for i in range(5):",
      "successors": [
        {
          "id": 2,
          "label": "    if i % 2 == 0:",
          "successors": [
            {
              "id": 3,
              "label": "        print(\"even\")",
              "successors": [
                {
                  "id": 1,
                  "label": "for i in range(5):",
                  "successors": [
                    {
                      "id": 2,
                      "label": "    if i % 2 == 0:",
                      "successors": [
                        {
                          "id": 3,
                          "label": "        print(\"even\")",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "label": "    else:\n        print(\"odd\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 4,
              "label": "    else:\n        print(\"odd\")",
              "successors": [
                {
                  "id": 1,
                  "label": "for i in range(5):",
                  "successors": [
                    {
                      "id": 2,
                      "label": "    if i % 2 == 0:",
                      "successors": [
                        {
                          "id": 3,
                          "label": "        print(\"even\")",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "label": "    else:\n        print(\"odd\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}