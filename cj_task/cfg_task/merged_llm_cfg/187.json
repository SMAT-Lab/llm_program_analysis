{
  "name": "benchmark_client",
  "type": "CFG",
  "start_line": 1,
  "end_line": 52,
  "functions": [],
  "classes": [
    {
      "name": "PerformanceTask",
      "type": "class",
      "start_line": 2,
      "end_line": 52,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 9,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(\n        sessions: Array<Session>,\n        totalRequestCount: Int64,\n        executeNum: Int64,\n        message: String,\n        barrier: Barrier\n    ) {\n        this.sessions = sessions\n        this.totalRequestCount = totalRequestCount\n        this.executeNum = executeNum\n        this.message = message\n        this.barrier = barrier\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(\nsessions: Array<Session>,",
              "successors": [
                {
                  "id": 3,
                  "label": "totalRequestCount: Int64,\nexecuteNum: Int64,",
                  "successors": [
                    {
                      "id": 5,
                      "label": "message: String,\nbarrier: Barrier",
                      "successors": [
                        {
                          "id": 7,
                          "label": ") {\nthis.sessions = sessions",
                          "successors": [
                            {
                              "id": 9,
                              "label": "this.totalRequestCount = totalRequestCount\nthis.executeNum = executeNum",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "this.message = message\nthis.barrier = barrier",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 22,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func run() {\n        // 等待所有线程一起执行\n        barrier.wait()\n        var i = 0\n        while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {\n            // 发送消息，并收取对应的响应\n            let echoRequest = EchoRequest(TaskController.requestIdGenerator.fetchAdd(1), message)\n            let session = sessions[nextIndex()]\n            session.writeAndFlushMessage(echoRequest)\n            try {\n                let echoResponse = echoRequest.waitForResponse()\n                if (TaskController.stopTime.load() == 0) {\n                    let totalCount = TaskController.totalInvokeCount.fetchAdd(1)\n                    if (totalCount + 1 >= totalRequestCount) {\n                        // 设置停止时间\n                        TaskController.stopTime.compareAndSwap(0, DateTime.now().toUnixTimeStamp().toMilliseconds());\n                    }\n                }\n                i++\n            } catch (ex: Exception) {\n                ex.printStackTrace()\n                break\n            }\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func run() {\nbarrier.wait()\nvar i = 0",
              "successors": [
                {
                  "id": 3,
                  "label": "while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "let echoRequest = EchoRequest(TaskController.requestIdGenerator.fetchAdd(1), message)\nlet session = sessions[nextIndex()]\nsession.writeAndFlushMessage(echoRequest)\ntry {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "let echoResponse = echoRequest.waitForResponse()\nif (TaskController.stopTime.load() == 0) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "let totalCount = TaskController.totalInvokeCount.fetchAdd(1)\nif (totalCount + 1 >= totalRequestCount) {\nTaskController.stopTime.compareAndSwap(0, DateTime.now().toUnixTimeStamp().toMilliseconds());",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "i++",
                                  "successors": [
                                    {
                                      "id": 3,
                                      "label": "while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "i++",
                              "successors": [
                                {
                                  "id": 3,
                                  "label": "while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "} catch (ex: Exception) {\nex.printStackTrace()\nbreak",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "nextIndex",
          "type": "function",
          "start_line": 48,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "    private func nextIndex(): Int64 {\n        let index = indexGenerator.fetchAdd(1) % UInt64(sessions.size)\n        return Int64(index)\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private func nextIndex(): Int64 {\n    let index = indexGenerator.fetchAdd(1) % UInt64(sessions.size)",
              "successors": [
                {
                  "id": 3,
                  "label": "    return Int64(index)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class PerformanceTask {\n    static let indexGenerator = AtomicUInt64(0)\n    let sessions: Array<Session>\n    private let totalRequestCount: Int64\n    private let executeNum: Int64\n    private let message: String\n    private let barrier: Barrier\n    }\n    }\n    @OverflowWrapping\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class PerformanceTask {\nstatic let indexGenerator = AtomicUInt64(0)",
          "successors": [
            {
              "id": 3,
              "label": "let sessions: Array<Session>\nprivate let totalRequestCount: Int64",
              "successors": [
                {
                  "id": 5,
                  "label": "private let executeNum: Int64\nprivate let message: String",
                  "successors": [
                    {
                      "id": 7,
                      "label": "private let barrier: Barrier",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package benchmark_client\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package benchmark_client",
      "successors": []
    }
  ]
}