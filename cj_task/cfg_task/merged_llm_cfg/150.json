{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 110,
  "functions": [],
  "classes": [
    {
      "name": "EAN13Reader",
      "type": "class",
      "start_line": 2,
      "end_line": 58,
      "functions": [
        {
          "name": "decodeMiddle",
          "type": "function",
          "start_line": 5,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected func decodeMiddle(\n        row: BitArray,\n        startRange: Array<Int64>,\n        resultString: StringBuilder\n    ): Int64 {\n        let counters = decodeMiddleCounters\n        counters[0] = 0\n        counters[1] = 0\n        counters[2] = 0\n        counters[3] = 0\n        let end = row.size\n        var rowOffset = startRange[1]\n        var lgPatternFound = 0\n        for (x in 0..6) {\n            if (rowOffset >= end) {\n                break\n            }\n            let bestMatch = decodeDigit(row, counters, rowOffset, L_AND_G_PATTERNS)\n            resultString.append(Char(UInt32('0') + UInt32(bestMatch % 10)))\n            for (counter in counters) {\n                rowOffset += counter\n            }\n            if (bestMatch >= 10) {\n                lgPatternFound |= 1 << (5 - x)\n            }\n        }\n        determineFirstDigit(resultString, lgPatternFound)\n        let middleRange = findGuardPattern(row, rowOffset, true, MIDDLE_PATTERN)\n        rowOffset = middleRange[1]\n        for (x in 0..6) {\n            if (rowOffset >= end) {\n                break\n            }\n            let bestMatch = decodeDigit(row, counters, rowOffset, L_PATTERNS)\n            resultString.append(Char(UInt32('0') + UInt32(bestMatch)))\n            for (counter in counters) {\n                rowOffset += counter\n            }\n        }\n        rowOffset\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "let counters = decodeMiddleCounters\ncounters[0] = 0\ncounters[1] = 0\ncounters[2] = 0\ncounters[3] = 0\nlet end = row.size\nvar rowOffset = startRange[1]\nvar lgPatternFound = 0",
              "successors": [
                {
                  "id": 2,
                  "label": "for (x in 0..6) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (rowOffset >= end) {\nbreak",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "let bestMatch = decodeDigit(row, counters, rowOffset, L_AND_G_PATTERNS)\nresultString.append(Char(UInt32('0') + UInt32(bestMatch % 10)))\nfor (counter in counters) {\n    rowOffset += counter\n}\nif (bestMatch >= 10) {\n    lgPatternFound |= 1 << (5 - x)\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "determineFirstDigit(resultString, lgPatternFound)\nlet middleRange = findGuardPattern(row, rowOffset, true, MIDDLE_PATTERN)\nrowOffset = middleRange[1]",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "for (x in 0..6) {",
                  "successors": [
                    {
                      "id": 8,
                      "label": "if (rowOffset >= end) {\nbreak",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "let bestMatch = decodeDigit(row, counters, rowOffset, L_PATTERNS)\nresultString.append(Char(UInt32('0') + UInt32(bestMatch)))\nfor (counter in counters) {\n    rowOffset += counter\n}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "rowOffset",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "getBarcodeFormat",
          "type": "function",
          "start_line": 46,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    func getBarcodeFormat(): BarcodeFormat {\n        return BarcodeFormat.EAN_13\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "func getBarcodeFormat(): BarcodeFormat {\n    return BarcodeFormat.EAN_13",
              "successors": []
            }
          ]
        },
        {
          "name": "determineFirstDigit",
          "type": "function",
          "start_line": 49,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    static func determineFirstDigit(resultString: StringBuilder, lgPatternFound: Int64) {\n        for (d in 0..10) {\n            if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {\n                resultString.insert(0, Char(UInt32('0') + UInt32(d)))\n                return\n            }\n        }\n        throw NotFoundException()\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "static func determineFirstDigit(resultString: StringBuilder, lgPatternFound: Int64) {",
              "successors": [
                {
                  "id": 2,
                  "label": "for (d in 0..10) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {\nresultString.insert(0, Char(UInt32('0') + UInt32(d)))",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "throw NotFoundException()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class EAN13Reader <: UPCEANReader {\n    static let FIRST_DIGIT_ENCODINGS = [0x00, 0x0B, 0x0D, 0xE, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1A]\n    let decodeMiddleCounters: Array<Int64> = Array<Int64>(4, item: 0)\n    }\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class EAN13Reader <: UPCEANReader {\n    static let FIRST_DIGIT_ENCODINGS = [0x00, 0x0B, 0x0D, 0xE, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1A]",
          "successors": [
            {
              "id": 3,
              "label": "    let decodeMiddleCounters: Array<Int64> = Array<Int64>(4, item: 0)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "EAN13Writer",
      "type": "class",
      "start_line": 59,
      "end_line": 110,
      "functions": [
        {
          "name": "getSupportedWriteFormats",
          "type": "function",
          "start_line": 65,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    protected override func getSupportedWriteFormats(): ?HashSet<BarcodeFormat> {\n        HashSet<BarcodeFormat>([BarcodeFormat.EAN_13])\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "protected override func getSupportedWriteFormats(): ?HashSet<BarcodeFormat> {\n    HashSet<BarcodeFormat>([BarcodeFormat.EAN_13])",
              "successors": []
            }
          ]
        },
        {
          "name": "encode",
          "type": "function",
          "start_line": 68,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func encode(oContents: String): Array<Bool> {\n        var contents = oContents\n        let length = contents.size\n        match (length) {\n            case 12 =>\n                let check = try {\n                    UPCEANReader.getStandardUPCEANChecksum(contents)\n                } catch (e: FormatException) {\n                    throw IllegalArgumentException(e.toString())\n                }\n                contents = \"${contents}${check}\"\n            case 13 =>\n                try {\n                    if (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\n                        throw IllegalArgumentException(\"Contents do not pass checksum\")\n                    }\n                } catch (_: FormatException) {\n                    throw IllegalArgumentException(\"Illegal contents\")\n                }\n            case _ =>\n                throw IllegalArgumentException(\"Requested contents should be 12 or 13 digits long, but got ${length}\")\n        }\n        checkNumeric(contents)\n        let firstDigit = charDigit(contents.charAt(0), 10)\n        let parities = EAN13Reader.FIRST_DIGIT_ENCODINGS[firstDigit]\n        let result = Array<Bool>(CODE_WIDTH, item: false)\n        var pos = appendPattern(result, 0, UPCEANReader.START_END_PATTERN, true)\n        for (i in 1..7) {\n            var digit = charDigit(contents.charAt(i), 10)\n            if ((parities >> (6 - i) & 1) == 1) {\n                digit += 10\n            }\n            pos += appendPattern(result, pos, UPCEANReader.L_AND_G_PATTERNS[digit], false)\n        }\n        pos += appendPattern(result, pos, UPCEANReader.MIDDLE_PATTERN, false)\n        for (i in 7..13) {\n            let digit = charDigit(contents.charAt(i), 10)\n            pos += appendPattern(result, pos, UPCEANReader.L_PATTERNS[digit], true)\n        }\n        appendPattern(result, pos, UPCEANReader.START_END_PATTERN, true)\n        result\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func encode(oContents: String): Array<Bool> {",
              "successors": [
                {
                  "id": 2,
                  "label": "var contents = oContents\nlet length = contents.size\nmatch (length) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "case 12 =>\nlet check = try {\n    UPCEANReader.getStandardUPCEANChecksum(contents)\n} catch (e: FormatException) {\n    throw IllegalArgumentException(e.toString())\n}\ncontents = \"${contents}${check}\"",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case 13 =>\ntry {\n    if (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\n        throw IllegalArgumentException(\"Contents do not pass checksum\")\n    }\n} catch (_: FormatException) {\n    throw IllegalArgumentException(\"Illegal contents\")\n}",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "case _ =>\nthrow IllegalArgumentException(\"Requested contents should be 12 or 13 digits long, but got ${length}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "checkNumeric(contents)\nlet firstDigit = charDigit(contents.charAt(0), 10)\nlet parities = EAN13Reader.FIRST_DIGIT_ENCODINGS[firstDigit]\nlet result = Array<Bool>(CODE_WIDTH, item: false)\nvar pos = appendPattern(result, 0, UPCEANReader.START_END_PATTERN, true)",
                  "successors": [
                    {
                      "id": 10,
                      "label": "for (i in 1..7) {",
                      "successors": [
                        {
                          "id": 11,
                          "label": "var digit = charDigit(contents.charAt(i), 10)\nif ((parities >> (6 - i) & 1) == 1) {\n    digit += 10\n}\npos += appendPattern(result, pos, UPCEANReader.L_AND_G_PATTERNS[digit], false)\n}",
                          "successors": [
                            {
                              "id": 13,
                              "label": "pos += appendPattern(result, pos, UPCEANReader.MIDDLE_PATTERN, false)",
                              "successors": [
                                {
                                  "id": 14,
                                  "label": "for (i in 7..13) {",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "let digit = charDigit(contents.charAt(i), 10)\npos += appendPattern(result, pos, UPCEANReader.L_PATTERNS[digit], true)\n}",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "appendPattern(result, pos, UPCEANReader.START_END_PATTERN, true)\nresult",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public class EAN13Writer <: UPCEANWriter {\n    static let CODE_WIDTH = 3 + // start guard\n    (7 * 6) + // left bars\n    5 + // middle guard\n    (7 * 6) + // right bars\n    3\n    }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public class EAN13Writer <: UPCEANWriter {\n    static let CODE_WIDTH = 3 + // start guard\n    (7 * 6) + // left bars\n    5 + // middle guard\n    (7 * 6) + // right bars\n    3",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "package barcode\n}\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package barcode",
      "successors": []
    }
  ]
}