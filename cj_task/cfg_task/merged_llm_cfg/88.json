{
  "name": "SimpleJsonReader",
  "type": "CFG",
  "start_line": 1,
  "end_line": 150,
  "functions": [],
  "classes": [
    {
      "name": "Json",
      "type": "class",
      "start_line": 7,
      "end_line": 150,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    private init(value!: JsonValue) {\n        this.value = value\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "private init(value!: JsonValue) {\n    this.value = value",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": "    public init(str!: String) {\n        var reval: JsonValue\n        try {\n            reval = JsonValue.fromStr(str)\n        } catch (e: Exception) {\n            reval = JsonNull()\n        }\n        this.value = reval\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public init(str!: String) {\nvar reval: JsonValue",
              "successors": [
                {
                  "id": 3,
                  "label": "try {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "reval = JsonValue.fromStr(str)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "} catch (e: Exception) {\nreval = JsonNull()",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "this.value = reval",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "deserialize",
          "type": "function",
          "start_line": 24,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    public func deserialize<T>(): Option<T> where T <: Serializable<T> {\n        try {\n            return T.deserialize(this.dataModel)\n        } catch (_: Exception) {\n            return Option.None\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public func deserialize<T>(): Option<T> where T <: Serializable<T> {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nreturn T.deserialize(this.dataModel)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "catch (_: Exception) {\nreturn Option.None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "[]",
          "type": "function",
          "start_line": 32,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func [](arg: Int): Json {\n        try {\n            match (this.value.kind()) {\n                case JsonKind.JsArray => Json(value: this.value.asArray()[arg])\n                case _ => return Json(value: JsonNull())\n            }\n        } catch (_: Exception) {\n            return Json(value: JsonNull())\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "try {\nmatch (this.value.kind()) {",
              "successors": [
                {
                  "id": 3,
                  "label": "case JsonKind.JsArray => Json(value: this.value.asArray()[arg])",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "case _ => return Json(value: JsonNull())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "[]",
          "type": "function",
          "start_line": 43,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "    public operator func [](arg: String): Json {\n        try {\n            match (this.value.kind()) {\n                case JsonKind.JsObject => Json(value: this.value.asObject()[arg])\n                case _ => return Json(value: JsonNull())\n            }\n        } catch (_: Exception) {\n            return Json(value: JsonNull())\n        }\n    }",
          "blocks": [
            {
              "id": 1,
              "label": "public operator func [](arg: String): Json {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\nmatch (this.value.kind()) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "case JsonKind.JsObject => Json(value: this.value.asObject()[arg])\n}",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "case _ => return Json(value: JsonNull())",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "} catch (_: Exception) {\nreturn Json(value: JsonNull())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "public struct Json {\n    private let value: JsonValue\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    public prop array: Option<Array<Json>> {\n        get() {\n            match (this.value.kind()) {\n                case JsonKind.JsArray => return collectArray(\n                    this.value.asArray().getItems() |> map {e => Json(value: e)})\n                case _ => return Option.None\n            }\n        }\n    }\n\n    public prop arrayValue: Array<Json> {\n        get() {\n            match (this.array) {\n                case Option.Some(v) => return v\n                case Option.None => return Array()\n            }\n        }\n    }\n\n    public prop dataModel: DataModel {\n        get() {\n            return DataModel.fromJson(this.value)\n        }\n    }\n\n    public prop bool: Option<Bool> {\n        get() {\n            match (this.value.kind()) {\n                case JsonKind.JsBool => return Option.Some(this.value.asBool().getValue())\n                case _ => return Option.None\n            }\n        }\n    }\n\n    public prop boolValue: Bool {\n        get() {\n            match (this.bool) {\n                case Option.Some(v) => return v\n                case Option.None => return false\n            }\n        }\n    }\n\n    public prop int64: Option<Int64> {\n        get() {\n            match (this.value.kind()) {\n                case JsonKind.JsInt => return Option.Some(this.value.asInt().getValue())\n                case _ => return Option.None\n            }\n        }\n    }\n\n    public prop int64Value: Int64 {\n        get() {\n            match (this.int64) {\n                case Option.Some(v) => return v\n                case Option.None => return 0\n            }\n        }\n    }\n\n    public prop float64: Option<Float64> {\n        get() {\n            match (this.value.kind()) {\n                case JsonKind.JsFloat => return Option.Some(this.value.asFloat().getValue())\n                case _ => return Option.None\n            }\n        }\n    }\n\n    public prop float64Value: Float64 {\n        get() {\n            match (this.float64) {\n                case Option.Some(v) => return v\n                case Option.None => return 0.0\n            }\n        }\n    }\n\n    public prop string: Option<String> {\n        get() {\n            match (this.value.kind()) {\n                case JsonKind.JsString => return Option.Some(this.value.asString().getValue())\n                case _ => return Option.None\n            }\n        }\n    }\n\n    public prop stringValue: String {\n        get() {\n            match (this.string) {\n                case Option.Some(v) => return v\n                case Option.None => return \"\"\n            }\n        }\n    }\n}",
      "blocks": [
        {
          "id": 1,
          "label": "public struct Json {\n    private let value: JsonValue\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }",
          "successors": [
            {
              "id": 2,
              "label": "public prop array: Option<Array<Json>> {\n    get() {\nmatch (this.value.kind()) {",
              "successors": [
                {
                  "id": 4,
                  "label": "case JsonKind.JsArray => return collectArray(\n    this.value.asArray().getItems() |> map {e => Json(value: e)})",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "case _ => return Option.None",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "public prop arrayValue: Array<Json> {\n    get() {\nmatch (this.array) {",
              "successors": [
                {
                  "id": 8,
                  "label": "case Option.Some(v) => return v",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "case Option.None => return Array()",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "label": "public prop dataModel: DataModel {\n    get() {\nreturn DataModel.fromJson(this.value)",
              "successors": []
            },
            {
              "id": 12,
              "label": "public prop bool: Option<Bool> {\n    get() {\nmatch (this.value.kind()) {",
              "successors": [
                {
                  "id": 14,
                  "label": "case JsonKind.JsBool => return Option.Some(this.value.asBool().getValue())",
                  "successors": []
                },
                {
                  "id": 15,
                  "label": "case _ => return Option.None",
                  "successors": []
                }
              ]
            },
            {
              "id": 16,
              "label": "public prop boolValue: Bool {\n    get() {\nmatch (this.bool) {",
              "successors": [
                {
                  "id": 18,
                  "label": "case Option.Some(v) => return v",
                  "successors": []
                },
                {
                  "id": 19,
                  "label": "case Option.None => return false",
                  "successors": []
                }
              ]
            },
            {
              "id": 20,
              "label": "public prop int64: Option<Int64> {\n    get() {\nmatch (this.value.kind()) {",
              "successors": [
                {
                  "id": 22,
                  "label": "case JsonKind.JsInt => return Option.Some(this.value.asInt().getValue())",
                  "successors": []
                },
                {
                  "id": 23,
                  "label": "case _ => return Option.None",
                  "successors": []
                }
              ]
            },
            {
              "id": 24,
              "label": "public prop int64Value: Int64 {\n    get() {\nmatch (this.int64) {",
              "successors": [
                {
                  "id": 26,
                  "label": "case Option.Some(v) => return v",
                  "successors": []
                },
                {
                  "id": 27,
                  "label": "case Option.None => return 0",
                  "successors": []
                }
              ]
            },
            {
              "id": 28,
              "label": "public prop float64: Option<Float64> {\n    get() {\nmatch (this.value.kind()) {",
              "successors": [
                {
                  "id": 30,
                  "label": "case JsonKind.JsFloat => return Option.Some(this.value.asFloat().getValue())",
                  "successors": []
                },
                {
                  "id": 31,
                  "label": "case _ => return Option.None",
                  "successors": []
                }
              ]
            },
            {
              "id": 32,
              "label": "public prop float64Value: Float64 {\n    get() {\nmatch (this.float64) {",
              "successors": [
                {
                  "id": 34,
                  "label": "case Option.Some(v) => return v",
                  "successors": []
                },
                {
                  "id": 35,
                  "label": "case Option.None => return 0.0",
                  "successors": []
                }
              ]
            },
            {
              "id": 36,
              "label": "public prop string: Option<String> {\n    get() {\nmatch (this.value.kind()) {",
              "successors": [
                {
                  "id": 38,
                  "label": "case JsonKind.JsString => return Option.Some(this.value.asString().getValue())",
                  "successors": []
                },
                {
                  "id": 39,
                  "label": "case _ => return Option.None",
                  "successors": []
                }
              ]
            },
            {
              "id": 40,
              "label": "public prop stringValue: String {\n    get() {\nmatch (this.string) {",
              "successors": [
                {
                  "id": 42,
                  "label": "case Option.Some(v) => return v",
                  "successors": []
                },
                {
                  "id": 43,
                  "label": "case Option.None => return \"\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "package SimpleJsonReader\n\nimport encoding.json.*\nimport std.collection.*\nimport serialization.serialization.*\n\n}",
  "blocks": [
    {
      "id": 1,
      "label": "package SimpleJsonReader",
      "successors": []
    }
  ]
}