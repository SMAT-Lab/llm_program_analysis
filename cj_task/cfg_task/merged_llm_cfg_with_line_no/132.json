{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 70,
  "functions": [],
  "classes": [
    {
      "name": "ObservableConcatMap",
      "type": "class",
      "start_line": 2,
      "end_line": 12,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 4,
          "end_line": 6,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 4,
              "line": "    init(sources: Collection<Observable<T>>) {"
            },
            {
              "lineno": 5,
              "line": "        this.sources = ArrayList<Observable<T>>(sources)"
            },
            {
              "lineno": 6,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init(sources: Collection<Observable<T>>) {\n        this.sources = ArrayList<Observable<T>>(sources)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "subscribeActual",
          "type": "function",
          "start_line": 7,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 7,
              "line": "    public func subscribeActual(observer: Observer<T>) {"
            },
            {
              "lineno": 8,
              "line": "        let disposable = ConcatMapObserver(observer, sources)"
            },
            {
              "lineno": 9,
              "line": "        observer.onSubscribe(disposable)"
            },
            {
              "lineno": 10,
              "line": "        disposable.drain()"
            },
            {
              "lineno": 11,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func subscribeActual(observer: Observer<T>) {\n        let disposable = ConcatMapObserver(observer, sources)\n        observer.onSubscribe(disposable)\n        disposable.drain()\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "class ObservableConcatMap<T> <: Observable<T> {"
        },
        {
          "lineno": 3,
          "line": "    private let sources: ArrayList<Observable<T>>"
        },
        {
          "lineno": 12,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ObservableConcatMap<T> <: Observable<T> {\n    private let sources: ArrayList<Observable<T>>",
          "successors": []
        }
      ]
    },
    {
      "name": "ConcatMapObserver",
      "type": "class",
      "start_line": 13,
      "end_line": 45,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 20,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    init(downstream: Observer<T>, sources: ArrayList<Observable<T>>) {"
            },
            {
              "lineno": 21,
              "line": "        this.downstream = downstream"
            },
            {
              "lineno": 22,
              "line": "        this.sources = sources"
            },
            {
              "lineno": 23,
              "line": "        this.observer = InnerObserver<T>(downstream)"
            },
            {
              "lineno": 24,
              "line": "        this.observer.parent = this"
            },
            {
              "lineno": 25,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init(downstream: Observer<T>, sources: ArrayList<Observable<T>>) {\n        this.downstream = downstream\n        this.sources = sources\n        this.observer = InnerObserver<T>(downstream)\n        this.observer.parent = this\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "drain",
          "type": "function",
          "start_line": 26,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    func drain() {"
            },
            {
              "lineno": 27,
              "line": "        if (!active || isDisposed()) {"
            },
            {
              "lineno": 28,
              "line": "            return"
            },
            {
              "lineno": 29,
              "line": "        }"
            },
            {
              "lineno": 30,
              "line": "        if (index >= sources.size) {"
            },
            {
              "lineno": 31,
              "line": "            downstream.onComplete()"
            },
            {
              "lineno": 32,
              "line": "            return"
            },
            {
              "lineno": 33,
              "line": "        }"
            },
            {
              "lineno": 34,
              "line": "        let o: Observable<T> = sources[index]"
            },
            {
              "lineno": 35,
              "line": "        index++"
            },
            {
              "lineno": 36,
              "line": "        o.subscribe(observer)"
            },
            {
              "lineno": 37,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func drain() {\n        if (!active || isDisposed()) {\n            return\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        if (index >= sources.size) {\n            downstream.onComplete()\n            return\n        }",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        let o: Observable<T> = sources[index]\n        index++\n        o.subscribe(observer)\n    }",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "dispose",
          "type": "function",
          "start_line": 38,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    public func dispose(): Unit {"
            },
            {
              "lineno": 39,
              "line": "        cancelled = true"
            },
            {
              "lineno": 40,
              "line": "        observer.dispose()"
            },
            {
              "lineno": 41,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func dispose(): Unit {\n        cancelled = true\n        observer.dispose()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "isDisposed",
          "type": "function",
          "start_line": 42,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    public func isDisposed(): Bool {"
            },
            {
              "lineno": 43,
              "line": "        return cancelled"
            },
            {
              "lineno": 44,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func isDisposed(): Bool {\n        return cancelled\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "class ConcatMapObserver<T> <: EquatableDisposable {"
        },
        {
          "lineno": 14,
          "line": "    private let downstream: Observer<T>"
        },
        {
          "lineno": 15,
          "line": "    protected let observer: InnerObserver<T>"
        },
        {
          "lineno": 16,
          "line": "    private let sources: ArrayList<Observable<T>>"
        },
        {
          "lineno": 17,
          "line": "    private var index: Int64 = 0"
        },
        {
          "lineno": 18,
          "line": "    private var cancelled: Bool = false"
        },
        {
          "lineno": 19,
          "line": "    protected var active: Bool = true"
        },
        {
          "lineno": 45,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ConcatMapObserver<T> <: EquatableDisposable {\n    private let downstream: Observer<T>\n    protected let observer: InnerObserver<T>\n    private let sources: ArrayList<Observable<T>>\n    private var index: Int64 = 0\n    private var cancelled: Bool = false\n    protected var active: Bool = true\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "InnerObserver",
      "type": "class",
      "start_line": 46,
      "end_line": 70,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 50,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    init(downstream: Observer<T>) {"
            },
            {
              "lineno": 51,
              "line": "        this.downstream = downstream"
            },
            {
              "lineno": 52,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init(downstream: Observer<T>) {\n        this.downstream = downstream\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "onSubscribe",
          "type": "function",
          "start_line": 53,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 53,
              "line": "    public func onSubscribe(disposable: Disposable): Unit {"
            },
            {
              "lineno": 54,
              "line": "        disposableReference.setOnce(disposable)"
            },
            {
              "lineno": 55,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func onSubscribe(disposable: Disposable): Unit {\n        disposableReference.setOnce(disposable)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "onNext",
          "type": "function",
          "start_line": 56,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 56,
              "line": "    public func onNext(value: T) {"
            },
            {
              "lineno": 57,
              "line": "        downstream.onNext(value)"
            },
            {
              "lineno": 58,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func onNext(value: T) {\n        downstream.onNext(value)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "onError",
          "type": "function",
          "start_line": 59,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 59,
              "line": "    public func onError(exception: Exception) {"
            },
            {
              "lineno": 60,
              "line": "        parent?.active = false"
            },
            {
              "lineno": 61,
              "line": "        parent?.drain()"
            },
            {
              "lineno": 62,
              "line": "        downstream.onError(exception)"
            },
            {
              "lineno": 63,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func onError(exception: Exception) {\n    parent?.active = false\n    parent?.drain()\n    downstream.onError(exception)",
              "successors": []
            }
          ]
        },
        {
          "name": "onComplete",
          "type": "function",
          "start_line": 64,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 64,
              "line": "    public func onComplete(): Unit {"
            },
            {
              "lineno": 65,
              "line": "        parent?.drain()"
            },
            {
              "lineno": 66,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func onComplete(): Unit {\n        parent?.drain()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "dispose",
          "type": "function",
          "start_line": 67,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    public func dispose(): Unit {"
            },
            {
              "lineno": 68,
              "line": "        DisposableHelper.dispose(disposableReference)"
            },
            {
              "lineno": 69,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func dispose(): Unit {\n        DisposableHelper.dispose(disposableReference)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 46,
          "line": "class InnerObserver<T> <: Observer<T> {"
        },
        {
          "lineno": 47,
          "line": "    private let downstream: Observer<T>"
        },
        {
          "lineno": 48,
          "line": "    protected var parent: ?ConcatMapObserver<T> = Option.None"
        },
        {
          "lineno": 49,
          "line": "    private var disposableReference: DisposableReference = DisposableReference()"
        },
        {
          "lineno": 70,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class InnerObserver<T> <: Observer<T> {\n    private let downstream: Observer<T>\n    protected var parent: ?ConcatMapObserver<T> = Option.None\n    private var disposableReference: DisposableReference = DisposableReference()\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package rx.observables"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package rx.observables",
      "successors": []
    }
  ]
}