{
  "name": "cj_easy_data_macros",
  "type": "CFG",
  "start_line": 1,
  "end_line": 74,
  "functions": [
    {
      "name": "ToStringClass",
      "type": "function",
      "start_line": 8,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "public macro ToStringClass(input: Tokens): Tokens {"
        },
        {
          "lineno": 9,
          "line": "    var classDecl = getClassDecl(input)"
        },
        {
          "lineno": 10,
          "line": "    return addToString(classDecl).toTokens()"
        },
        {
          "lineno": 11,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public macro ToStringClass(input: Tokens): Tokens {\n    var classDecl = getClassDecl(input)\n    return addToString(classDecl).toTokens()\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "NoToString",
      "type": "function",
      "start_line": 13,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "public macro NoToString(input: Tokens): Tokens {"
        },
        {
          "lineno": 14,
          "line": "    //当判断外部宏不存在Data或ToStringClass注解时会报错"
        },
        {
          "lineno": 15,
          "line": "    if (!insideParentContext(\"Data\") && !insideParentContext(\"ToStringClass\")) {"
        },
        {
          "lineno": 16,
          "line": "            throw MacroContextException (\"NoToString need Data or ToStringClass\")"
        },
        {
          "lineno": 17,
          "line": "    }"
        },
        {
          "lineno": 18,
          "line": "    let decl = VarDecl(input)"
        },
        {
          "lineno": 19,
          "line": "    setItem(decl.identifier.value, true)"
        },
        {
          "lineno": 20,
          "line": "    return input"
        },
        {
          "lineno": 21,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public macro NoToString(input: Tokens): Tokens {\n    //当判断外部宏不存在Data或ToStringClass注解时会报错\nif (!insideParentContext(\"Data\") && !insideParentContext(\"ToStringClass\")) {\n        throw MacroContextException (\"NoToString need Data or ToStringClass\")",
          "successors": [
            {
              "id": 3,
              "label": "}\n    let decl = VarDecl(input)\n    setItem(decl.identifier.value, true)\n    return input\n}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "addToString",
      "type": "function",
      "start_line": 24,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 24,
          "line": "func addToString(clazz: ClassDecl): ClassDecl {"
        },
        {
          "lineno": 25,
          "line": "    let types = clazz.superTypes"
        },
        {
          "lineno": 26,
          "line": "    if (!isSuperToString(types)) {"
        },
        {
          "lineno": 27,
          "line": "        if (clazz.upperBound.value != \"<:\") {"
        },
        {
          "lineno": 28,
          "line": "            clazz.upperBound = Token(UPPERBOUND, \"<:\")"
        },
        {
          "lineno": 29,
          "line": "        }"
        },
        {
          "lineno": 30,
          "line": "        types.append(RefType(quote(ToString)))"
        },
        {
          "lineno": 31,
          "line": "    }"
        },
        {
          "lineno": 32,
          "line": "    if (isFuncToString(clazz)) {"
        },
        {
          "lineno": 33,
          "line": "        return clazz"
        },
        {
          "lineno": 34,
          "line": "    }"
        },
        {
          "lineno": 35,
          "line": "    var sb = StringBuilder()"
        },
        {
          "lineno": 36,
          "line": "    //接受内部宏NoToString消息"
        },
        {
          "lineno": 37,
          "line": "    let msg = getChildMessages(NO_TO_STRING)"
        },
        {
          "lineno": 38,
          "line": "    for (d in clazz.body.decls) {"
        },
        {
          "lineno": 39,
          "line": "        if (isFunc(d.keyword)) {"
        },
        {
          "lineno": 40,
          "line": "            continue;"
        },
        {
          "lineno": 41,
          "line": "        }"
        },
        {
          "lineno": 42,
          "line": "        var kind = match (d) {"
        },
        {
          "lineno": 43,
          "line": "            case m: MacroExpandDecl =>"
        },
        {
          "lineno": 44,
          "line": "                let vd = (m.macroInputDecl as VarDecl).getOrThrow()"
        },
        {
          "lineno": 45,
          "line": "                Some(vd.identifier.value)"
        },
        {
          "lineno": 46,
          "line": "            case v: VarDecl => Some(v.identifier.value)"
        },
        {
          "lineno": 47,
          "line": "            case _ => None<String>"
        },
        {
          "lineno": 48,
          "line": "        }"
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 50,
          "line": "        if (let Some(value) <- kind) {"
        },
        {
          "lineno": 51,
          "line": "            let hasKey = msg |> any {m => m.hasItem(value)}"
        },
        {
          "lineno": 52,
          "line": "            if (!hasKey) {"
        },
        {
          "lineno": 53,
          "line": "                sb.append(\"${value}:\\${${value}},\")"
        },
        {
          "lineno": 54,
          "line": "            }"
        },
        {
          "lineno": 55,
          "line": "        }"
        },
        {
          "lineno": 56,
          "line": "    }"
        },
        {
          "lineno": 57,
          "line": "    let str = sb.toString().trimRight(\",\")"
        },
        {
          "lineno": 58,
          "line": "    let funDecl = FuncDecl(quote(public func toString():String{"
        },
        {
          "lineno": 59,
          "line": "        return $(str)"
        },
        {
          "lineno": 60,
          "line": "    }))"
        },
        {
          "lineno": 61,
          "line": "    clazz.body.decls.append(funDecl)"
        },
        {
          "lineno": 62,
          "line": "    return clazz"
        },
        {
          "lineno": 63,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func addToString(clazz: ClassDecl): ClassDecl {\n    let types = clazz.superTypes\nif (!isSuperToString(types)) {\n    if (clazz.upperBound.value != \"<:\") {\n        clazz.upperBound = Token(UPPERBOUND, \"<:\")\n    }\n    types.append(RefType(quote(ToString)))\n}",
          "successors": [
            {
              "id": 3,
              "label": "if (isFuncToString(clazz)) {\n    return clazz\n}\nvar sb = StringBuilder()\n//接受内部宏NoToString消息\nlet msg = getChildMessages(NO_TO_STRING)\nfor (d in clazz.body.decls) {\n    if (isFunc(d.keyword)) {\n        continue;\n    }\n    var kind = match (d) {\n        case m: MacroExpandDecl =>\n            let vd = (m.macroInputDecl as VarDecl).getOrThrow()\n            Some(vd.identifier.value)\n        case v: VarDecl => Some(v.identifier.value)\n        case _ => None<String>\n    }\n\n    if (let Some(value) <- kind) {\n        let hasKey = msg |> any {m => m.hasItem(value)}\n        if (!hasKey) {\n            sb.append(\"${value}:\\${${value}},\")\n        }\n    }\n}\nlet str = sb.toString().trimRight(\",\")",
              "successors": [
                {
                  "id": 5,
                  "label": "let funDecl = FuncDecl(quote(public func toString():String{\n    return $(str)\n}))\nclazz.body.decls.append(funDecl)\nreturn clazz",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "isFuncToString",
      "type": "function",
      "start_line": 65,
      "end_line": 69,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 65,
          "line": "func isFuncToString(clazz: ClassDecl): Bool {"
        },
        {
          "lineno": 66,
          "line": "    return clazz.body.decls |> filter {d => isFunc(d.keyword)} |> any {"
        },
        {
          "lineno": 67,
          "line": "        d => d.identifier.value == \"toString\""
        },
        {
          "lineno": 68,
          "line": "    }"
        },
        {
          "lineno": 69,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func isFuncToString(clazz: ClassDecl): Bool {\n    return clazz.body.decls |> filter {d => isFunc(d.keyword)} |> any {\n        d => d.identifier.value == \"toString\"\n    }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "isSuperToString",
      "type": "function",
      "start_line": 71,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 71,
          "line": "func isSuperToString(superTypes: ArrayList<TypeNode>): Bool {"
        },
        {
          "lineno": 72,
          "line": "    return superTypes |>"
        },
        {
          "lineno": 73,
          "line": "        any {x: TypeNode => x is RefType && (x as RefType).getOrThrow().identifier.value.indexOf(\"ToString\") != None}"
        },
        {
          "lineno": 74,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func isSuperToString(superTypes: ArrayList<TypeNode>): Bool {\n    return superTypes |>\n        any {x: TypeNode => x is RefType && (x as RefType).getOrThrow().identifier.value.indexOf(\"ToString\") != None}\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package cj_easy_data.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.*"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "const NO_TO_STRING = \"NoToString\""
    },
    {
      "lineno": 7,
      "line": "//加在类上"
    },
    {
      "lineno": 12,
      "line": "//加在字段上,避免没有toString方法的类编译错误"
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": "//添加toString方法"
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 70,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "macro package cj_easy_data.macros\n\nimport std.ast.*\nimport std.collection.*",
      "successors": [
        {
          "id": 3,
          "label": "\nconst NO_TO_STRING = \"NoToString\"\n//加在类上\n//加在字段上,避免没有toString方法的类编译错误",
          "successors": [
            {
              "id": 5,
              "label": "\n//添加toString方法\n\n\n",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}