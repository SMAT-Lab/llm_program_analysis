{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 75,
  "functions": [],
  "classes": [
    {
      "name": "List",
      "type": "class",
      "start_line": 3,
      "end_line": 62,
      "functions": [
        {
          "name": "empty",
          "type": "function",
          "start_line": 9,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public static func empty(): List<A> {"
            },
            {
              "lineno": 10,
              "line": "        Nil"
            },
            {
              "lineno": 11,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func empty(): List<A> {\n        Nil\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "cons",
          "type": "function",
          "start_line": 13,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    public static func cons(hd: A, tl: List<A>): List<A> {"
            },
            {
              "lineno": 14,
              "line": "        Cons(hd, tl)"
            },
            {
              "lineno": 15,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func cons(hd: A, tl: List<A>): List<A> {\n        Cons(hd, tl)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "makeBy",
          "type": "function",
          "start_line": 17,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    public static func makeBy(n: Int64, f: (Int64) -> A): List<A> {"
            },
            {
              "lineno": 18,
              "line": "        var acc = List<A>.empty()"
            },
            {
              "lineno": 19,
              "line": "        for (i in 0..n) {"
            },
            {
              "lineno": 20,
              "line": "            acc = acc.add(f(i))"
            },
            {
              "lineno": 21,
              "line": "        }"
            },
            {
              "lineno": 22,
              "line": "        acc.reverse()"
            },
            {
              "lineno": 23,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public static func makeBy(n: Int64, f: (Int64) -> A): List<A> {\n    var acc = List<A>.empty()",
              "successors": [
                {
                  "id": 2,
                  "label": "for (i in 0..n) {\n        acc = acc.add(f(i))\n    }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "acc.reverse()\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "fromArray",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    public static func fromArray(arr: Array<A>): List<A> {"
            },
            {
              "lineno": 26,
              "line": "        List<A>.makeBy(arr.size, {i => arr[i]})"
            },
            {
              "lineno": 27,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func fromArray(arr: Array<A>): List<A> {\n        List<A>.makeBy(arr.size, {i => arr[i]})\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "add",
          "type": "function",
          "start_line": 29,
          "end_line": 31,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    public func add(x: A): List<A> {"
            },
            {
              "lineno": 30,
              "line": "        cons(x, this)"
            },
            {
              "lineno": 31,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func add(x: A): List<A> {\n        cons(x, this)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "reduce",
          "type": "function",
          "start_line": 33,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "    public func reduce<B>(f: (B, A) -> B, acc: B): B {"
            },
            {
              "lineno": 34,
              "line": "        var accm = acc"
            },
            {
              "lineno": 35,
              "line": "        var x = this"
            },
            {
              "lineno": 36,
              "line": "        while (true) {"
            },
            {
              "lineno": 37,
              "line": "            match (x) {"
            },
            {
              "lineno": 38,
              "line": "                case Nil => break"
            },
            {
              "lineno": 39,
              "line": "                case Cons(hd, tl) =>"
            },
            {
              "lineno": 40,
              "line": "                    accm = f(accm, hd)"
            },
            {
              "lineno": 41,
              "line": "                    x = tl"
            },
            {
              "lineno": 42,
              "line": "            }"
            },
            {
              "lineno": 43,
              "line": "        }"
            },
            {
              "lineno": 44,
              "line": "        accm"
            },
            {
              "lineno": 45,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func reduce<B>(f: (B, A) -> B, acc: B): B {\n        var accm = acc\n        var x = this",
              "successors": [
                {
                  "id": 2,
                  "label": "        while (true) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            match (x) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "                case Nil => break",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "label": "                case Cons(hd, tl) =>\n                    accm = f(accm, hd)\n                    x = tl\n            match (x) {",
                          "successors": [
                            {
                              "id": 4,
                              "label": "                case Nil => break",
                              "successors": []
                            },
                            {
                              "id": 5,
                              "label": "                case Cons(hd, tl) =>\n                    accm = f(accm, hd)\n                    x = tl",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "        accm",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "reverse",
          "type": "function",
          "start_line": 47,
          "end_line": 49,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    public func reverse(): List<A> {"
            },
            {
              "lineno": 48,
              "line": "        this.reduce({acc, x => List<A>.cons(x, acc)}, Nil)"
            },
            {
              "lineno": 49,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func reverse(): List<A> {\n        this.reduce({acc, x => List<A>.cons(x, acc)}, Nil)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "isEmpty",
          "type": "function",
          "start_line": 51,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 51,
              "line": "    public func isEmpty(): Bool {"
            },
            {
              "lineno": 52,
              "line": "        match (this) {"
            },
            {
              "lineno": 53,
              "line": "            case Nil => true"
            },
            {
              "lineno": 54,
              "line": "            case _ => false"
            },
            {
              "lineno": 55,
              "line": "        }"
            },
            {
              "lineno": 56,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func isEmpty(): Bool {\n        match (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "            case Nil => true",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "            case _ => false",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "lenth",
          "type": "function",
          "start_line": 58,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    public func lenth(): Int64 {"
            },
            {
              "lineno": 59,
              "line": "        this.reduce({acc, _ => acc + 1}, 0)"
            },
            {
              "lineno": 60,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func lenth(): Int64 {\n        this.reduce({acc, _ => acc + 1}, 0)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "public enum List<A> {"
        },
        {
          "lineno": 4,
          "line": "    | Nil"
        },
        {
          "lineno": 5,
          "line": "    | Cons(A, List<A>)"
        },
        {
          "lineno": 6,
          "line": "}"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 8,
          "line": "extend<A> List<A> {"
        },
        {
          "lineno": 12,
          "line": ""
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 50,
          "line": ""
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public enum List<A> {\n    | Nil\n    | Cons(A, List<A>)\n}\nextend<A> List<A> {\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ListToString",
      "type": "class",
      "start_line": 64,
      "end_line": 75,
      "functions": [
        {
          "name": "join",
          "type": "function",
          "start_line": 65,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    public func join(sp: String): String {"
            },
            {
              "lineno": 66,
              "line": "        match(this) {"
            },
            {
              "lineno": 67,
              "line": "            case Nil => \"\""
            },
            {
              "lineno": 68,
              "line": "            case Cons(hd, tl)=> tl.reduce<String>({ acc: String, x: A => \"${acc}${sp}${x}\" }, \"${hd}\")"
            },
            {
              "lineno": 69,
              "line": "        }"
            },
            {
              "lineno": 70,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func join(sp: String): String {\n        match(this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "            case Nil => \"\"\n        }",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "            case Cons(hd, tl)=> tl.reduce<String>({ acc: String, x: A => \"${acc}${sp}${x}\" }, \"${hd}\")\n        }",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 72,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 72,
              "line": "    public func toString() {"
            },
            {
              "lineno": 73,
              "line": "        \"List: [${this.join(\",\")}]\""
            },
            {
              "lineno": 74,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func toString() {\n        \"List: [${this.join(\",\")}]\"\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 64,
          "line": "extend<A> List<A> <: ToString where A <: ToString {"
        },
        {
          "lineno": 71,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "extend<A> List<A> <: ToString where A <: ToString {\n\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package simple_math_interpreter"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    }
  ],
  "blocks": []
}