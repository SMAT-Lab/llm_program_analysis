{
  "name": "okhttpprofiler",
  "type": "CFG",
  "start_line": 1,
  "end_line": 156,
  "functions": [],
  "classes": [
    {
      "name": "LogDataTransfer",
      "type": "class",
      "start_line": 7,
      "end_line": 156,
      "functions": [
        {
          "name": "sendRequest",
          "type": "function",
          "start_line": 20,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    public func sendRequest(id: String, request: Request): Unit {"
            },
            {
              "lineno": 21,
              "line": "        fastLog(id, MessageType.REQUEST_METHOD(\"RQM\"), request.getMethod());"
            },
            {
              "lineno": 22,
              "line": "        let url = request.getUrl().toString();"
            },
            {
              "lineno": 23,
              "line": "        fastLog(id, MessageType.REQUEST_URL(\"RQU\"),url);"
            },
            {
              "lineno": 24,
              "line": "        let nowSjc = Time.now().unixNano()"
            },
            {
              "lineno": 25,
              "line": "        fastLog(id, MessageType.REQUEST_TIME(\"RQT\"), Time.now().toString());"
            },
            {
              "lineno": 26,
              "line": "        let copy = request.newBuilder().build();"
            },
            {
              "lineno": 27,
              "line": "        match(copy.getBody()){"
            },
            {
              "lineno": 28,
              "line": "             case Some(v) => doSomeThingRequestBody(v,id)"
            },
            {
              "lineno": 29,
              "line": "             case _ => ()"
            },
            {
              "lineno": 30,
              "line": "        }"
            },
            {
              "lineno": 31,
              "line": "        let headers = request.getHeaders()"
            },
            {
              "lineno": 32,
              "line": "        for(header in headers){"
            },
            {
              "lineno": 33,
              "line": "            let name: String = header[0]"
            },
            {
              "lineno": 34,
              "line": "            let nameUpper = name.toAsciiUpper();"
            },
            {
              "lineno": 35,
              "line": "            let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();"
            },
            {
              "lineno": 36,
              "line": "            let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();"
            },
            {
              "lineno": 37,
              "line": "            if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {"
            },
            {
              "lineno": 38,
              "line": "                continue"
            },
            {
              "lineno": 39,
              "line": "            }"
            },
            {
              "lineno": 40,
              "line": "            let arrayList: ArrayList<String> = header[1]"
            },
            {
              "lineno": 41,
              "line": "            if(arrayList.size>0){"
            },
            {
              "lineno": 42,
              "line": "                if(arrayList.size == 1){"
            },
            {
              "lineno": 43,
              "line": "                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());"
            },
            {
              "lineno": 44,
              "line": "                }else{"
            },
            {
              "lineno": 45,
              "line": "                    var strBuilder = StringBuilder();"
            },
            {
              "lineno": 46,
              "line": "                    for(str in arrayList){"
            },
            {
              "lineno": 47,
              "line": "                        strBuilder.append(str).append(\",\")"
            },
            {
              "lineno": 48,
              "line": "                    }"
            },
            {
              "lineno": 49,
              "line": "                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());"
            },
            {
              "lineno": 50,
              "line": "                }"
            },
            {
              "lineno": 51,
              "line": "            }"
            },
            {
              "lineno": 52,
              "line": "        }"
            },
            {
              "lineno": 53,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func sendRequest(id: String, request: Request): Unit {\n        fastLog(id, MessageType.REQUEST_METHOD(\"RQM\"), request.getMethod());\n        let url = request.getUrl().toString();\n        fastLog(id, MessageType.REQUEST_URL(\"RQU\"),url);\n        let nowSjc = Time.now().unixNano()\n        fastLog(id, MessageType.REQUEST_TIME(\"RQT\"), Time.now().toString());\n        let copy = request.newBuilder().build();\n        match(copy.getBody()){\n             case Some(v) => doSomeThingRequestBody(v,id)\n             case _ => ()\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        let headers = request.getHeaders()\n        for(header in headers){\n            let name: String = header[0]\n            let nameUpper = name.toAsciiUpper();\n            let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();\n            let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();\n            if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {\n                continue\n            }\n            let arrayList: ArrayList<String> = header[1]\n            if(arrayList.size>0){\n                if(arrayList.size == 1){\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());\n                }else{\n                    var strBuilder = StringBuilder();\n                    for(str in arrayList){\n                        strBuilder.append(str).append(\",\")\n                    }\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());\n                }\n            }\n        }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "sendResponse",
          "type": "function",
          "start_line": 54,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "      public func sendResponse(id: String, response: Response): Unit {"
            },
            {
              "lineno": 55,
              "line": "        let optionBody: Option<ResponseBody> = response.getBody()"
            },
            {
              "lineno": 56,
              "line": "        match(optionBody){"
            },
            {
              "lineno": 57,
              "line": "              case Some(v) => doSomeThingResponseBody(v,id)"
            },
            {
              "lineno": 58,
              "line": "              case _ => ()"
            },
            {
              "lineno": 59,
              "line": "        }"
            },
            {
              "lineno": 60,
              "line": "        logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);"
            },
            {
              "lineno": 61,
              "line": "        let headers = response.getHeaders()"
            },
            {
              "lineno": 62,
              "line": "        for(header in headers){"
            },
            {
              "lineno": 63,
              "line": "                let name: String = header[0]"
            },
            {
              "lineno": 64,
              "line": "                let arrayList : ArrayList<String> = header[1]"
            },
            {
              "lineno": 65,
              "line": "                if(arrayList.size > 0){"
            },
            {
              "lineno": 66,
              "line": "                    if(arrayList.size == 1){"
            },
            {
              "lineno": 67,
              "line": "                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);"
            },
            {
              "lineno": 68,
              "line": "                    }else{"
            },
            {
              "lineno": 69,
              "line": "                        var strBuilder = StringBuilder();"
            },
            {
              "lineno": 70,
              "line": "                        for(str in arrayList){"
            },
            {
              "lineno": 71,
              "line": "                            strBuilder.append(str).append(\",\")"
            },
            {
              "lineno": 72,
              "line": "                        }"
            },
            {
              "lineno": 73,
              "line": "                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);"
            },
            {
              "lineno": 74,
              "line": "                    }"
            },
            {
              "lineno": 75,
              "line": "                }"
            },
            {
              "lineno": 76,
              "line": "            }"
            },
            {
              "lineno": 77,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func sendResponse(id: String, response: Response): Unit {\nlet optionBody: Option<ResponseBody> = response.getBody()",
              "successors": [
                {
                  "id": 2,
                  "label": "match(optionBody){\n  case Some(v) => doSomeThingResponseBody(v,id)\n  case _ => ()",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\nlet headers = response.getHeaders()\nfor(header in headers){",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let name: String = header[0]\nlet arrayList : ArrayList<String> = header[1]\nif(arrayList.size > 0){",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if(arrayList.size == 1){\nlogWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "else{\nvar strBuilder = StringBuilder();\nfor(str in arrayList){\nstrBuilder.append(str).append(\",\")\n}\nlogWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "sendException",
          "type": "function",
          "start_line": 78,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 78,
              "line": "        public func sendException(id: String, ex: Exception): Unit {"
            },
            {
              "lineno": 79,
              "line": "            logWithHandler(id, MessageType.RESPONSE_ERROR(\"REE\"), ex.message, 0);"
            },
            {
              "lineno": 80,
              "line": "        }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "        public func sendException(id: String, ex: Exception): Unit {\n            logWithHandler(id, MessageType.RESPONSE_ERROR(\"REE\"), ex.message, 0);",
              "successors": []
            }
          ]
        },
        {
          "name": "sendDuration",
          "type": "function",
          "start_line": 81,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 81,
              "line": "        public func sendDuration(id: String, duration: Int64): Unit {"
            },
            {
              "lineno": 82,
              "line": "            logWithHandler(id, MessageType.RESPONSE_TIME(\"RST\"), duration.toString(), 0);"
            },
            {
              "lineno": 83,
              "line": "            logWithHandler(id, MessageType.RESPONSE_END(\"RSD\"), \"-->\", 0);"
            },
            {
              "lineno": 84,
              "line": "        }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "        public func sendDuration(id: String, duration: Int64): Unit {\n            logWithHandler(id, MessageType.RESPONSE_TIME(\"RST\"), duration.toString(), 0);\n            logWithHandler(id, MessageType.RESPONSE_END(\"RSD\"), \"-->\", 0);\n        }",
              "successors": []
            }
          ]
        },
        {
          "name": "fastLog",
          "type": "function",
          "start_line": 85,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 85,
              "line": "        private func fastLog(id: String, mType: MessageType, message: String): Unit {"
            },
            {
              "lineno": 86,
              "line": "            let tag = LOG_PREFIX + DELIMITER + id + DELIMITER + mType.getValue();"
            },
            {
              "lineno": 87,
              "line": "            printLog(tag,message)"
            },
            {
              "lineno": 88,
              "line": "        }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "        private func fastLog(id: String, mType: MessageType, message: String): Unit {\n            let tag = LOG_PREFIX + DELIMITER + id + DELIMITER + mType.getValue();\n            printLog(tag,message)",
              "successors": []
            }
          ]
        },
        {
          "name": "printLog",
          "type": "function",
          "start_line": 89,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 89,
              "line": "        private func printLog(tag: String, message: String): Unit {"
            },
            {
              "lineno": 90,
              "line": "            let logger: SimpleLogger = SimpleLogger()"
            },
            {
              "lineno": 91,
              "line": "             //var s = File(\"../stdout8.log\", AccessMode.Write, OpenMode.Append)"
            },
            {
              "lineno": 92,
              "line": "             //logger.setOutput(s)"
            },
            {
              "lineno": 93,
              "line": "            logger.log(LogLevel.TRACE, tag+SPACE+SPACE+message)"
            },
            {
              "lineno": 94,
              "line": "            logger.flush()"
            },
            {
              "lineno": 95,
              "line": "            //s.close()"
            },
            {
              "lineno": 96,
              "line": "        }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "        private func printLog(tag: String, message: String): Unit {\n            let logger: SimpleLogger = SimpleLogger()\n             //var s = File(\"../stdout8.log\", AccessMode.Write, OpenMode.Append)\n             //logger.setOutput(s)\n            logger.log(LogLevel.TRACE, tag+SPACE+SPACE+message)\n            logger.flush()\n            //s.close()\n        }",
              "successors": []
            }
          ]
        },
        {
          "name": "doSomeThingResponseBody",
          "type": "function",
          "start_line": 97,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "        private func doSomeThingResponseBody(body : ResponseBody,id: String): Unit {"
            },
            {
              "lineno": 98,
              "line": "            let source = body.getString() //Array<UInt8>"
            },
            {
              "lineno": 99,
              "line": "            let sourceSize = source.size"
            },
            {
              "lineno": 100,
              "line": "            var strResponse = \"\""
            },
            {
              "lineno": 101,
              "line": "            if(sourceSize<BODY_BUFFER_SIZE){"
            },
            {
              "lineno": 102,
              "line": "                strResponse = source.substring(0,sourceSize)"
            },
            {
              "lineno": 103,
              "line": "            }else{"
            },
            {
              "lineno": 104,
              "line": "                strResponse = source.substring(0,BODY_BUFFER_SIZE)"
            },
            {
              "lineno": 105,
              "line": "            }"
            },
            {
              "lineno": 106,
              "line": "            largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);"
            },
            {
              "lineno": 107,
              "line": "        }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "        private func doSomeThingResponseBody(body : ResponseBody,id: String): Unit {\n            let source = body.getString() //Array<UInt8>\n            let sourceSize = source.size\n            var strResponse = \"\"",
              "successors": [
                {
                  "id": 2,
                  "label": "            if(sourceSize<BODY_BUFFER_SIZE){\n                strResponse = source.substring(0,sourceSize)\n            largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "            }else{\n                strResponse = source.substring(0,BODY_BUFFER_SIZE)\n            largeLog(id, MessageType.RESPONSE_BODY(\"RSB\"), strResponse);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "logWithHandler",
          "type": "function",
          "start_line": 108,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 108,
              "line": "        private func logWithHandler(id: String, mType: MessageType, message: String, partsCount: Int64): Unit {"
            },
            {
              "lineno": 109,
              "line": "                 let tag = LOG_PREFIX + DELIMITER + id + DELIMITER + mType.getValue();"
            },
            {
              "lineno": 110,
              "line": "                 let logger: SimpleLogger = SimpleLogger()"
            },
            {
              "lineno": 111,
              "line": "                 //var s = File(\"../stdout8.log\", AccessMode.Write, OpenMode.Append)"
            },
            {
              "lineno": 112,
              "line": "                 //logger.setOutput(s)"
            },
            {
              "lineno": 113,
              "line": "                 logger.log(LogLevel.TRACE, tag+SPACE+SPACE+message+SPACE+partsCount.toString())"
            },
            {
              "lineno": 114,
              "line": "                 logger.flush()"
            },
            {
              "lineno": 115,
              "line": "                 //s.close()"
            },
            {
              "lineno": 116,
              "line": "            }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "private func logWithHandler(id: String, mType: MessageType, message: String, partsCount: Int64): Unit {",
              "successors": []
            }
          ]
        },
        {
          "name": "doSomeThingRequestBody",
          "type": "function",
          "start_line": 117,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 117,
              "line": "    private func doSomeThingRequestBody(body : RequestBody,id: String): Unit {"
            },
            {
              "lineno": 118,
              "line": "         let mediaType = match(body.contentType()) {"
            },
            {
              "lineno": 119,
              "line": "            case Some(m) => \"${m}\""
            },
            {
              "lineno": 120,
              "line": "            case None => \"\""
            },
            {
              "lineno": 121,
              "line": "         }"
            },
            {
              "lineno": 122,
              "line": "         let contentLength = body.getContentLength()"
            },
            {
              "lineno": 123,
              "line": "         if (contentLength != -1) {"
            },
            {
              "lineno": 124,
              "line": "                fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());"
            },
            {
              "lineno": 125,
              "line": "         }"
            },
            {
              "lineno": 126,
              "line": "        fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)"
            },
            {
              "lineno": 127,
              "line": "         let inputStream = body.get()"
            },
            {
              "lineno": 128,
              "line": "         let bas = inputStream as ByteArrayStream"
            },
            {
              "lineno": 129,
              "line": "         match(bas){"
            },
            {
              "lineno": 130,
              "line": "            case Some(v) => doSomeThingRequestBodyLog(v,id)"
            },
            {
              "lineno": 131,
              "line": "            case _ => ()"
            },
            {
              "lineno": 132,
              "line": "         }"
            },
            {
              "lineno": 133,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func doSomeThingRequestBody(body : RequestBody,id: String): Unit {\n         let mediaType = match(body.contentType()) {\n            case Some(m) => \"${m}\"\n            case None => \"\"\n         }",
              "successors": [
                {
                  "id": 3,
                  "label": "         let contentLength = body.getContentLength()\n         if (contentLength != -1) {\n                fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());\n         }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)\n         let inputStream = body.get()\n         let bas = inputStream as ByteArrayStream",
                      "successors": [
                        {
                          "id": 7,
                          "label": "         match(bas){\n            case Some(v) => doSomeThingRequestBodyLog(v,id)\n            case _ => ()\n         }\n    }",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "doSomeThingRequestBodyLog",
          "type": "function",
          "start_line": 134,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 134,
              "line": "    private func doSomeThingRequestBodyLog(bas :ByteArrayStream, id: String): Unit{"
            },
            {
              "lineno": 135,
              "line": "         largeLog(id, MessageType. REQUEST_BODY(\"RQB\"),String.fromUtf8(bas.readToEnd()));"
            },
            {
              "lineno": 136,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func doSomeThingRequestBodyLog(bas :ByteArrayStream, id: String): Unit{\n         largeLog(id, MessageType. REQUEST_BODY(\"RQB\"),String.fromUtf8(bas.readToEnd()));\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "largeLog",
          "type": "function",
          "start_line": 137,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 137,
              "line": "    private func largeLog(id: String, mType: MessageType, content: String): Unit {"
            },
            {
              "lineno": 138,
              "line": "        let contentLength = content.size"
            },
            {
              "lineno": 139,
              "line": "        if (contentLength > LOG_LENGTH) {"
            },
            {
              "lineno": 140,
              "line": "            let parts = contentLength / LOG_LENGTH"
            },
            {
              "lineno": 141,
              "line": "            for (i in 0..parts) {"
            },
            {
              "lineno": 142,
              "line": "                let start = i * LOG_LENGTH"
            },
            {
              "lineno": 143,
              "line": "                var end = start + LOG_LENGTH"
            },
            {
              "lineno": 144,
              "line": "                if (end > contentLength) {"
            },
            {
              "lineno": 145,
              "line": "                    let printLength = contentLength+LOG_LENGTH-end"
            },
            {
              "lineno": 146,
              "line": "                    logWithHandler(id, mType, content.substring(start, printLength), parts);"
            },
            {
              "lineno": 147,
              "line": "                }else{"
            },
            {
              "lineno": 148,
              "line": "                    let printLength  = LOG_LENGTH"
            },
            {
              "lineno": 149,
              "line": "                    logWithHandler(id, mType, content.substring(start, LOG_LENGTH), parts);"
            },
            {
              "lineno": 150,
              "line": "                }"
            },
            {
              "lineno": 151,
              "line": "            }"
            },
            {
              "lineno": 152,
              "line": "        } else {"
            },
            {
              "lineno": 153,
              "line": "            logWithHandler(id, mType, content, 0);"
            },
            {
              "lineno": 154,
              "line": "        }"
            },
            {
              "lineno": 155,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "private func largeLog(id: String, mType: MessageType, content: String): Unit {\n    let contentLength = content.size\nif (contentLength > LOG_LENGTH) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let parts = contentLength / LOG_LENGTH\n    for (i in 0..parts) {\nlet start = i * LOG_LENGTH\n        var end = start + LOG_LENGTH\n        if (end > contentLength) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "let printLength = contentLength+LOG_LENGTH-end\n            logWithHandler(id, mType, content.substring(start, printLength), parts);\n}else{\n            let printLength  = LOG_LENGTH\n            logWithHandler(id, mType, content.substring(start, LOG_LENGTH), parts);",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if (end > contentLength) {",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "} else {\n    logWithHandler(id, mType, content, 0);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "public class LogDataTransfer <: DataTransfer{"
        },
        {
          "lineno": 8,
          "line": "    private static let LOG_LENGTH = 4000"
        },
        {
          "lineno": 9,
          "line": "    private static let SLOW_DOWN_PARTS_AFTER = 20"
        },
        {
          "lineno": 10,
          "line": "    private static let BODY_BUFFER_SIZE = 1024 * 1024 * 10"
        },
        {
          "lineno": 11,
          "line": "    private static let LOG_PREFIX = \"OKPRFL\""
        },
        {
          "lineno": 12,
          "line": "    private static let DELIMITER = \"_\""
        },
        {
          "lineno": 13,
          "line": "    private static let HEADER_DELIMITER = ':'"
        },
        {
          "lineno": 14,
          "line": "    private static let SPACE = ' '"
        },
        {
          "lineno": 15,
          "line": "    private static let KEY_TAG = \"TAG\""
        },
        {
          "lineno": 16,
          "line": "    private static let KEY_VALUE = \"VALUE\""
        },
        {
          "lineno": 17,
          "line": "    private static let KEY_PARTS_COUNT = \"PARTS_COUNT\""
        },
        {
          "lineno": 18,
          "line": "    private static let CONTENT_TYPE = \"Content-Type\""
        },
        {
          "lineno": 19,
          "line": "    private static let CONTENT_LENGTH = \"Content-Length\""
        },
        {
          "lineno": 156,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class LogDataTransfer <: DataTransfer{\n    private static let LOG_LENGTH = 4000\n    private static let SLOW_DOWN_PARTS_AFTER = 20\n    private static let BODY_BUFFER_SIZE = 1024 * 1024 * 10\n    private static let LOG_PREFIX = \"OKPRFL\"\n    private static let DELIMITER = \"_\"\n    private static let HEADER_DELIMITER = ':'\n    private static let SPACE = ' '\n    private static let KEY_TAG = \"TAG\"\n    private static let KEY_VALUE = \"VALUE\"\n    private static let KEY_PARTS_COUNT = \"PARTS_COUNT\"\n    private static let CONTENT_TYPE = \"Content-Type\"\n    private static let CONTENT_LENGTH = \"Content-Length\"\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package okhttpprofiler"
    },
    {
      "lineno": 2,
      "line": "from std import log.*"
    },
    {
      "lineno": 3,
      "line": "from std import io.*"
    },
    {
      "lineno": 4,
      "line": "from std import collection.*"
    },
    {
      "lineno": 5,
      "line": "from net import http.Header"
    },
    {
      "lineno": 6,
      "line": "from okhttp import okhttp.*"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package okhttpprofiler\nfrom std import log.*\nfrom std import io.*\nfrom std import collection.*\nfrom net import http.Header\nfrom okhttp import okhttp.*",
      "successors": []
    }
  ]
}