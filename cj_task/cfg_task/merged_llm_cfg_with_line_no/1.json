{
  "name": "json_cj_testutil_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 32,
  "functions": [
    {
      "name": "assertJson",
      "type": "function",
      "start_line": 7,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "public func assertJson(a: JsonValue, b: JsonValue): Unit {"
        },
        {
          "lineno": 8,
          "line": "    match ((a, b)) {"
        },
        {
          "lineno": 9,
          "line": "        case (_: JsonNull, _: JsonNull) => return"
        },
        {
          "lineno": 10,
          "line": "        case (a: JsonBool, b: JsonBool) => @Assert(a.getValue(), b.getValue())"
        },
        {
          "lineno": 11,
          "line": "        case (a: JsonInt, b: JsonInt) => @Assert(a.getValue(), b.getValue())"
        },
        {
          "lineno": 12,
          "line": "        case (a: JsonFloat, b: JsonFloat) => @Assert(a.getValue(), b.getValue())"
        },
        {
          "lineno": 13,
          "line": "        case (a: JsonString, b: JsonString) => @Assert(a.getValue(), b.getValue())"
        },
        {
          "lineno": 14,
          "line": "        case (a: JsonArray, b: JsonArray) =>"
        },
        {
          "lineno": 15,
          "line": "            @Assert(a.size(), b.size())"
        },
        {
          "lineno": 16,
          "line": "            for (i in 0..a.size()) {"
        },
        {
          "lineno": 17,
          "line": "                assertJson(a.get(i).getOrThrow(), b.get(i).getOrThrow())"
        },
        {
          "lineno": 18,
          "line": "            }"
        },
        {
          "lineno": 19,
          "line": "        case (a: JsonObject, b: JsonObject) =>"
        },
        {
          "lineno": 20,
          "line": "            @Assert(a.size(), b.size())"
        },
        {
          "lineno": 21,
          "line": "            let fields = a.getFields()"
        },
        {
          "lineno": 22,
          "line": "            for ((k, v) in fields) {"
        },
        {
          "lineno": 23,
          "line": "                match (b.get(k)) {"
        },
        {
          "lineno": 24,
          "line": "                    case Some(bv) => assertJson(v, bv)"
        },
        {
          "lineno": 25,
          "line": "                    case None => @Fail(\"Field not found: \" + k)"
        },
        {
          "lineno": 26,
          "line": "                }"
        },
        {
          "lineno": 27,
          "line": "            }"
        },
        {
          "lineno": 28,
          "line": "        case _ => @Fail(\"Different types: \" + a.toJsonString() + \" vs \" + b.toJsonString())"
        },
        {
          "lineno": 29,
          "line": "    }"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    return"
        },
        {
          "lineno": 32,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func assertJson(a: JsonValue, b: JsonValue): Unit { match ((a, b)) {",
          "successors": [
            {
              "id": 2,
              "label": "case (_: JsonNull, _: JsonNull) => return",
              "successors": []
            },
            {
              "id": 3,
              "label": "case (a: JsonBool, b: JsonBool) => @Assert(a.getValue(), b.getValue())",
              "successors": []
            },
            {
              "id": 4,
              "label": "case (a: JsonInt, b: JsonInt) => @Assert(a.getValue(), b.getValue())",
              "successors": []
            },
            {
              "id": 5,
              "label": "case (a: JsonFloat, b: JsonFloat) => @Assert(a.getValue(), b.getValue())",
              "successors": []
            },
            {
              "id": 6,
              "label": "case (a: JsonString, b: JsonString) => @Assert(a.getValue(), b.getValue())",
              "successors": []
            },
            {
              "id": 7,
              "label": "case (a: JsonArray, b: JsonArray) => @Assert(a.size(), b.size()) for (i in 0..a.size()) { assertJson(a.get(i).getOrThrow(), b.get(i).getOrThrow()) }",
              "successors": []
            },
            {
              "id": 8,
              "label": "case (a: JsonObject, b: JsonObject) => @Assert(a.size(), b.size()) let fields = a.getFields() for ((k, v) in fields) { match (b.get(k)) { case Some(bv) => assertJson(v, bv) case None => @Fail(\"Field not found: \" + k) } }",
              "successors": []
            },
            {
              "id": 9,
              "label": "case _ => @Fail(\"Different types: \" + a.toJsonString() + \" vs \" + b.toJsonString())",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package json_cj.testutil"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.unittest.*"
    },
    {
      "lineno": 4,
      "line": "import std.unittest.testmacro.{Assert, Fail}"
    },
    {
      "lineno": 5,
      "line": "import encoding.json.*"
    },
    {
      "lineno": 6,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package json_cj.testutil\nimport std.unittest.*\nimport std.unittest.testmacro.{Assert, Fail}\nimport encoding.json.*",
      "successors": []
    }
  ]
}