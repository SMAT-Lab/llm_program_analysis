{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 44,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 35,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 35,
          "line": "main() {"
        },
        {
          "lineno": 36,
          "line": "    Parser.parse(\"1 2 3 456 789\")"
        },
        {
          "lineno": 37,
          "line": "    Parser.parse(\"1ab2c3\")"
        },
        {
          "lineno": 38,
          "line": "    Parser.parse(\"apple 30 banana 45\")"
        },
        {
          "lineno": 39,
          "line": "    Parser.parse(\"1.2 3.4\")"
        },
        {
          "lineno": 40,
          "line": "    Parser.parse(\"9- -3 -2\")"
        },
        {
          "lineno": 41,
          "line": "    Parser.parse(\"3-2\")"
        },
        {
          "lineno": 42,
          "line": "    Parser.parse(\"1 2 3-2\")"
        },
        {
          "lineno": 43,
          "line": "    Parser.parse(\"xxx-3.14. .56-238jk12\")"
        },
        {
          "lineno": 44,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    Parser.parse(\"1 2 3 456 789\")\n    Parser.parse(\"1ab2c3\")\n    Parser.parse(\"apple 30 banana 45\")\n    Parser.parse(\"1.2 3.4\")\n    Parser.parse(\"9- -3 -2\")\n    Parser.parse(\"3-2\")\n    Parser.parse(\"1 2 3-2\")\n    Parser.parse(\"xxx-3.14. .56-238jk12\")\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Parser",
      "type": "class",
      "start_line": 5,
      "end_line": 33,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 7,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 7,
              "line": "    static init() {"
            },
            {
              "lineno": 8,
              "line": "        states[0][45..58] = [1, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // INIT"
            },
            {
              "lineno": 9,
              "line": "        states[1][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // -"
            },
            {
              "lineno": 10,
              "line": "        states[2][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // . | -. | N. | -N."
            },
            {
              "lineno": 11,
              "line": "        states[3][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // N or -N"
            },
            {
              "lineno": 12,
              "line": "        states[4][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // ACCEPT"
            },
            {
              "lineno": 13,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    static init() {\n        states[0][45..58] = [1, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // INIT\n        states[1][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // -\n        states[2][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // . | -. | N. | -N.\n        states[3][45..58] = [0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] // N or -N\n        states[4][45..58] = [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] // ACCEPT\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "parse",
          "type": "function",
          "start_line": 15,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 15,
              "line": "    static public func parse(text: String) {"
            },
            {
              "lineno": 16,
              "line": "        var i = 0"
            },
            {
              "lineno": 17,
              "line": "        while (i < text.size) {"
            },
            {
              "lineno": 18,
              "line": "            var s = 0"
            },
            {
              "lineno": 19,
              "line": "            while (i < text.size && states[s][Int64(text[i])] == 0) {"
            },
            {
              "lineno": 20,
              "line": "                i++"
            },
            {
              "lineno": 21,
              "line": "            }"
            },
            {
              "lineno": 22,
              "line": "            let j = i"
            },
            {
              "lineno": 23,
              "line": "            while (i < text.size && states[s][Int64(text[i])] != 0) {"
            },
            {
              "lineno": 24,
              "line": "                s = states[s][Int64(text[i])]"
            },
            {
              "lineno": 25,
              "line": "                i++"
            },
            {
              "lineno": 26,
              "line": "            }"
            },
            {
              "lineno": 27,
              "line": "            if (s == 3 || s == 4) {"
            },
            {
              "lineno": 28,
              "line": "                print(text[j..i] + ' ')"
            },
            {
              "lineno": 29,
              "line": "            }"
            },
            {
              "lineno": 30,
              "line": "        }"
            },
            {
              "lineno": 31,
              "line": "        println()"
            },
            {
              "lineno": 32,
              "line": "    } "
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    static public func parse(text: String) {\n        var i = 0",
              "successors": [
                {
                  "id": 2,
                  "label": "        while (i < text.size) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            var s = 0\n            while (i < text.size && states[s][Int64(text[i])] == 0) {\n                i++\n            }",
                      "successors": [
                        {
                          "id": 5,
                          "label": "            let j = i\n            while (i < text.size && states[s][Int64(text[i])] != 0) {\n                s = states[s][Int64(text[i])]\n                i++",
                          "successors": [
                            {
                              "id": 7,
                              "label": "            }\n            if (s == 3 || s == 4) {\n                print(text[j..i] + ' ')\n            }",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "        }\n        println()",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "    } ",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "class Parser {"
        },
        {
          "lineno": 6,
          "line": "    static let states = Array(5, {_ => Array(128, item: 0)})"
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Parser {\n    static let states = Array(5, {_ => Array(128, item: 0)})",
          "successors": [
            {
              "id": 3,
              "label": "\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 基于数组构造 DFA 状态表，解析出一个字符串中的所有整数和小数"
    },
    {
      "lineno": 2,
      "line": "// cjc version: 0.53.13"
    },
    {
      "lineno": 3,
      "line": "import std.collection.* "
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "// 基于数组构造 DFA 状态表，解析出一个字符串中的所有整数和小数\n// cjc version: 0.53.13\nimport std.collection.* ",
      "successors": []
    }
  ]
}