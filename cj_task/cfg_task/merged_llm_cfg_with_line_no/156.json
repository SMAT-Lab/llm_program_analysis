{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 40,
  "functions": [],
  "classes": [
    {
      "name": "FileUtils",
      "type": "class",
      "start_line": 6,
      "end_line": 40,
      "functions": [
        {
          "name": "isFilePathValid",
          "type": "function",
          "start_line": 9,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public func isFilePathValid(filePath: String): (String,String) {"
            },
            {
              "lineno": 10,
              "line": "        let con: Option<Int64> = filePath.lastIndexOf(\"/\")"
            },
            {
              "lineno": 11,
              "line": "        var lastSlash: Int64 = 0"
            },
            {
              "lineno": 12,
              "line": "        match (con) {"
            },
            {
              "lineno": 13,
              "line": "           case Some(v) => lastSlash = v"
            },
            {
              "lineno": 14,
              "line": "           case None => throw Exception(\"Invalid filepath\")"
            },
            {
              "lineno": 15,
              "line": "        }"
            },
            {
              "lineno": 16,
              "line": "        let directoryName: String = filePath[0..lastSlash]"
            },
            {
              "lineno": 17,
              "line": "        let fileName: String = filePath[lastSlash + 1..]"
            },
            {
              "lineno": 18,
              "line": "        let confield: Option<Int64> = fileName.lastIndexOf(\".\")"
            },
            {
              "lineno": 19,
              "line": "        var len: Int64 = 0"
            },
            {
              "lineno": 20,
              "line": "        match (confield) {"
            },
            {
              "lineno": 21,
              "line": "           case Some(v) => len = v"
            },
            {
              "lineno": 22,
              "line": "           case None => throw Exception(\"Invalid filepath. Need to include filename\")"
            },
            {
              "lineno": 23,
              "line": "        }"
            },
            {
              "lineno": 24,
              "line": "        let fields: String = fileName[len + 1..]"
            },
            {
              "lineno": 25,
              "line": "        logger.info(\"isFilePathValid lastSlash INDEX : \"+\"${lastSlash}\"+\" directoryName : \"+\"${directoryName}\"+\" fileName : \"+\"${fileName}\")"
            },
            {
              "lineno": 26,
              "line": "        let isFile: Bool = isReg(fileName)"
            },
            {
              "lineno": 27,
              "line": "        let isDir: Bool = isDir(directoryName)"
            },
            {
              "lineno": 28,
              "line": "        if (!isFile) {"
            },
            {
              "lineno": 29,
              "line": "            logger.info(\"isFilePathValid isFile is  \" + \"${isFile}\")"
            },
            {
              "lineno": 30,
              "line": "            throw Exception(\"${fileName}\" + \" not normal file\")"
            },
            {
              "lineno": 31,
              "line": "        }"
            },
            {
              "lineno": 32,
              "line": "        if (!isDir) {"
            },
            {
              "lineno": 33,
              "line": "            logger.info(\"isFilePathValid isDir is  \" + \"${isDir}\")"
            },
            {
              "lineno": 34,
              "line": "            throw Exception(\"isFilePathValid invalid directory\")"
            },
            {
              "lineno": 35,
              "line": "        }"
            },
            {
              "lineno": 36,
              "line": "        logger.info(\"isFilePathValid filePath is valid\")"
            },
            {
              "lineno": 37,
              "line": "        logger.flush()"
            },
            {
              "lineno": 38,
              "line": "        return (fileName,fields)"
            },
            {
              "lineno": 39,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func isFilePathValid(filePath: String): (String,String) {\n        let con: Option<Int64> = filePath.lastIndexOf(\"/\")\n        var lastSlash: Int64 = 0\n        match (con) {\n           case Some(v) => lastSlash = v\n           case None => throw Exception(\"Invalid filepath\")\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        let directoryName: String = filePath[0..lastSlash]\n        let fileName: String = filePath[lastSlash + 1..]\n        let confield: Option<Int64> = fileName.lastIndexOf(\".\")\n        var len: Int64 = 0\n        match (confield) {\n           case Some(v) => len = v\n           case None => throw Exception(\"Invalid filepath. Need to include filename\")\n        }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        let fields: String = fileName[len + 1..]\n        logger.info(\"isFilePathValid lastSlash INDEX : \"+\"${lastSlash}\"+\" directoryName : \"+\"${directoryName}\"+\" fileName : \"+\"${fileName}\")\n        let isFile: Bool = isReg(fileName)\n        let isDir: Bool = isDir(directoryName)\n        if (!isFile) {\n            logger.info(\"isFilePathValid isFile is  \" + \"${isFile}\")\n            throw Exception(\"${fileName}\" + \" not normal file\")\n        }",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        if (!isDir) {\n            logger.info(\"isFilePathValid isDir is  \" + \"${isDir}\")\n            throw Exception(\"isFilePathValid invalid directory\")\n        }\n        logger.info(\"isFilePathValid filePath is valid\")\n        logger.flush()\n        return (fileName,fields)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public class FileUtils {"
        },
        {
          "lineno": 7,
          "line": "    public init() {}"
        },
        {
          "lineno": 8,
          "line": "    let logger: SimpleLogger = SimpleLogger()"
        },
        {
          "lineno": 40,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class FileUtils {\n    public init() {}\n    let logger: SimpleLogger = SimpleLogger()",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package mp4parser"
    },
    {
      "lineno": 2,
      "line": "import std.os.posix.*"
    },
    {
      "lineno": 3,
      "line": "import std.collection.*"
    },
    {
      "lineno": 4,
      "line": "import std.io.*"
    },
    {
      "lineno": 5,
      "line": "import std.log.*"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package mp4parser\nimport std.os.posix.*\nimport std.collection.*\nimport std.io.*\nimport std.log.*",
      "successors": []
    }
  ]
}