{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 170,
  "functions": [],
  "classes": [
    {
      "name": "LinkedEntry",
      "type": "class",
      "start_line": 2,
      "end_line": 64,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 9,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public init() {"
            },
            {
              "lineno": 10,
              "line": "      this(Option<K>.None);"
            },
            {
              "lineno": 11,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public init() {\n      this(Option<K>.None);",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 12,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    public init(key: Option<K>) {"
            },
            {
              "lineno": 13,
              "line": "        this.key = key;"
            },
            {
              "lineno": 14,
              "line": "        this.next = Some(this)"
            },
            {
              "lineno": 15,
              "line": "        this.prev = Some(this)"
            },
            {
              "lineno": 16,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public init(key: Option<K>) {\n        this.key = key;\n        this.next = Some(this)\n        this.prev = Some(this)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "removeLast",
          "type": "function",
          "start_line": 17,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    public func removeLast(): Option<V> {"
            },
            {
              "lineno": 18,
              "line": "      let valueSize: Int64 = size();"
            },
            {
              "lineno": 19,
              "line": "      return if(valueSize > 0) {"
            },
            {
              "lineno": 20,
              "line": "        this.values.remove(valueSize - 1)"
            },
            {
              "lineno": 21,
              "line": "      } else {"
            },
            {
              "lineno": 22,
              "line": "        None"
            },
            {
              "lineno": 23,
              "line": "      };"
            },
            {
              "lineno": 24,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func removeLast(): Option<V> {\n      let valueSize: Int64 = size();",
              "successors": [
                {
                  "id": 3,
                  "label": "      return if(valueSize > 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        this.values.remove(valueSize - 1)\n      };",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "        None\n      };",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "size",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    public func size(): Int64 {"
            },
            {
              "lineno": 26,
              "line": "      return this.values.size"
            },
            {
              "lineno": 27,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func size(): Int64 {\n      return this.values.size\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "add",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public func add(value: V): Unit {"
            },
            {
              "lineno": 29,
              "line": "      this.values.append(value);"
            },
            {
              "lineno": 30,
              "line": "    }"
            }
          ],
          "blocks": []
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 31,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 31,
              "line": "    public operator func ==(right: LinkedEntry<K, V>): Bool {"
            },
            {
              "lineno": 32,
              "line": "        return equals(right)"
            },
            {
              "lineno": 33,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public operator func ==(right: LinkedEntry<K, V>): Bool {\n        return equals(right)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 34,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    public operator func !=(right: LinkedEntry<K, V>): Bool {"
            },
            {
              "lineno": 35,
              "line": "      return !equals(right)"
            },
            {
              "lineno": 36,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public operator func !=(right: LinkedEntry<K, V>): Bool {\n      return !equals(right)",
              "successors": []
            }
          ]
        },
        {
          "name": "equals",
          "type": "function",
          "start_line": 37,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 37,
              "line": "    public func equals(right: LinkedEntry<K, V>): Bool {"
            },
            {
              "lineno": 38,
              "line": "        if(match(this.key) {"
            },
            {
              "lineno": 39,
              "line": "            case Some(x) => true"
            },
            {
              "lineno": 40,
              "line": "            case _ => false"
            },
            {
              "lineno": 41,
              "line": "        } && match(right.key) {"
            },
            {
              "lineno": 42,
              "line": "                case Some(x) => true"
            },
            {
              "lineno": 43,
              "line": "                case _ => false"
            },
            {
              "lineno": 44,
              "line": "            }) {"
            },
            {
              "lineno": 45,
              "line": "            return this.key.getOrThrow() == right.key.getOrThrow()"
            },
            {
              "lineno": 46,
              "line": "        } else if(match(this.key) {"
            },
            {
              "lineno": 47,
              "line": "            case Some(x) => false"
            },
            {
              "lineno": 48,
              "line": "            case _ => true"
            },
            {
              "lineno": 49,
              "line": "        } && match(right.key) {"
            },
            {
              "lineno": 50,
              "line": "                case Some(x) => false"
            },
            {
              "lineno": 51,
              "line": "                case _ => true"
            },
            {
              "lineno": 52,
              "line": "            }) {"
            },
            {
              "lineno": 53,
              "line": "                return true"
            },
            {
              "lineno": 54,
              "line": "        } else {"
            },
            {
              "lineno": 55,
              "line": "            return false"
            },
            {
              "lineno": 56,
              "line": "        }"
            },
            {
              "lineno": 57,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func equals(right: LinkedEntry<K, V>): Bool {\n        if(match(this.key) {\n            case Some(x) => true\n            case _ => false\n        } && match(right.key) {\n                case Some(x) => true\n                case _ => false\n            }) {",
              "successors": [
                {
                  "id": 3,
                  "label": "            return this.key.getOrThrow() == right.key.getOrThrow()\n        }",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "        } else if(match(this.key) {\n            case Some(x) => false\n            case _ => true\n        } && match(right.key) {\n                case Some(x) => false\n                case _ => true\n            }) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "                return true\n        }",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "        } else {\n            return false\n        }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 58,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    public func toString(): String {"
            },
            {
              "lineno": 59,
              "line": "        return if(match(this.key) {"
            },
            {
              "lineno": 60,
              "line": "            case Some(x) => true"
            },
            {
              "lineno": 61,
              "line": "            case _ => false"
            },
            {
              "lineno": 62,
              "line": "        }) {\"None\"} else {this.key.getOrThrow().toString()}"
            },
            {
              "lineno": 63,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func toString(): String {",
              "successors": [
                {
                  "id": 2,
                  "label": "        return if(match(this.key) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            case Some(x) => true",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "            case _ => false",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "        }) {\"None\"} else {this.key.getOrThrow().toString()}",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public class LinkedEntry<K, V> <: Equatable<LinkedEntry<K, V>> where K <: Equatable<K> & Hashable & ToString {"
        },
        {
          "lineno": 3,
          "line": "    public var key: Option<K> = None;"
        },
        {
          "lineno": 4,
          "line": "    private var values: ArrayList<V> = ArrayList<V>();"
        },
        {
          "lineno": 5,
          "line": "    public var next: Option<LinkedEntry<K, V>> = None;"
        },
        {
          "lineno": 6,
          "line": "    public var prev: Option<LinkedEntry<K, V>> = None;"
        },
        {
          "lineno": 7,
          "line": "    // Used only for the first item in the list which we will treat specially and which will not"
        },
        {
          "lineno": 8,
          "line": "    // contain a value."
        },
        {
          "lineno": 64,
          "line": "  }"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class LinkedEntry<K, V> <: Equatable<LinkedEntry<K, V>> where K <: Equatable<K> & Hashable & ToString {\n    public var key: Option<K> = None;\n    private var values: ArrayList<V> = ArrayList<V>();\n    public var next: Option<LinkedEntry<K, V>> = None;\n    public var prev: Option<LinkedEntry<K, V>> = None;\n    // Used only for the first item in the list which we will treat specially and which will not\n    // contain a value.",
          "successors": []
        }
      ]
    },
    {
      "name": "GroupedLinkedMap",
      "type": "class",
      "start_line": 65,
      "end_line": 170,
      "functions": [
        {
          "name": "put",
          "type": "function",
          "start_line": 68,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 68,
              "line": "  public func put(key: K, value: V): Unit {"
            },
            {
              "lineno": 69,
              "line": "    var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);"
            },
            {
              "lineno": 70,
              "line": "    if(match(entry) {"
            },
            {
              "lineno": 71,
              "line": "        case Some(x) => false"
            },
            {
              "lineno": 72,
              "line": "        case _ => true"
            },
            {
              "lineno": 73,
              "line": "    }) {"
            },
            {
              "lineno": 74,
              "line": "      entry = Some(LinkedEntry<K, V>(Some(key)));"
            },
            {
              "lineno": 75,
              "line": "      makeTail(entry.getOrThrow());"
            },
            {
              "lineno": 76,
              "line": "      let b = keyToEntry.put(key, entry.getOrThrow());"
            },
            {
              "lineno": 77,
              "line": "    } else {"
            },
            {
              "lineno": 78,
              "line": "      key.offer();"
            },
            {
              "lineno": 79,
              "line": "    }"
            },
            {
              "lineno": 80,
              "line": "    entry.getOrThrow().add(value);"
            },
            {
              "lineno": 81,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public func put(key: K, value: V): Unit {\n    var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);",
              "successors": [
                {
                  "id": 2,
                  "label": "    if(match(entry) {\n        case Some(x) => false\n        case _ => true\n    }) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "      entry = Some(LinkedEntry<K, V>(Some(key)));\n      makeTail(entry.getOrThrow());\n      let b = keyToEntry.put(key, entry.getOrThrow());",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "    } else {\n      key.offer();",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "    }\n    entry.getOrThrow().add(value);\n  }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 82,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 82,
              "line": "  public func get(key: K): Option<V> {"
            },
            {
              "lineno": 83,
              "line": "    var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);"
            },
            {
              "lineno": 84,
              "line": "    if (match(entry) {"
            },
            {
              "lineno": 85,
              "line": "        case Some(x) => false"
            },
            {
              "lineno": 86,
              "line": "        case _ => true"
            },
            {
              "lineno": 87,
              "line": "    }) {"
            },
            {
              "lineno": 88,
              "line": "      entry = Some(LinkedEntry<K, V>(Some(key)))"
            },
            {
              "lineno": 89,
              "line": "      let b = keyToEntry.put(key, entry.getOrThrow());"
            },
            {
              "lineno": 90,
              "line": "    } else {"
            },
            {
              "lineno": 91,
              "line": "      key.offer();"
            },
            {
              "lineno": 92,
              "line": "    }"
            },
            {
              "lineno": 93,
              "line": "    let en = entry.getOrThrow()"
            },
            {
              "lineno": 94,
              "line": "    makeHead(en);"
            },
            {
              "lineno": 95,
              "line": "    return en.removeLast();"
            },
            {
              "lineno": 96,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public func get(key: K): Option<V> {\n    var entry: Option<LinkedEntry<K, V>> = keyToEntry.get(key);",
              "successors": [
                {
                  "id": 2,
                  "label": "    if (match(entry) {\n        case Some(x) => false\n        case _ => true\n    }) {\n      entry = Some(LinkedEntry<K, V>(Some(key)))\n      let b = keyToEntry.put(key, entry.getOrThrow());",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    let en = entry.getOrThrow()\n    makeHead(en);\n    return en.removeLast();",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "    } else {\n      key.offer();\n    let en = entry.getOrThrow()\n    makeHead(en);\n    return en.removeLast();",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "removeLast",
          "type": "function",
          "start_line": 97,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "  public func removeLast(): Option<V> {"
            },
            {
              "lineno": 98,
              "line": "    var last: LinkedEntry<K, V> = head.prev.getOrThrow();"
            },
            {
              "lineno": 99,
              "line": "    while (!last.equals(head)) {"
            },
            {
              "lineno": 100,
              "line": "      let removed: Option<V> = last.removeLast();"
            },
            {
              "lineno": 101,
              "line": "      if (match(removed) {"
            },
            {
              "lineno": 102,
              "line": "        case Some(x) => true"
            },
            {
              "lineno": 103,
              "line": "        case _ => false"
            },
            {
              "lineno": 104,
              "line": "      }) {"
            },
            {
              "lineno": 105,
              "line": "        return removed;"
            },
            {
              "lineno": 106,
              "line": "      } else {"
            },
            {
              "lineno": 107,
              "line": "        // We will clean up empty lru entries since they are likely to have been one off or"
            },
            {
              "lineno": 108,
              "line": "        // unusual sizes and"
            },
            {
              "lineno": 109,
              "line": "        // are not likely to be requested again so the gc thrash should be minimal. Doing so will"
            },
            {
              "lineno": 110,
              "line": "        // speed up our"
            },
            {
              "lineno": 111,
              "line": "        // removeLast operation in the future and prevent our linked list from growing to"
            },
            {
              "lineno": 112,
              "line": "        // arbitrarily large"
            },
            {
              "lineno": 113,
              "line": "        // sizes."
            },
            {
              "lineno": 114,
              "line": "        removeEntry(last);"
            },
            {
              "lineno": 115,
              "line": "        keyToEntry.remove(last.key.getOrThrow());"
            },
            {
              "lineno": 116,
              "line": "        last.key.getOrThrow().offer();"
            },
            {
              "lineno": 117,
              "line": "      }"
            },
            {
              "lineno": 118,
              "line": "      last = last.prev.getOrThrow();"
            },
            {
              "lineno": 119,
              "line": "    }"
            },
            {
              "lineno": 120,
              "line": "    return None;"
            },
            {
              "lineno": 121,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public func removeLast(): Option<V> {\n    var last: LinkedEntry<K, V> = head.prev.getOrThrow();",
              "successors": [
                {
                  "id": 3,
                  "label": "    while (!last.equals(head)) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "      let removed: Option<V> = last.removeLast();\n      if (match(removed) {\n        case Some(x) => true\n        case _ => false\n      }) {",
                      "successors": [
                        {
                          "id": 6,
                          "label": "        return removed;",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "      } else {\n        // We will clean up empty lru entries since they are likely to have been one off or\n        // unusual sizes and\n        // are not likely to be requested again so the gc thrash should be minimal. Doing so will\n        // speed up our\n        // removeLast operation in the future and prevent our linked list from growing to\n        // arbitrarily large\n        // sizes.\n        removeEntry(last);\n        keyToEntry.remove(last.key.getOrThrow());\n        last.key.getOrThrow().offer();\n      }\n      last = last.prev.getOrThrow();",
                          "successors": [
                            {
                              "id": 3,
                              "label": "    while (!last.equals(head)) {",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "    return None;",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 122,
          "end_line": 147,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 122,
              "line": "  public func toString(): String {"
            },
            {
              "lineno": 123,
              "line": "    var sb: StringBuilder = StringBuilder(\"GroupedLinkedMap( \");"
            },
            {
              "lineno": 124,
              "line": "    var current: LinkedEntry<K, V> = head.next.getOrThrow();"
            },
            {
              "lineno": 125,
              "line": "    var hadAtLeastOneItem: Bool  = false;"
            },
            {
              "lineno": 126,
              "line": "    while (!current.equals(head)) {"
            },
            {
              "lineno": 127,
              "line": "      hadAtLeastOneItem = true;"
            },
            {
              "lineno": 128,
              "line": "      //适配"
            },
            {
              "lineno": 129,
              "line": "      //sb.append('{').append(current.key.getOrThrow()).append(':').append(current.size()).append(\"}, \");"
            },
            {
              "lineno": 130,
              "line": "      sb.append('{')"
            },
            {
              "lineno": 131,
              "line": "      sb.append(current.key.getOrThrow())"
            },
            {
              "lineno": 132,
              "line": "      sb.append(':')"
            },
            {
              "lineno": 133,
              "line": "      sb.append(current.size())"
            },
            {
              "lineno": 134,
              "line": "      sb.append(\"}, \")"
            },
            {
              "lineno": 135,
              "line": "      current = current.next.getOrThrow();"
            },
            {
              "lineno": 136,
              "line": "    }"
            },
            {
              "lineno": 137,
              "line": "    if (hadAtLeastOneItem) {"
            },
            {
              "lineno": 138,
              "line": "        let r = Range<Int64>(sb.size - 2, sb.size, 1, true, false, true)"
            },
            {
              "lineno": 139,
              "line": "        //适配"
            },
            {
              "lineno": 140,
              "line": "        //sb.remove(r);"
            },
            {
              "lineno": 141,
              "line": "        var strTemp = sb.toString()"
            },
            {
              "lineno": 142,
              "line": "        let r2: Range<Int64> = 0 .. sb.size - 2"
            },
            {
              "lineno": 143,
              "line": "        var subStrTemp = strTemp[r2]"
            },
            {
              "lineno": 144,
              "line": "        sb = StringBuilder(subStrTemp)"
            },
            {
              "lineno": 145,
              "line": "    }"
            },
            {
              "lineno": 146,
              "line": "    return sb.append(\" )\").toString();"
            },
            {
              "lineno": 147,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func toString(): String {\n    var sb: StringBuilder = StringBuilder(\"GroupedLinkedMap( \");\n    var current: LinkedEntry<K, V> = head.next.getOrThrow();\n    var hadAtLeastOneItem: Bool  = false;",
              "successors": [
                {
                  "id": 2,
                  "label": "while (!current.equals(head)) {\n      hadAtLeastOneItem = true;\n      //适配\n      //sb.append('{').append(current.key.getOrThrow()).append(':').append(current.size()).append(\"}, \");\n      sb.append('{')\n      sb.append(current.key.getOrThrow())\n      sb.append(':')\n      sb.append(current.size())\n      sb.append(\"}, \")\n      current = current.next.getOrThrow();\n    }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if (hadAtLeastOneItem) {\n        let r = Range<Int64>(sb.size - 2, sb.size, 1, true, false, true)\n        //适配\n        //sb.remove(r);\n        var strTemp = sb.toString()\n        let r2: Range<Int64> = 0 .. sb.size - 2\n        var subStrTemp = strTemp[r2]\n        sb = StringBuilder(subStrTemp)\n    }\nreturn sb.append(\" )\").toString();\n  }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "makeHead",
          "type": "function",
          "start_line": 149,
          "end_line": 154,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 149,
              "line": "  private func makeHead(entry: LinkedEntry<K, V>): Unit {"
            },
            {
              "lineno": 150,
              "line": "    removeEntry<K, V>(entry);"
            },
            {
              "lineno": 151,
              "line": "    entry.prev = head;"
            },
            {
              "lineno": 152,
              "line": "    entry.next = head.next;"
            },
            {
              "lineno": 153,
              "line": "    updateEntry<K, V>(entry);"
            },
            {
              "lineno": 154,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  private func makeHead(entry: LinkedEntry<K, V>): Unit {\n    removeEntry<K, V>(entry);\n    entry.prev = head;\n    entry.next = head.next;\n    updateEntry<K, V>(entry);\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "makeTail",
          "type": "function",
          "start_line": 156,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 156,
              "line": "  private func makeTail(entry: LinkedEntry<K, V>): Unit {"
            },
            {
              "lineno": 157,
              "line": "    removeEntry<K, V>(entry);"
            },
            {
              "lineno": 158,
              "line": "    entry.prev = head.prev;"
            },
            {
              "lineno": 159,
              "line": "    entry.next = head;"
            },
            {
              "lineno": 160,
              "line": "    updateEntry<K, V>(entry);"
            },
            {
              "lineno": 161,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  private func makeTail(entry: LinkedEntry<K, V>): Unit {\n    removeEntry<K, V>(entry);\n    entry.prev = head.prev;\n    entry.next = head;\n    updateEntry<K, V>(entry);\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "updateEntry",
          "type": "function",
          "start_line": 162,
          "end_line": 165,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 162,
              "line": "  private static func updateEntry<K, V>(entry: LinkedEntry<K, V>) where K <: Poolable & Hashable & Equatable<K> & ToString {"
            },
            {
              "lineno": 163,
              "line": "    entry.next.getOrThrow().prev = Some(entry);"
            },
            {
              "lineno": 164,
              "line": "    entry.prev.getOrThrow().next = Some(entry);"
            },
            {
              "lineno": 165,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  private static func updateEntry<K, V>(entry: LinkedEntry<K, V>) where K <: Poolable & Hashable & Equatable<K> & ToString {\n    entry.next.getOrThrow().prev = Some(entry);\n    entry.prev.getOrThrow().next = Some(entry);\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "removeEntry",
          "type": "function",
          "start_line": 166,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 166,
              "line": "  private static func removeEntry<K, V>(entry: LinkedEntry<K, V>) where K <: Poolable & Hashable & Equatable<K> & ToString  {"
            },
            {
              "lineno": 167,
              "line": "    entry.prev.getOrThrow().next = entry.next;"
            },
            {
              "lineno": 168,
              "line": "    entry.next.getOrThrow().prev = entry.prev;"
            },
            {
              "lineno": 169,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  private static func removeEntry<K, V>(entry: LinkedEntry<K, V>) where K <: Poolable & Hashable & Equatable<K> & ToString  {\n    entry.prev.getOrThrow().next = entry.next;\n    entry.next.getOrThrow().prev = entry.prev;\n  }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 65,
          "line": "public class GroupedLinkedMap<K, V> where K <: Poolable & Hashable & Equatable<K> & ToString {"
        },
        {
          "lineno": 66,
          "line": "  private let head: LinkedEntry<K, V> = LinkedEntry<K, V>();"
        },
        {
          "lineno": 67,
          "line": "  private let keyToEntry: HashMap<K, LinkedEntry<K, V>>  = HashMap<K, LinkedEntry<K, V>>();"
        },
        {
          "lineno": 148,
          "line": "  // Make the entry the most recently used item."
        },
        {
          "lineno": 155,
          "line": "  // Make the entry the least recently used item."
        },
        {
          "lineno": 170,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class GroupedLinkedMap<K, V> where K <: Poolable & Hashable & Equatable<K> & ToString {\n  private let head: LinkedEntry<K, V> = LinkedEntry<K, V>();\n  private let keyToEntry: HashMap<K, LinkedEntry<K, V>>  = HashMap<K, LinkedEntry<K, V>>();\n// Make the entry the most recently used item.",
          "successors": [
            {
              "id": 3,
              "label": "// Make the entry the least recently used item.\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package glide"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package glide",
      "successors": []
    }
  ]
}