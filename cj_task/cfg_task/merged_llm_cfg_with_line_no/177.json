{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 267,
  "functions": [
    {
      "name": "ArrayCopy",
      "type": "function",
      "start_line": 2,
      "end_line": 10,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public func ArrayCopy(src: Array<Byte>, srcPos: Int64, dest: Array<Byte>, destPos: Int64, length: Int64) {"
        },
        {
          "lineno": 3,
          "line": "    if ((srcPos | destPos | length) < 0) {"
        },
        {
          "lineno": 4,
          "line": "        throw IndexOutOfBoundsException()"
        },
        {
          "lineno": 5,
          "line": "    }"
        },
        {
          "lineno": 6,
          "line": "    if (destPos > dest.size) {"
        },
        {
          "lineno": 7,
          "line": "        throw IndexOutOfBoundsException()"
        },
        {
          "lineno": 8,
          "line": "    }"
        },
        {
          "lineno": 9,
          "line": "    src.copyTo(dest, srcPos, destPos, length)"
        },
        {
          "lineno": 10,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func ArrayCopy(src: Array<Byte>, srcPos: Int64, dest: Array<Byte>, destPos: Int64, length: Int64) {\nif ((srcPos | destPos | length) < 0) {\n        throw IndexOutOfBoundsException()",
          "successors": [
            {
              "id": 3,
              "label": "}\nif (destPos > dest.size) {\n        throw IndexOutOfBoundsException()",
              "successors": [
                {
                  "id": 5,
                  "label": "}\nsrc.copyTo(dest, srcPos, destPos, length)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ByteBuffer",
      "type": "class",
      "start_line": 11,
      "end_line": 262,
      "functions": [
        {
          "name": "init(mark: Int64, position: Int64, limits: Int64, capacity: Int64, hbs: Array<Byte>, offsets: Int64)",
          "type": "function",
          "start_line": 14,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    init (mark: Int64, position: Int64, limits: Int64, capacity: Int64, hbs: Array<Byte>, offsets: Int64) {"
            },
            {
              "lineno": 15,
              "line": "        super(mark, position, limits, capacity)"
            },
            {
              "lineno": 16,
              "line": "        this.hb = hbs"
            },
            {
              "lineno": 17,
              "line": "        this.offset = offsets"
            },
            {
              "lineno": 18,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init (mark: Int64, position: Int64, limits: Int64, capacity: Int64, hbs: Array<Byte>, offsets: Int64) {\n        super(mark, position, limits, capacity)\n        this.hb = hbs\n        this.offset = offsets\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "init(cap: Int64, lims: Int64)",
          "type": "function",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    init (cap: Int64, lims: Int64) {"
            },
            {
              "lineno": 20,
              "line": "        this (-1, 0, lims, cap, Array<Byte>(cap, item: 0), 0)"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "init (cap: Int64, lims: Int64) {\n    this (-1, 0, lims, cap, Array<Byte>(cap, item: 0), 0)\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "init(bufs: Array<Byte>, off: Int64, len: Int64)",
          "type": "function",
          "start_line": 22,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    init (bufs: Array<Byte>, off: Int64, len: Int64) {"
            },
            {
              "lineno": 23,
              "line": "        this (-1, off, off+len, bufs.size, bufs, 0)"
            },
            {
              "lineno": 24,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init (bufs: Array<Byte>, off: Int64, len: Int64) {\n        this (-1, off, off+len, bufs.size, bufs, 0)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "protected init(bufs: Array<Byte>, mark: Int64, pos: Int64, lim: Int64, cap: Int64, off: Int64)",
          "type": "function",
          "start_line": 25,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    protected init (bufs: Array<Byte>, mark: Int64, pos: Int64, lim: Int64, cap: Int64, off: Int64) {"
            },
            {
              "lineno": 26,
              "line": "        this(mark, pos, lim, cap, bufs, off)"
            },
            {
              "lineno": 27,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    protected init (bufs: Array<Byte>, mark: Int64, pos: Int64, lim: Int64, cap: Int64, off: Int64) {\n        this(mark, pos, lim, cap, bufs, off)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "allocate",
          "type": "function",
          "start_line": 28,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public static func allocate(capacitys: Int64): ByteBuffer {"
            },
            {
              "lineno": 29,
              "line": "        if (capacitys < 0) {"
            },
            {
              "lineno": 30,
              "line": "            throw IllegalArgumentException()"
            },
            {
              "lineno": 31,
              "line": "        }"
            },
            {
              "lineno": 32,
              "line": "        return ByteBuffer(capacitys, capacitys)"
            },
            {
              "lineno": 33,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func allocate(capacitys: Int64): ByteBuffer {\n        if (capacitys < 0) {\n            throw IllegalArgumentException()\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        return ByteBuffer(capacitys, capacitys)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "wrap(arrays: Array<UInt8>, offset: Int64, length: Int64)",
          "type": "function",
          "start_line": 34,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    public static func wrap(arrays: Array<UInt8>, offset: Int64, length: Int64): ByteBuffer {"
            },
            {
              "lineno": 35,
              "line": "        try{"
            },
            {
              "lineno": 36,
              "line": "            return ByteBuffer(arrays,offset,length)"
            },
            {
              "lineno": 37,
              "line": "        } catch (ex: IllegalArgumentException) {"
            },
            {
              "lineno": 38,
              "line": "            throw IndexOutOfBoundsException()"
            },
            {
              "lineno": 39,
              "line": "        }"
            },
            {
              "lineno": 40,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func wrap(arrays: Array<UInt8>, offset: Int64, length: Int64): ByteBuffer {",
              "successors": [
                {
                  "id": 2,
                  "label": "        try{\n            return ByteBuffer(arrays,offset,length)\n        }",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        } catch (ex: IllegalArgumentException) {\n            throw IndexOutOfBoundsException()\n        }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "wrap(arrays: Array<UInt8>)",
          "type": "function",
          "start_line": 41,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    public static func wrap(arrays: Array<UInt8>): ByteBuffer {"
            },
            {
              "lineno": 42,
              "line": "        return wrap(arrays, 0, arrays.size)"
            },
            {
              "lineno": 43,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func wrap(arrays: Array<UInt8>): ByteBuffer {\n        return wrap(arrays, 0, arrays.size)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "get(dst: Array<UInt8>)",
          "type": "function",
          "start_line": 44,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    public func get(dst: Array<UInt8>): ByteBuffer {"
            },
            {
              "lineno": 45,
              "line": "        return get(dst, 0, dst.size)"
            },
            {
              "lineno": 46,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func get(dst: Array<UInt8>): ByteBuffer {\n        return get(dst, 0, dst.size)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "put(srcs: Array<UInt8>)",
          "type": "function",
          "start_line": 47,
          "end_line": 49,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    public func put(srcs: Array<UInt8>): ByteBuffer {"
            },
            {
              "lineno": 48,
              "line": "        return this.put(srcs, 0, srcs.size)"
            },
            {
              "lineno": 49,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func put(srcs: Array<UInt8>): ByteBuffer {\nreturn this.put(srcs, 0, srcs.size)",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "hasArray",
          "type": "function",
          "start_line": 50,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    public func hasArray(): Bool {"
            },
            {
              "lineno": 51,
              "line": "        return false"
            },
            {
              "lineno": 52,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func hasArray(): Bool {\n        return false\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "array",
          "type": "function",
          "start_line": 53,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 53,
              "line": "    public func array(): Array<UInt8> {"
            },
            {
              "lineno": 54,
              "line": "        return this.hb"
            },
            {
              "lineno": 55,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func array(): Array<UInt8> {\n        return this.hb\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "arrayOffset",
          "type": "function",
          "start_line": 56,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 56,
              "line": "    public func arrayOffset(): Int64 {"
            },
            {
              "lineno": 57,
              "line": "        return this.offset"
            },
            {
              "lineno": 58,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func arrayOffset(): Int64 {\n        return this.offset\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "position(newPosit: Int64)",
          "type": "function",
          "start_line": 59,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 59,
              "line": "    public func position(newPosit: Int64): ByteBuffer {"
            },
            {
              "lineno": 60,
              "line": "        super.position(newPosit)"
            },
            {
              "lineno": 61,
              "line": "        return this"
            },
            {
              "lineno": 62,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func position(newPosit: Int64): ByteBuffer {\n        super.position(newPosit)\n        return this",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "limit(newLim: Int64)",
          "type": "function",
          "start_line": 63,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 63,
              "line": "    public func limit(newLim: Int64): ByteBuffer {"
            },
            {
              "lineno": 64,
              "line": "        super.limit(newLim)"
            },
            {
              "lineno": 65,
              "line": "        return this"
            },
            {
              "lineno": 66,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func limit(newLim: Int64): ByteBuffer {\n        super.limit(newLim)\n        return this",
              "successors": []
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "start_line": 67,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    public func reset(): ByteBuffer {"
            },
            {
              "lineno": 68,
              "line": "        super.reset()"
            },
            {
              "lineno": 69,
              "line": "        return this"
            },
            {
              "lineno": 70,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func reset(): ByteBuffer {\n        super.reset()\n        return this\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "clear",
          "type": "function",
          "start_line": 71,
          "end_line": 74,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 71,
              "line": "    public func clear (): ByteBuffer {"
            },
            {
              "lineno": 72,
              "line": "        super.clear()"
            },
            {
              "lineno": 73,
              "line": "        return this"
            },
            {
              "lineno": 74,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func clear (): ByteBuffer {\n        super.clear()\n        return this\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "flip",
          "type": "function",
          "start_line": 75,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 75,
              "line": "    public func flip(): ByteBuffer {"
            },
            {
              "lineno": 76,
              "line": "        super.flip()"
            },
            {
              "lineno": 77,
              "line": "        return this"
            },
            {
              "lineno": 78,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func flip(): ByteBuffer {\n        super.flip()\n        return this\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "rewind",
          "type": "function",
          "start_line": 79,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 79,
              "line": "    public func rewind(): ByteBuffer {"
            },
            {
              "lineno": 80,
              "line": "        super.rewind()"
            },
            {
              "lineno": 81,
              "line": "        return this"
            },
            {
              "lineno": 82,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func rewind(): ByteBuffer {\n        super.rewind()\n        return this",
              "successors": []
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 83,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 83,
              "line": "    public func toString(): String {"
            },
            {
              "lineno": 84,
              "line": "        let sbd = StringBuilder()"
            },
            {
              "lineno": 85,
              "line": "        sbd.append(\"ByteBuffer: [offset=\")"
            },
            {
              "lineno": 86,
              "line": "        sbd.append(this.offset)"
            },
            {
              "lineno": 87,
              "line": "        sbd.append(\" mark=\")"
            },
            {
              "lineno": 88,
              "line": "        sbd.append(this.mar)"
            },
            {
              "lineno": 89,
              "line": "        sbd.append(\" pos=\")"
            },
            {
              "lineno": 90,
              "line": "        sbd.append(position())"
            },
            {
              "lineno": 91,
              "line": "        sbd.append(\" lim=\")"
            },
            {
              "lineno": 92,
              "line": "        sbd.append(limit())"
            },
            {
              "lineno": 93,
              "line": "        sbd.append(\" cap=\")"
            },
            {
              "lineno": 94,
              "line": "        sbd.append(capacity())"
            },
            {
              "lineno": 95,
              "line": "        sbd.append(\"]\")"
            },
            {
              "lineno": 96,
              "line": "        let src = sbd.toString()"
            },
            {
              "lineno": 97,
              "line": "        sbd.reset()"
            },
            {
              "lineno": 98,
              "line": "        return src"
            },
            {
              "lineno": 99,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func toString(): String {\n    let sbd = StringBuilder()\n    sbd.append(\"ByteBuffer: [offset=\")\n    sbd.append(this.offset)\n    sbd.append(\" mark=\")\n    sbd.append(this.mar)\n    sbd.append(\" pos=\")\n    sbd.append(position())\n    sbd.append(\" lim=\")\n    sbd.append(limit())\n    sbd.append(\" cap=\")\n    sbd.append(capacity())\n    sbd.append(\"]\")\n    let src = sbd.toString()\n    sbd.reset()\nreturn src",
              "successors": []
            }
          ]
        },
        {
          "name": "hashCode",
          "type": "function",
          "start_line": 101,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 101,
              "line": "    public func hashCode(): Int64 {"
            },
            {
              "lineno": 102,
              "line": "        var hc: Int32 = 1"
            },
            {
              "lineno": 103,
              "line": "        var p = position()"
            },
            {
              "lineno": 104,
              "line": "        for (i in limit()-1..=p:-1) {"
            },
            {
              "lineno": 105,
              "line": "            hc = 31 * hc + Int32(get(i))"
            },
            {
              "lineno": 106,
              "line": "        }"
            },
            {
              "lineno": 107,
              "line": "        return Int64(hc)"
            },
            {
              "lineno": 108,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func hashCode(): Int64 {\n        var hc: Int32 = 1\n        var p = position()",
              "successors": [
                {
                  "id": 2,
                  "label": "        for (i in limit()-1..=p:-1) {\n            hc = 31 * hc + Int32(get(i))\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        return Int64(hc)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "==",
          "type": "function",
          "start_line": 109,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 109,
              "line": "    public operator func == (thats: Buffer): Bool {"
            },
            {
              "lineno": 110,
              "line": "        return refEq(this, thats)"
            },
            {
              "lineno": 111,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public operator func == (thats: Buffer): Bool {\n        return refEq(this, thats)",
              "successors": []
            }
          ]
        },
        {
          "name": "!=",
          "type": "function",
          "start_line": 112,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 112,
              "line": "    public operator func != (thats: Buffer): Bool {"
            },
            {
              "lineno": 113,
              "line": "        return !refEq(this, thats)"
            },
            {
              "lineno": 114,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public operator func != (thats: Buffer): Bool {\n        return !refEq(this, thats)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "slice",
          "type": "function",
          "start_line": 115,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 115,
              "line": "    public func slice(): ByteBuffer {"
            },
            {
              "lineno": 116,
              "line": "        return ByteBuffer(this.hb, -1, 0, this.remaining(), this.remaining(), this.position() + offset)"
            },
            {
              "lineno": 117,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func slice(): ByteBuffer {\n        return ByteBuffer(this.hb, -1, 0, this.remaining(), this.remaining(), this.position() + offset)",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "slice(pos: Int64, limit: Int64)",
          "type": "function",
          "start_line": 118,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 118,
              "line": "    public func slice (pos: Int64, limit: Int64): ByteBuffer {"
            },
            {
              "lineno": 119,
              "line": "        let rem = limit - pos"
            },
            {
              "lineno": 120,
              "line": "        return ByteBuffer(hb, -1, 0, rem, rem, pos + offset)"
            },
            {
              "lineno": 121,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func slice (pos: Int64, limit: Int64): ByteBuffer {\n    let rem = limit - pos\nreturn ByteBuffer(hb, -1, 0, rem, rem, pos + offset)",
              "successors": []
            }
          ]
        },
        {
          "name": "duplicate",
          "type": "function",
          "start_line": 122,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 122,
              "line": "    public func duplicate(): ByteBuffer {"
            },
            {
              "lineno": 123,
              "line": "        return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)"
            },
            {
              "lineno": 124,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func duplicate(): ByteBuffer {\n        return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "asReadOnlyBuffer",
          "type": "function",
          "start_line": 125,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 125,
              "line": "    public func asReadOnlyBuffer(): ByteBuffer {"
            },
            {
              "lineno": 126,
              "line": "        return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)"
            },
            {
              "lineno": 127,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func asReadOnlyBuffer(): ByteBuffer {\n        return ByteBuffer(hb, this.markValue(), this.position(), this.limit(), this.capacity(), offset)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "protected ix(ii: Int64)",
          "type": "function",
          "start_line": 128,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 128,
              "line": "    protected func ix(ii: Int64): Int64 {"
            },
            {
              "lineno": 129,
              "line": "        return ii + offset"
            },
            {
              "lineno": 130,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    protected func ix(ii: Int64): Int64 {\n        return ii + offset\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 131,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 131,
              "line": "    public func get(): Byte {"
            },
            {
              "lineno": 132,
              "line": "        return hb[ix(nextGetIndex())]"
            },
            {
              "lineno": 133,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func get(): Byte {\n    return hb[ix(nextGetIndex())]\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "get(i:Int64)",
          "type": "function",
          "start_line": 134,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 134,
              "line": "    public func get(i:Int64) : Byte {"
            },
            {
              "lineno": 135,
              "line": "        return hb[ix(checkIndex(i))]"
            },
            {
              "lineno": 136,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func get(i:Int64) : Byte {\n        return hb[ix(checkIndex(i))]",
              "successors": []
            }
          ]
        },
        {
          "name": "get(dsts: Array<Byte>, offset: Int64, length: Int64)",
          "type": "function",
          "start_line": 137,
          "end_line": 145,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 137,
              "line": "    public func get(dsts: Array<Byte>, offset: Int64, length: Int64): ByteBuffer {"
            },
            {
              "lineno": 138,
              "line": "        checkBounds(offset, length, dsts.size)"
            },
            {
              "lineno": 139,
              "line": "        if (length > this.remaining()) {"
            },
            {
              "lineno": 140,
              "line": "            throw Exception() // BufferUnderflowException"
            },
            {
              "lineno": 141,
              "line": "        }"
            },
            {
              "lineno": 142,
              "line": "        ArrayCopy(hb, ix(position()), dsts, offset, length)"
            },
            {
              "lineno": 143,
              "line": "        position(position() + length)"
            },
            {
              "lineno": 144,
              "line": "        return this"
            },
            {
              "lineno": 145,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func get(dsts: Array<Byte>, offset: Int64, length: Int64): ByteBuffer {\n        checkBounds(offset, length, dsts.size)\n        if (length > this.remaining()) {\n            throw Exception() // BufferUnderflowException\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        ArrayCopy(hb, ix(position()), dsts, offset, length)\n        position(position() + length)\n        return this",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "put(x: Byte)",
          "type": "function",
          "start_line": 146,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 146,
              "line": "    public func put(x: Byte): ByteBuffer {"
            },
            {
              "lineno": 147,
              "line": "        hb[ix(nextGetIndex())] = x"
            },
            {
              "lineno": 148,
              "line": "        return this"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func put(x: Byte): ByteBuffer {\n        hb[ix(nextGetIndex())] = x\n        return this",
              "successors": []
            }
          ]
        },
        {
          "name": "put(i: Int64, x: Byte)",
          "type": "function",
          "start_line": 150,
          "end_line": 152,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 150,
              "line": "    public func put(i: Int64, x: Byte): ByteBuffer {"
            },
            {
              "lineno": 151,
              "line": "        hb[ix(checkIndex(i))] = x"
            },
            {
              "lineno": 152,
              "line": "        return this"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func put(i: Int64, x: Byte): ByteBuffer {\n        hb[ix(checkIndex(i))] = x\n        return this",
              "successors": []
            }
          ]
        },
        {
          "name": "put(src: Array<Byte>, offsets: Int64, length: Int64)",
          "type": "function",
          "start_line": 154,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 154,
              "line": "    public func put(src: Array<Byte>, offsets: Int64, length: Int64): ByteBuffer {"
            },
            {
              "lineno": 155,
              "line": "        checkBounds(offsets, length, src.size)"
            },
            {
              "lineno": 156,
              "line": "        if (length > remaining()) {"
            },
            {
              "lineno": 157,
              "line": "            throw Exception() // BufferOverflowException"
            },
            {
              "lineno": 158,
              "line": "        }"
            },
            {
              "lineno": 159,
              "line": "        ArrayCopy(src, offsets, hb, ix(position()), length)"
            },
            {
              "lineno": 160,
              "line": "        position(position() + length)"
            },
            {
              "lineno": 161,
              "line": "        return this"
            },
            {
              "lineno": 162,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func put(src: Array<Byte>, offsets: Int64, length: Int64): ByteBuffer {\n        checkBounds(offsets, length, src.size)\n        if (length > remaining()) {\n            throw Exception() // BufferOverflowException\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        ArrayCopy(src, offsets, hb, ix(position()), length)\n        position(position() + length)\n        return this",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "put(srcs: ByteBuffer)",
          "type": "function",
          "start_line": 163,
          "end_line": 178,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 163,
              "line": "    public func put(srcs: ByteBuffer): ByteBuffer {"
            },
            {
              "lineno": 164,
              "line": "        if (srcs is ByteBuffer) {"
            },
            {
              "lineno": 165,
              "line": "            if (srcs == this) {"
            },
            {
              "lineno": 166,
              "line": "                throw createSameBufferException()"
            },
            {
              "lineno": 167,
              "line": "            }"
            },
            {
              "lineno": 168,
              "line": "            let sb: ByteBuffer =(srcs as ByteBuffer).getOrThrow()"
            },
            {
              "lineno": 169,
              "line": "            let n = sb.remaining()"
            },
            {
              "lineno": 170,
              "line": "            if (n > remaining()) {"
            },
            {
              "lineno": 171,
              "line": "                throw BufferOverflowException() // BufferOverflowException"
            },
            {
              "lineno": 172,
              "line": "            }"
            },
            {
              "lineno": 173,
              "line": "            ArrayCopy(sb.hb, sb.ix(sb.position()), hb, ix(position()), n)"
            },
            {
              "lineno": 174,
              "line": "            sb.position(sb.position() + n )"
            },
            {
              "lineno": 175,
              "line": "            position(position() +n)"
            },
            {
              "lineno": 176,
              "line": "        }"
            },
            {
              "lineno": 177,
              "line": "        return this"
            },
            {
              "lineno": 178,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func put(srcs: ByteBuffer): ByteBuffer {\n        if (srcs is ByteBuffer) {\n            if (srcs == this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "                throw createSameBufferException()\n            let sb: ByteBuffer =(srcs as ByteBuffer).getOrThrow()\n            let n = sb.remaining()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "            if (n > remaining()) {\n                throw BufferOverflowException() // BufferOverflowException\n            ArrayCopy(sb.hb, sb.ix(sb.position()), hb, ix(position()), n)\n            sb.position(sb.position() + n )\n            position(position() +n)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        return this",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "compact",
          "type": "function",
          "start_line": 179,
          "end_line": 185,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 179,
              "line": "    public func compact(): ByteBuffer {"
            },
            {
              "lineno": 180,
              "line": "        ArrayCopy(hb, ix(position()), hb, ix(0), remaining())"
            },
            {
              "lineno": 181,
              "line": "        position(remaining())"
            },
            {
              "lineno": 182,
              "line": "        limit(capacity())"
            },
            {
              "lineno": 183,
              "line": "        discardMark()"
            },
            {
              "lineno": 184,
              "line": "        return this"
            },
            {
              "lineno": 185,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func compact(): ByteBuffer {\n        ArrayCopy(hb, ix(position()), hb, ix(0), remaining())\n        position(remaining())\n        limit(capacity())\n        discardMark()\n        return this",
              "successors": []
            }
          ]
        },
        {
          "name": "putLong(val: Int64)",
          "type": "function",
          "start_line": 187,
          "end_line": 189,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 187,
              "line": "    public func putLong(val: Int64): ByteBuffer {"
            },
            {
              "lineno": 188,
              "line": "        this.putUInt64(UInt64(val))"
            },
            {
              "lineno": 189,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func putLong(val: Int64): ByteBuffer {\n        this.putUInt64(UInt64(val))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "putInt(val: Int32)",
          "type": "function",
          "start_line": 191,
          "end_line": 193,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 191,
              "line": "    public func putInt(val: Int32): ByteBuffer {"
            },
            {
              "lineno": 192,
              "line": "        this.putUInt32(UInt32(val))"
            },
            {
              "lineno": 193,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func putInt(val: Int32): ByteBuffer {\n        this.putUInt32(UInt32(val))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "putShort(val: Int16)",
          "type": "function",
          "start_line": 195,
          "end_line": 197,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 195,
              "line": "    public func putShort(val: Int16): ByteBuffer {"
            },
            {
              "lineno": 196,
              "line": "        this.putUInt16(UInt16(val))"
            },
            {
              "lineno": 197,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func putShort(val: Int16): ByteBuffer {\n        this.putUInt16(UInt16(val))\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getLong",
          "type": "function",
          "start_line": 199,
          "end_line": 201,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 199,
              "line": "    public func getLong(): Int64 {"
            },
            {
              "lineno": 200,
              "line": "        return Int64(this.getUInt64())"
            },
            {
              "lineno": 201,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func getLong(): Int64 {\n        return Int64(this.getUInt64())\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getInt",
          "type": "function",
          "start_line": 203,
          "end_line": 205,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 203,
              "line": "    public func getInt(): Int32 {"
            },
            {
              "lineno": 204,
              "line": "        return Int32(this.getUInt32())"
            },
            {
              "lineno": 205,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func getInt(): Int32 {\n        return Int32(this.getUInt32())",
              "successors": []
            }
          ]
        },
        {
          "name": "getShort",
          "type": "function",
          "start_line": 207,
          "end_line": 209,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 207,
              "line": "    public func getShort(): Int16 {"
            },
            {
              "lineno": 208,
              "line": "        return Int16(this.getUInt16())"
            },
            {
              "lineno": 209,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func getShort(): Int16 {\n        return Int16(this.getUInt16())\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "putUInt64(val: UInt64)",
          "type": "function",
          "start_line": 211,
          "end_line": 221,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 211,
              "line": "    public func putUInt64(val: UInt64): ByteBuffer {"
            },
            {
              "lineno": 212,
              "line": "        this.put(UInt8((val >> 56) & 0xff))"
            },
            {
              "lineno": 213,
              "line": "        this.put(UInt8((val >> 48) & 0xff))"
            },
            {
              "lineno": 214,
              "line": "        this.put(UInt8((val >> 40) & 0xff))"
            },
            {
              "lineno": 215,
              "line": "        this.put(UInt8((val >> 32) & 0xff))"
            },
            {
              "lineno": 216,
              "line": "        this.put(UInt8((val >> 24) & 0xff))"
            },
            {
              "lineno": 217,
              "line": "        this.put(UInt8((val >> 16) & 0xff))"
            },
            {
              "lineno": 218,
              "line": "        this.put(UInt8((val >> 8) & 0xff))"
            },
            {
              "lineno": 219,
              "line": "        this.put(UInt8(val & 0xff))"
            },
            {
              "lineno": 220,
              "line": "        return this"
            },
            {
              "lineno": 221,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func putUInt64(val: UInt64): ByteBuffer {\n        this.put(UInt8((val >> 56) & 0xff))\n        this.put(UInt8((val >> 48) & 0xff))\n        this.put(UInt8((val >> 40) & 0xff))\n        this.put(UInt8((val >> 32) & 0xff))\n        this.put(UInt8((val >> 24) & 0xff))\n        this.put(UInt8((val >> 16) & 0xff))\n        this.put(UInt8((val >> 8) & 0xff))\n        this.put(UInt8(val & 0xff))\n        return this\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "putUInt32(val: UInt32)",
          "type": "function",
          "start_line": 223,
          "end_line": 229,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 223,
              "line": "    public func putUInt32(val: UInt32): ByteBuffer {"
            },
            {
              "lineno": 224,
              "line": "        this.put(UInt8((val >> 24) & 0xff))"
            },
            {
              "lineno": 225,
              "line": "        this.put(UInt8((val >> 16) & 0xff))"
            },
            {
              "lineno": 226,
              "line": "        this.put(UInt8((val >> 8) & 0xff))"
            },
            {
              "lineno": 227,
              "line": "        this.put(UInt8(val & 0xff))"
            },
            {
              "lineno": 228,
              "line": "        return this"
            },
            {
              "lineno": 229,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func putUInt32(val: UInt32): ByteBuffer {\n        this.put(UInt8((val >> 24) & 0xff))\n        this.put(UInt8((val >> 16) & 0xff))\n        this.put(UInt8((val >> 8) & 0xff))\n        this.put(UInt8(val & 0xff))\n        return this\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "putUInt16(val: UInt16)",
          "type": "function",
          "start_line": 231,
          "end_line": 235,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 231,
              "line": "    public func putUInt16(val: UInt16): ByteBuffer {"
            },
            {
              "lineno": 232,
              "line": "        this.put(UInt8((val >> 8) & 0xff))"
            },
            {
              "lineno": 233,
              "line": "        this.put(UInt8(val & 0xff))"
            },
            {
              "lineno": 234,
              "line": "        return this"
            },
            {
              "lineno": 235,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func putUInt16(val: UInt16): ByteBuffer {\n        this.put(UInt8((val >> 8) & 0xff))\n        this.put(UInt8(val & 0xff))\n        return this\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getUInt64",
          "type": "function",
          "start_line": 237,
          "end_line": 246,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 237,
              "line": "    public func getUInt64(): UInt64 {"
            },
            {
              "lineno": 238,
              "line": "        return UInt64(this.get()) << 56 |"
            },
            {
              "lineno": 239,
              "line": "                UInt64(this.get()) << 48 |"
            },
            {
              "lineno": 240,
              "line": "                UInt64(this.get()) << 40 |"
            },
            {
              "lineno": 241,
              "line": "                UInt64(this.get()) << 32 |"
            },
            {
              "lineno": 242,
              "line": "                UInt64(this.get()) << 24 |"
            },
            {
              "lineno": 243,
              "line": "                UInt64(this.get()) << 16 |"
            },
            {
              "lineno": 244,
              "line": "                UInt64(this.get()) << 8 |"
            },
            {
              "lineno": 245,
              "line": "                UInt64(this.get())"
            },
            {
              "lineno": 246,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func getUInt64(): UInt64 {\n        return UInt64(this.get()) << 56 |\n                UInt64(this.get()) << 48 |\n                UInt64(this.get()) << 40 |\n                UInt64(this.get()) << 32 |\n                UInt64(this.get()) << 24 |\n                UInt64(this.get()) << 16 |\n                UInt64(this.get()) << 8 |\n                UInt64(this.get())\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "getUInt32",
          "type": "function",
          "start_line": 248,
          "end_line": 253,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 248,
              "line": "    public func getUInt32(): UInt32 {"
            },
            {
              "lineno": 249,
              "line": "        return UInt32(this.get()) << 24 |"
            },
            {
              "lineno": 250,
              "line": "            UInt32(this.get()) << 16 |"
            },
            {
              "lineno": 251,
              "line": "            UInt32(this.get()) << 8 |"
            },
            {
              "lineno": 252,
              "line": "            UInt32(this.get())"
            },
            {
              "lineno": 253,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func getUInt32(): UInt32 {\n        return UInt32(this.get()) << 24 |\n            UInt32(this.get()) << 16 |\n            UInt32(this.get()) << 8 |\n            UInt32(this.get())",
              "successors": []
            }
          ]
        },
        {
          "name": "getUInt16",
          "type": "function",
          "start_line": 255,
          "end_line": 258,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 255,
              "line": "    public func getUInt16(): UInt16 {"
            },
            {
              "lineno": 256,
              "line": "        return UInt16(this.get()) << 8 |"
            },
            {
              "lineno": 257,
              "line": "            UInt16(this.get())"
            },
            {
              "lineno": 258,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func getUInt16(): UInt16 {\n        return UInt16(this.get()) << 8 |\n            UInt16(this.get())\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "createSameBufferException",
          "type": "function",
          "start_line": 259,
          "end_line": 261,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 259,
              "line": "     func createSameBufferException(): IllegalArgumentException {"
            },
            {
              "lineno": 260,
              "line": "        throw IllegalArgumentException(\"The source buffer is this buffer\")"
            },
            {
              "lineno": 261,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "     func createSameBufferException(): IllegalArgumentException {\n        throw IllegalArgumentException(\"The source buffer is this buffer\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "public class ByteBuffer <: Buffer & ToString & Hashable & Equatable<Buffer>  {"
        },
        {
          "lineno": 12,
          "line": "    public let hb: Array<Byte>"
        },
        {
          "lineno": 13,
          "line": "    let offset: Int64"
        },
        {
          "lineno": 100,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 149,
          "line": "    }"
        },
        {
          "lineno": 153,
          "line": "    }"
        },
        {
          "lineno": 186,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 190,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 194,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 198,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 202,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 206,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 210,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 222,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 230,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 236,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 247,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 254,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 262,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class ByteBuffer <: Buffer & ToString & Hashable & Equatable<Buffer>  {\n    public let hb: Array<Byte>\n    let offset: Int64\n@OverflowWrapping",
          "successors": [
            {
              "id": 3,
              "label": "}\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "@OverflowWrapping\n@OverflowWrapping",
                  "successors": [
                    {
                      "id": 7,
                      "label": "@OverflowWrapping\n@OverflowWrapping",
                      "successors": [
                        {
                          "id": 9,
                          "label": "@OverflowWrapping\n@OverflowWrapping",
                          "successors": [
                            {
                              "id": 11,
                              "label": "@OverflowWrapping\n@OverflowWrapping",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "@OverflowWrapping\n@OverflowWrapping",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "label": "@OverflowWrapping\n@OverflowWrapping",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "label": "}",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "BufferOverflowException",
      "type": "class",
      "start_line": 263,
      "end_line": 267,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 264,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 264,
              "line": "    public init() {"
            },
            {
              "lineno": 265,
              "line": "        super(\"BufferOverflowException: \\n\")"
            },
            {
              "lineno": 266,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public init() {\n        super(\"BufferOverflowException: \\n\")\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 263,
          "line": "public class BufferOverflowException <: Exception {"
        },
        {
          "lineno": 267,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class BufferOverflowException <: Exception {\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package utils.nio"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package utils.nio",
      "successors": []
    }
  ]
}