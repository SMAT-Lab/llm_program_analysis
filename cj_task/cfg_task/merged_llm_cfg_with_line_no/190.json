{
  "name": "barcode_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 17,
  "functions": [],
  "classes": [
    {
      "name": "AI013x0xReader",
      "type": "class",
      "start_line": 2,
      "end_line": 17,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 5,
          "end_line": 7,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 5,
              "line": "    init(information: BitArray) {"
            },
            {
              "lineno": 6,
              "line": "        super(information)"
            },
            {
              "lineno": 7,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init(information: BitArray) {\n        super(information)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "parseInformation",
          "type": "function",
          "start_line": 8,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    public override func parseInformation(): String {"
            },
            {
              "lineno": 9,
              "line": "        if (this.information.size != HEADER_SIZE + GTIN_SIZE + WEIGHT_SIZE) {"
            },
            {
              "lineno": 10,
              "line": "            throw NotFoundException()"
            },
            {
              "lineno": 11,
              "line": "        }"
            },
            {
              "lineno": 12,
              "line": "        let buf = StringBuilder()"
            },
            {
              "lineno": 13,
              "line": "        encodeCompressedGtin(buf, HEADER_SIZE)"
            },
            {
              "lineno": 14,
              "line": "        encodeCompressedWeight(buf, HEADER_SIZE + GTIN_SIZE, WEIGHT_SIZE)"
            },
            {
              "lineno": 15,
              "line": "        buf.toString()"
            },
            {
              "lineno": 16,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public override func parseInformation(): String {\n        if (this.information.size != HEADER_SIZE + GTIN_SIZE + WEIGHT_SIZE) {\n            throw NotFoundException()\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        let buf = StringBuilder()\n        encodeCompressedGtin(buf, HEADER_SIZE)\n        encodeCompressedWeight(buf, HEADER_SIZE + GTIN_SIZE, WEIGHT_SIZE)\n        buf.toString()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "abstract class AI013x0xReader <: AI01WeightReader {"
        },
        {
          "lineno": 3,
          "line": "    static let HEADER_SIZE = 5 // 4 + 1"
        },
        {
          "lineno": 4,
          "line": "    static let WEIGHT_SIZE = 15"
        },
        {
          "lineno": 17,
          "line": "}"
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package barcode"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package barcode",
      "successors": []
    }
  ]
}