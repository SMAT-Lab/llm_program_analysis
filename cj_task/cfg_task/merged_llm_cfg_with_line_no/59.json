{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 315,
  "functions": [
    {
      "name": "sqlOpen",
      "type": "function",
      "start_line": 20,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 20,
          "line": "public func sqlOpen(path: String): CPointer<CPointer<Unit>> {"
        },
        {
          "lineno": 21,
          "line": "    let ppDb: CPointer<CPointer<Unit>>"
        },
        {
          "lineno": 22,
          "line": "    unsafe {"
        },
        {
          "lineno": 23,
          "line": "        let ptr = malloc(POINTER_SIZE)"
        },
        {
          "lineno": 24,
          "line": "        ppDb = CPointer<CPointer<Unit>>(ptr)"
        },
        {
          "lineno": 25,
          "line": "        let cPath = LibC.mallocCString(path)"
        },
        {
          "lineno": 26,
          "line": "        let ret = sqlite3_open(cPath, ppDb)"
        },
        {
          "lineno": 27,
          "line": "        LibC.free(cPath)"
        },
        {
          "lineno": 28,
          "line": "        if (ret != 0) {"
        },
        {
          "lineno": 29,
          "line": "            throw SqlException(\"Failed to open database.\")"
        },
        {
          "lineno": 30,
          "line": "        }"
        },
        {
          "lineno": 31,
          "line": "    }"
        },
        {
          "lineno": 32,
          "line": "    return ppDb"
        },
        {
          "lineno": 33,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlOpen(path: String): CPointer<CPointer<Unit>> {\n    let ppDb: CPointer<CPointer<Unit>>\nunsafe {\n        let ptr = malloc(POINTER_SIZE)\n        ppDb = CPointer<CPointer<Unit>>(ptr)\n        let cPath = LibC.mallocCString(path)\n        let ret = sqlite3_open(cPath, ppDb)\n        LibC.free(cPath)",
          "successors": [
            {
              "id": 3,
              "label": "if (ret != 0) {\n            throw SqlException(\"Failed to open database.\")\n        }\nreturn ppDb",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlPrepare",
      "type": "function",
      "start_line": 41,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 41,
          "line": "public func sqlPrepare(ppDb: CPointer<CPointer<Unit>>, sql: String): CPointer<CPointer<Unit>> {"
        },
        {
          "lineno": 42,
          "line": "    let ppStmt: CPointer<CPointer<Unit>>"
        },
        {
          "lineno": 43,
          "line": "    unsafe {"
        },
        {
          "lineno": 44,
          "line": "        let ptr = malloc(POINTER_SIZE)"
        },
        {
          "lineno": 45,
          "line": "        ppStmt = CPointer<CPointer<Unit>>(ptr)"
        },
        {
          "lineno": 46,
          "line": "        let zSql = LibC.mallocCString(sql)"
        },
        {
          "lineno": 47,
          "line": "        let nullptr = CPointer<Unit>()"
        },
        {
          "lineno": 48,
          "line": "        let ret = sqlite3_prepare_v2(ppDb.read(), zSql, Int32(sql.size), ppStmt, nullptr)"
        },
        {
          "lineno": 49,
          "line": "        LibC.free(zSql)"
        },
        {
          "lineno": 50,
          "line": "        if (ret != 0) {"
        },
        {
          "lineno": 51,
          "line": "            throw SqlException(\"Failed to prepare statement.\")"
        },
        {
          "lineno": 52,
          "line": "        }"
        },
        {
          "lineno": 53,
          "line": "    }"
        },
        {
          "lineno": 54,
          "line": "    return ppStmt"
        },
        {
          "lineno": 55,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlPrepare(ppDb: CPointer<CPointer<Unit>>, sql: String): CPointer<CPointer<Unit>> {\nlet ppStmt: CPointer<CPointer<Unit>>\nunsafe {\n    let ptr = malloc(POINTER_SIZE)\n    ppStmt = CPointer<CPointer<Unit>>(ptr)\n    let zSql = LibC.mallocCString(sql)\n    let nullptr = CPointer<Unit>()\n    let ret = sqlite3_prepare_v2(ppDb.read(), zSql, Int32(sql.size), ppStmt, nullptr)\n    LibC.free(zSql)\n    if (ret != 0) {",
          "successors": [
            {
              "id": 3,
              "label": "throw SqlException(\"Failed to prepare statement.\")\n}\n}\nreturn ppStmt",
              "successors": []
            },
            {
              "id": 5,
              "label": "}\nreturn ppStmt",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlStep",
      "type": "function",
      "start_line": 62,
      "end_line": 64,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 62,
          "line": "public func sqlStep(ppStmt: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 63,
          "line": "    return unsafe { sqlite3_step(ppStmt.read()) }"
        },
        {
          "lineno": 64,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlStep(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_step(ppStmt.read()) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnType",
      "type": "function",
      "start_line": 71,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 71,
          "line": "public func sqlColumnType(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {"
        },
        {
          "lineno": 72,
          "line": "    return unsafe { sqlite3_column_type(ppStmt.read(), i) }"
        },
        {
          "lineno": 73,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnType(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {\n    return unsafe { sqlite3_column_type(ppStmt.read(), i) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnText",
      "type": "function",
      "start_line": 80,
      "end_line": 83,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 80,
          "line": "public func sqlColumnText(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {"
        },
        {
          "lineno": 81,
          "line": "    let ret = unsafe { sqlite3_column_text(ppStmt.read(), i) }"
        },
        {
          "lineno": 82,
          "line": "    return ret.toString()"
        },
        {
          "lineno": 83,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnText(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {\n    let ret = unsafe { sqlite3_column_text(ppStmt.read(), i) }\n    return ret.toString()\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnBytes",
      "type": "function",
      "start_line": 90,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 90,
          "line": "public func sqlColumnBytes(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {"
        },
        {
          "lineno": 91,
          "line": "    return unsafe { sqlite3_column_bytes(ppStmt.read(), i) }"
        },
        {
          "lineno": 92,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnBytes(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {\n    return unsafe { sqlite3_column_bytes(ppStmt.read(), i) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnInt64",
      "type": "function",
      "start_line": 99,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 99,
          "line": "public func sqlColumnInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int64 {"
        },
        {
          "lineno": 100,
          "line": "    return unsafe { sqlite3_column_int64(ppStmt.read(), i) }"
        },
        {
          "lineno": 101,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int64 {\n    return unsafe { sqlite3_column_int64(ppStmt.read(), i) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnDouble",
      "type": "function",
      "start_line": 108,
      "end_line": 110,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 108,
          "line": "public func sqlColumnDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Float64 {"
        },
        {
          "lineno": 109,
          "line": "    return unsafe { sqlite3_column_double(ppStmt.read(), i) }"
        },
        {
          "lineno": 110,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Float64 {\nreturn unsafe { sqlite3_column_double(ppStmt.read(), i) }",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlColumnBlob",
      "type": "function",
      "start_line": 117,
      "end_line": 119,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 117,
          "line": "public func sqlColumnBlob(ppStmt: CPointer<CPointer<Unit>>, i: Int32): CPointer<Byte> {"
        },
        {
          "lineno": 118,
          "line": "    return unsafe { sqlite3_column_blob(ppStmt.read(), i) }"
        },
        {
          "lineno": 119,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnBlob(ppStmt: CPointer<CPointer<Unit>>, i: Int32): CPointer<Byte> {\n    return unsafe { sqlite3_column_blob(ppStmt.read(), i) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnCount",
      "type": "function",
      "start_line": 126,
      "end_line": 128,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 126,
          "line": "public func sqlColumnCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 127,
          "line": "    return unsafe { sqlite3_column_count(ppStmt.read()) }"
        },
        {
          "lineno": 128,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_column_count(ppStmt.read()) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnName",
      "type": "function",
      "start_line": 135,
      "end_line": 138,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 135,
          "line": "public func sqlColumnName(ppStmt: CPointer<CPointer<Unit>>, n: Int32): String {"
        },
        {
          "lineno": 136,
          "line": "    let ret = unsafe { sqlite3_column_name(ppStmt.read(), n) }"
        },
        {
          "lineno": 137,
          "line": "    return ret.toString()"
        },
        {
          "lineno": 138,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnName(ppStmt: CPointer<CPointer<Unit>>, n: Int32): String {\n    let ret = unsafe { sqlite3_column_name(ppStmt.read(), n) }\n    return ret.toString()\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlColumnDecltype",
      "type": "function",
      "start_line": 145,
      "end_line": 148,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 145,
          "line": "public func sqlColumnDecltype(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {"
        },
        {
          "lineno": 146,
          "line": "    let ret = unsafe { sqlite3_column_decltype(ppStmt.read(), i) }"
        },
        {
          "lineno": 147,
          "line": "    return ret.toString()"
        },
        {
          "lineno": 148,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlColumnDecltype(ppStmt: CPointer<CPointer<Unit>>, i: Int32): String {\n    let ret = unsafe { sqlite3_column_decltype(ppStmt.read(), i) }\n    return ret.toString()\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlReset",
      "type": "function",
      "start_line": 155,
      "end_line": 157,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 155,
          "line": "public func sqlReset(ppStmt: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 156,
          "line": "    return unsafe { sqlite3_reset(ppStmt.read()) }"
        },
        {
          "lineno": 157,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlReset(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_reset(ppStmt.read()) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBusyTimeout",
      "type": "function",
      "start_line": 164,
      "end_line": 166,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 164,
          "line": "public func sqlBusyTimeout(ppDb: CPointer<CPointer<Unit>>, ms: Int32): Int32 {"
        },
        {
          "lineno": 165,
          "line": "    return unsafe { sqlite3_busy_timeout(ppDb.read(), ms) }"
        },
        {
          "lineno": 166,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBusyTimeout(ppDb: CPointer<CPointer<Unit>>, ms: Int32): Int32 {\n    return unsafe { sqlite3_busy_timeout(ppDb.read(), ms) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlChanges",
      "type": "function",
      "start_line": 173,
      "end_line": 175,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 173,
          "line": "public func sqlChanges(ppDb: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 174,
          "line": "    return unsafe { sqlite3_changes(ppDb.read()) }"
        },
        {
          "lineno": 175,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlChanges(ppDb: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_changes(ppDb.read()) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlLastInsertRowid",
      "type": "function",
      "start_line": 182,
      "end_line": 184,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 182,
          "line": "public func sqlLastInsertRowid(ppDb: CPointer<CPointer<Unit>>): Int64 {"
        },
        {
          "lineno": 183,
          "line": "    return unsafe { sqlite3_last_insert_rowid(ppDb.read()) }"
        },
        {
          "lineno": 184,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlLastInsertRowid(ppDb: CPointer<CPointer<Unit>>): Int64 {",
          "successors": [
            {
              "id": 2,
              "label": "    return unsafe { sqlite3_last_insert_rowid(ppDb.read()) }",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlSoftHeapLimit",
      "type": "function",
      "start_line": 191,
      "end_line": 193,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 191,
          "line": "public func sqlSoftHeapLimit(n: Int32): Unit {"
        },
        {
          "lineno": 192,
          "line": "    unsafe { sqlite3_soft_heap_limit(n) }"
        },
        {
          "lineno": 193,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlSoftHeapLimit(n: Int32): Unit {\n    unsafe { sqlite3_soft_heap_limit(n) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindParameterCount",
      "type": "function",
      "start_line": 200,
      "end_line": 202,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 200,
          "line": "public func sqlBindParameterCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 201,
          "line": "    return unsafe { sqlite3_bind_parameter_count(ppStmt.read()) }"
        },
        {
          "lineno": 202,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindParameterCount(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_bind_parameter_count(ppStmt.read()) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindNull",
      "type": "function",
      "start_line": 209,
      "end_line": 211,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 209,
          "line": "public func sqlBindNull(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {"
        },
        {
          "lineno": 210,
          "line": "    return unsafe { sqlite3_bind_null(ppStmt.read(), i) }"
        },
        {
          "lineno": 211,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindNull(ppStmt: CPointer<CPointer<Unit>>, i: Int32): Int32 {\n    return unsafe { sqlite3_bind_null(ppStmt.read(), i) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindInt",
      "type": "function",
      "start_line": 218,
      "end_line": 220,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 218,
          "line": "public func sqlBindInt(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int32): Int32 {"
        },
        {
          "lineno": 219,
          "line": "    return unsafe { sqlite3_bind_int(ppStmt.read(), i, iValue) }"
        },
        {
          "lineno": 220,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindInt(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int32): Int32 {\n    return unsafe { sqlite3_bind_int(ppStmt.read(), i, iValue) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindInt64",
      "type": "function",
      "start_line": 227,
      "end_line": 229,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 227,
          "line": "public func sqlBindInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int64): Int32 {"
        },
        {
          "lineno": 228,
          "line": "    return unsafe { sqlite3_bind_int64(ppStmt.read(), i, iValue) }"
        },
        {
          "lineno": 229,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindInt64(ppStmt: CPointer<CPointer<Unit>>, i: Int32, iValue: Int64): Int32 {\n    return unsafe { sqlite3_bind_int64(ppStmt.read(), i, iValue) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlBindDouble",
      "type": "function",
      "start_line": 236,
      "end_line": 238,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 236,
          "line": "public func sqlBindDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32, rValue: Float64): Int32 {"
        },
        {
          "lineno": 237,
          "line": "    return unsafe { sqlite3_bind_double(ppStmt.read(), i, rValue) }"
        },
        {
          "lineno": 238,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindDouble(ppStmt: CPointer<CPointer<Unit>>, i: Int32, rValue: Float64): Int32 {\n    return unsafe { sqlite3_bind_double(ppStmt.read(), i, rValue) }",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlBindText",
      "type": "function",
      "start_line": 246,
      "end_line": 255,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 246,
          "line": "public func sqlBindText(ppStmt: CPointer<CPointer<Unit>>, i: Int32, data: String) {"
        },
        {
          "lineno": 247,
          "line": "    let ret: Int32"
        },
        {
          "lineno": 248,
          "line": "    unsafe {"
        },
        {
          "lineno": 249,
          "line": "        let zData = LibC.mallocCString(data)"
        },
        {
          "lineno": 250,
          "line": "        let nullptr = CPointer<Unit>()"
        },
        {
          "lineno": 251,
          "line": "        ret = sqlite3_bind_text(ppStmt.read(), i, zData, Int32(data.size), nullptr)"
        },
        {
          "lineno": 252,
          "line": "        LibC.free(zData)"
        },
        {
          "lineno": 253,
          "line": "    }"
        },
        {
          "lineno": 254,
          "line": "    return ret"
        },
        {
          "lineno": 255,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlBindText(ppStmt: CPointer<CPointer<Unit>>, i: Int32, data: String) {\n    let ret: Int32\n    unsafe {\n        let zData = LibC.mallocCString(data)\n        let nullptr = CPointer<Unit>()\n        ret = sqlite3_bind_text(ppStmt.read(), i, zData, Int32(data.size), nullptr)\n        LibC.free(zData)\n    }\nreturn ret",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlClearBindings",
      "type": "function",
      "start_line": 262,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 262,
          "line": "public func sqlClearBindings(ppStmt: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 263,
          "line": "    return unsafe { sqlite3_clear_bindings(ppStmt.read()) }"
        },
        {
          "lineno": 264,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlClearBindings(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    return unsafe { sqlite3_clear_bindings(ppStmt.read()) }\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlExec",
      "type": "function",
      "start_line": 272,
      "end_line": 286,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 272,
          "line": "public func sqlExec(ppDb: CPointer<CPointer<Unit>>, sql: String) {"
        },
        {
          "lineno": 273,
          "line": "    unsafe {"
        },
        {
          "lineno": 274,
          "line": "        let zSql = LibC.mallocCString(sql)"
        },
        {
          "lineno": 275,
          "line": "        let nullptr = CPointer<Unit>()"
        },
        {
          "lineno": 276,
          "line": "        let ptr = malloc(POINTER_SIZE)"
        },
        {
          "lineno": 277,
          "line": "        let pzErrMsg = CPointer<CString>(ptr)"
        },
        {
          "lineno": 278,
          "line": "        let ret = sqlite3_exec(ppDb.read(), zSql, nullptr, nullptr, pzErrMsg)"
        },
        {
          "lineno": 279,
          "line": "        let errMsg = pzErrMsg.read().toString()"
        },
        {
          "lineno": 280,
          "line": "        free(ptr)"
        },
        {
          "lineno": 281,
          "line": "        LibC.free(zSql)"
        },
        {
          "lineno": 282,
          "line": "        if (ret != 0) {"
        },
        {
          "lineno": 283,
          "line": "            throw SqlException(errMsg)"
        },
        {
          "lineno": 284,
          "line": "        }"
        },
        {
          "lineno": 285,
          "line": "    }"
        },
        {
          "lineno": 286,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlExec(ppDb: CPointer<CPointer<Unit>>, sql: String) {\n    unsafe {\n        let zSql = LibC.mallocCString(sql)\n        let nullptr = CPointer<Unit>()\n        let ptr = malloc(POINTER_SIZE)\n        let pzErrMsg = CPointer<CString>(ptr)\n        let ret = sqlite3_exec(ppDb.read(), zSql, nullptr, nullptr, pzErrMsg)\n        let errMsg = pzErrMsg.read().toString()\n        free(ptr)\n        LibC.free(zSql)\n        if (ret != 0) {\nthrow SqlException(errMsg)\n        }",
          "successors": []
        }
      ]
    },
    {
      "name": "sqlClose",
      "type": "function",
      "start_line": 293,
      "end_line": 300,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 293,
          "line": "public func sqlClose(ppDb: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 294,
          "line": "    let ret: Int32"
        },
        {
          "lineno": 295,
          "line": "    unsafe {"
        },
        {
          "lineno": 296,
          "line": "        ret = sqlite3_close(ppDb.read())"
        },
        {
          "lineno": 297,
          "line": "        free(CPointer<Unit>(ppDb))"
        },
        {
          "lineno": 298,
          "line": "    }"
        },
        {
          "lineno": 299,
          "line": "    return ret"
        },
        {
          "lineno": 300,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlClose(ppDb: CPointer<CPointer<Unit>>): Int32 {\n    let ret: Int32\nunsafe {\n        ret = sqlite3_close(ppDb.read())\n        free(CPointer<Unit>(ppDb))\n    }",
          "successors": [
            {
              "id": 3,
              "label": "return ret",
              "successors": []
            },
            {
              "id": 4,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sqlFinalize",
      "type": "function",
      "start_line": 307,
      "end_line": 314,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 307,
          "line": "public func sqlFinalize(ppStmt: CPointer<CPointer<Unit>>): Int32 {"
        },
        {
          "lineno": 308,
          "line": "    let ret: Int32"
        },
        {
          "lineno": 309,
          "line": "    unsafe {"
        },
        {
          "lineno": 310,
          "line": "        ret = sqlite3_finalize(ppStmt.read())"
        },
        {
          "lineno": 311,
          "line": "        free(CPointer<Unit>(ppStmt))"
        },
        {
          "lineno": 312,
          "line": "    }"
        },
        {
          "lineno": 313,
          "line": "    return ret"
        },
        {
          "lineno": 314,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func sqlFinalize(ppStmt: CPointer<CPointer<Unit>>): Int32 {\n    let ret: Int32\n    unsafe {\n        ret = sqlite3_finalize(ppStmt.read())\n        free(CPointer<Unit>(ppStmt))\n    }\n    return ret",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package opds_cj.sqlite"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.database.sql.SqlException"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "/* sqlite3_step() 还未完成执行 */"
    },
    {
      "lineno": 6,
      "line": "public let SQLITE_ROW: Int32 = 100"
    },
    {
      "lineno": 7,
      "line": "/* sqlite3_step() 已执行完成 */"
    },
    {
      "lineno": 8,
      "line": "public let SQLITE_DONE: Int32 = 101"
    },
    {
      "lineno": 9,
      "line": "/* 指针类型占内存字节数 */"
    },
    {
      "lineno": 10,
      "line": "let POINTER_SIZE: UIntNative = 8"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "foreign func malloc(size: UIntNative): CPointer<Unit>"
    },
    {
      "lineno": 13,
      "line": "foreign func free(p: CPointer<Unit>): Unit"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "/* "
    },
    {
      "lineno": 16,
      "line": " * Description: 打开数据库db文件"
    },
    {
      "lineno": 17,
      "line": " */"
    },
    {
      "lineno": 18,
      "line": "foreign func sqlite3_open(path: CString, ppDb: CPointer<CPointer<Unit>>): Int32"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": "/* "
    },
    {
      "lineno": 36,
      "line": " * Description: 预处理sql语句"
    },
    {
      "lineno": 37,
      "line": " */"
    },
    {
      "lineno": 38,
      "line": "foreign func sqlite3_prepare_v2(pDb: CPointer<Unit>, zSql: CString, nBytes: Int32, "
    },
    {
      "lineno": 39,
      "line": "                                ppStmt: CPointer<CPointer<Unit>>, pzTail: CPointer<Unit>): Int32"
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 56,
      "line": ""
    },
    {
      "lineno": 57,
      "line": "/* "
    },
    {
      "lineno": 58,
      "line": " * Description: 执行sql语句"
    },
    {
      "lineno": 59,
      "line": " */"
    },
    {
      "lineno": 60,
      "line": "foreign func sqlite3_step(pStmt: CPointer<Unit>): Int32"
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 65,
      "line": ""
    },
    {
      "lineno": 66,
      "line": "/* "
    },
    {
      "lineno": 67,
      "line": " * Description: 获取sql结果指定列的数据类型"
    },
    {
      "lineno": 68,
      "line": " */"
    },
    {
      "lineno": 69,
      "line": "foreign func sqlite3_column_type(pStmt: CPointer<Unit>, i: Int32): Int32"
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 75,
      "line": "/* "
    },
    {
      "lineno": 76,
      "line": " * Description: 获取sql结果指定文本类型列的值"
    },
    {
      "lineno": 77,
      "line": " */"
    },
    {
      "lineno": 78,
      "line": "foreign func sqlite3_column_text(pStmt: CPointer<Unit>, i: Int32): CString "
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 84,
      "line": ""
    },
    {
      "lineno": 85,
      "line": "/* "
    },
    {
      "lineno": 86,
      "line": " * Description: 获取sql结果指定列值的字节数"
    },
    {
      "lineno": 87,
      "line": " */"
    },
    {
      "lineno": 88,
      "line": "foreign func sqlite3_column_bytes(pStmt: CPointer<Unit>, i: Int32): Int32"
    },
    {
      "lineno": 89,
      "line": ""
    },
    {
      "lineno": 93,
      "line": ""
    },
    {
      "lineno": 94,
      "line": "/* "
    },
    {
      "lineno": 95,
      "line": " * Description: 获取sql结果指定Int64类型列的值"
    },
    {
      "lineno": 96,
      "line": " */"
    },
    {
      "lineno": 97,
      "line": "foreign func sqlite3_column_int64(pStmt: CPointer<Unit>, i: Int32): Int64"
    },
    {
      "lineno": 98,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    },
    {
      "lineno": 103,
      "line": "/* "
    },
    {
      "lineno": 104,
      "line": " * Description: 获取sql结果指定Float64类型列的值"
    },
    {
      "lineno": 105,
      "line": " */"
    },
    {
      "lineno": 106,
      "line": "foreign func sqlite3_column_double(pStmt: CPointer<Unit>, i: Int32): Float64"
    },
    {
      "lineno": 107,
      "line": ""
    },
    {
      "lineno": 111,
      "line": ""
    },
    {
      "lineno": 112,
      "line": "/* "
    },
    {
      "lineno": 113,
      "line": " * Description: 获取sql结果blob类型列的值"
    },
    {
      "lineno": 114,
      "line": " */"
    },
    {
      "lineno": 115,
      "line": "foreign func sqlite3_column_blob(pStmt: CPointer<Unit>, i: Int32): CPointer<Byte>"
    },
    {
      "lineno": 116,
      "line": ""
    },
    {
      "lineno": 120,
      "line": ""
    },
    {
      "lineno": 121,
      "line": "/* "
    },
    {
      "lineno": 122,
      "line": " * Description: 获取sql结果列数"
    },
    {
      "lineno": 123,
      "line": " */"
    },
    {
      "lineno": 124,
      "line": "foreign func sqlite3_column_count(pStmt: CPointer<Unit>): Int32 "
    },
    {
      "lineno": 125,
      "line": ""
    },
    {
      "lineno": 129,
      "line": ""
    },
    {
      "lineno": 130,
      "line": "/* "
    },
    {
      "lineno": 131,
      "line": " * Description: 获取sql结果指定列名"
    },
    {
      "lineno": 132,
      "line": " */"
    },
    {
      "lineno": 133,
      "line": "foreign func sqlite3_column_name(pStmt: CPointer<Unit>, n: Int32): CString"
    },
    {
      "lineno": 134,
      "line": ""
    },
    {
      "lineno": 139,
      "line": ""
    },
    {
      "lineno": 140,
      "line": "/* "
    },
    {
      "lineno": 141,
      "line": " * Description: 获取sql结果指定列声明的数据类型"
    },
    {
      "lineno": 142,
      "line": " */"
    },
    {
      "lineno": 143,
      "line": "foreign func sqlite3_column_decltype(pStmt: CPointer<Unit>, i: Int32): CString"
    },
    {
      "lineno": 144,
      "line": ""
    },
    {
      "lineno": 149,
      "line": ""
    },
    {
      "lineno": 150,
      "line": "/* "
    },
    {
      "lineno": 151,
      "line": " * Description: 重置sql语句"
    },
    {
      "lineno": 152,
      "line": " */"
    },
    {
      "lineno": 153,
      "line": "foreign func sqlite3_reset(pStmt: CPointer<Unit>): Int32"
    },
    {
      "lineno": 154,
      "line": ""
    },
    {
      "lineno": 158,
      "line": ""
    },
    {
      "lineno": 159,
      "line": "/* "
    },
    {
      "lineno": 160,
      "line": " * Description: 设置超时毫秒数"
    },
    {
      "lineno": 161,
      "line": " */"
    },
    {
      "lineno": 162,
      "line": "foreign func sqlite3_busy_timeout(pDb: CPointer<Unit>, ms: Int32): Int32 "
    },
    {
      "lineno": 163,
      "line": ""
    },
    {
      "lineno": 167,
      "line": ""
    },
    {
      "lineno": 168,
      "line": "/* "
    },
    {
      "lineno": 169,
      "line": " * Description: 获取最近执行的sql语句的修改数量"
    },
    {
      "lineno": 170,
      "line": " */"
    },
    {
      "lineno": 171,
      "line": "foreign func sqlite3_changes(pDb: CPointer<Unit>): Int32"
    },
    {
      "lineno": 172,
      "line": ""
    },
    {
      "lineno": 176,
      "line": ""
    },
    {
      "lineno": 177,
      "line": "/* "
    },
    {
      "lineno": 178,
      "line": " * Description: 获取最近插入行的ID"
    },
    {
      "lineno": 179,
      "line": " */"
    },
    {
      "lineno": 180,
      "line": "foreign func sqlite3_last_insert_rowid(pDb: CPointer<Unit>): Int64"
    },
    {
      "lineno": 181,
      "line": ""
    },
    {
      "lineno": 185,
      "line": ""
    },
    {
      "lineno": 186,
      "line": "/* "
    },
    {
      "lineno": 187,
      "line": " * Description: 设置堆内存上限"
    },
    {
      "lineno": 188,
      "line": " */"
    },
    {
      "lineno": 189,
      "line": "foreign func sqlite3_soft_heap_limit(n: Int32): Unit"
    },
    {
      "lineno": 190,
      "line": ""
    },
    {
      "lineno": 194,
      "line": ""
    },
    {
      "lineno": 195,
      "line": "/* "
    },
    {
      "lineno": 196,
      "line": " * Description: 获取sql语句绑定参数数量"
    },
    {
      "lineno": 197,
      "line": " */"
    },
    {
      "lineno": 198,
      "line": "foreign func sqlite3_bind_parameter_count(pStmt: CPointer<Unit>): Int32"
    },
    {
      "lineno": 199,
      "line": ""
    },
    {
      "lineno": 203,
      "line": ""
    },
    {
      "lineno": 204,
      "line": "/* "
    },
    {
      "lineno": 205,
      "line": " * Description: 绑定空值到sql语句指定参数"
    },
    {
      "lineno": 206,
      "line": " */"
    },
    {
      "lineno": 207,
      "line": "foreign func sqlite3_bind_null(pStmt: CPointer<Unit>, i: Int32): Int32"
    },
    {
      "lineno": 208,
      "line": ""
    },
    {
      "lineno": 212,
      "line": ""
    },
    {
      "lineno": 213,
      "line": "/* "
    },
    {
      "lineno": 214,
      "line": " * Description: 绑定Int32值到sql语句指定参数"
    },
    {
      "lineno": 215,
      "line": " */"
    },
    {
      "lineno": 216,
      "line": "foreign func sqlite3_bind_int(pStmt: CPointer<Unit>, i: Int32, iValue: Int32): Int32"
    },
    {
      "lineno": 217,
      "line": ""
    },
    {
      "lineno": 221,
      "line": ""
    },
    {
      "lineno": 222,
      "line": "/* "
    },
    {
      "lineno": 223,
      "line": " * Description: 绑定Int64值到sql语句指定参数"
    },
    {
      "lineno": 224,
      "line": " */"
    },
    {
      "lineno": 225,
      "line": "foreign func sqlite3_bind_int64(pStmt: CPointer<Unit>, i: Int32, iValue: Int64): Int32"
    },
    {
      "lineno": 226,
      "line": ""
    },
    {
      "lineno": 230,
      "line": ""
    },
    {
      "lineno": 231,
      "line": "/* "
    },
    {
      "lineno": 232,
      "line": " * Description: 绑定Float64值到sql语句指定参数"
    },
    {
      "lineno": 233,
      "line": " */"
    },
    {
      "lineno": 234,
      "line": "foreign func sqlite3_bind_double(pStmt: CPointer<Unit>, i: Int32, rValue: Float64): Int32"
    },
    {
      "lineno": 235,
      "line": ""
    },
    {
      "lineno": 239,
      "line": ""
    },
    {
      "lineno": 240,
      "line": "/* "
    },
    {
      "lineno": 241,
      "line": " * Description: 绑定文本值到sql语句指定参数"
    },
    {
      "lineno": 242,
      "line": " */"
    },
    {
      "lineno": 243,
      "line": "foreign func sqlite3_bind_text(pStmt: CPointer<Unit>, i: Int32, zData: CString, "
    },
    {
      "lineno": 244,
      "line": "    nData: Int32, xDel: CPointer<Unit>): Int32"
    },
    {
      "lineno": 245,
      "line": ""
    },
    {
      "lineno": 256,
      "line": ""
    },
    {
      "lineno": 257,
      "line": "/* "
    },
    {
      "lineno": 258,
      "line": " * Description: 解除sql语句绑定参数"
    },
    {
      "lineno": 259,
      "line": " */"
    },
    {
      "lineno": 260,
      "line": "foreign func sqlite3_clear_bindings(pStmt: CPointer<Unit>): Int32"
    },
    {
      "lineno": 261,
      "line": ""
    },
    {
      "lineno": 265,
      "line": ""
    },
    {
      "lineno": 266,
      "line": "/* "
    },
    {
      "lineno": 267,
      "line": " * Description: 指定数据库执行sql命令"
    },
    {
      "lineno": 268,
      "line": " */"
    },
    {
      "lineno": 269,
      "line": "foreign func sqlite3_exec(pDb: CPointer<Unit>, zSql: CString, "
    },
    {
      "lineno": 270,
      "line": "    xCallback: CPointer<Unit>, pArg: CPointer<Unit>, pzErrMsg: CPointer<CString>): Int32"
    },
    {
      "lineno": 271,
      "line": ""
    },
    {
      "lineno": 287,
      "line": ""
    },
    {
      "lineno": 288,
      "line": "/* "
    },
    {
      "lineno": 289,
      "line": " * Description: 关闭数据库连接"
    },
    {
      "lineno": 290,
      "line": " */"
    },
    {
      "lineno": 291,
      "line": "foreign func sqlite3_close(pDb: CPointer<Unit>): Int32"
    },
    {
      "lineno": 292,
      "line": ""
    },
    {
      "lineno": 301,
      "line": ""
    },
    {
      "lineno": 302,
      "line": "/* "
    },
    {
      "lineno": 303,
      "line": " * Description: 销毁sql语句对象，释放内存"
    },
    {
      "lineno": 304,
      "line": " */"
    },
    {
      "lineno": 305,
      "line": "foreign func sqlite3_finalize(pStmt: CPointer<Unit>): Int32"
    },
    {
      "lineno": 306,
      "line": ""
    },
    {
      "lineno": 315,
      "line": ""
    }
  ],
  "blocks": []
}