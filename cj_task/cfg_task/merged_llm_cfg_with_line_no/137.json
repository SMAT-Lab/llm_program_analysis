{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 117,
  "functions": [],
  "classes": [
    {
      "name": "RawIO",
      "type": "class",
      "start_line": 2,
      "end_line": 117,
      "functions": [
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 6,
          "end_line": 9,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 6,
              "line": "    public func readLongLittleEndian(randomAccessFile: RandomAccessFile): Int64 {"
            },
            {
              "lineno": 7,
              "line": "        randomAccessFile.readFully(longBuff)"
            },
            {
              "lineno": 8,
              "line": "        return readLongLittleEndian(longBuff, 0)"
            },
            {
              "lineno": 9,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readLongLittleEndian(randomAccessFile: RandomAccessFile): Int64 {\n        randomAccessFile.readFully(longBuff)\n        return readLongLittleEndian(longBuff, 0)",
              "successors": []
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 10,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 10,
              "line": "    public func readLongLittleEndian(randomAccessFile: RandomAccessFile, readLen: Int64): Int64 {"
            },
            {
              "lineno": 11,
              "line": "        resetBytes(longBuff)"
            },
            {
              "lineno": 12,
              "line": "        randomAccessFile.readFully(longBuff[0..readLen])"
            },
            {
              "lineno": 13,
              "line": "        return readLongLittleEndian(longBuff, 0)"
            },
            {
              "lineno": 14,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readLongLittleEndian(randomAccessFile: RandomAccessFile, readLen: Int64): Int64 {\n        resetBytes(longBuff)\n        randomAccessFile.readFully(longBuff[0..readLen])\n        return readLongLittleEndian(longBuff, 0)",
              "successors": []
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 15,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 15,
              "line": "    public func readLongLittleEndian(inputStream: InputStream): Int64 {"
            },
            {
              "lineno": 16,
              "line": "        readFully(inputStream, longBuff, longBuff.size)"
            },
            {
              "lineno": 17,
              "line": "        return readLongLittleEndian(longBuff, 0)"
            },
            {
              "lineno": 18,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readLongLittleEndian(inputStream: InputStream): Int64 {\n        readFully(inputStream, longBuff, longBuff.size)\n        return readLongLittleEndian(longBuff, 0)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 19,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    public func readLongLittleEndian(inputStream: InputStream, readLen: Int64): Int64 {"
            },
            {
              "lineno": 20,
              "line": "        resetBytes(longBuff)"
            },
            {
              "lineno": 21,
              "line": "        readFully(inputStream, longBuff, readLen)"
            },
            {
              "lineno": 22,
              "line": "        return readLongLittleEndian(longBuff, 0)"
            },
            {
              "lineno": 23,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func readLongLittleEndian(inputStream: InputStream, readLen: Int64): Int64 {\n    resetBytes(longBuff)\n    readFully(inputStream, longBuff, readLen)\nreturn readLongLittleEndian(longBuff, 0)",
              "successors": []
            }
          ]
        },
        {
          "name": "readLongLittleEndian",
          "type": "function",
          "start_line": 24,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 24,
              "line": "    public func readLongLittleEndian(array: Array<Byte>, pos: Int64) {"
            },
            {
              "lineno": 25,
              "line": "        if (array.size - pos < 8) {"
            },
            {
              "lineno": 26,
              "line": "            resetBytes(longBuff)"
            },
            {
              "lineno": 27,
              "line": "        }"
            },
            {
              "lineno": 28,
              "line": "        ArrayCopy(array, pos, longBuff, 0, min(array.size - pos, 8))"
            },
            {
              "lineno": 29,
              "line": "        var temp = 0"
            },
            {
              "lineno": 30,
              "line": "        temp |= Int64(longBuff[7] & 0xff)"
            },
            {
              "lineno": 31,
              "line": "        temp <<= 8"
            },
            {
              "lineno": 32,
              "line": "        temp |= Int64(longBuff[6] & 0xff)"
            },
            {
              "lineno": 33,
              "line": "        temp <<= 8"
            },
            {
              "lineno": 34,
              "line": "        temp |= Int64(longBuff[5] & 0xff)"
            },
            {
              "lineno": 35,
              "line": "        temp <<= 8"
            },
            {
              "lineno": 36,
              "line": "        temp |= Int64(longBuff[4] & 0xff)"
            },
            {
              "lineno": 37,
              "line": "        temp <<= 8"
            },
            {
              "lineno": 38,
              "line": "        temp |= Int64(longBuff[3] & 0xff)"
            },
            {
              "lineno": 39,
              "line": "        temp <<= 8"
            },
            {
              "lineno": 40,
              "line": "        temp |= Int64(longBuff[2] & 0xff)"
            },
            {
              "lineno": 41,
              "line": "        temp <<= 8"
            },
            {
              "lineno": 42,
              "line": "        temp |= Int64(longBuff[1] & 0xff)"
            },
            {
              "lineno": 43,
              "line": "        temp <<= 8"
            },
            {
              "lineno": 44,
              "line": "        temp |= Int64(longBuff[0] & 0xff)"
            },
            {
              "lineno": 45,
              "line": "        return temp"
            },
            {
              "lineno": 46,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readLongLittleEndian(array: Array<Byte>, pos: Int64) {\n        if (array.size - pos < 8) {\n            resetBytes(longBuff)\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        ArrayCopy(array, pos, longBuff, 0, min(array.size - pos, 8))\n        var temp = 0\n        temp |= Int64(longBuff[7] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[6] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[5] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[4] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[3] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[2] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[1] & 0xff)\n        temp <<= 8\n        temp |= Int64(longBuff[0] & 0xff)\n        return temp",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 47,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    public func readIntLittleEndian(randomAccessFile: RandomAccessFile): Int32 {"
            },
            {
              "lineno": 48,
              "line": "        randomAccessFile.readFully(intBuff)"
            },
            {
              "lineno": 49,
              "line": "        return readIntLittleEndian(intBuff)"
            },
            {
              "lineno": 50,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readIntLittleEndian(randomAccessFile: RandomAccessFile): Int32 {\n        randomAccessFile.readFully(intBuff)\n        return readIntLittleEndian(intBuff)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 51,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 51,
              "line": "    public func readIntLittleEndian(inputStream: InputStream): Int32 {"
            },
            {
              "lineno": 52,
              "line": "        readFully(inputStream, intBuff, 4)"
            },
            {
              "lineno": 53,
              "line": "        return readIntLittleEndian(intBuff)"
            },
            {
              "lineno": 54,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readIntLittleEndian(inputStream: InputStream): Int32 {\n        readFully(inputStream, intBuff, 4)\n        return readIntLittleEndian(intBuff)",
              "successors": []
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 55,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    public func readIntLittleEndian(b: Array<Byte>): Int32 {"
            },
            {
              "lineno": 56,
              "line": "        return readIntLittleEndian(b, 0)"
            },
            {
              "lineno": 57,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readIntLittleEndian(b: Array<Byte>): Int32 {\n        return readIntLittleEndian(b, 0)",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readIntLittleEndian",
          "type": "function",
          "start_line": 58,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    public func readIntLittleEndian(b: Array<Byte>, pos: Int64): Int32 {"
            },
            {
              "lineno": 59,
              "line": "        return (Int32(b[pos] & 0xff) | Int32(b[1 + pos] & 0xff) << 8) |"
            },
            {
              "lineno": 60,
              "line": "            (Int32(b[2 + pos] & 0xff) | Int32(b[3 + pos] & 0xff) << 8) << 16"
            },
            {
              "lineno": 61,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func readIntLittleEndian(b: Array<Byte>, pos: Int64): Int32 {\n        return (Int32(b[pos] & 0xff) | Int32(b[1 + pos] & 0xff) << 8) |\n            (Int32(b[2 + pos] & 0xff) | Int32(b[3 + pos] & 0xff) << 8) << 16\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readShortLittleEndian",
          "type": "function",
          "start_line": 62,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    public func readShortLittleEndian(randomAccessFile: RandomAccessFile): Int32 {"
            },
            {
              "lineno": 63,
              "line": "        randomAccessFile.readFully(shortBuff)"
            },
            {
              "lineno": 64,
              "line": "        return readShortLittleEndian(shortBuff, 0)"
            },
            {
              "lineno": 65,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readShortLittleEndian(randomAccessFile: RandomAccessFile): Int32 {\n        randomAccessFile.readFully(shortBuff)\n        return readShortLittleEndian(shortBuff, 0)",
              "successors": []
            }
          ]
        },
        {
          "name": "readShortLittleEndian",
          "type": "function",
          "start_line": 66,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    public func readShortLittleEndian(inputStream: InputStream): Int32 {"
            },
            {
              "lineno": 67,
              "line": "        readFully(inputStream, shortBuff, shortBuff.size)"
            },
            {
              "lineno": 68,
              "line": "        return readShortLittleEndian(shortBuff, 0)"
            },
            {
              "lineno": 69,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readShortLittleEndian(inputStream: InputStream): Int32 {\n        readFully(inputStream, shortBuff, shortBuff.size)\n        return readShortLittleEndian(shortBuff, 0)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readShortLittleEndian",
          "type": "function",
          "start_line": 70,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 70,
              "line": "    public func readShortLittleEndian(buff: Array<Byte>, position: Int64): Int32 {"
            },
            {
              "lineno": 71,
              "line": "        return Int32(buff[position] & 0xff) | Int32(buff[1 + position] & 0xff) << 8"
            },
            {
              "lineno": 72,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func readShortLittleEndian(buff: Array<Byte>, position: Int64): Int32 {\n        return Int32(buff[position] & 0xff) | Int32(buff[1 + position] & 0xff) << 8\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "writeShortLittleEndian",
          "type": "function",
          "start_line": 73,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 73,
              "line": "    public func writeShortLittleEndian(outputStream: OutputStream, value: Int32): Unit {"
            },
            {
              "lineno": 74,
              "line": "        writeShortLittleEndian(shortBuff, 0, value)"
            },
            {
              "lineno": 75,
              "line": "        outputStream.write(shortBuff)"
            },
            {
              "lineno": 76,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func writeShortLittleEndian(outputStream: OutputStream, value: Int32): Unit {\n        writeShortLittleEndian(shortBuff, 0, value)\n        outputStream.write(shortBuff)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "writeShortLittleEndian",
          "type": "function",
          "start_line": 78,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 78,
              "line": "    public func writeShortLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {"
            },
            {
              "lineno": 79,
              "line": "        array[pos + 1] = UInt8(value[8])"
            },
            {
              "lineno": 80,
              "line": "        array[pos] = UInt8(value & 0xFF)"
            },
            {
              "lineno": 81,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func writeShortLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {\n        array[pos + 1] = UInt8(value[8])\n        array[pos] = UInt8(value & 0xFF)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "writeIntLittleEndian",
          "type": "function",
          "start_line": 82,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 82,
              "line": "    public func writeIntLittleEndian(outputStream: OutputStream, value: Int32): Unit {"
            },
            {
              "lineno": 83,
              "line": "        writeIntLittleEndian(intBuff, 0, value)"
            },
            {
              "lineno": 84,
              "line": "        outputStream.write(intBuff)"
            },
            {
              "lineno": 85,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func writeIntLittleEndian(outputStream: OutputStream, value: Int32): Unit {\n        writeIntLittleEndian(intBuff, 0, value)\n        outputStream.write(intBuff)",
              "successors": []
            }
          ]
        },
        {
          "name": "writeIntLittleEndian",
          "type": "function",
          "start_line": 87,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 87,
              "line": "    public func writeIntLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {"
            },
            {
              "lineno": 88,
              "line": "        array[pos + 3] = UInt8(value[24])"
            },
            {
              "lineno": 89,
              "line": "        array[pos + 2] = UInt8(value[16])"
            },
            {
              "lineno": 90,
              "line": "        array[pos + 1] = UInt8(value[8])"
            },
            {
              "lineno": 91,
              "line": "        array[pos] = UInt8(value & 0xFF)"
            },
            {
              "lineno": 92,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func writeIntLittleEndian(array: Array<Byte>, pos: Int64, value: Int32): Unit {\n        array[pos + 3] = UInt8(value[24])\n        array[pos + 2] = UInt8(value[16])\n        array[pos + 1] = UInt8(value[8])\n        array[pos] = UInt8(value & 0xFF)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "writeLongLittleEndian",
          "type": "function",
          "start_line": 93,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 93,
              "line": "    public func writeLongLittleEndian(outputStream: OutputStream, value: Int64): Unit {"
            },
            {
              "lineno": 94,
              "line": "        writeLongLittleEndian(longBuff, 0, value)"
            },
            {
              "lineno": 95,
              "line": "        outputStream.write(longBuff)"
            },
            {
              "lineno": 96,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func writeLongLittleEndian(outputStream: OutputStream, value: Int64): Unit {\n        writeLongLittleEndian(longBuff, 0, value)\n        outputStream.write(longBuff)",
              "successors": []
            }
          ]
        },
        {
          "name": "writeLongLittleEndian",
          "type": "function",
          "start_line": 98,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 98,
              "line": "    public func writeLongLittleEndian(array: Array<Byte>, pos: Int64, value: Int64): Unit {"
            },
            {
              "lineno": 99,
              "line": "        array[pos + 7] = UInt8(value[56])"
            },
            {
              "lineno": 100,
              "line": "        array[pos + 6] = UInt8(value[48])"
            },
            {
              "lineno": 101,
              "line": "        array[pos + 5] = UInt8(value[40])"
            },
            {
              "lineno": 102,
              "line": "        array[pos + 4] = UInt8(value[32])"
            },
            {
              "lineno": 103,
              "line": "        array[pos + 3] = UInt8(value[24])"
            },
            {
              "lineno": 104,
              "line": "        array[pos + 2] = UInt8(value[16])"
            },
            {
              "lineno": 105,
              "line": "        array[pos + 1] = UInt8(value[8])"
            },
            {
              "lineno": 106,
              "line": "        array[pos] = UInt8(value & 0xFF)"
            },
            {
              "lineno": 107,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func writeLongLittleEndian(array: Array<Byte>, pos: Int64, value: Int64): Unit {\n        array[pos + 7] = UInt8(value[56])\n        array[pos + 6] = UInt8(value[48])\n        array[pos + 5] = UInt8(value[40])\n        array[pos + 4] = UInt8(value[32])\n        array[pos + 3] = UInt8(value[24])\n        array[pos + 2] = UInt8(value[16])\n        array[pos + 1] = UInt8(value[8])\n        array[pos] = UInt8(value & 0xFF)",
              "successors": []
            }
          ]
        },
        {
          "name": "readFully",
          "type": "function",
          "start_line": 108,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 108,
              "line": "    private func readFully(inputStream: InputStream, buff: Array<Byte>, readLen: Int64): Unit {"
            },
            {
              "lineno": 109,
              "line": "        var actualReadLength = Zip4cjUtil.readFully(inputStream, buff, 0, readLen)"
            },
            {
              "lineno": 110,
              "line": "        if (actualReadLength != readLen) {"
            },
            {
              "lineno": 111,
              "line": "            throw ZipException(\"Could not fill buffer\")"
            },
            {
              "lineno": 112,
              "line": "        }"
            },
            {
              "lineno": 113,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "private func readFully(inputStream: InputStream, buff: Array<Byte>, readLen: Int64): Unit {\n    var actualReadLength = Zip4cjUtil.readFully(inputStream, buff, 0, readLen)\nif (actualReadLength != readLen) {\n    throw ZipException(\"Could not fill buffer\")\n}",
              "successors": [
                {
                  "id": 3,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "resetBytes",
          "type": "function",
          "start_line": 114,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 114,
              "line": "    private func resetBytes(b: Array<Byte>) {"
            },
            {
              "lineno": 115,
              "line": "        fill(b, 0)"
            },
            {
              "lineno": 116,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func resetBytes(b: Array<Byte>) {\n        fill(b, 0)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public class RawIO {"
        },
        {
          "lineno": 3,
          "line": "    public let shortBuff = Array<Byte>(2, repeat: 0)"
        },
        {
          "lineno": 4,
          "line": "    public let intBuff = Array<Byte>(4, repeat: 0)"
        },
        {
          "lineno": 5,
          "line": "    public let longBuff = Array<Byte>(8, repeat: 0)"
        },
        {
          "lineno": 77,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 86,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 97,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 117,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class RawIO {\n    public let shortBuff = Array<Byte>(2, repeat: 0)\n    public let intBuff = Array<Byte>(4, repeat: 0)\n    public let longBuff = Array<Byte>(8, repeat: 0)\n@OverflowWrapping",
          "successors": [
            {
              "id": 3,
              "label": "@OverflowWrapping\n@OverflowWrapping",
              "successors": [
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package zip4cj.util"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package zip4cj.util",
      "successors": []
    }
  ]
}