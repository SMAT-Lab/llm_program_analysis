{
  "name": "openai_chat_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 101,
  "functions": [
    {
      "name": "save_env_info",
      "type": "function",
      "start_line": 59,
      "end_line": 80,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 59,
          "line": "public func save_env_info(): Unit {"
        },
        {
          "lineno": 60,
          "line": "  // 该函数用于测试EnvInfo类的序列化为json的能力，顺便生成一个env_sample.json样本做为参考"
        },
        {
          "lineno": 61,
          "line": "  let env_path = Path(\"env_sample.json\");"
        },
        {
          "lineno": 62,
          "line": "  if (File.exists(env_path)) {"
        },
        {
          "lineno": 63,
          "line": "    File.delete(env_path);"
        },
        {
          "lineno": 64,
          "line": "  }"
        },
        {
          "lineno": 65,
          "line": "  let file = File.create(env_path);"
        },
        {
          "lineno": 66,
          "line": "  let env_info = EnvInfo("
        },
        {
          "lineno": 67,
          "line": "    \"xxxx\","
        },
        {
          "lineno": 68,
          "line": "    \"sk-xxxxxx\","
        },
        {
          "lineno": 69,
          "line": "    \"http://xxx.xxx.xxx/v1/chat/completions\","
        },
        {
          "lineno": 70,
          "line": "    \"You are a helpful assistant.\""
        },
        {
          "lineno": 71,
          "line": "  );"
        },
        {
          "lineno": 72,
          "line": "  var byte_stream = ByteArrayStream();"
        },
        {
          "lineno": 73,
          "line": "  var json_writer = JsonWriter(byte_stream);"
        },
        {
          "lineno": 74,
          "line": "  let write_config = WriteConfig.pretty;"
        },
        {
          "lineno": 75,
          "line": "  json_writer.writeConfig = write_config;"
        },
        {
          "lineno": 76,
          "line": "  env_info.toJson(json_writer);"
        },
        {
          "lineno": 77,
          "line": "  file.write(byte_stream.readToEnd());"
        },
        {
          "lineno": 78,
          "line": "  println(\"`env_sample.json` save ok\")"
        },
        {
          "lineno": 79,
          "line": "  file.close();"
        },
        {
          "lineno": 80,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func save_env_info(): Unit {\n  // 该函数用于测试EnvInfo类的序列化为json的能力，顺便生成一个env_sample.json样本作为参考\n  let env_path = Path(\"env_sample.json\");",
          "successors": [
            {
              "id": 2,
              "label": "if (File.exists(env_path)) {\n    File.delete(env_path);\n  let file = File.create(env_path);\n  let env_info = EnvInfo(\n    \"xxxx\",\n    \"sk-xxxxxx\",\n    \"http://xxx.xxx.xxx/v1/chat/completions\",\n    \"You are a helpful assistant.\"\n  );\n  var byte_stream = ByteArrayStream();\n  var json_writer = JsonWriter(byte_stream);\n  let write_config = WriteConfig.pretty;\n  json_writer.writeConfig = write_config;\n  env_info.toJson(json_writer);\n  file.write(byte_stream.readToEnd());\n  println(\"`env_sample.json` save ok\")\n  file.close();\n}",
              "successors": []
            },
            {
              "id": 4,
              "label": "let file = File.create(env_path);\n  let env_info = EnvInfo(\n    \"xxxx\",\n    \"sk-xxxxxx\",\n    \"http://xxx.xxx.xxx/v1/chat/completions\",\n    \"You are a helpful assistant.\"\n  );\n  var byte_stream = ByteArrayStream();\n  var json_writer = JsonWriter(byte_stream);\n  let write_config = WriteConfig.pretty;\n  json_writer.writeConfig = write_config;\n  env_info.toJson(json_writer);\n  file.write(byte_stream.readToEnd());\n  println(\"`env_sample.json` save ok\")\n  file.close();\n}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "load_env_info",
      "type": "function",
      "start_line": 83,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 83,
          "line": "public func load_env_info(): EnvInfo {"
        },
        {
          "lineno": 84,
          "line": "  // 用于加载配置文件"
        },
        {
          "lineno": 85,
          "line": "  let env_path = Path(\"env.json\");"
        },
        {
          "lineno": 86,
          "line": "  if (!File.exists(env_path)) {"
        },
        {
          "lineno": 87,
          "line": "    throw Exception(\"`.env` file not exists, please check again\");"
        },
        {
          "lineno": 88,
          "line": "  }"
        },
        {
          "lineno": 89,
          "line": "  let file = File.openRead(env_path);"
        },
        {
          "lineno": 90,
          "line": "  let file_str: Array<UInt8> = file.readToEnd();"
        },
        {
          "lineno": 91,
          "line": "  var byte_stream = ByteArrayStream();"
        },
        {
          "lineno": 92,
          "line": "  byte_stream.write(file_str);"
        },
        {
          "lineno": 93,
          "line": "  let json_reader = JsonReader(byte_stream);"
        },
        {
          "lineno": 94,
          "line": "  let env_info: EnvInfo = EnvInfo.fromJson(json_reader);"
        },
        {
          "lineno": 95,
          "line": "  file.close();"
        },
        {
          "lineno": 96,
          "line": "  // println(\"model: ${env_info.model}\");"
        },
        {
          "lineno": 97,
          "line": "  // println(\"api_key: ${env_info.api_key}\");"
        },
        {
          "lineno": 98,
          "line": "  // println(\"base_url: ${env_info.base_url}\");"
        },
        {
          "lineno": 99,
          "line": "  // println(\"system_prompt: ${env_info.system_prompt}\");"
        },
        {
          "lineno": 100,
          "line": "  return env_info;"
        },
        {
          "lineno": 101,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func load_env_info(): EnvInfo {\n  // 用于加载配置文件\n  let env_path = Path(\"env.json\");\nif (!File.exists(env_path)) {\n    throw Exception(\"`.env` file not exists, please check again\");\n  }",
          "successors": [
            {
              "id": 3,
              "label": "let file = File.openRead(env_path);\n  let file_str: Array<UInt8> = file.readToEnd();\n  var byte_stream = ByteArrayStream();\n  byte_stream.write(file_str);\n  let json_reader = JsonReader(byte_stream);\n  let env_info: EnvInfo = EnvInfo.fromJson(json_reader);\n  file.close();\n  // println(\"model: ${env_info.model}\");\n  // println(\"api_key: ${env_info.api_key}\");\n  // println(\"base_url: ${env_info.base_url}\");\n  // println(\"system_prompt: ${env_info.system_prompt}\");\n  return env_info;",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "EnvInfo",
      "type": "class",
      "start_line": 7,
      "end_line": 56,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 13,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "  public init(model: String, api_key: String, base_url: String, system_prompt: String) {"
            },
            {
              "lineno": 14,
              "line": "    this.model = model;"
            },
            {
              "lineno": 15,
              "line": "    this.api_key = api_key;"
            },
            {
              "lineno": 16,
              "line": "    this.base_url = base_url;"
            },
            {
              "lineno": 17,
              "line": "    this.system_prompt = system_prompt"
            },
            {
              "lineno": 18,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(model: String, api_key: String, base_url: String, system_prompt: String) {\n    this.model = model;\n    this.api_key = api_key;\n    this.base_url = base_url;\n    this.system_prompt = system_prompt\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 20,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "  public static func fromJson(r: JsonReader): EnvInfo {"
            },
            {
              "lineno": 21,
              "line": "    var temp_model: String = \"\";"
            },
            {
              "lineno": 22,
              "line": "    var temp_api_key: String = \"sk-xxx\";"
            },
            {
              "lineno": 23,
              "line": "    var temp_base_url: String = \"http://xxx.xxx.xxx/v1\";"
            },
            {
              "lineno": 24,
              "line": "    var temp_system_prompt: String = \"You are a helpful assistant.\";"
            },
            {
              "lineno": 25,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 26,
              "line": "      match(v) {"
            },
            {
              "lineno": 27,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 28,
              "line": "          r.startObject()"
            },
            {
              "lineno": 29,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 30,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 31,
              "line": "            match (n) {"
            },
            {
              "lineno": 32,
              "line": "                case \"model\" => temp_model = r.readValue<String>()"
            },
            {
              "lineno": 33,
              "line": "                case \"api_key\" => temp_api_key = r.readValue<String>()"
            },
            {
              "lineno": 34,
              "line": "                case \"base_url\" => temp_base_url = r.readValue<String>()"
            },
            {
              "lineno": 35,
              "line": "                case \"system_prompt\" => temp_system_prompt = r.readValue<String>()"
            },
            {
              "lineno": 36,
              "line": "                case _ => ()"
            },
            {
              "lineno": 37,
              "line": "            }"
            },
            {
              "lineno": 38,
              "line": "          }"
            },
            {
              "lineno": 39,
              "line": "          r.endObject()"
            },
            {
              "lineno": 40,
              "line": "          break"
            },
            {
              "lineno": 41,
              "line": "        case _ => throw Exception()"
            },
            {
              "lineno": 42,
              "line": "      }"
            },
            {
              "lineno": 43,
              "line": "    }"
            },
            {
              "lineno": 44,
              "line": "    return EnvInfo(temp_model, temp_api_key, temp_base_url, temp_system_prompt);"
            },
            {
              "lineno": 45,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): EnvInfo {\n    var temp_model: String = \"\";\n    var temp_api_key: String = \"sk-xxx\";\n    var temp_base_url: String = \"http://xxx.xxx.xxx/v1\";\n    var temp_system_prompt: String = \"You are a helpful assistant.\";",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "      match(v) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        case BeginObject =>\n          r.startObject()\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n                case \"model\" => temp_model = r.readValue<String>()\n                case \"api_key\" => temp_api_key = r.readValue<String>()\n                case \"base_url\" => temp_base_url = r.readValue<String>()\n                case \"system_prompt\" => temp_system_prompt = r.readValue<String>()\n                case _ => ()\n            }\n          }\n          r.endObject()\n          break",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "label": "        case _ => throw Exception()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "    return EnvInfo(temp_model, temp_api_key, temp_base_url, temp_system_prompt);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 47,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "  public func toJson(w: JsonWriter): Unit {"
            },
            {
              "lineno": 48,
              "line": "      w.startObject();"
            },
            {
              "lineno": 49,
              "line": "      w.writeName(\"model\").writeValue(this.model);"
            },
            {
              "lineno": 50,
              "line": "      w.writeName(\"api_key\").writeValue(this.api_key);"
            },
            {
              "lineno": 51,
              "line": "      w.writeName(\"base_url\").writeValue(this.base_url);"
            },
            {
              "lineno": 52,
              "line": "      w.writeName(\"system_prompt\").writeValue(this.system_prompt);"
            },
            {
              "lineno": 53,
              "line": "      w.endObject();"
            },
            {
              "lineno": 54,
              "line": "      w.flush();"
            },
            {
              "lineno": 55,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public func toJson(w: JsonWriter): Unit {\n      w.startObject();\n      w.writeName(\"model\").writeValue(this.model);\n      w.writeName(\"api_key\").writeValue(this.api_key);\n      w.writeName(\"base_url\").writeValue(this.base_url);\n      w.writeName(\"system_prompt\").writeValue(this.system_prompt);\n      w.endObject();\n      w.flush();\n  }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "public class EnvInfo <: JsonDeserializable<EnvInfo> & JsonSerializable {"
        },
        {
          "lineno": 8,
          "line": "  public let model: String;          // 模型名称"
        },
        {
          "lineno": 9,
          "line": "  public let api_key: String;        // api密钥"
        },
        {
          "lineno": 10,
          "line": "  public let base_url: String;       // 调用接口路径"
        },
        {
          "lineno": 11,
          "line": "  public let system_prompt: String;  // 预置系统提示词"
        },
        {
          "lineno": 12,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "  "
        },
        {
          "lineno": 46,
          "line": "  "
        },
        {
          "lineno": 56,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class EnvInfo <: JsonDeserializable<EnvInfo> & JsonSerializable {\n  public let model: String;          // 模型名称\n  public let api_key: String;        // api密钥\n  public let base_url: String;       // 调用接口路径\n  public let system_prompt: String;  // 预置系统提示词\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package openai_chat"
    },
    {
      "lineno": 2,
      "line": "import encoding.json.stream.*"
    },
    {
      "lineno": 3,
      "line": "import std.fs.File"
    },
    {
      "lineno": 4,
      "line": "import std.fs.Path"
    },
    {
      "lineno": 5,
      "line": "import std.io.ByteArrayStream"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 57,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 81,
      "line": ""
    },
    {
      "lineno": 82,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package openai_chat\nimport encoding.json.stream.*\nimport std.fs.File\nimport std.fs.Path\nimport std.io.ByteArrayStream",
      "successors": []
    }
  ]
}