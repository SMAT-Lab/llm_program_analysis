{
  "name": "cj_debounce_throttle_macros",
  "type": "CFG",
  "start_line": 1,
  "end_line": 135,
  "functions": [
    {
      "name": "mustBeFunc",
      "type": "function",
      "start_line": 17,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "func mustBeFunc("
        },
        {
          "lineno": 18,
          "line": "    input: Tokens,"
        },
        {
          "lineno": 19,
          "line": "    action: (FuncDecl) -> Tokens"
        },
        {
          "lineno": 20,
          "line": "): Tokens {"
        },
        {
          "lineno": 21,
          "line": "    let decl = parseDecl(input)"
        },
        {
          "lineno": 22,
          "line": "    if (let Some(funcDecl) <- (decl as FuncDecl)) {"
        },
        {
          "lineno": 23,
          "line": "        action(funcDecl)"
        },
        {
          "lineno": 24,
          "line": "    } else {"
        },
        {
          "lineno": 25,
          "line": "        diagReport("
        },
        {
          "lineno": 26,
          "line": "            DiagReportLevel.ERROR,"
        },
        {
          "lineno": 27,
          "line": "            input,"
        },
        {
          "lineno": 28,
          "line": "            '不是函数类型',"
        },
        {
          "lineno": 29,
          "line": "            '只支持函数类型'"
        },
        {
          "lineno": 30,
          "line": "        )"
        },
        {
          "lineno": 31,
          "line": "        input"
        },
        {
          "lineno": 32,
          "line": "    }"
        },
        {
          "lineno": 33,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func mustBeFunc(\n    input: Tokens,\n    action: (FuncDecl) -> Tokens\n): Tokens {\n    let decl = parseDecl(input)",
          "successors": [
            {
              "id": 2,
              "label": "if (let Some(funcDecl) <- (decl as FuncDecl)) {\n    action(funcDecl)\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "}",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "} else {\n    diagReport(\n        DiagReportLevel.ERROR,\n        input,\n        '\n不是函数类型',\n        '\n只支持函数类型'\n    )\n    input\n}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "parseAttrToConfig",
      "type": "function",
      "start_line": 38,
      "end_line": 106,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 38,
          "line": "func parseAttrToConfig(attrs: Tokens): Tokens {"
        },
        {
          "lineno": 39,
          "line": "    var interval = 0"
        },
        {
          "lineno": 40,
          "line": "    var leading = false"
        },
        {
          "lineno": 41,
          "line": "    var trailing = false"
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "    var index: Int64 = 0"
        },
        {
          "lineno": 44,
          "line": "    while (true) {"
        },
        {
          "lineno": 45,
          "line": "        let (litExpr, nextIndex) = parseExprFragment(attrs, startFrom: index)"
        },
        {
          "lineno": 46,
          "line": "        match (litExpr) {"
        },
        {
          "lineno": 47,
          "line": "            case litConstExpr: LitConstExpr =>"
        },
        {
          "lineno": 48,
          "line": "                let literal = litConstExpr.literal"
        },
        {
          "lineno": 49,
          "line": "                if (literal.kind == TokenKind.INTEGER_LITERAL) {"
        },
        {
          "lineno": 50,
          "line": "                    interval = Int64.parse(literal.value)"
        },
        {
          "lineno": 51,
          "line": "                } else if (literal.kind == TokenKind.STRING_LITERAL) {"
        },
        {
          "lineno": 52,
          "line": "                    let value = literal.value"
        },
        {
          "lineno": 53,
          "line": "                    if (value == LEADING_STRING) {"
        },
        {
          "lineno": 54,
          "line": "                        leading = true"
        },
        {
          "lineno": 55,
          "line": "                    } else if (value == TRAILING_STRING) {"
        },
        {
          "lineno": 56,
          "line": "                        trailing = true"
        },
        {
          "lineno": 57,
          "line": "                    }"
        },
        {
          "lineno": 58,
          "line": "                }"
        },
        {
          "lineno": 59,
          "line": "            case refExpr: RefExpr =>"
        },
        {
          "lineno": 60,
          "line": "                let value = refExpr.identifier.value"
        },
        {
          "lineno": 61,
          "line": "                if (value == LEADING_STRING) {"
        },
        {
          "lineno": 62,
          "line": "                    leading = true"
        },
        {
          "lineno": 63,
          "line": "                } else if (value == TRAILING_STRING) {"
        },
        {
          "lineno": 64,
          "line": "                    trailing = true"
        },
        {
          "lineno": 65,
          "line": "                }"
        },
        {
          "lineno": 66,
          "line": "            case _ => diagReport("
        },
        {
          "lineno": 67,
          "line": "                DiagReportLevel.ERROR,"
        },
        {
          "lineno": 68,
          "line": "                attrs[nextIndex..nextIndex],"
        },
        {
          "lineno": 69,
          "line": "                '这里必须是字面量',"
        },
        {
          "lineno": 70,
          "line": "                '只支持字面量'"
        },
        {
          "lineno": 71,
          "line": "            )"
        },
        {
          "lineno": 72,
          "line": "        }"
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 74,
          "line": "        if (nextIndex >= attrs.size) {"
        },
        {
          "lineno": 75,
          "line": "            break"
        },
        {
          "lineno": 76,
          "line": "        }"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "        if (attrs[nextIndex].kind != TokenKind.COMMA) {"
        },
        {
          "lineno": 79,
          "line": "            diagReport("
        },
        {
          "lineno": 80,
          "line": "                DiagReportLevel.ERROR,"
        },
        {
          "lineno": 81,
          "line": "                attrs[nextIndex..nextIndex + 1],"
        },
        {
          "lineno": 82,
          "line": "                \"必须是逗号分割的多个表达式\","
        },
        {
          "lineno": 83,
          "line": "                \"改为逗号\""
        },
        {
          "lineno": 84,
          "line": "            )"
        },
        {
          "lineno": 85,
          "line": "        }"
        },
        {
          "lineno": 86,
          "line": ""
        },
        {
          "lineno": 87,
          "line": "        index = nextIndex + 1"
        },
        {
          "lineno": 88,
          "line": "    }"
        },
        {
          "lineno": 89,
          "line": ""
        },
        {
          "lineno": 90,
          "line": "    // 必须有interval"
        },
        {
          "lineno": 91,
          "line": "    if (interval == 0) {"
        },
        {
          "lineno": 92,
          "line": "        diagReport("
        },
        {
          "lineno": 93,
          "line": "            DiagReportLevel.ERROR,"
        },
        {
          "lineno": 94,
          "line": "            attrs,"
        },
        {
          "lineno": 95,
          "line": "            \"必须有时间(毫秒)\","
        },
        {
          "lineno": 96,
          "line": "            \"添加时间属性\""
        },
        {
          "lineno": 97,
          "line": "        )"
        },
        {
          "lineno": 98,
          "line": "    }"
        },
        {
          "lineno": 99,
          "line": ""
        },
        {
          "lineno": 100,
          "line": "    if (!leading && !trailing) {"
        },
        {
          "lineno": 101,
          "line": "        trailing = true"
        },
        {
          "lineno": 102,
          "line": "    }"
        },
        {
          "lineno": 103,
          "line": ""
        },
        {
          "lineno": 104,
          "line": "    quote("
        },
        {
          "lineno": 105,
          "line": "        RepeaterConfig(interval: Duration.millisecond * $(interval), leading: $(leading), trailing: $(trailing)))"
        },
        {
          "lineno": 106,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func parseAttrToConfig(attrs: Tokens): Tokens {\n    var interval = 0\n    var leading = false\n    var trailing = false\n    \n    var index: Int64 = 0\n    while (true) {\nlet (litExpr, nextIndex) = parseExprFragment(attrs, startFrom: index)",
          "successors": [
            {
              "id": 3,
              "label": "match (litExpr) {\n    case litConstExpr: LitConstExpr =>\n        let literal = litConstExpr.literal\n        if (literal.kind == TokenKind.INTEGER_LITERAL) {\n            interval = Int64.parse(literal.value)\n        } else if (literal.kind == TokenKind.STRING_LITERAL) {\n            let value = literal.value\n            if (value == LEADING_STRING) {\n                leading = true\n            } else if (value == TRAILING_STRING) {\n                trailing = true\n            }\n        }\n    case refExpr: RefExpr =>\n        let value = refExpr.identifier.value\n        if (value == LEADING_STRING) {\n            leading = true\n        } else if (value == TRAILING_STRING) {\n            trailing = true\n        }\ncase _ => diagReport(\n    DiagReportLevel.ERROR,\n    attrs[nextIndex..nextIndex],\n    '\\u8fd9\\u91cc\\u5fc5\\u987b\\u662f\\u5b57\\u9762\\u91cf',\n    '\\u53ea\\u652f\\u6301\\u5b57\\u9762\\u91cf'\n)",
              "successors": [
                {
                  "id": 5,
                  "label": "if (nextIndex >= attrs.size) {\nbreak",
                  "successors": [
                    {
                      "id": 7,
                      "label": "if (attrs[nextIndex].kind != TokenKind.COMMA) {\ndiagReport(\n    DiagReportLevel.ERROR,\n    attrs[nextIndex..nextIndex + 1],\n    \"\\u5fc5\\u987b\\u662f\\u9017\\u53f7\\u5206\\u5272\\u7684\\u591a\\u4e2a\\u8868\\u8fbe\\u5f0f\",\n    \"\\u6539\\u4e3a\\u9017\\u53f7\"\n)",
                      "successors": [
                        {
                          "id": 9,
                          "label": "index = nextIndex + 1\n    }\nif (interval == 0) {",
                          "successors": [
                            {
                              "id": 11,
                              "label": "diagReport(\n    DiagReportLevel.ERROR,\n    attrs,\n    \"\\u5fc5\\u987b\\u6709\\u65f6\\u95f4(\\u6beb\\u79d2)\",\n    \"\\u6dfb\\u52a0\\u65f6\\u95f4\\u5c5e\\u6027\"\n)\nif (!leading && !trailing) {",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "trailing = true\n    }\n\n    quote(\n        RepeaterConfig(interval: Duration.millisecond * $(interval), leading: $(leading), trailing: $(trailing)))",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "impDebounceOrThrottle",
      "type": "function",
      "start_line": 111,
      "end_line": 134,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 111,
          "line": "func impDebounceOrThrottle(throttle: Bool, attr: Tokens, funcDecl: FuncDecl): Tokens {"
        },
        {
          "lineno": 112,
          "line": "    // 解析参数"
        },
        {
          "lineno": 113,
          "line": "    let config = parseAttrToConfig(attr)"
        },
        {
          "lineno": 114,
          "line": "    // 外层创建一个Debouncer"
        },
        {
          "lineno": 115,
          "line": "    let debouncerName = Token(TokenKind.IDENTIFIER, \"debouncerFor\" + funcDecl.identifier.value.toAsciiTitle())"
        },
        {
          "lineno": 116,
          "line": "    // 将函数体作为debouncer的block"
        },
        {
          "lineno": 117,
          "line": "    let ret = quote(private var $(debouncerName): ?Repeater = None"
        },
        {
          "lineno": 118,
          "line": "        )"
        },
        {
          "lineno": 119,
          "line": ""
        },
        {
          "lineno": 120,
          "line": "    let funcBlockNodes = funcDecl.block.nodes"
        },
        {
          "lineno": 121,
          "line": "    let orgNodes = funcBlockNodes.clone()"
        },
        {
          "lineno": 122,
          "line": "    funcBlockNodes.clear()"
        },
        {
          "lineno": 123,
          "line": "    funcBlockNodes.append("
        },
        {
          "lineno": 124,
          "line": "        parseExpr("
        },
        {
          "lineno": 125,
          "line": "        quote("
        },
        {
          "lineno": 126,
          "line": "            $(debouncerName).getOrDefault {"
        },
        {
          "lineno": 127,
          "line": "            let config = $(config)"
        },
        {
          "lineno": 128,
          "line": "            Repeater(throttle: $(throttle.toTokens()), config: config) {"
        },
        {
          "lineno": 129,
          "line": "                $(orgNodes)"
        },
        {
          "lineno": 130,
          "line": "            }}.call())"
        },
        {
          "lineno": 131,
          "line": "    ))"
        },
        {
          "lineno": 132,
          "line": "    ret.append(funcDecl.toTokens())"
        },
        {
          "lineno": 133,
          "line": "    return ret"
        },
        {
          "lineno": 134,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func impDebounceOrThrottle(throttle: Bool, attr: Tokens, funcDecl: FuncDecl): Tokens {\n    // 解析参数\n    let config = parseAttrToConfig(attr)\n    // 外层创建一个Debouncer\n    let debouncerName = Token(TokenKind.IDENTIFIER, \"debouncerFor\" + funcDecl.identifier.value.toAsciiTitle())\n    // 将函数体作为debouncer的block\n    let ret = quote(private var $(debouncerName): ?Repeater = None\n        )\nlet funcBlockNodes = funcDecl.block.nodes\n    let orgNodes = funcBlockNodes.clone()\n    funcBlockNodes.clear()\n    funcBlockNodes.append(\n        parseExpr(\n        quote(\n            $(debouncerName).getOrDefault {\n            let config = $(config)\n            Repeater(throttle: $(throttle.toTokens()), config: config) {\n                $(orgNodes)\n            }}.call())\n    ))",
          "successors": [
            {
              "id": 3,
              "label": "ret.append(funcDecl.toTokens())\n    return ret\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// cjlint-ignore -start !G.NAM.02 !G.EXP.03 !G.FUN.01"
    },
    {
      "lineno": 2,
      "line": "macro package cj_debounce_throttle.macros"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import std.time.MonoTime"
    },
    {
      "lineno": 5,
      "line": "import std.convert.Parsable"
    },
    {
      "lineno": 6,
      "line": "import std.collection.ArrayList"
    },
    {
      "lineno": 7,
      "line": "internal import std.ast.{TokenKind, ToTokens, Tokens, parseDecl, FuncDecl, parseExpr, parseExprFragment, diagReport, "
    },
    {
      "lineno": 8,
      "line": "    DiagReportLevel, LitConstExpr, RefExpr, Token}"
    },
    {
      "lineno": 9,
      "line": "public import cj_debounce_throttle.repeater.* // cjlint-ignore !G.PKG.01"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "const LEADING_STRING: String = 'leading'"
    },
    {
      "lineno": 12,
      "line": "const TRAILING_STRING: String = 'trailing'"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "/**"
    },
    {
      "lineno": 15,
      "line": " * 保证必须是一个函数声明，然后执行action动作"
    },
    {
      "lineno": 16,
      "line": " */"
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": "/**"
    },
    {
      "lineno": 36,
      "line": " * 解析属性"
    },
    {
      "lineno": 37,
      "line": " */"
    },
    {
      "lineno": 107,
      "line": ""
    },
    {
      "lineno": 108,
      "line": "/**"
    },
    {
      "lineno": 109,
      "line": " * 实现Debounce或者Throttle的宏"
    },
    {
      "lineno": 110,
      "line": " */"
    },
    {
      "lineno": 135,
      "line": "// cjlint-ignore -end"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "// cjlint-ignore -start !G.NAM.02 !G.EXP.03 !G.FUN.01",
      "successors": []
    }
  ]
}