{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [],
  "classes": [
    {
      "name": "Person",
      "type": "class",
      "start_line": 7,
      "end_line": 28,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 11,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    init(name!: String) {"
            },
            {
              "lineno": 12,
              "line": "        this.name = name"
            },
            {
              "lineno": 13,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init(name!: String) {\n        this.name = name\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "deserialize",
          "type": "function",
          "start_line": 15,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 15,
              "line": "    static public func deserialize(dm: DataModel): Person {"
            },
            {
              "lineno": 16,
              "line": "        let dms = match(dm) {"
            },
            {
              "lineno": 17,
              "line": "            case d: DataModelStruct => d"
            },
            {
              "lineno": 18,
              "line": "            case _ => throw Exception(\"This data is not DataModelStruct\")"
            },
            {
              "lineno": 19,
              "line": "        }"
            },
            {
              "lineno": 20,
              "line": "        return Person(name: String.deserialize(dms.get(\"name\")))"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    static public func deserialize(dm: DataModel): Person {\n        let dms = match(dm) {\n            case d: DataModelStruct => d\n            case _ => throw Exception(\"This data is not DataModelStruct\")\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        return Person(name: String.deserialize(dms.get(\"name\")))",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "serialize",
          "type": "function",
          "start_line": 23,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    public func serialize(): DataModel {"
            },
            {
              "lineno": 24,
              "line": "        let dms = DataModelStruct()"
            },
            {
              "lineno": 25,
              "line": "        dms.add(field(\"name\", this.name))"
            },
            {
              "lineno": 26,
              "line": "        return dms"
            },
            {
              "lineno": 27,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func serialize(): DataModel {\n        let dms = DataModelStruct()\n        dms.add(field(\"name\", this.name))\n        return dms",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "private struct Person <: Serializable<Person> {"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    let name: String"
        },
        {
          "lineno": 10,
          "line": ""
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 22,
          "line": "    "
        },
        {
          "lineno": 28,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "private struct Person <: Serializable<Person> {\n\n    let name: String\n\n\n\n",
          "successors": [
            {
              "id": 3,
              "label": "    \n}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "JsonDeserializeTest",
      "type": "class",
      "start_line": 31,
      "end_line": 43,
      "functions": [
        {
          "name": "test",
          "type": "function",
          "start_line": 34,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    func test() {"
            },
            {
              "lineno": 35,
              "line": "        let jsonStr = #\""
            },
            {
              "lineno": 36,
              "line": "        {"
            },
            {
              "lineno": 37,
              "line": "            \"name\": \"Arror\""
            },
            {
              "lineno": 38,
              "line": "        }\"#"
            },
            {
              "lineno": 39,
              "line": "        let json = Json(str: jsonStr)"
            },
            {
              "lineno": 40,
              "line": "        let person = json.deserialize<Person>()"
            },
            {
              "lineno": 41,
              "line": "        @Expect(person.isSome())"
            },
            {
              "lineno": 42,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func test() {\n        let jsonStr = #\"\n        {\n            \"name\": \"Arror\"\n        }\"#\n        let json = Json(str: jsonStr)\n        let person = json.deserialize<Person>()\n        @Expect(person.isSome())\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "class JsonDeserializeTest {"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    @TestCase"
        },
        {
          "lineno": 43,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class JsonDeserializeTest {\n    @TestCase",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package SimpleJsonReader"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.unittest.*"
    },
    {
      "lineno": 4,
      "line": "import std.unittest.testmacro.*"
    },
    {
      "lineno": 5,
      "line": "import serialization.serialization.*"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "@Test"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package SimpleJsonReader\nimport std.unittest.*\nimport std.unittest.testmacro.*\nimport serialization.serialization.*",
      "successors": [
        {
          "id": 3,
          "label": "@Test",
          "successors": []
        }
      ]
    }
  ]
}