{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 81,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 7,
      "end_line": 81,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "main() {"
        },
        {
          "lineno": 8,
          "line": "    let connectionString = \"root:12345678@tcp(10.200.1.164:3306)/admin-api\""
        },
        {
          "lineno": 9,
          "line": "    let opts = ["
        },
        {
          "lineno": 10,
          "line": "        (\"cachePrepStmts\", \"true\")"
        },
        {
          "lineno": 11,
          "line": "    ]"
        },
        {
          "lineno": 12,
          "line": "    let drv = DriverManager.getDriver(\"mysql\") ?? return"
        },
        {
          "lineno": 13,
          "line": "    let ds = drv.open(connectionString, opts)"
        },
        {
          "lineno": 14,
          "line": "    let connection = ds.connect()"
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 16,
          "line": "    let deleteTable = \"\"\""
        },
        {
          "lineno": 17,
          "line": "        drop table if exists `sys_dept`;"
        },
        {
          "lineno": 18,
          "line": "    \"\"\""
        },
        {
          "lineno": 19,
          "line": "    let deleteTableStatement = connection.prepareStatement(deleteTable)"
        },
        {
          "lineno": 20,
          "line": "    let deleteTableParams = ArrayList<SqlDbType>()"
        },
        {
          "lineno": 21,
          "line": "    let deleteTableResult = deleteTableStatement.update(deleteTableParams.toArray())"
        },
        {
          "lineno": 22,
          "line": "    println(\"delete table sys_dept if exists success\")"
        },
        {
          "lineno": 23,
          "line": "        "
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    let createTable = \"\"\""
        },
        {
          "lineno": 26,
          "line": "        CREATE TABLE `sys_dept` ("
        },
        {
          "lineno": 27,
          "line": "            `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',"
        },
        {
          "lineno": 28,
          "line": "            `parent_id` int NOT NULL COMMENT '父id',"
        },
        {
          "lineno": 29,
          "line": "            `dept_type` int NOT NULL COMMENT '部门类型（1->公司, 2->中心，3->部门）',"
        },
        {
          "lineno": 30,
          "line": "            `dept_name` varchar(30) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT '部门名称',"
        },
        {
          "lineno": 31,
          "line": "            `dept_status` int NOT NULL DEFAULT '1' COMMENT '部门状态（1->正常 2->停用）',"
        },
        {
          "lineno": 32,
          "line": "            PRIMARY KEY (`id`) USING BTREE,"
        },
        {
          "lineno": 33,
          "line": "            UNIQUE KEY `dept_name` (`dept_name`) USING BTREE"
        },
        {
          "lineno": 34,
          "line": "        ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin ROW_FORMAT=DYNAMIC COMMENT='部门表';\"\"\""
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    let createTableStatement = connection.prepareStatement(createTable)"
        },
        {
          "lineno": 37,
          "line": "    let createTableParams= ArrayList<SqlDbType>()"
        },
        {
          "lineno": 38,
          "line": "    let createTableResult = createTableStatement.update(createTableParams.toArray())"
        },
        {
          "lineno": 39,
          "line": "    println(\"create table sys_dept success\")"
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 41,
          "line": "    // INSERT INTO `admin-api`.sys_dept(id, parent_id, dept_type, dept_name, dept_status) VALUES(1, 0, 1, 'develop1', 1);"
        },
        {
          "lineno": 42,
          "line": "    let insertTableStatement = connection.prepareStatement(\"INSERT INTO sys_dept(parent_id, dept_type, dept_name, dept_status) VALUES(?,?,?,?);\")"
        },
        {
          "lineno": 43,
          "line": "    var companyUpdateResult = insertTableStatement.update(SqlInteger(0), SqlInteger(1), SqlVarchar(\"cangjie company\"), SqlInteger(1))"
        },
        {
          "lineno": 44,
          "line": "    var heNanUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"henan center\"), SqlInteger(1))"
        },
        {
          "lineno": 45,
          "line": "    var zheJiangUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"zhejiang center\"), SqlInteger(1))"
        },
        {
          "lineno": 46,
          "line": "    insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development1\"), SqlInteger(1))"
        },
        {
          "lineno": 47,
          "line": "    insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development2\"), SqlInteger(1))"
        },
        {
          "lineno": 48,
          "line": "    insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development1\"), SqlInteger(1))"
        },
        {
          "lineno": 49,
          "line": "    insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development2\"), SqlInteger(1))"
        },
        {
          "lineno": 50,
          "line": "    println(\"insert into table sys_dept, 7 rows\")"
        },
        {
          "lineno": 51,
          "line": ""
        },
        {
          "lineno": 52,
          "line": "    let id = SqlInteger(0)"
        },
        {
          "lineno": 53,
          "line": "    let parentId = SqlInteger(0)"
        },
        {
          "lineno": 54,
          "line": "    let deptType = SqlInteger(0)"
        },
        {
          "lineno": 55,
          "line": "    let deptName = SqlVarchar(\"\")"
        },
        {
          "lineno": 56,
          "line": "    let deptStatus = SqlInteger(0)"
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 58,
          "line": "    let statement = connection.prepareStatement(\"select * from `sys_dept`;\")"
        },
        {
          "lineno": 59,
          "line": "    let param = ArrayList<SqlDbType>()"
        },
        {
          "lineno": 60,
          "line": "    let queryResult = statement.query(param.toArray())"
        },
        {
          "lineno": 61,
          "line": "    var tempIndex = 1"
        },
        {
          "lineno": 62,
          "line": "    println(\"query sys_dept all data\")"
        },
        {
          "lineno": 63,
          "line": "    while(queryResult.next(id, parentId, deptType, deptName, deptStatus)) {"
        },
        {
          "lineno": 64,
          "line": "        println(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + "
        },
        {
          "lineno": 65,
          "line": "            \"deptType = ${deptType.value}, deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\""
        },
        {
          "lineno": 66,
          "line": "        )"
        },
        {
          "lineno": 67,
          "line": "        tempIndex ++ "
        },
        {
          "lineno": 68,
          "line": "    }"
        },
        {
          "lineno": 69,
          "line": ""
        },
        {
          "lineno": 70,
          "line": "    tempIndex = 1"
        },
        {
          "lineno": 71,
          "line": "    println(\"query sys_dept where dept_type = 2\")"
        },
        {
          "lineno": 72,
          "line": "        let statement2 = connection.prepareStatement(\"select * from sys_dept where dept_type = ?;\")"
        },
        {
          "lineno": 73,
          "line": "        param.append(SqlBigInt(2))"
        },
        {
          "lineno": 74,
          "line": "    let queryResult2 = statement2.query(param.toArray())"
        },
        {
          "lineno": 75,
          "line": "    while(queryResult2.next(id, parentId, deptType, deptName, deptStatus)) {"
        },
        {
          "lineno": 76,
          "line": "        println(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + "
        },
        {
          "lineno": 77,
          "line": "            \"deptType = ${deptType.value},  deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\""
        },
        {
          "lineno": 78,
          "line": "        )"
        },
        {
          "lineno": 79,
          "line": "        tempIndex ++ "
        },
        {
          "lineno": 80,
          "line": "    }"
        },
        {
          "lineno": 81,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    let connectionString = \"root:12345678@tcp(10.200.1.164:3306)/admin-api\"\n    let opts = [\n        (\"cachePrepStmts\", \"true\")\n    ]\n    let drv = DriverManager.getDriver(\"mysql\") ?? return\n    let ds = drv.open(connectionString, opts)\n    let connection = ds.connect()\nlet deleteTable = \"\"\"\n        drop table if exists `sys_dept`;\n    \"\"\"\n    let deleteTableStatement = connection.prepareStatement(deleteTable)\n    let deleteTableParams = ArrayList<SqlDbType>()\n    let deleteTableResult = deleteTableStatement.update(deleteTableParams.toArray())\n    println(\"delete table sys_dept if exists success\")",
          "successors": [
            {
              "id": 3,
              "label": "let createTable = \"\"\"\n        CREATE TABLE `sys_dept` (\n            `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',\n            `parent_id` int NOT NULL COMMENT '父id',\n            `dept_type` int NOT NULL COMMENT '部门类型（1->公司, 2->中心，3->部门）',\n            `dept_name` varchar(30) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT '部门名称',\n            `dept_status` int NOT NULL DEFAULT '1' COMMENT '部门状态（1->正常 2->停用）',\n            PRIMARY KEY (`id`) USING BTREE,\n            UNIQUE KEY `dept_name` (`dept_name`) USING BTREE\n        ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin ROW_FORMAT=DYNAMIC COMMENT='部门表';\"\"\"\n\n    let createTableStatement = connection.prepareStatement(createTable)\n    let createTableParams= ArrayList<SqlDbType>()\n    let createTableResult = createTableStatement.update(createTableParams.toArray())\n    println(\"create table sys_dept success\")\nlet insertTableStatement = connection.prepareStatement(\"INSERT INTO sys_dept(parent_id, dept_type, dept_name, dept_status) VALUES(?,?,?,?);\")\n    var companyUpdateResult = insertTableStatement.update(SqlInteger(0), SqlInteger(1), SqlVarchar(\"cangjie company\"), SqlInteger(1))\n    var heNanUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"henan center\"), SqlInteger(1))\n    var zheJiangUpdateResult = insertTableStatement.update(SqlInteger(Int32(companyUpdateResult.lastInsertId)), SqlInteger(2), SqlVarchar(\"zhejiang center\"), SqlInteger(1))\n    insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development1\"), SqlInteger(1))\n    insertTableStatement.update(SqlInteger(Int32(heNanUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"henan development2\"), SqlInteger(1))\n    insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development1\"), SqlInteger(1))\n    insertTableStatement.update(SqlInteger(Int32(zheJiangUpdateResult.lastInsertId)), SqlInteger(3), SqlVarchar(\"zhejiang development2\"), SqlInteger(1))\n    println(\"insert into table sys_dept, 7 rows\")",
              "successors": [
                {
                  "id": 5,
                  "label": "let id = SqlInteger(0)\n    let parentId = SqlInteger(0)\n    let deptType = SqlInteger(0)\n    let deptName = SqlVarchar(\"\")\n    let deptStatus = SqlInteger(0)\n\n    let statement = connection.prepareStatement(\"select * from `sys_dept`;\")\n    let param = ArrayList<SqlDbType>()\n    let queryResult = statement.query(param.toArray())\n    var tempIndex = 1\n    println(\"query sys_dept all data\")\n    while(queryResult.next(id, parentId, deptType, deptName, deptStatus)) {\nprintln(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + \n            \"deptType = ${deptType.value}, deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\"\n        )\n        tempIndex ++ ",
                  "successors": [
                    {
                      "id": 7,
                      "label": "}\ntempIndex = 1\n    println(\"query sys_dept where dept_type = 2\")\n        let statement2 = connection.prepareStatement(\"select * from sys_dept where dept_type = ?;\")\n        param.append(SqlBigInt(2))\n    let queryResult2 = statement2.query(param.toArray())\n    while(queryResult2.next(id, parentId, deptType, deptName, deptStatus)) {\n        println(\" ${tempIndex} rows data, id = ${id.value}, parentId = ${parentId.value},\" + \n            \"deptType = ${deptType.value},  deptName = ${deptName.value}, deptStatus = ${deptStatus.value}\"\n        )\n        tempIndex ++ ",
                      "successors": [
                        {
                          "id": 9,
                          "label": "}\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package cangjieWeb"
    },
    {
      "lineno": 2,
      "line": "import serialization.serialization.*"
    },
    {
      "lineno": 3,
      "line": "import encoding.json.*"
    },
    {
      "lineno": 4,
      "line": "import std.database.sql.{DriverManager, SqlDbType, SqlBigInt, SqlInteger, SqlVarchar}"
    },
    {
      "lineno": 5,
      "line": "import cangjieWeb.mysql.MySqlDatasource"
    },
    {
      "lineno": 6,
      "line": "import std.collection.{ArrayList}"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package cangjieWeb\nimport serialization.serialization.*\nimport encoding.json.*\nimport std.database.sql.{DriverManager, SqlDbType, SqlBigInt, SqlInteger, SqlVarchar}\nimport cangjieWeb.mysql.MySqlDatasource\nimport std.collection.{ArrayList}",
      "successors": []
    }
  ]
}