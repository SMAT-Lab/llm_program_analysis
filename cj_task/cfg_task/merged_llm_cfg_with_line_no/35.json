{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 211,
  "functions": [],
  "classes": [
    {
      "name": "MySqlStatement",
      "type": "class",
      "start_line": 5,
      "end_line": 211,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 20,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    init(connection: MysqlConnection, sql: String) {"
            },
            {
              "lineno": 21,
              "line": "        this.connection = connection"
            },
            {
              "lineno": 22,
              "line": "        this.sql = sql"
            },
            {
              "lineno": 23,
              "line": ""
            },
            {
              "lineno": 24,
              "line": "        this.connection.writeCommandPacketStr(comStmtPrepare, sql)"
            },
            {
              "lineno": 25,
              "line": "        readPrepareResultPacket()"
            },
            {
              "lineno": 26,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    init(connection: MysqlConnection, sql: String) {\n        this.connection = connection\n        this.sql = sql\n\n        this.connection.writeCommandPacketStr(comStmtPrepare, sql)\n        readPrepareResultPacket()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "parameterColumnInfos",
          "type": "function",
          "start_line": 28,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public prop parameterColumnInfos: Array<ColumnInfo> {"
            },
            {
              "lineno": 29,
              "line": "        get() {"
            },
            {
              "lineno": 30,
              "line": "            return ArrayList<ColumnInfo>().toArray()"
            },
            {
              "lineno": 31,
              "line": "        }"
            },
            {
              "lineno": 32,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public prop parameterColumnInfos: Array<ColumnInfo> {\n        get() {\n            return ArrayList<ColumnInfo>().toArray()\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "query",
          "type": "function",
          "start_line": 35,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    public func query(params: Array<SqlDbType>): QueryResult {"
            },
            {
              "lineno": 36,
              "line": "        // 发送"
            },
            {
              "lineno": 37,
              "line": "        writeExecutePacket(params)"
            },
            {
              "lineno": 38,
              "line": "        // 接收结果"
            },
            {
              "lineno": 39,
              "line": "        let columnNumber = readRequstSetHeaderPacket()"
            },
            {
              "lineno": 40,
              "line": "        // println(\"columnCount = ${columnNumber}\")"
            },
            {
              "lineno": 41,
              "line": "        var columns: ArrayList<MySqlField> = ArrayList<MySqlField>()"
            },
            {
              "lineno": 42,
              "line": "        var rows: ArrayList<Array<Byte>> = ArrayList<Array<Byte>>()"
            },
            {
              "lineno": 43,
              "line": "        if (columnNumber > 0) {"
            },
            {
              "lineno": 44,
              "line": "            // read columns"
            },
            {
              "lineno": 45,
              "line": "            columns = this.connection.readColumns(UInt16(columnNumber))"
            },
            {
              "lineno": 46,
              "line": "            // read rows"
            },
            {
              "lineno": 47,
              "line": "            rows = this.connection.readRows()"
            },
            {
              "lineno": 48,
              "line": "        }"
            },
            {
              "lineno": 49,
              "line": "        return MysqlQueryResult(columns, rows)"
            },
            {
              "lineno": 50,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func query(params: Array<SqlDbType>): QueryResult {\n        // \n        writeExecutePacket(params)\n        // \n        let columnNumber = readRequstSetHeaderPacket()\n        // \n        var columns: ArrayList<MySqlField> = ArrayList<MySqlField>()\n        var rows: ArrayList<Array<Byte>> = ArrayList<Array<Byte>>()",
              "successors": [
                {
                  "id": 2,
                  "label": "        if (columnNumber > 0) {\n            // read columns\n            columns = this.connection.readColumns(UInt16(columnNumber))\n            // read rows\n            rows = this.connection.readRows()\n        }",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        return MysqlQueryResult(columns, rows)\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setOption",
          "type": "function",
          "start_line": 51,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 51,
              "line": "    public func setOption(key: String, value: String): Unit {"
            },
            {
              "lineno": 52,
              "line": ""
            },
            {
              "lineno": 53,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func setOption(key: String, value: String): Unit {\n\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 54,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    public func update(params: Array<SqlDbType>): UpdateResult {"
            },
            {
              "lineno": 55,
              "line": "        // 发送"
            },
            {
              "lineno": 56,
              "line": "        writeExecutePacket(params)"
            },
            {
              "lineno": 57,
              "line": ""
            },
            {
              "lineno": 58,
              "line": "        // 接收结果"
            },
            {
              "lineno": 59,
              "line": "        let updateResult = readRequstSetHeaderPacket()        "
            },
            {
              "lineno": 60,
              "line": "        return MySqlUpdateResult(rowCount, lastInsertId)"
            },
            {
              "lineno": 61,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func update(params: Array<SqlDbType>): UpdateResult {\n// 发送\nwriteExecutePacket(params)",
              "successors": [
                {
                  "id": 3,
                  "label": "// 接收结果\nlet updateResult = readRequstSetHeaderPacket()        \nreturn MySqlUpdateResult(rowCount, lastInsertId)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "close",
          "type": "function",
          "start_line": 63,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 63,
              "line": "    public func close() {"
            },
            {
              "lineno": 64,
              "line": "        "
            },
            {
              "lineno": 65,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func close() {\n        \n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "isClosed",
          "type": "function",
          "start_line": 67,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    public func isClosed(): Bool {"
            },
            {
              "lineno": 68,
              "line": "        return false"
            },
            {
              "lineno": 69,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func isClosed(): Bool {\n    return false\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "readRequstSetHeaderPacket",
          "type": "function",
          "start_line": 71,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 71,
              "line": "    private func readRequstSetHeaderPacket(): Int64 {"
            },
            {
              "lineno": 72,
              "line": "        let data = connection.readPacket()"
            },
            {
              "lineno": 73,
              "line": "        match(data[0]) {"
            },
            {
              "lineno": 74,
              "line": "            case 0 => "
            },
            {
              "lineno": 75,
              "line": "                handleOkPacket(data[1..])"
            },
            {
              "lineno": 76,
              "line": "                return 0"
            },
            {
              "lineno": 77,
              "line": "            case 255 =>"
            },
            {
              "lineno": 78,
              "line": "                println(\"err, do later\")"
            },
            {
              "lineno": 79,
              "line": "                return -1"
            },
            {
              "lineno": 80,
              "line": "            case _ => "
            },
            {
              "lineno": 81,
              "line": "                1 + 1"
            },
            {
              "lineno": 82,
              "line": "                // println(\"unknow, do later\")"
            },
            {
              "lineno": 83,
              "line": "                // return -1"
            },
            {
              "lineno": 84,
              "line": "        }"
            },
            {
              "lineno": 85,
              "line": ""
            },
            {
              "lineno": 86,
              "line": "        // column count"
            },
            {
              "lineno": 87,
              "line": "        let (number, isNull, n) = ByteArrayUtils.readLengthEncodedInteger(data)"
            },
            {
              "lineno": 88,
              "line": "        return Int64(number)"
            },
            {
              "lineno": 89,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "private func readRequstSetHeaderPacket(): Int64 {\n    let data = connection.readPacket()",
              "successors": [
                {
                  "id": 2,
                  "label": "match(data[0]) {\n    case 0 => \n        handleOkPacket(data[1..])\n        return 0\n    case 255 =>\n        println(\"err, do later\")\n        return -1\n    case _ => \n        1 + 1\n        // println(\"unknow, do later\")\n        // return -1\n}",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "let (number, isNull, n) = ByteArrayUtils.readLengthEncodedInteger(data)\nreturn Int64(number)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "handleOkPacket",
          "type": "function",
          "start_line": 91,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 91,
              "line": "    private func handleOkPacket(data: Array<Byte>) {"
            },
            {
              "lineno": 92,
              "line": "        // Affected rows [Length Coded Binary]"
            },
            {
              "lineno": 93,
              "line": "\t    let (affectedRows, affectedRowsIsNull, n) = ByteArrayUtils.readLengthEncodedInteger(data[0..])"
            },
            {
              "lineno": 94,
              "line": ""
            },
            {
              "lineno": 95,
              "line": "\t    // Insert id [Length Coded Binary]"
            },
            {
              "lineno": 96,
              "line": "\t    let (insertId, insertIdIsNull, m )= ByteArrayUtils.readLengthEncodedInteger(data[n..])"
            },
            {
              "lineno": 97,
              "line": "        rowCount = Int64(affectedRows)"
            },
            {
              "lineno": 98,
              "line": "        lastInsertId = Int64(insertId)"
            },
            {
              "lineno": 99,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func handleOkPacket(data: Array<Byte>) {\n        // Affected rows [Length Coded Binary]\n\t    let (affectedRows, affectedRowsIsNull, n) = ByteArrayUtils.readLengthEncodedInteger(data[0..])\n\n\t    // Insert id [Length Coded Binary]\n\t    let (insertId, insertIdIsNull, m )= ByteArrayUtils.readLengthEncodedInteger(data[n..])\n        rowCount = Int64(affectedRows)\n        lastInsertId = Int64(insertId)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readPrepareResultPacket",
          "type": "function",
          "start_line": 102,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 102,
              "line": "    private func readPrepareResultPacket() {"
            },
            {
              "lineno": 103,
              "line": "        let data = this.connection.readPacket()"
            },
            {
              "lineno": 104,
              "line": "        if (data[0] != iOK) {"
            },
            {
              "lineno": 105,
              "line": "            println(\"error here, do later\")"
            },
            {
              "lineno": 106,
              "line": "        }"
            },
            {
              "lineno": 107,
              "line": ""
            },
            {
              "lineno": 108,
              "line": "        id = ByteArrayUtils.littleEndianUint32(data[1..5])"
            },
            {
              "lineno": 109,
              "line": "        columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])"
            },
            {
              "lineno": 110,
              "line": "        paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])"
            },
            {
              "lineno": 111,
              "line": "        if (paramCount > 0) {"
            },
            {
              "lineno": 112,
              "line": "           let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)"
            },
            {
              "lineno": 113,
              "line": "        } "
            },
            {
              "lineno": 114,
              "line": "        if (columnCount > 0) {"
            },
            {
              "lineno": 115,
              "line": "            let columns = this.connection.readColumns(columnCount)"
            },
            {
              "lineno": 116,
              "line": "        }"
            },
            {
              "lineno": 117,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func readPrepareResultPacket() {\n        let data = this.connection.readPacket()\n        if (data[0] != iOK) {",
              "successors": [
                {
                  "id": 2,
                  "label": "            println(\"error here, do later\")\n        }\n        id = ByteArrayUtils.littleEndianUint32(data[1..5])\n        columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\n        paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\n        if (paramCount > 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "           let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)\n        }\n        if (columnCount > 0) {\n            let columns = this.connection.readColumns(columnCount)",
                      "successors": [
                        {
                          "id": 6,
                          "label": "        }\n    }",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "        if (columnCount > 0) {\n            let columns = this.connection.readColumns(columnCount)\n        }\n    }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "label": "        id = ByteArrayUtils.littleEndianUint32(data[1..5])\n        columnCount = ByteArrayUtils.littleEndianUint16(data[5..7])\n        paramCount = ByteArrayUtils.littleEndianUint16(data[7..9])\n        if (paramCount > 0) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "           let params:ArrayList<MySqlField> = this.connection.readColumns(paramCount)\n        }\n        if (columnCount > 0) {\n            let columns = this.connection.readColumns(columnCount)",
                      "successors": [
                        {
                          "id": 6,
                          "label": "        }\n    }",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "        if (columnCount > 0) {\n            let columns = this.connection.readColumns(columnCount)\n        }\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "writeExecutePacket",
          "type": "function",
          "start_line": 119,
          "end_line": 209,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 119,
              "line": "    private func writeExecutePacket(params: Array<SqlDbType>) {"
            },
            {
              "lineno": 120,
              "line": "        connection.sequence = 0"
            },
            {
              "lineno": 121,
              "line": "        var pktLen = 1 + 4 + 1 + 4 + ((Int64(paramCount) + 7) / 8) + 1 + (Int64(paramCount) * 2)"
            },
            {
              "lineno": 122,
              "line": "        let paramValues = ArrayList<Array<Byte>>() "
            },
            {
              "lineno": 123,
              "line": "        let paramTypes = Array<Byte>(Int64(paramCount) * 2, item: 0)"
            },
            {
              "lineno": 124,
              "line": "        var bitMask = UInt64(0)"
            },
            {
              "lineno": 125,
              "line": ""
            },
            {
              "lineno": 126,
              "line": "        for(i in 0 .. params.size) {"
            },
            {
              "lineno": 127,
              "line": "            let param = params.get(i).getOrThrow()"
            },
            {
              "lineno": 128,
              "line": "            // 先只处理 SqlBigInt 和 SqlNullableBigInt"
            },
            {
              "lineno": 129,
              "line": "            match(param.name) {"
            },
            {
              "lineno": 130,
              "line": "                case \"SqlNullableBigInt\" => "
            },
            {
              "lineno": 131,
              "line": "                    let temp = param as SqlNullableBigInt"
            },
            {
              "lineno": 132,
              "line": "                    let value = temp.getOrThrow()"
            },
            {
              "lineno": 133,
              "line": "                    match(value.value) {"
            },
            {
              "lineno": 134,
              "line": "                        case Some(number) => "
            },
            {
              "lineno": 135,
              "line": "                            paramTypes[i<<1] = fieldTypeLongLong"
            },
            {
              "lineno": 136,
              "line": "                            let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))"
            },
            {
              "lineno": 137,
              "line": "                            paramValues.append(appenValue)"
            },
            {
              "lineno": 138,
              "line": "                            pktLen += 8"
            },
            {
              "lineno": 139,
              "line": "                        case None => "
            },
            {
              "lineno": 140,
              "line": "                            bitMask += 1 << UInt64(i)"
            },
            {
              "lineno": 141,
              "line": "                            paramTypes[i<<1] = fieldTypeNULL"
            },
            {
              "lineno": 142,
              "line": "                    }"
            },
            {
              "lineno": 143,
              "line": "                    "
            },
            {
              "lineno": 144,
              "line": "                case \"SqlBigInt\" => "
            },
            {
              "lineno": 145,
              "line": "                    let temp = param as SqlBigInt"
            },
            {
              "lineno": 146,
              "line": "                    let number = temp.getOrThrow().value"
            },
            {
              "lineno": 147,
              "line": "                    paramTypes[i<<1] = fieldTypeLongLong"
            },
            {
              "lineno": 148,
              "line": "                    let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))"
            },
            {
              "lineno": 149,
              "line": "                    paramValues.append(appenValue)"
            },
            {
              "lineno": 150,
              "line": "                    pktLen += 8"
            },
            {
              "lineno": 151,
              "line": ""
            },
            {
              "lineno": 152,
              "line": "                case \"SqlInteger\" =>"
            },
            {
              "lineno": 153,
              "line": "                    let temp = param as SqlInteger"
            },
            {
              "lineno": 154,
              "line": "                    let number = temp.getOrThrow().value"
            },
            {
              "lineno": 155,
              "line": "                    paramTypes[i<<1] = fieldTypeLong"
            },
            {
              "lineno": 156,
              "line": "                    let appenValue = ByteArrayUtils.uint32ToBytes(UInt32(number))"
            },
            {
              "lineno": 157,
              "line": "                    paramValues.append(appenValue)"
            },
            {
              "lineno": 158,
              "line": "                    pktLen += 4"
            },
            {
              "lineno": 159,
              "line": ""
            },
            {
              "lineno": 160,
              "line": "                case \"SqlVarchar\" =>"
            },
            {
              "lineno": 161,
              "line": "                    let temp = param as SqlVarchar"
            },
            {
              "lineno": 162,
              "line": "                    let s = temp.getOrThrow().value"
            },
            {
              "lineno": 163,
              "line": "                    paramTypes[i<<1] = fieldTypeVarString"
            },
            {
              "lineno": 164,
              "line": "                    let result = ArrayList<Byte>()"
            },
            {
              "lineno": 165,
              "line": "                    var lengthBytes = ByteArrayUtils.appendLengthEncodedInteger(UInt64(s.toArray().size))"
            },
            {
              "lineno": 166,
              "line": "                    result.appendAll(lengthBytes)"
            },
            {
              "lineno": 167,
              "line": "                    result.appendAll(s.toArray())"
            },
            {
              "lineno": 168,
              "line": "                    paramValues.append(result.toArray())"
            },
            {
              "lineno": 169,
              "line": "                    pktLen = pktLen + result.toArray().size"
            },
            {
              "lineno": 170,
              "line": ""
            },
            {
              "lineno": 171,
              "line": "                case _ => println(\"unsupport data type\")"
            },
            {
              "lineno": 172,
              "line": "            }"
            },
            {
              "lineno": 173,
              "line": "        }"
            },
            {
              "lineno": 174,
              "line": ""
            },
            {
              "lineno": 175,
              "line": "        let data = Array<Byte>(pktLen + 4, item: UInt8(0))"
            },
            {
              "lineno": 176,
              "line": ""
            },
            {
              "lineno": 177,
              "line": "        data[0] = UInt8(pktLen & 0xff)"
            },
            {
              "lineno": 178,
              "line": "\t    data[1] = UInt8(pktLen >> 8)"
            },
            {
              "lineno": 179,
              "line": "\t    data[2] = UInt8(pktLen >> 16)"
            },
            {
              "lineno": 180,
              "line": "\t    data[3] = connection.sequence"
            },
            {
              "lineno": 181,
              "line": ""
            },
            {
              "lineno": 182,
              "line": "        data[4] = comStmtExecute"
            },
            {
              "lineno": 183,
              "line": ""
            },
            {
              "lineno": 184,
              "line": "        data[5] = UInt8(id)"
            },
            {
              "lineno": 185,
              "line": "        data[6] = UInt8(id>>8)"
            },
            {
              "lineno": 186,
              "line": "        data[7] = UInt8(id>>16)"
            },
            {
              "lineno": 187,
              "line": "        data[8] = UInt8(id>>24)"
            },
            {
              "lineno": 188,
              "line": ""
            },
            {
              "lineno": 189,
              "line": "        data[10] = 0x01"
            },
            {
              "lineno": 190,
              "line": ""
            },
            {
              "lineno": 191,
              "line": "        if (paramCount > 0) {"
            },
            {
              "lineno": 192,
              "line": "            var pos = 14 + ((Int64(paramCount) + 7) / 8)"
            },
            {
              "lineno": 193,
              "line": "            for(i in 14 .. pos) {"
            },
            {
              "lineno": 194,
              "line": "                data[i] = UInt8(bitMask >> UInt64((i - 14)* 8))"
            },
            {
              "lineno": 195,
              "line": "            }"
            },
            {
              "lineno": 196,
              "line": ""
            },
            {
              "lineno": 197,
              "line": "            data[pos] = 0x01"
            },
            {
              "lineno": 198,
              "line": "            pos ++"
            },
            {
              "lineno": 199,
              "line": ""
            },
            {
              "lineno": 200,
              "line": "            paramTypes.copyTo(data, 0, pos, paramTypes.size)"
            },
            {
              "lineno": 201,
              "line": "            pos += paramTypes.size"
            },
            {
              "lineno": 202,
              "line": "            for(i in 0 .. paramCount) {"
            },
            {
              "lineno": 203,
              "line": "                let paramValue = paramValues[Int64(i)]"
            },
            {
              "lineno": 204,
              "line": "                paramValue.toArray().copyTo(data, 0, pos, paramValue.toArray().size)"
            },
            {
              "lineno": 205,
              "line": "                pos += paramValue.toArray().size"
            },
            {
              "lineno": 206,
              "line": "            }"
            },
            {
              "lineno": 207,
              "line": "        }"
            },
            {
              "lineno": 208,
              "line": "        connection.writePacket(data)"
            },
            {
              "lineno": 209,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func writeExecutePacket(params: Array<SqlDbType>) {\n        connection.sequence = 0\n        var pktLen = 1 + 4 + 1 + 4 + ((Int64(paramCount) + 7) / 8) + 1 + (Int64(paramCount) * 2)\n        let paramValues = ArrayList<Array<Byte>>() \n        let paramTypes = Array<Byte>(Int64(paramCount) * 2, item: 0)\n        var bitMask = UInt64(0)\n        for(i in 0 .. params.size) {\n            let param = params.get(i).getOrThrow()\n            // \n            match(param.name) {\n                case \"SqlNullableBigInt\" => \n                    let temp = param as SqlNullableBigInt\n                    let value = temp.getOrThrow()\n                    match(value.value) {\n                        case Some(number) => \n                            paramTypes[i<<1] = fieldTypeLongLong\n                            let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n                            paramValues.append(appenValue)\n                            pktLen += 8\n                        case None => \n                            bitMask += 1 << UInt64(i)\n                            paramTypes[i<<1] = fieldTypeNULL\n                    }                    \n                case \"SqlBigInt\" => \n                    let temp = param as SqlBigInt\n                    let number = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeLongLong\n                    let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n                    paramValues.append(appenValue)\n                    pktLen += 8\n\n                case \"SqlInteger\" =>\n                    let temp = param as SqlInteger\n                    let number = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeLong\n                    let appenValue = ByteArrayUtils.uint32ToBytes(UInt32(number))\n                    paramValues.append(appenValue)\n                    pktLen += 4\n\n                case \"SqlVarchar\" =>\n                    let temp = param as SqlVarchar\n                    let s = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeVarString\n                    let result = ArrayList<Byte>()\n                    var lengthBytes = ByteArrayUtils.appendLengthEncodedInteger(UInt64(s.toArray().size))\n                    result.appendAll(lengthBytes)\n                    result.appendAll(s.toArray())\n                    paramValues.append(result.toArray())\n                    pktLen = pktLen + result.toArray().size\n\n                case _ => println(\"unsupport data type\")\n            }\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n        data[0] = UInt8(pktLen & 0xff)\n    data[1] = UInt8(pktLen >> 8)\n    data[2] = UInt8(pktLen >> 16)\n    data[3] = connection.sequence\n\n        data[4] = comStmtExecute\n\n        data[5] = UInt8(id)\n        data[6] = UInt8(id>>8)\n        data[7] = UInt8(id>>16)\n        data[8] = UInt8(id>>24)\n\n        data[10] = 0x01\n\n        if (paramCount > 0) {\n            var pos = 14 + ((Int64(paramCount) + 7) / 8)\n            for(i in 14 .. pos) {\n                data[i] = UInt8(bitMask >> UInt64((i - 14)* 8))\n            }\n\n            data[pos] = 0x01\n            pos ++\n\n            paramTypes.copyTo(data, 0, pos, paramTypes.size)\n            pos += paramTypes.size\n            for(i in 0 .. paramCount) {\n                let paramValue = paramValues[Int64(i)]\n                paramValue.toArray().copyTo(data, 0, pos, paramValue.toArray().size)\n                pos += paramValue.toArray().size\n            }\n        }\n        connection.writePacket(data)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "public class MySqlStatement <: Statement {"
        },
        {
          "lineno": 6,
          "line": ""
        },
        {
          "lineno": 7,
          "line": "    private let connection: MysqlConnection"
        },
        {
          "lineno": 8,
          "line": "    private let sql: String"
        },
        {
          "lineno": 9,
          "line": "    private var id : UInt32 = 0"
        },
        {
          "lineno": 10,
          "line": "    private var columnCount: UInt16 = 0"
        },
        {
          "lineno": 11,
          "line": "    private var paramCount: UInt16 = 0"
        },
        {
          "lineno": 12,
          "line": "    private let _parameters: Array<ColumnInfo> = Array<ColumnInfo>()"
        },
        {
          "lineno": 13,
          "line": "    private let _columns: Array<ColumnInfo> = Array<ColumnInfo>()"
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 15,
          "line": "    private var rowCount: Int64 = 0"
        },
        {
          "lineno": 16,
          "line": "    private var lastInsertId: Int64 = 0"
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 90,
          "line": ""
        },
        {
          "lineno": 100,
          "line": ""
        },
        {
          "lineno": 101,
          "line": ""
        },
        {
          "lineno": 118,
          "line": ""
        },
        {
          "lineno": 210,
          "line": ""
        },
        {
          "lineno": 211,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class MySqlStatement <: Statement {\n    private let connection: MysqlConnection\n    private let sql: String\n    private var id : UInt32 = 0\n    private var columnCount: UInt16 = 0\n    private var paramCount: UInt16 = 0\n    private let _parameters: Array<ColumnInfo> = Array<ColumnInfo>()\n    private let _columns: Array<ColumnInfo> = Array<ColumnInfo>()\n    private var rowCount: Int64 = 0\n    private var lastInsertId: Int64 = 0\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package cangjieWeb.mysql"
    },
    {
      "lineno": 2,
      "line": "import std.database.sql.{Statement, ColumnInfo, QueryResult, SqlDbType, UpdateResult, SqlNullableBigInt, SqlBigInt, SqlVarchar, SqlInteger}"
    },
    {
      "lineno": 3,
      "line": "import std.collection.{ArrayList}"
    },
    {
      "lineno": 4,
      "line": "import cangjieWeb.utils.ByteArrayUtils"
    }
  ],
  "blocks": []
}