{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [
    {
      "name": "InitNone",
      "type": "function",
      "start_line": 6,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public macro InitNone(input: Tokens):Tokens{"
        },
        {
          "lineno": 7,
          "line": "    var clazz= getClassDecl(input)"
        },
        {
          "lineno": 8,
          "line": "    return addDefaultNones(clazz).toTokens()"
        },
        {
          "lineno": 9,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public macro InitNone(input: Tokens):Tokens{\n    var clazz= getClassDecl(input)\n    return addDefaultNones(clazz).toTokens()",
          "successors": []
        }
      ]
    },
    {
      "name": "addDefaultNones",
      "type": "function",
      "start_line": 12,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "func addDefaultNones(classDecl: ClassDecl): ClassDecl {"
        },
        {
          "lineno": 13,
          "line": "    classDecl.body.decls = classDecl.body.decls |> map(addDefaultNone) |> collectArrayList"
        },
        {
          "lineno": 14,
          "line": "    return classDecl"
        },
        {
          "lineno": 15,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func addDefaultNones(classDecl: ClassDecl): ClassDecl {\n    classDecl.body.decls = classDecl.body.decls |> map(addDefaultNone) |> collectArrayList\n    return classDecl\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "addDefaultNone",
      "type": "function",
      "start_line": 17,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "func addDefaultNone(decl: Decl): Decl {"
        },
        {
          "lineno": 18,
          "line": "    if (isFunc(decl.keyword)) {"
        },
        {
          "lineno": 19,
          "line": "        return decl"
        },
        {
          "lineno": 20,
          "line": "    }"
        },
        {
          "lineno": 21,
          "line": "    match (decl) {"
        },
        {
          "lineno": 22,
          "line": "        case m: MacroExpandDecl =>"
        },
        {
          "lineno": 23,
          "line": "            let vd = (m.macroInputDecl as VarDecl).getOrThrow()"
        },
        {
          "lineno": 24,
          "line": "            vd.expr = parseExpr(quote(None))"
        },
        {
          "lineno": 25,
          "line": "            vd.assign = Token(ASSIGN, '=')"
        },
        {
          "lineno": 26,
          "line": "        case v: VarDecl =>"
        },
        {
          "lineno": 27,
          "line": "            v.expr = parseExpr(quote(None))"
        },
        {
          "lineno": 28,
          "line": "            v.assign = Token(ASSIGN, '=')"
        },
        {
          "lineno": 29,
          "line": "        case _ => decl"
        },
        {
          "lineno": 30,
          "line": "    }"
        },
        {
          "lineno": 31,
          "line": "    return decl"
        },
        {
          "lineno": 32,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func addDefaultNone(decl: Decl): Decl {\nif (isFunc(decl.keyword)) {\n    return decl\n}",
          "successors": [
            {
              "id": 3,
              "label": "match (decl) {\n    case m: MacroExpandDecl =>\n        let vd = (m.macroInputDecl as VarDecl).getOrThrow()\n        vd.expr = parseExpr(quote(None))\n        vd.assign = Token(ASSIGN, '=')\n    case v: VarDecl =>\n        v.expr = parseExpr(quote(None))\n        v.assign = Token(ASSIGN, '=')\n    case _ => decl\n}\nreturn decl\n}",
              "successors": []
            },
            {
              "id": 4,
              "label": "return decl\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package cj_easy_data.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.*"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "//给加了问号的参数自动添加None"
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "macro package cj_easy_data.macros",
      "successors": []
    }
  ]
}