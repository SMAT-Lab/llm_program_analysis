{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [
    {
      "name": "pathLoad",
      "type": "function",
      "start_line": 9,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "public func pathLoad(): PathMap {"
        },
        {
          "lineno": 10,
          "line": "    var pathMap = PathMap("
        },
        {
          "lineno": 11,
          "line": "        \"/api/v1/books/:id/thumbnail\","
        },
        {
          "lineno": 12,
          "line": "        {"
        },
        {
          "lineno": 13,
          "line": "            httpContext =>"
        },
        {
          "lineno": 14,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 15,
          "line": "            let data = Books.getThumb(id)"
        },
        {
          "lineno": 16,
          "line": "            httpContext.responseBuilder.header(\"content-type\", Books.getThumbType(id))"
        },
        {
          "lineno": 17,
          "line": "            httpContext.responseBuilder.body(data)"
        },
        {
          "lineno": 18,
          "line": "        }"
        },
        {
          "lineno": 19,
          "line": "    )"
        },
        {
          "lineno": 20,
          "line": "    pathMap.add("
        },
        {
          "lineno": 21,
          "line": "        \"/api/v1/books/:id/file\","
        },
        {
          "lineno": 22,
          "line": "        {"
        },
        {
          "lineno": 23,
          "line": "            httpContext =>"
        },
        {
          "lineno": 24,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 25,
          "line": "            let data = baseConfig.getFileURL(Books.getFile(id))"
        },
        {
          "lineno": 26,
          "line": "            let path = data.split(\"/\")"
        },
        {
          "lineno": 27,
          "line": "            httpContext.responseBuilder.header(\"content-disposition\", \"attachment; filename=\" + path[path.size - 1])"
        },
        {
          "lineno": 28,
          "line": "            httpContext.responseBuilder.header(\"content-type\", Books.getFileType(id))"
        },
        {
          "lineno": 29,
          "line": "            httpContext.responseBuilder.body(File.readFrom(data))"
        },
        {
          "lineno": 30,
          "line": "        }"
        },
        {
          "lineno": 31,
          "line": "    )"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    pathMap.add("
        },
        {
          "lineno": 34,
          "line": "        \"/api/v1/books/:id/pages/:page\","
        },
        {
          "lineno": 35,
          "line": "        {"
        },
        {
          "lineno": 36,
          "line": "            httpContext =>"
        },
        {
          "lineno": 37,
          "line": "            let id = httpContext.request.url.toString().split(\"/\")[4]"
        },
        {
          "lineno": 38,
          "line": "            let page = Int64.parse(httpContext.request.url.path.split(\"/\")[6])"
        },
        {
          "lineno": 39,
          "line": "            var convert = \"\""
        },
        {
          "lineno": 40,
          "line": "            match (httpContext.request.url.query) {"
        },
        {
          "lineno": 41,
          "line": "                case Some(x) => convert = x.trimStart(\"convert=\")"
        },
        {
          "lineno": 42,
          "line": "                case None => ()"
        },
        {
          "lineno": 43,
          "line": "            }"
        },
        {
          "lineno": 44,
          "line": "            let pageImage = Page.getPage(id, page, convert)"
        },
        {
          "lineno": 45,
          "line": "            pageImage.readFile()"
        },
        {
          "lineno": 46,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"image/${pageImage.format}\")"
        },
        {
          "lineno": 47,
          "line": "            httpContext.responseBuilder.body(pageImage.data.toArray())"
        },
        {
          "lineno": 48,
          "line": "        }"
        },
        {
          "lineno": 49,
          "line": "    )"
        },
        {
          "lineno": 50,
          "line": "    pathMap.add("
        },
        {
          "lineno": 51,
          "line": "        \"/api/v1/books/:id/manifest\","
        },
        {
          "lineno": 52,
          "line": "        {"
        },
        {
          "lineno": 53,
          "line": "            httpContext =>"
        },
        {
          "lineno": 54,
          "line": "            let host = httpContext.request.headers.get(\"host\").toArray()[0]"
        },
        {
          "lineno": 55,
          "line": "            let id = httpContext.request.url.path.split(\"/\")[4]"
        },
        {
          "lineno": 56,
          "line": "            var manifest= Manifest(id, host)"
        },
        {
          "lineno": 57,
          "line": "            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")"
        },
        {
          "lineno": 58,
          "line": "            httpContext.responseBuilder.body(manifest.toJson())"
        },
        {
          "lineno": 59,
          "line": "        }"
        },
        {
          "lineno": 60,
          "line": "    )"
        },
        {
          "lineno": 61,
          "line": "    return pathMap"
        },
        {
          "lineno": 62,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func pathLoad(): PathMap {\n    var pathMap = PathMap(\n        \"/api/v1/books/:id/thumbnail\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let data = Books.getThumb(id)\n            httpContext.responseBuilder.header(\"content-type\", Books.getThumbType(id))\n            httpContext.responseBuilder.body(data)\n        }\n    )\n    pathMap.add(\n\"/api/v1/books/:id/file\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let data = baseConfig.getFileURL(Books.getFile(id))\n            let path = data.split(\"/\")\n            httpContext.responseBuilder.header(\"content-disposition\", \"attachment; filename=\" + path[path.size - 1])\n            httpContext.responseBuilder.header(\"content-type\", Books.getFileType(id))\n            httpContext.responseBuilder.body(File.readFrom(data))\n        }\n    )",
          "successors": [
            {
              "id": 3,
              "label": "pathMap.add(\n        \"/api/v1/books/:id/pages/:page\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let page = Int64.parse(httpContext.request.url.path.split(\"/\")[6])\n            var convert = \"\"\n            match (httpContext.request.url.query) {\n                case Some(x) => convert = x.trimStart(\"convert=\")\n                case None => ()\n            }\n            let pageImage = Page.getPage(id, page, convert)\n            pageImage.readFile()\n            httpContext.responseBuilder.header(\"content-type\", \"image/${pageImage.format}\")\n            httpContext.responseBuilder.body(pageImage.data.toArray())\n        }\n    )\npathMap.add(\n        \"/api/v1/books/:id/manifest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.path.split(\"/\")[4]\n            var manifest= Manifest(id, host)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(manifest.toJson())\n        }\n    )\n    return pathMap",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package opds_cj.path.api.v1.books"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.{io.*,fs.*,convert.*}"
    },
    {
      "lineno": 4,
      "line": "import net.http.*"
    },
    {
      "lineno": 5,
      "line": "import opds_cj.router.PathMap"
    },
    {
      "lineno": 6,
      "line": "import opds_cj.config.baseConfig"
    },
    {
      "lineno": 7,
      "line": "internal import opds_cj.data_stru.*"
    },
    {
      "lineno": 8,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package opds_cj.path.api.v1.books",
      "successors": []
    }
  ]
}