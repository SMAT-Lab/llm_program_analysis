{
  "name": "glob",
  "type": "CFG",
  "start_line": 1,
  "end_line": 270,
  "functions": [],
  "classes": [
    {
      "name": "PatternTests",
      "type": "class",
      "start_line": 7,
      "end_line": 270,
      "functions": [
        {
          "name": "testPatternFromStr",
          "type": "function",
          "start_line": 9,
          "end_line": 17,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    func testPatternFromStr() {"
            },
            {
              "lineno": 10,
              "line": "        let p1 = Pattern(\"a*b\")"
            },
            {
              "lineno": 11,
              "line": "        @Assert(p1.matches(\"a_b\"), true)"
            },
            {
              "lineno": 12,
              "line": ""
            },
            {
              "lineno": 13,
              "line": "        let e = @AssertThrows[PatternException]({"
            },
            {
              "lineno": 14,
              "line": "            let _ = Pattern(\"a/**b\")"
            },
            {
              "lineno": 15,
              "line": "        })"
            },
            {
              "lineno": 16,
              "line": "        @Assert(e.pos, 4)"
            },
            {
              "lineno": 17,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testPatternFromStr() {\n        let p1 = Pattern(\"a*b\")\n        @Assert(p1.matches(\"a_b\"), true)\n        \n        let e = @AssertThrows[PatternException]({\n            let _ = Pattern(\"a/**b\")\n        })\n        @Assert(e.pos, 4)",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "assertInitException",
          "type": "function",
          "start_line": 19,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    func assertInitException(pattern: String, pos: Int) {"
            },
            {
              "lineno": 20,
              "line": "        let e = @AssertThrows[PatternException]({"
            },
            {
              "lineno": 21,
              "line": "            let _ = Pattern(pattern)"
            },
            {
              "lineno": 22,
              "line": "        })"
            },
            {
              "lineno": 23,
              "line": "        @Assert(e.pos, pos)"
            },
            {
              "lineno": 24,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func assertInitException(pattern: String, pos: Int) {\n        let e = @AssertThrows[PatternException]({\n            let _ = Pattern(pattern)\n        })\n        @Assert(e.pos, pos)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testWildcardErrors",
          "type": "function",
          "start_line": 27,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    func testWildcardErrors() {"
            },
            {
              "lineno": 28,
              "line": "        assertInitException(\"a/**b\", 4)"
            },
            {
              "lineno": 29,
              "line": "        assertInitException(\"a/bc**\", 3)"
            },
            {
              "lineno": 30,
              "line": "        assertInitException(\"a/*****\", 4)"
            },
            {
              "lineno": 31,
              "line": "        assertInitException(\"a/b**c**d\", 2)"
            },
            {
              "lineno": 32,
              "line": "        assertInitException(\"a**b\", 0)"
            },
            {
              "lineno": 33,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testWildcardErrors() {\n        assertInitException(\"a/**b\", 4)\n        assertInitException(\"a/bc**\", 3)\n        assertInitException(\"a/*****\", 4)\n        assertInitException(\"a/b**c**d\", 2)\n        assertInitException(\"a**b\", 0)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testUnclosedBracketErrors",
          "type": "function",
          "start_line": 36,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 36,
              "line": "    func testUnclosedBracketErrors() {"
            },
            {
              "lineno": 37,
              "line": "        assertInitException(\"abc[def\", 3)"
            },
            {
              "lineno": 38,
              "line": "        assertInitException(\"abc[!def\", 3)"
            },
            {
              "lineno": 39,
              "line": "        assertInitException(\"abc[\", 3)"
            },
            {
              "lineno": 40,
              "line": "        assertInitException(\"abc[!\", 3)"
            },
            {
              "lineno": 41,
              "line": "        assertInitException(\"abc[d\", 3)"
            },
            {
              "lineno": 42,
              "line": "        assertInitException(\"abc[!d\", 3)"
            },
            {
              "lineno": 43,
              "line": "        assertInitException(\"abc[]\", 3)"
            },
            {
              "lineno": 44,
              "line": "        assertInitException(\"abc[!]\", 3)"
            },
            {
              "lineno": 45,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testUnclosedBracketErrors() {\n        assertInitException(\"abc[def\", 3)\n        assertInitException(\"abc[!def\", 3)\n        assertInitException(\"abc[\", 3)\n        assertInitException(\"abc[!\", 3)\n        assertInitException(\"abc[d\", 3)\n        assertInitException(\"abc[!d\", 3)\n        assertInitException(\"abc[]\", 3)\n        assertInitException(\"abc[!]\", 3)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testWildcards",
          "type": "function",
          "start_line": 48,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    func testWildcards() {"
            },
            {
              "lineno": 49,
              "line": "        let p1 = Pattern(\"a*b\")"
            },
            {
              "lineno": 50,
              "line": "        @Assert(p1.matches(\"a_b\"), true)"
            },
            {
              "lineno": 51,
              "line": ""
            },
            {
              "lineno": 52,
              "line": "        let p2 = Pattern(\"a*b*c\")"
            },
            {
              "lineno": 53,
              "line": "        @Assert(p2.matches(\"abc\"), true)"
            },
            {
              "lineno": 54,
              "line": "        @Assert(p2.matches(\"abcd\"), false)"
            },
            {
              "lineno": 55,
              "line": "        @Assert(p2.matches(\"a_b_c\"), true)"
            },
            {
              "lineno": 56,
              "line": "        @Assert(p2.matches(\"a___b___c\"), true)"
            },
            {
              "lineno": 57,
              "line": ""
            },
            {
              "lineno": 58,
              "line": "        let p3 = Pattern(\"abc*abc*abc\")"
            },
            {
              "lineno": 59,
              "line": "        @Assert(p3.matches(\"abcabcabcabcabcabcabc\"), true)"
            },
            {
              "lineno": 60,
              "line": "        @Assert(p3.matches(\"abcabcabcabcabcabcabca\"), false)"
            },
            {
              "lineno": 61,
              "line": ""
            },
            {
              "lineno": 62,
              "line": "        let p4 = Pattern(\"a*a*a*a*a*a*a*a*a\")"
            },
            {
              "lineno": 63,
              "line": "        @Assert(p4.matches(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"), true)"
            },
            {
              "lineno": 64,
              "line": ""
            },
            {
              "lineno": 65,
              "line": "        let p5 = Pattern(\"a*b[xyz]c*d\")"
            },
            {
              "lineno": 66,
              "line": "        @Assert(p5.matches(\"abxcdbxcddd\"), true)"
            },
            {
              "lineno": 67,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "func testWildcards() {\n        let p1 = Pattern(\"a*b\")\n        @Assert(p1.matches(\"a_b\"), true)\n\n        let p2 = Pattern(\"a*b*c\")\n        @Assert(p2.matches(\"abc\"), true)\n        @Assert(p2.matches(\"abcd\"), false)\n        @Assert(p2.matches(\"a_b_c\"), true)\n        @Assert(p2.matches(\"a___b___c\"), true)\n\n        let p3 = Pattern(\"abc*abc*abc\")\n        @Assert(p3.matches(\"abcabcabcabcabcabcabc\"), true)\n        @Assert(p3.matches(\"abcabcabcabcabcabcabca\"), false)\n\n        let p4 = Pattern(\"a*a*a*a*a*a*a*a*a\")\n        @Assert(p4.matches(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"), true)\n\n        let p5 = Pattern(\"a*b[xyz]c*d\")\n        @Assert(p5.matches(\"abxcdbxcddd\"), true)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testRecursiveWildcards",
          "type": "function",
          "start_line": 70,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 70,
              "line": "    func testRecursiveWildcards() {"
            },
            {
              "lineno": 71,
              "line": "        let pat = Pattern(\"some/**/needle.txt\")"
            },
            {
              "lineno": 72,
              "line": "        @Assert(pat.matches(\"some/needle.txt\"), true)"
            },
            {
              "lineno": 73,
              "line": "        @Assert(pat.matches(\"some/one/needle.txt\"), true)"
            },
            {
              "lineno": 74,
              "line": "        @Assert(pat.matches(\"some/one/two/needle.txt\"), true)"
            },
            {
              "lineno": 75,
              "line": "        @Assert(pat.matches(\"some/other/needle.txt\"), true)"
            },
            {
              "lineno": 76,
              "line": "        @Assert(pat.matches(\"some/other/notthis.txt\"), false)"
            },
            {
              "lineno": 77,
              "line": ""
            },
            {
              "lineno": 78,
              "line": "        let pat2 = Pattern(\"**\")"
            },
            {
              "lineno": 79,
              "line": "        @Assert(pat2.matches(\"abcde\"), true)"
            },
            {
              "lineno": 80,
              "line": "        @Assert(pat2.matches(\"\"), true)"
            },
            {
              "lineno": 81,
              "line": "        @Assert(pat2.matches(\".asdf\"), true)"
            },
            {
              "lineno": 82,
              "line": "        @Assert(pat2.matches(\"/x/.asdf\"), true)"
            },
            {
              "lineno": 83,
              "line": ""
            },
            {
              "lineno": 84,
              "line": "        let pat3 = Pattern(\"some/**/**/needle.txt\")"
            },
            {
              "lineno": 85,
              "line": "        @Assert(pat3.matches(\"some/needle.txt\"), true)"
            },
            {
              "lineno": 86,
              "line": "        @Assert(pat3.matches(\"some/one/needle.txt\"), true)"
            },
            {
              "lineno": 87,
              "line": "        @Assert(pat3.matches(\"some/one/two/needle.txt\"), true)"
            },
            {
              "lineno": 88,
              "line": "        @Assert(pat3.matches(\"some/other/needle.txt\"), true)"
            },
            {
              "lineno": 89,
              "line": "        @Assert(pat3.matches(\"some/other/notthis.txt\"), false)"
            },
            {
              "lineno": 90,
              "line": ""
            },
            {
              "lineno": 91,
              "line": "        let pat4 = Pattern(\"**/test\")"
            },
            {
              "lineno": 92,
              "line": "        @Assert(pat4.matches(\"one/two/test\"), true)"
            },
            {
              "lineno": 93,
              "line": "        @Assert(pat4.matches(\"one/test\"), true)"
            },
            {
              "lineno": 94,
              "line": "        @Assert(pat4.matches(\"test\"), true)"
            },
            {
              "lineno": 95,
              "line": ""
            },
            {
              "lineno": 96,
              "line": "        let pat5 = Pattern(\"/**/test\")"
            },
            {
              "lineno": 97,
              "line": "        @Assert(pat5.matches(\"/one/two/test\"), true)"
            },
            {
              "lineno": 98,
              "line": "        @Assert(pat5.matches(\"/one/test\"), true)"
            },
            {
              "lineno": 99,
              "line": "        @Assert(pat5.matches(\"/test\"), true)"
            },
            {
              "lineno": 100,
              "line": "        @Assert(pat5.matches(\"/one/notthis\"), false)"
            },
            {
              "lineno": 101,
              "line": "        @Assert(pat5.matches(\"/notthis\"), false)"
            },
            {
              "lineno": 102,
              "line": ""
            },
            {
              "lineno": 103,
              "line": "        let pat6 = Pattern(\"**/.*\")"
            },
            {
              "lineno": 104,
              "line": "        @Assert(pat6.matches(\".abc\"), true)"
            },
            {
              "lineno": 105,
              "line": "        @Assert(pat6.matches(\"abc/.abc\"), true)"
            },
            {
              "lineno": 106,
              "line": "        @Assert(pat6.matches(\"ab.c\"), false)"
            },
            {
              "lineno": 107,
              "line": "        @Assert(pat6.matches(\"abc/ab.c\"), false)"
            },
            {
              "lineno": 108,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testRecursiveWildcards() {\n        let pat = Pattern(\"some/**/needle.txt\")\n        @Assert(pat.matches(\"some/needle.txt\"), true)\n        @Assert(pat.matches(\"some/one/needle.txt\"), true)\n        @Assert(pat.matches(\"some/one/two/needle.txt\"), true)\n        @Assert(pat.matches(\"some/other/needle.txt\"), true)\n        @Assert(pat.matches(\"some/other/notthis.txt\"), false)\n\n        let pat2 = Pattern(\"**\")\n        @Assert(pat2.matches(\"abcde\"), true)\n        @Assert(pat2.matches(\"\"), true)\n        @Assert(pat2.matches(\".asdf\"), true)\n        @Assert(pat2.matches(\"/x/.asdf\"), true)\n\n        let pat3 = Pattern(\"some/**/**/needle.txt\")\n        @Assert(pat3.matches(\"some/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/one/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/one/two/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/other/needle.txt\"), true)\n        @Assert(pat3.matches(\"some/other/notthis.txt\"), false)\n\n        let pat4 = Pattern(\"**/test\")\n        @Assert(pat4.matches(\"one/two/test\"), true)\n        @Assert(pat4.matches(\"one/test\"), true)\n        @Assert(pat4.matches(\"test\"), true)\n\n        let pat5 = Pattern(\"/**/test\")\n        @Assert(pat5.matches(\"/one/two/test\"), true)\n        @Assert(pat5.matches(\"/one/test\"), true)\n        @Assert(pat5.matches(\"/test\"), true)\n        @Assert(pat5.matches(\"/one/notthis\"), false)\n        @Assert(pat5.matches(\"/notthis\"), false)\n\n        let pat6 = Pattern(\"**/.*\")\n        @Assert(pat6.matches(\".abc\"), true)\n        @Assert(pat6.matches(\"abc/.abc\"), true)\n        @Assert(pat6.matches(\"ab.c\"), false)\n        @Assert(pat6.matches(\"abc/ab.c\"), false)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testRangePattern",
          "type": "function",
          "start_line": 111,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 111,
              "line": "    func testRangePattern() {"
            },
            {
              "lineno": 112,
              "line": "        let pat = Pattern(\"a[0-9]b\")"
            },
            {
              "lineno": 113,
              "line": "        for (i in 0..10) {"
            },
            {
              "lineno": 114,
              "line": "            @Assert(pat.matches(\"a${i}b\"), true)"
            },
            {
              "lineno": 115,
              "line": "        }"
            },
            {
              "lineno": 116,
              "line": "        @Assert(pat.matches(\"a_b\"), false)"
            },
            {
              "lineno": 117,
              "line": ""
            },
            {
              "lineno": 118,
              "line": "        let pat2 = Pattern(\"a[!0-9]b\")"
            },
            {
              "lineno": 119,
              "line": "        for (i in 0..10) {"
            },
            {
              "lineno": 120,
              "line": "            @Assert(pat2.matches(\"a${i}b\"), false)"
            },
            {
              "lineno": 121,
              "line": "        }"
            },
            {
              "lineno": 122,
              "line": "        @Assert(pat2.matches(\"a_b\"), true)"
            },
            {
              "lineno": 123,
              "line": ""
            },
            {
              "lineno": 124,
              "line": "        let pats = [\"[a-z123]\", \"[1a-z23]\", \"[123a-z]\"]"
            },
            {
              "lineno": 125,
              "line": "        for (p in pats) {"
            },
            {
              "lineno": 126,
              "line": "            let pat = Pattern(p)"
            },
            {
              "lineno": 127,
              "line": "            for (c in \"abcdefghijklmnopqrstuvwxyz\".toRuneArray()) {"
            },
            {
              "lineno": 128,
              "line": "                @Assert(pat.matches(String(c)), true)"
            },
            {
              "lineno": 129,
              "line": "            }"
            },
            {
              "lineno": 130,
              "line": "            for (c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toRuneArray()) {"
            },
            {
              "lineno": 131,
              "line": "                var options = MatchOptions()"
            },
            {
              "lineno": 132,
              "line": "                options.caseSensitive = false"
            },
            {
              "lineno": 133,
              "line": "                @Assert(pat.matchesWith(String(c), options), true)"
            },
            {
              "lineno": 134,
              "line": "            }"
            },
            {
              "lineno": 135,
              "line": "            @Assert(pat.matches(\"1\"), true)"
            },
            {
              "lineno": 136,
              "line": "            @Assert(pat.matches(\"2\"), true)"
            },
            {
              "lineno": 137,
              "line": "            @Assert(pat.matches(\"3\"), true)"
            },
            {
              "lineno": 138,
              "line": "        }"
            },
            {
              "lineno": 139,
              "line": ""
            },
            {
              "lineno": 140,
              "line": "        let pats2 = [\"[abc-]\", \"[-abc]\", \"[a-c-]\"]"
            },
            {
              "lineno": 141,
              "line": "        for (p in pats2) {"
            },
            {
              "lineno": 142,
              "line": "            let pat = Pattern(p)"
            },
            {
              "lineno": 143,
              "line": "            @Assert(pat.matches(\"a\"), true)"
            },
            {
              "lineno": 144,
              "line": "            @Assert(pat.matches(\"b\"), true)"
            },
            {
              "lineno": 145,
              "line": "            @Assert(pat.matches(\"c\"), true)"
            },
            {
              "lineno": 146,
              "line": "            @Assert(pat.matches(\"-\"), true)"
            },
            {
              "lineno": 147,
              "line": "            @Assert(pat.matches(\"d\"), false)"
            },
            {
              "lineno": 148,
              "line": "        }"
            },
            {
              "lineno": 149,
              "line": ""
            },
            {
              "lineno": 150,
              "line": "        let pat3 = Pattern(\"[2-1]\")"
            },
            {
              "lineno": 151,
              "line": "        @Assert(pat3.matches(\"1\"), false)"
            },
            {
              "lineno": 152,
              "line": "        @Assert(pat3.matches(\"2\"), false)"
            },
            {
              "lineno": 153,
              "line": ""
            },
            {
              "lineno": 154,
              "line": "        let pat4 = Pattern(\"[-]\")"
            },
            {
              "lineno": 155,
              "line": "        @Assert(pat4.matches(\"-\"), true)"
            },
            {
              "lineno": 156,
              "line": "        let pat5 = Pattern(\"[!-]\")"
            },
            {
              "lineno": 157,
              "line": "        @Assert(pat5.matches(\"-\"), false)"
            },
            {
              "lineno": 158,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testRangePattern() {\n        let pat = Pattern(\"a[0-9]b\")",
              "successors": [
                {
                  "id": 2,
                  "label": "        for (i in 0..10) {\n            @Assert(pat.matches(\"a${i}b\"), true)\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        @Assert(pat.matches(\"a_b\"), false)\n        let pat2 = Pattern(\"a[!0-9]b\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        for (i in 0..10) {\n            @Assert(pat2.matches(\"a${i}b\"), false)\n        }",
                          "successors": [
                            {
                              "id": 6,
                              "label": "        @Assert(pat2.matches(\"a_b\"), true)\n        let pats = [\"[a-z123]\", \"[1a-z23]\", \"[123a-z]\"]",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "        for (p in pats) {\n            let pat = Pattern(p)\n            for (c in \"abcdefghijklmnopqrstuvwxyz\".toRuneArray()) {\n                @Assert(pat.matches(String(c)), true)\n            }\n            for (c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toRuneArray()) {\n                var options = MatchOptions()\n                options.caseSensitive = false\n                @Assert(pat.matchesWith(String(c), options), true)\n            }\n            @Assert(pat.matches(\"1\"), true)\n            @Assert(pat.matches(\"2\"), true)\n            @Assert(pat.matches(\"3\"), true)\n        }",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "        let pats2 = [\"[abc-]\", \"[-abc]\", \"[a-c-]\"]",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "        for (p in pats2) {\n            let pat = Pattern(p)\n            @Assert(pat.matches(\"a\"), true)\n            @Assert(pat.matches(\"b\"), true)\n            @Assert(pat.matches(\"c\"), true)\n            @Assert(pat.matches(\"-\"), true)\n            @Assert(pat.matches(\"d\"), false)\n        }",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "        let pat3 = Pattern(\"[2-1]\")\n        @Assert(pat3.matches(\"1\"), false)\n        @Assert(pat3.matches(\"2\"), false)\n        let pat4 = Pattern(\"[-]\")\n        @Assert(pat4.matches(\"-\"), true)",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "        let pat5 = Pattern(\"[!-]\")\n        @Assert(pat5.matches(\"-\"), false)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "testPatternMatches",
          "type": "function",
          "start_line": 161,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 161,
              "line": "    func testPatternMatches() {"
            },
            {
              "lineno": 162,
              "line": "        let txtPat = Pattern(\"*hello.txt\")"
            },
            {
              "lineno": 163,
              "line": "        @Assert(txtPat.matches(\"hello.txt\"), true)"
            },
            {
              "lineno": 164,
              "line": "        @Assert(txtPat.matches(\"gareth_says_hello.txt\"), true)"
            },
            {
              "lineno": 165,
              "line": "        @Assert(txtPat.matches(\"some/path/to/hello.txt\"), true)"
            },
            {
              "lineno": 166,
              "line": "        @Assert(txtPat.matches(\"some\\\\path\\\\to\\\\hello.txt\"), true)"
            },
            {
              "lineno": 167,
              "line": "        @Assert(txtPat.matches(\"/an/absolute/path/to/hello.txt\"), true)"
            },
            {
              "lineno": 168,
              "line": "        @Assert(txtPat.matches(\"hello.txt-and-then-some\"), false)"
            },
            {
              "lineno": 169,
              "line": "        @Assert(txtPat.matches(\"goodbye.txt\"), false)"
            },
            {
              "lineno": 170,
              "line": ""
            },
            {
              "lineno": 171,
              "line": "        let dirPat = Pattern(\"*some/path/to/hello.txt\")"
            },
            {
              "lineno": 172,
              "line": "        @Assert(dirPat.matches(\"some/path/to/hello.txt\"), true)"
            },
            {
              "lineno": 173,
              "line": "        @Assert(dirPat.matches(\"a/bigger/some/path/to/hello.txt\"), true)"
            },
            {
              "lineno": 174,
              "line": "        @Assert(dirPat.matches(\"some/path/to/hello.txt-and-then-some\"), false)"
            },
            {
              "lineno": 175,
              "line": "        @Assert(dirPat.matches(\"some/other/path/to/hello.txt\"), false)"
            },
            {
              "lineno": 176,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testPatternMatches() {\n        let txtPat = Pattern(\"*hello.txt\")\n        @Assert(txtPat.matches(\"hello.txt\"), true)\n        @Assert(txtPat.matches(\"gareth_says_hello.txt\"), true)\n        @Assert(txtPat.matches(\"some/path/to/hello.txt\"), true)\n        @Assert(txtPat.matches(\"some\\\\path\\\\to\\\\hello.txt\"), true)\n        @Assert(txtPat.matches(\"/an/absolute/path/to/hello.txt\"), true)\n        @Assert(txtPat.matches(\"hello.txt-and-then-some\"), false)\n        @Assert(txtPat.matches(\"goodbye.txt\"), false)\n\n        let dirPat = Pattern(\"*some/path/to/hello.txt\")\n        @Assert(dirPat.matches(\"some/path/to/hello.txt\"), true)\n        @Assert(dirPat.matches(\"a/bigger/some/path/to/hello.txt\"), true)\n        @Assert(dirPat.matches(\"some/path/to/hello.txt-and-then-some\"), false)\n        @Assert(dirPat.matches(\"some/other/path/to/hello.txt\"), false)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testPatternMatchesWith",
          "type": "function",
          "start_line": 179,
          "end_line": 187,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 179,
              "line": "    func testPatternMatchesWith() {"
            },
            {
              "lineno": 180,
              "line": "        let pat = Pattern(\"aBcDeFg\")"
            },
            {
              "lineno": 181,
              "line": "        var options = MatchOptions()"
            },
            {
              "lineno": 182,
              "line": "        options.caseSensitive = false"
            },
            {
              "lineno": 183,
              "line": "        @Assert(pat.matchesWith(\"aBcDeFg\", options), true)"
            },
            {
              "lineno": 184,
              "line": "        @Assert(pat.matchesWith(\"abcdefg\", options), true)"
            },
            {
              "lineno": 185,
              "line": "        @Assert(pat.matchesWith(\"ABCDEFG\", options), true)"
            },
            {
              "lineno": 186,
              "line": "        @Assert(pat.matchesWith(\"AbCdEfG\", options), true)"
            },
            {
              "lineno": 187,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testPatternMatchesWith() {\n        let pat = Pattern(\"aBcDeFg\")\n        var options = MatchOptions()\n        options.caseSensitive = false\n        @Assert(pat.matchesWith(\"aBcDeFg\", options), true)\n        @Assert(pat.matchesWith(\"abcdefg\", options), true)\n        @Assert(pat.matchesWith(\"ABCDEFG\", options), true)\n        @Assert(pat.matchesWith(\"AbCdEfG\", options), true)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testPatternMatchesWithLiteralSeparator",
          "type": "function",
          "start_line": 190,
          "end_line": 200,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 190,
              "line": "    func testPatternMatchesWithLiteralSeparator() {"
            },
            {
              "lineno": 191,
              "line": "        let pat = Pattern(\"a/b/c\")"
            },
            {
              "lineno": 192,
              "line": "        var options = MatchOptions()"
            },
            {
              "lineno": 193,
              "line": "        options.requireLiteralSeparator = true"
            },
            {
              "lineno": 194,
              "line": "        @Assert(pat.matchesWith(\"a/b/c\", options), true)"
            },
            {
              "lineno": 195,
              "line": "        @Assert(pat.matchesWith(\"a/b/c/d\", options), false)"
            },
            {
              "lineno": 196,
              "line": "        @Assert(pat.matchesWith(\"a/b/cd\", options), false)"
            },
            {
              "lineno": 197,
              "line": "        @Assert(pat.matchesWith(\"a/b/c/\", options), false)"
            },
            {
              "lineno": 198,
              "line": "        @Assert(pat.matchesWith(\"a/b/c//\", options), false)"
            },
            {
              "lineno": 199,
              "line": "        @Assert(pat.matchesWith(\"a/b/c//d\", options), false)"
            },
            {
              "lineno": 200,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testPatternMatchesWithLiteralSeparator() {\n        let pat = Pattern(\"a/b/c\")\n        var options = MatchOptions()\n        options.requireLiteralSeparator = true\n        @Assert(pat.matchesWith(\"a/b/c\", options), true)\n        @Assert(pat.matchesWith(\"a/b/c/d\", options), false)\n        @Assert(pat.matchesWith(\"a/b/cd\", options), false)\n        @Assert(pat.matchesWith(\"a/b/c/\", options), false)\n        @Assert(pat.matchesWith(\"a/b/c//\", options), false)\n        @Assert(pat.matchesWith(\"a/b/c//d\", options), false)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testPatternMatchesRequireLiteralSeparator",
          "type": "function",
          "start_line": 203,
          "end_line": 223,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 203,
              "line": "    func testPatternMatchesRequireLiteralSeparator() {"
            },
            {
              "lineno": 204,
              "line": "        var optionsRequireLiteral = MatchOptions()"
            },
            {
              "lineno": 205,
              "line": "        optionsRequireLiteral.caseSensitive = true"
            },
            {
              "lineno": 206,
              "line": "        optionsRequireLiteral.requireLiteralSeparator = true"
            },
            {
              "lineno": 207,
              "line": "        optionsRequireLiteral.requireLiteralLeadingDot = false"
            },
            {
              "lineno": 208,
              "line": ""
            },
            {
              "lineno": 209,
              "line": "        var optionsNotRequireLiteral = MatchOptions()"
            },
            {
              "lineno": 210,
              "line": "        optionsNotRequireLiteral.caseSensitive = true"
            },
            {
              "lineno": 211,
              "line": "        optionsNotRequireLiteral.requireLiteralSeparator = false"
            },
            {
              "lineno": 212,
              "line": "        optionsNotRequireLiteral.requireLiteralLeadingDot = false"
            },
            {
              "lineno": 213,
              "line": ""
            },
            {
              "lineno": 214,
              "line": "        @Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsRequireLiteral), true)"
            },
            {
              "lineno": 215,
              "line": "        @Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)"
            },
            {
              "lineno": 216,
              "line": "        @Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)"
            },
            {
              "lineno": 217,
              "line": "        @Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)"
            },
            {
              "lineno": 218,
              "line": ""
            },
            {
              "lineno": 219,
              "line": "        @Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)"
            },
            {
              "lineno": 220,
              "line": "        @Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)"
            },
            {
              "lineno": 221,
              "line": "        @Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)"
            },
            {
              "lineno": 222,
              "line": "        @Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)"
            },
            {
              "lineno": 223,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testPatternMatchesRequireLiteralSeparator() {\n        var optionsRequireLiteral = MatchOptions()\n        optionsRequireLiteral.caseSensitive = true\n        optionsRequireLiteral.requireLiteralSeparator = true\n        optionsRequireLiteral.requireLiteralLeadingDot = false\n\n        var optionsNotRequireLiteral = MatchOptions()\n        optionsNotRequireLiteral.caseSensitive = true\n        optionsNotRequireLiteral.requireLiteralSeparator = false\n        optionsNotRequireLiteral.requireLiteralLeadingDot = false\n\n        @Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsRequireLiteral), true)\n        @Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n        @Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n        @Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsRequireLiteral), false)\n\n        @Assert(Pattern(\"abc/def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n        @Assert(Pattern(\"abc?def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n        @Assert(Pattern(\"abc*def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n        @Assert(Pattern(\"abc[/]def\").matchesWith(\"abc/def\", optionsNotRequireLiteral), true)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testPatternMatchesWithLiteralLeadingDot",
          "type": "function",
          "start_line": 226,
          "end_line": 260,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 226,
              "line": "    func testPatternMatchesWithLiteralLeadingDot() {"
            },
            {
              "lineno": 227,
              "line": "        var optionsRequireLiteralLeadingDot = MatchOptions()"
            },
            {
              "lineno": 228,
              "line": "        optionsRequireLiteralLeadingDot.caseSensitive = true"
            },
            {
              "lineno": 229,
              "line": "        optionsRequireLiteralLeadingDot.requireLiteralSeparator = false"
            },
            {
              "lineno": 230,
              "line": "        optionsRequireLiteralLeadingDot.requireLiteralLeadingDot = true"
            },
            {
              "lineno": 231,
              "line": ""
            },
            {
              "lineno": 232,
              "line": "        var optionsNotRequireLiteralLeadingDot = MatchOptions()"
            },
            {
              "lineno": 233,
              "line": "        optionsNotRequireLiteralLeadingDot.caseSensitive = true"
            },
            {
              "lineno": 234,
              "line": "        optionsNotRequireLiteralLeadingDot.requireLiteralSeparator = false"
            },
            {
              "lineno": 235,
              "line": "        optionsNotRequireLiteralLeadingDot.requireLiteralLeadingDot = false"
            },
            {
              "lineno": 236,
              "line": ""
            },
            {
              "lineno": 237,
              "line": "        @Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 238,
              "line": "        @Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), false)"
            },
            {
              "lineno": 239,
              "line": ""
            },
            {
              "lineno": 240,
              "line": "        @Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 241,
              "line": "        @Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 242,
              "line": ""
            },
            {
              "lineno": 243,
              "line": "        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 244,
              "line": "        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), false)"
            },
            {
              "lineno": 245,
              "line": ""
            },
            {
              "lineno": 246,
              "line": "        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 247,
              "line": "        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 248,
              "line": ""
            },
            {
              "lineno": 249,
              "line": "        @Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 250,
              "line": "        @Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 251,
              "line": ""
            },
            {
              "lineno": 252,
              "line": "        @Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 253,
              "line": "        @Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)"
            },
            {
              "lineno": 254,
              "line": ""
            },
            {
              "lineno": 255,
              "line": "        @Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 256,
              "line": "        @Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)"
            },
            {
              "lineno": 257,
              "line": ""
            },
            {
              "lineno": 258,
              "line": "        @Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsNotRequireLiteralLeadingDot), true)"
            },
            {
              "lineno": 259,
              "line": "        @Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsRequireLiteralLeadingDot), false)"
            },
            {
              "lineno": 260,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testPatternMatchesWithLiteralLeadingDot() {\n        var optionsRequireLiteralLeadingDot = MatchOptions()\n        optionsRequireLiteralLeadingDot.caseSensitive = true\n        optionsRequireLiteralLeadingDot.requireLiteralSeparator = false\n        optionsRequireLiteralLeadingDot.requireLiteralLeadingDot = true\n\n        var optionsNotRequireLiteralLeadingDot = MatchOptions()\n        optionsNotRequireLiteralLeadingDot.caseSensitive = true\n        optionsNotRequireLiteralLeadingDot.requireLiteralSeparator = false\n        optionsNotRequireLiteralLeadingDot.requireLiteralLeadingDot = false\n\n        @Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"*.txt\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\".*.*\").matchesWith(\".hello.txt\", optionsRequireLiteralLeadingDot), true)\n\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/bbb/*\").matchesWith(\"aaa/bbb/c.c.c.\", optionsRequireLiteralLeadingDot), true)\n\n        @Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/bbb/.*\").matchesWith(\"aaa/bbb/.ccc\", optionsRequireLiteralLeadingDot), true)\n\n        @Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/?bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"aaa/[.]bbb\").matchesWith(\"aaa/.bbb\", optionsRequireLiteralLeadingDot), false)\n\n        @Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsNotRequireLiteralLeadingDot), true)\n        @Assert(Pattern(\"**/*\").matchesWith(\".bbb\", optionsRequireLiteralLeadingDot), false)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "testGlob",
          "type": "function",
          "start_line": 263,
          "end_line": 269,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 263,
              "line": "    func testGlob() {"
            },
            {
              "lineno": 264,
              "line": "        let g1 = glob(\"/\")"
            },
            {
              "lineno": 265,
              "line": "        @Assert(g1.next().isSome(), true)"
            },
            {
              "lineno": 266,
              "line": ""
            },
            {
              "lineno": 267,
              "line": "        let g2 = glob(\"src/*\")"
            },
            {
              "lineno": 268,
              "line": "        @Assert(g2.next().isSome(), true)"
            },
            {
              "lineno": 269,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func testGlob() {\n        let g1 = glob(\"/\")\n        @Assert(g1.next().isSome(), true)\n        let g2 = glob(\"src/*\")\n        @Assert(g2.next().isSome(), true)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "class PatternTests {"
        },
        {
          "lineno": 8,
          "line": "    @TestCase"
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 26,
          "line": "    @TestCase"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 35,
          "line": "    @TestCase"
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    @TestCase"
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    @TestCase"
        },
        {
          "lineno": 109,
          "line": ""
        },
        {
          "lineno": 110,
          "line": "    @TestCase"
        },
        {
          "lineno": 159,
          "line": ""
        },
        {
          "lineno": 160,
          "line": "    @TestCase"
        },
        {
          "lineno": 177,
          "line": ""
        },
        {
          "lineno": 178,
          "line": "    @TestCase"
        },
        {
          "lineno": 188,
          "line": ""
        },
        {
          "lineno": 189,
          "line": "    @TestCase"
        },
        {
          "lineno": 201,
          "line": ""
        },
        {
          "lineno": 202,
          "line": "    @TestCase"
        },
        {
          "lineno": 224,
          "line": ""
        },
        {
          "lineno": 225,
          "line": "    @TestCase"
        },
        {
          "lineno": 261,
          "line": ""
        },
        {
          "lineno": 262,
          "line": "    @TestCase"
        },
        {
          "lineno": 270,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class PatternTests {\n    @TestCase",
          "successors": [
            {
              "id": 3,
              "label": "    @TestCase\n    @TestCase",
              "successors": [
                {
                  "id": 5,
                  "label": "    @TestCase\n    @TestCase",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    @TestCase\n    @TestCase",
                      "successors": [
                        {
                          "id": 9,
                          "label": "    @TestCase\n    @TestCase",
                          "successors": [
                            {
                              "id": 11,
                              "label": "    @TestCase\n    @TestCase",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "    @TestCase\n}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package glob"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.unittest.*"
    },
    {
      "lineno": 4,
      "line": "import std.unittest.testmacro.*"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "@Test"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package glob\n",
      "successors": [
        {
          "id": 3,
          "label": "import std.unittest.*\nimport std.unittest.testmacro.*\n",
          "successors": [
            {
              "id": 5,
              "label": "@Test",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}