{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 58,
  "functions": [],
  "classes": [
    {
      "name": "Color2",
      "type": "class",
      "start_line": 8,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "public enum Color2 {"
        },
        {
          "lineno": 9,
          "line": "    | Red"
        },
        {
          "lineno": 10,
          "line": "    | Green(Bool)"
        },
        {
          "lineno": 11,
          "line": "    | Blue(Rune)"
        },
        {
          "lineno": 12,
          "line": "    | RGBA(UInt8, UInt8, UInt8, Color2)"
        },
        {
          "lineno": 13,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public enum Color2 {\n    | Red\n    | Green(Bool)\n    | Blue(Rune)\n    | RGBA(UInt8, UInt8, UInt8, Color2)\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ToStringEnumTest",
      "type": "class",
      "start_line": 18,
      "end_line": 58,
      "functions": [
        {
          "name": "noArgTest",
          "type": "function",
          "start_line": 20,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    func noArgTest(): Unit {"
            },
            {
              "lineno": 21,
              "line": "        let red = Color2.Red"
            },
            {
              "lineno": 22,
              "line": "        @Expect(red.toString(true), 'Color2.Red')"
            },
            {
              "lineno": 23,
              "line": "        @Expect(red.toString(), 'Red')"
            },
            {
              "lineno": 24,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "func noArgTest(): Unit {\n    let red = Color2.Red\n    @Expect(red.toString(true), 'Color2.Red')\n    @Expect(red.toString(), 'Red')\n}",
              "successors": []
            }
          ]
        },
        {
          "name": "runeTest",
          "type": "function",
          "start_line": 27,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    func runeTest(): Unit {"
            },
            {
              "lineno": 28,
              "line": "        let blue1 = Color2.Blue(r'\\\\')"
            },
            {
              "lineno": 29,
              "line": "        let blue2 = Color2.Blue(r'$')"
            },
            {
              "lineno": 30,
              "line": "        @Expect(blue1.toString(true), 'Color2.Blue(\\\\)')"
            },
            {
              "lineno": 31,
              "line": "        @Expect(blue2.toString(true), 'Color2.Blue($)')"
            },
            {
              "lineno": 32,
              "line": "        @Expect(blue1.toString(), 'Blue(\\\\)')"
            },
            {
              "lineno": 33,
              "line": "        @Expect(blue2.toString(), 'Blue($)')"
            },
            {
              "lineno": 34,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func runeTest(): Unit {\n        let blue1 = Color2.Blue(r'\\\\')\n        let blue2 = Color2.Blue(r'$')\n        @Expect(blue1.toString(true), 'Color2.Blue(\\\\)')\n        @Expect(blue2.toString(true), 'Color2.Blue($)')\n        @Expect(blue1.toString(), 'Blue(\\\\)')\n        @Expect(blue2.toString(), 'Blue($)')\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "noNestedPrimTest",
          "type": "function",
          "start_line": 37,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 37,
              "line": "    func noNestedPrimTest(): Unit {"
            },
            {
              "lineno": 38,
              "line": "        let green1 = Color2.Green(false)"
            },
            {
              "lineno": 39,
              "line": "        let green2 = Color2.Green(true)"
            },
            {
              "lineno": 40,
              "line": "        @Expect(green1.toString(true), 'Color2.Green(false)')"
            },
            {
              "lineno": 41,
              "line": "        @Expect(green2.toString(true), 'Color2.Green(true)')"
            },
            {
              "lineno": 42,
              "line": "        @Expect(green1.toString(), 'Green(false)')"
            },
            {
              "lineno": 43,
              "line": "        @Expect(green2.toString(), 'Green(true)')"
            },
            {
              "lineno": 44,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func noNestedPrimTest(): Unit {\n        let green1 = Color2.Green(false)\n        let green2 = Color2.Green(true)\n        @Expect(green1.toString(true), 'Color2.Green(false)')\n        @Expect(green2.toString(true), 'Color2.Green(true)')\n        @Expect(green1.toString(), 'Green(false)')\n        @Expect(green2.toString(), 'Green(true)')\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "NestedTest",
          "type": "function",
          "start_line": 47,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    func NestedTest(): Unit {"
            },
            {
              "lineno": 48,
              "line": "        let rgba1 = Color2.RGBA(23, 54, 67, Color2.Red)"
            },
            {
              "lineno": 49,
              "line": "        let rgba2 = Color2.RGBA(2, 4, 6, Green(true))"
            },
            {
              "lineno": 50,
              "line": "        let rgba3 = Color2.RGBA(9, 3, 12, rgba2)"
            },
            {
              "lineno": 51,
              "line": "        @Expect(rgba1.toString(true), 'Color2.RGBA(23, 54, 67, Color2.Red)')"
            },
            {
              "lineno": 52,
              "line": "        @Expect(rgba2.toString(true), 'Color2.RGBA(2, 4, 6, Color2.Green(true))')"
            },
            {
              "lineno": 53,
              "line": "        @Expect(rgba3.toString(true), 'Color2.RGBA(9, 3, 12, Color2.RGBA(2, 4, 6, Color2.Green(true)))')"
            },
            {
              "lineno": 54,
              "line": "        @Expect(rgba1.toString(), 'RGBA(23, 54, 67, Red)')"
            },
            {
              "lineno": 55,
              "line": "        @Expect(rgba2.toString(), 'RGBA(2, 4, 6, Green(true))')"
            },
            {
              "lineno": 56,
              "line": "        @Expect(rgba3.toString(), 'RGBA(9, 3, 12, RGBA(2, 4, 6, Green(true)))')"
            },
            {
              "lineno": 57,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func NestedTest(): Unit {\n        let rgba1 = Color2.RGBA(23, 54, 67, Color2.Red)\n        let rgba2 = Color2.RGBA(2, 4, 6, Green(true))\n        let rgba3 = Color2.RGBA(9, 3, 12, rgba2)\n        @Expect(rgba1.toString(true), 'Color2.RGBA(23, 54, 67, Color2.Red)')\n        @Expect(rgba2.toString(true), 'Color2.RGBA(2, 4, 6, Color2.Green(true))')\n        @Expect(rgba3.toString(true), 'Color2.RGBA(9, 3, 12, Color2.RGBA(2, 4, 6, Color2.Green(true)))')\n        @Expect(rgba1.toString(), 'RGBA(23, 54, 67, Red)')\n        @Expect(rgba2.toString(), 'RGBA(2, 4, 6, Green(true))')\n        @Expect(rgba3.toString(), 'RGBA(9, 3, 12, RGBA(2, 4, 6, Green(true)))')\n    }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "class ToStringEnumTest {"
        },
        {
          "lineno": 19,
          "line": "    @TestCase"
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 26,
          "line": "    @TestCase"
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    @TestCase"
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 46,
          "line": "    @TestCase"
        },
        {
          "lineno": 58,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ToStringEnumTest {\n    @TestCase",
          "successors": [
            {
              "id": 3,
              "label": "\n    @TestCase",
              "successors": [
                {
                  "id": 5,
                  "label": "\n    @TestCase",
                  "successors": [
                    {
                      "id": 7,
                      "label": "\n    @TestCase",
                      "successors": [
                        {
                          "id": 9,
                          "label": "}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package enum_enhance.test"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "// import std.unittest.testmacro.*"
    },
    {
      "lineno": 4,
      "line": "// import std.unittest.*"
    },
    {
      "lineno": 5,
      "line": "import enum_enhance.{ToStringEnum, EquatableEnum}"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "@ToStringEnum"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": "@Test"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package enum_enhance.test\n\n// import std.unittest.testmacro.*\n// import std.unittest.*\nimport enum_enhance.{ToStringEnum, EquatableEnum}\n\n@ToStringEnum",
      "successors": [
        {
          "id": 3,
          "label": "\n\n\n@Test",
          "successors": []
        }
      ]
    }
  ]
}