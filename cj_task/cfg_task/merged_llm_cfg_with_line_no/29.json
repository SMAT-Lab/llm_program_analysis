{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 190,
  "functions": [],
  "classes": [
    {
      "name": "ByteArrayUtils",
      "type": "class",
      "start_line": 6,
      "end_line": 190,
      "functions": [
        {
          "name": "indexByte",
          "type": "function",
          "start_line": 9,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public static func indexByte(source: Array<Byte>, target: Byte): Int64 {"
            },
            {
              "lineno": 10,
              "line": "        for (i in 0 .. source.size) {"
            },
            {
              "lineno": 11,
              "line": "            if (source[i] == target) {"
            },
            {
              "lineno": 12,
              "line": "                return i"
            },
            {
              "lineno": 13,
              "line": "            }"
            },
            {
              "lineno": 14,
              "line": "        }"
            },
            {
              "lineno": 15,
              "line": "        return -1"
            },
            {
              "lineno": 16,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "   public static func indexByte(source: Array<Byte>, target: Byte): Int64 {",
              "successors": [
                {
                  "id": 2,
                  "label": "        for (i in 0 .. source.size) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            if (source[i] == target) {\n                return i",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "        return -1",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "littleEndianUint16",
          "type": "function",
          "start_line": 18,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    public static func littleEndianUint16(b: Array<Byte>):UInt16 {"
            },
            {
              "lineno": 19,
              "line": "        return UInt16(b[0]) | UInt16(b[1])<<8"
            },
            {
              "lineno": 20,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func littleEndianUint16(b: Array<Byte>):UInt16 {\n        return UInt16(b[0]) | UInt16(b[1])<<8",
              "successors": []
            }
          ]
        },
        {
          "name": "littleEndianUint32",
          "type": "function",
          "start_line": 22,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    public static func littleEndianUint32(b: Array<Byte>):UInt32 {"
            },
            {
              "lineno": 23,
              "line": "        return UInt32(b[0]) | UInt32(b[1])<<8 | UInt32(b[2])<<16 | UInt32(b[3]) << 24"
            },
            {
              "lineno": 24,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func littleEndianUint32(b: Array<Byte>):UInt32 {\n        return UInt32(b[0]) | UInt32(b[1])<<8 | UInt32(b[2])<<16 | UInt32(b[3]) << 24",
              "successors": []
            }
          ]
        },
        {
          "name": "scrambleCachingSha2",
          "type": "function",
          "start_line": 26,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    public static func scrambleCachingSha2(cipher: Array<Byte>, passwd: Array<Byte>):Array<Byte> {"
            },
            {
              "lineno": 27,
              "line": "        // 使用本包需要外部依赖 OpenSSL 3 的 crypto 动态库文件，故使用前需安装相关工具。"
            },
            {
              "lineno": 28,
              "line": "        // 并配置环境变量"
            },
            {
              "lineno": 29,
              "line": "        var sha2Instance = SHA256()"
            },
            {
              "lineno": 30,
              "line": "        var dig1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)"
            },
            {
              "lineno": 31,
              "line": "        var dig2 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)"
            },
            {
              "lineno": 32,
              "line": "        var scramble1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)"
            },
            {
              "lineno": 33,
              "line": "        "
            },
            {
              "lineno": 34,
              "line": "        sha2Instance.write(passwd)"
            },
            {
              "lineno": 35,
              "line": "        dig1 = sha2Instance.finish()"
            },
            {
              "lineno": 36,
              "line": "        sha2Instance.reset()"
            },
            {
              "lineno": 37,
              "line": "        sha2Instance.write(dig1)"
            },
            {
              "lineno": 38,
              "line": "        dig2 = sha2Instance.finish()"
            },
            {
              "lineno": 39,
              "line": "        sha2Instance.reset()"
            },
            {
              "lineno": 40,
              "line": "        sha2Instance.write(dig2)"
            },
            {
              "lineno": 41,
              "line": "        sha2Instance.write(cipher)"
            },
            {
              "lineno": 42,
              "line": "        scramble1 = sha2Instance.finish()"
            },
            {
              "lineno": 43,
              "line": "        sha2Instance.reset()"
            },
            {
              "lineno": 44,
              "line": "        var mysqlScrambleBuff = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)"
            },
            {
              "lineno": 45,
              "line": "        xorString(dig1, mysqlScrambleBuff, scramble1, CACHING_SHA2_DIGEST_LENGTH)"
            },
            {
              "lineno": 46,
              "line": "        return mysqlScrambleBuff"
            },
            {
              "lineno": 47,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public static func scrambleCachingSha2(cipher: Array<Byte>, passwd: Array<Byte>):Array<Byte> {\n        // 使用本包需要外部依赖 OpenSSL 3 的 crypto 动态库文件，故使用前需安装相关工具。\n        // 并配置环境变量\n        var sha2Instance = SHA256()\n        var dig1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n        var dig2 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n        var scramble1 = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\n        \n        sha2Instance.write(passwd)\n        dig1 = sha2Instance.finish()\n        sha2Instance.reset()\n        sha2Instance.write(dig1)\n        dig2 = sha2Instance.finish()\n        sha2Instance.reset()\n        sha2Instance.write(dig2)\n        sha2Instance.write(cipher)\n        scramble1 = sha2Instance.finish()\n        sha2Instance.reset()\n        var mysqlScrambleBuff = Array<Byte>(CACHING_SHA2_DIGEST_LENGTH, item: 0)\nxorString(dig1, mysqlScrambleBuff, scramble1, CACHING_SHA2_DIGEST_LENGTH)\n        return mysqlScrambleBuff",
              "successors": []
            }
          ]
        },
        {
          "name": "scrambleRSA",
          "type": "function",
          "start_line": 49,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    public static func scrambleRSA(password: String, publicKey: Array<Byte>, cipher: Array<Byte>): Array<Byte> {"
            },
            {
              "lineno": 50,
              "line": "        var input: Array<Byte>"
            },
            {
              "lineno": 51,
              "line": "        if(password.toArray().size == 0) {"
            },
            {
              "lineno": 52,
              "line": "            input = Array<Byte>(1, item: 0)"
            },
            {
              "lineno": 53,
              "line": "        } else {"
            },
            {
              "lineno": 54,
              "line": "            input = Array<Byte>(password.toArray().size + 1, item: 0)"
            },
            {
              "lineno": 55,
              "line": "            password.toArray().copyTo(input, 0, 0, password.toArray().size)"
            },
            {
              "lineno": 56,
              "line": "            input[password.toArray().size] = 0"
            },
            {
              "lineno": 57,
              "line": "        }"
            },
            {
              "lineno": 58,
              "line": ""
            },
            {
              "lineno": 59,
              "line": "        var mysqlScrambleBuff = Array<Byte>(input.size, item: 0)"
            },
            {
              "lineno": 60,
              "line": "        xorString(input, mysqlScrambleBuff, cipher, input.size)"
            },
            {
              "lineno": 61,
              "line": "        var rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))"
            },
            {
              "lineno": 62,
              "line": "       "
            },
            {
              "lineno": 63,
              "line": "        var byteArraySteam1 = ByteArrayStream()"
            },
            {
              "lineno": 64,
              "line": "        byteArraySteam1.write(mysqlScrambleBuff)"
            },
            {
              "lineno": 65,
              "line": "        "
            },
            {
              "lineno": 66,
              "line": "        var byteArraySteam2 = ByteArrayStream()"
            },
            {
              "lineno": 67,
              "line": "        var opt = OAEPOption(SHA1(),SHA1())"
            },
            {
              "lineno": 68,
              "line": "        rsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))"
            },
            {
              "lineno": 69,
              "line": "        // rsaPub.encrypt(byteArraySteam1, byteArraySteam2, padType: PadOption.PKCS1)"
            },
            {
              "lineno": 70,
              "line": "        var buffer = Array<Byte>(1024, item: 0)"
            },
            {
              "lineno": 71,
              "line": "        var len = byteArraySteam2.read(buffer)"
            },
            {
              "lineno": 72,
              "line": "        var res = Array<Byte>(len, item: 0)"
            },
            {
              "lineno": 73,
              "line": "        buffer.copyTo(res, 0, 0, len)"
            },
            {
              "lineno": 74,
              "line": "        return res"
            },
            {
              "lineno": 75,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public static func scrambleRSA(password: String, publicKey: Array<Byte>, cipher: Array<Byte>): Array<Byte> {\n    var input: Array<Byte>\nif(password.toArray().size == 0) {",
              "successors": [
                {
                  "id": 3,
                  "label": "input = Array<Byte>(1, item: 0)\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "var mysqlScrambleBuff = Array<Byte>(input.size, item: 0)\n        xorString(input, mysqlScrambleBuff, cipher, input.size)\n        var rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))\n\n        var byteArraySteam1 = ByteArrayStream()\n        byteArraySteam1.write(mysqlScrambleBuff)\n        \n        var byteArraySteam2 = ByteArrayStream()\n        var opt = OAEPOption(SHA1(),SHA1())\n        rsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))\n        // rsaPub.encrypt(byteArraySteam1, byteArraySteam2, padType: PadOption.PKCS1)\n        var buffer = Array<Byte>(1024, item: 0)\n        var len = byteArraySteam2.read(buffer)\n        var res = Array<Byte>(len, item: 0)\n        buffer.copyTo(res, 0, 0, len)\n        return res",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "} else {\n            input = Array<Byte>(password.toArray().size + 1, item: 0)\n            password.toArray().copyTo(input, 0, 0, password.toArray().size)\n            input[password.toArray().size] = 0\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "var mysqlScrambleBuff = Array<Byte>(input.size, item: 0)\n        xorString(input, mysqlScrambleBuff, cipher, input.size)\n        var rsaPub = RSAPublicKey.decodeFromPem(String.fromUtf8(publicKey))\n\n        var byteArraySteam1 = ByteArrayStream()\n        byteArraySteam1.write(mysqlScrambleBuff)\n        \n        var byteArraySteam2 = ByteArrayStream()\n        var opt = OAEPOption(SHA1(),SHA1())\n        rsaPub.encrypt(byteArraySteam1,byteArraySteam2,padType:OAEP(opt))\n        // rsaPub.encrypt(byteArraySteam1, byteArraySteam2, padType: PadOption.PKCS1)\n        var buffer = Array<Byte>(1024, item: 0)\n        var len = byteArraySteam2.read(buffer)\n        var res = Array<Byte>(len, item: 0)\n        buffer.copyTo(res, 0, 0, len)\n        return res",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "xorString",
          "type": "function",
          "start_line": 77,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 77,
              "line": "    public static func xorString(src: Array<Byte>, to: Array<Byte>,scramble:Array<Byte>,len:Int64) {"
            },
            {
              "lineno": 78,
              "line": "        var pos = 0"
            },
            {
              "lineno": 79,
              "line": "        var scrambleLen = scramble.size"
            },
            {
              "lineno": 80,
              "line": "        while (pos < len) {"
            },
            {
              "lineno": 81,
              "line": "            to[pos] = src[pos] ^ scramble[pos % scrambleLen]"
            },
            {
              "lineno": 82,
              "line": "            pos++"
            },
            {
              "lineno": 83,
              "line": "        }"
            },
            {
              "lineno": 84,
              "line": "    }  "
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public static func xorString(src: Array<Byte>, to: Array<Byte>,scramble:Array<Byte>,len:Int64) {\nvar pos = 0\nvar scrambleLen = scramble.size",
              "successors": [
                {
                  "id": 3,
                  "label": "while (pos < len) {\n    to[pos] = src[pos] ^ scramble[pos % scrambleLen]\n    pos++\n}",
                  "successors": [
                    {
                      "id": 4,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "appendLengthEncodedInteger",
          "type": "function",
          "start_line": 86,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 86,
              "line": "    public static func appendLengthEncodedInteger(n: UInt64): Array<Byte> {"
            },
            {
              "lineno": 87,
              "line": "        let result = ArrayList<Byte>()"
            },
            {
              "lineno": 88,
              "line": "        if (n <= 250) {"
            },
            {
              "lineno": 89,
              "line": "            result.append(UInt8(n))"
            },
            {
              "lineno": 90,
              "line": "        } else if (n <= 0xffff) {"
            },
            {
              "lineno": 91,
              "line": "            result.append(0xfc)"
            },
            {
              "lineno": 92,
              "line": "            result.append(UInt8(n & 0xff))"
            },
            {
              "lineno": 93,
              "line": "            result.append(UInt8(n >> 8 & 0xff))"
            },
            {
              "lineno": 94,
              "line": "        } else if (n <= 0xffffff) {"
            },
            {
              "lineno": 95,
              "line": "            result.append(0xfd)"
            },
            {
              "lineno": 96,
              "line": "            result.append(UInt8(n & 0xff))"
            },
            {
              "lineno": 97,
              "line": "            result.append(UInt8(n >> 8 & 0xff))"
            },
            {
              "lineno": 98,
              "line": "            result.append(UInt8(n >> 16 & 0xff))"
            },
            {
              "lineno": 99,
              "line": "        } else {"
            },
            {
              "lineno": 100,
              "line": "            result.append(0xfe)"
            },
            {
              "lineno": 101,
              "line": "            result.append(UInt8(n & 0xff))"
            },
            {
              "lineno": 102,
              "line": "            result.append(UInt8(n >> 8 & 0xff))"
            },
            {
              "lineno": 103,
              "line": "            result.append(UInt8(n >> 16 & 0xff))"
            },
            {
              "lineno": 104,
              "line": "            result.append(UInt8(n >> 24 & 0xff))"
            },
            {
              "lineno": 105,
              "line": "            result.append(UInt8(n >> 32 & 0xff))"
            },
            {
              "lineno": 106,
              "line": "            result.append(UInt8(n >> 40 & 0xff))"
            },
            {
              "lineno": 107,
              "line": "            result.append(UInt8(n >> 48 & 0xff))"
            },
            {
              "lineno": 108,
              "line": "            result.append(UInt8(n >> 56 & 0xff))"
            },
            {
              "lineno": 109,
              "line": "        }"
            },
            {
              "lineno": 110,
              "line": "        return result.toArray()"
            },
            {
              "lineno": 111,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func appendLengthEncodedInteger(n: UInt64): Array<Byte> {\n        let result = ArrayList<Byte>()\n        if (n <= 250) {\n            result.append(UInt8(n))\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        else if (n <= 0xffff) {\n            result.append(0xfc)\n            result.append(UInt8(n & 0xff))\n            result.append(UInt8(n >> 8 & 0xff))\n        }\n        else if (n <= 0xffffff) {\n            result.append(0xfd)\n            result.append(UInt8(n & 0xff))\n            result.append(UInt8(n >> 8 & 0xff))\n            result.append(UInt8(n >> 16 & 0xff))\n        }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        else {\n            result.append(0xfe)\n            result.append(UInt8(n & 0xff))\n            result.append(UInt8(n >> 8 & 0xff))\n            result.append(UInt8(n >> 16 & 0xff))\n            result.append(UInt8(n >> 24 & 0xff))\n            result.append(UInt8(n >> 32 & 0xff))\n            result.append(UInt8(n >> 40 & 0xff))\n            result.append(UInt8(n >> 48 & 0xff))\n            result.append(UInt8(n >> 56 & 0xff))\n        }\n        return result.toArray()\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "uint64ToBytes",
          "type": "function",
          "start_line": 113,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 113,
              "line": "    public static func uint64ToBytes(n: UInt64): Array<Byte> {"
            },
            {
              "lineno": 114,
              "line": "        let result = ArrayList<Byte>()"
            },
            {
              "lineno": 115,
              "line": "        result.append(UInt8(n & 0xff))"
            },
            {
              "lineno": 116,
              "line": "        result.append(UInt8(n >> 8 & 0xff))"
            },
            {
              "lineno": 117,
              "line": "        result.append(UInt8(n >> 16 & 0xff))"
            },
            {
              "lineno": 118,
              "line": "        result.append(UInt8(n >> 24 & 0xff))"
            },
            {
              "lineno": 119,
              "line": "        result.append(UInt8(n >> 32 & 0xff))"
            },
            {
              "lineno": 120,
              "line": "        result.append(UInt8(n >> 40 & 0xff))"
            },
            {
              "lineno": 121,
              "line": "        result.append(UInt8(n >> 48 & 0xff))"
            },
            {
              "lineno": 122,
              "line": "        result.append(UInt8(n >> 56 & 0xff))"
            },
            {
              "lineno": 123,
              "line": "        return result.toArray()"
            },
            {
              "lineno": 124,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public static func uint64ToBytes(n: UInt64): Array<Byte> {\nlet result = ArrayList<Byte>()\nresult.append(UInt8(n & 0xff))\nresult.append(UInt8(n >> 8 & 0xff))\nresult.append(UInt8(n >> 16 & 0xff))\nresult.append(UInt8(n >> 24 & 0xff))\nresult.append(UInt8(n >> 32 & 0xff))\nresult.append(UInt8(n >> 40 & 0xff))\nresult.append(UInt8(n >> 48 & 0xff))\nresult.append(UInt8(n >> 56 & 0xff))",
              "successors": [
                {
                  "id": 3,
                  "label": "return result.toArray()\n}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "uint32ToBytes",
          "type": "function",
          "start_line": 126,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 126,
              "line": "    public static func uint32ToBytes(n: UInt32): Array<Byte> {"
            },
            {
              "lineno": 127,
              "line": "        let result = ArrayList<Byte>()"
            },
            {
              "lineno": 128,
              "line": "        result.append(UInt8(n & 0xff))"
            },
            {
              "lineno": 129,
              "line": "        result.append(UInt8(n >> 8 & 0xff))"
            },
            {
              "lineno": 130,
              "line": "        result.append(UInt8(n >> 16 & 0xff))"
            },
            {
              "lineno": 131,
              "line": "        result.append(UInt8(n >> 24 & 0xff))"
            },
            {
              "lineno": 132,
              "line": "        return result.toArray()"
            },
            {
              "lineno": 133,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func uint32ToBytes(n: UInt32): Array<Byte> {\n        let result = ArrayList<Byte>()\n        result.append(UInt8(n & 0xff))\n        result.append(UInt8(n >> 8 & 0xff))\n        result.append(UInt8(n >> 16 & 0xff))\n        result.append(UInt8(n >> 24 & 0xff))\n        return result.toArray()\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "readLengthEncodedString",
          "type": "function",
          "start_line": 135,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 135,
              "line": "    public static func readLengthEncodedString(data: Array<Byte>) {"
            },
            {
              "lineno": 136,
              "line": "        let result = readLengthEncodedInteger(data)"
            },
            {
              "lineno": 137,
              "line": "        var num = result[0]"
            },
            {
              "lineno": 138,
              "line": "        var isNull = result[1]"
            },
            {
              "lineno": 139,
              "line": "        var n = result[2]"
            },
            {
              "lineno": 140,
              "line": "        if (num < 1) {"
            },
            {
              "lineno": 141,
              "line": "            return (data[n..n], isNull, n)"
            },
            {
              "lineno": 142,
              "line": "        }"
            },
            {
              "lineno": 143,
              "line": ""
            },
            {
              "lineno": 144,
              "line": "        n += Int64(num)"
            },
            {
              "lineno": 145,
              "line": "        if (data.size >= n) {"
            },
            {
              "lineno": 146,
              "line": "            return (data[n - Int64(num) .. n], false, n)"
            },
            {
              "lineno": 147,
              "line": "        }"
            },
            {
              "lineno": 148,
              "line": "        return (Array<Byte>(), false, n)"
            },
            {
              "lineno": 149,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func readLengthEncodedString(data: Array<Byte>) {\n        let result = readLengthEncodedInteger(data)\n        var num = result[0]\n        var isNull = result[1]\n        var n = result[2]",
              "successors": [
                {
                  "id": 3,
                  "label": "        if (num < 1) {\n            return (data[n..n], isNull, n)\n        }\n        n += Int64(num)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        if (data.size >= n) {\n            return (data[n - Int64(num) .. n], false, n)\n        }\n        return (Array<Byte>(), false, n)\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "lengthEncoderInteger",
          "type": "function",
          "start_line": 150,
          "end_line": 160,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 150,
              "line": "    public static func lengthEncoderInteger(number: UInt64): Array<Byte> {"
            },
            {
              "lineno": 151,
              "line": "        let result = ArrayList<Byte>()"
            },
            {
              "lineno": 152,
              "line": "        if (number <= 250) {"
            },
            {
              "lineno": 153,
              "line": "            result.append(UInt8(number))"
            },
            {
              "lineno": 154,
              "line": "        } else if (number <= 0xffff) {"
            },
            {
              "lineno": 155,
              "line": "             result.append(UInt8(0xfc))"
            },
            {
              "lineno": 156,
              "line": ""
            },
            {
              "lineno": 157,
              "line": "        }"
            },
            {
              "lineno": 158,
              "line": ""
            },
            {
              "lineno": 159,
              "line": "        return result.toArray()"
            },
            {
              "lineno": 160,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func lengthEncoderInteger(number: UInt64): Array<Byte> {\n        let result = ArrayList<Byte>()",
              "successors": [
                {
                  "id": 2,
                  "label": "        if (number <= 250) {\n            result.append(UInt8(number))\n        }\n\n        return result.toArray()",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        else if (number <= 0xffff) {\n             result.append(UInt8(0xfc))\n        }\n\n        return result.toArray()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "readLengthEncodedInteger",
          "type": "function",
          "start_line": 167,
          "end_line": 187,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 167,
              "line": "    public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {"
            },
            {
              "lineno": 168,
              "line": "        match(data[0]) {"
            },
            {
              "lineno": 169,
              "line": "            case 251 => "
            },
            {
              "lineno": 170,
              "line": "                return (0, true, 1)"
            },
            {
              "lineno": 171,
              "line": "            case 252 => "
            },
            {
              "lineno": 172,
              "line": "                return ("
            },
            {
              "lineno": 173,
              "line": "                    UInt64(data[1]) | UInt64(data[2])<<8, false, 3"
            },
            {
              "lineno": 174,
              "line": "                )"
            },
            {
              "lineno": 175,
              "line": "            case 253 => "
            },
            {
              "lineno": 176,
              "line": "                return ("
            },
            {
              "lineno": 177,
              "line": "                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16, false, 4"
            },
            {
              "lineno": 178,
              "line": "                )"
            },
            {
              "lineno": 179,
              "line": "            case 254 => "
            },
            {
              "lineno": 180,
              "line": "                return ("
            },
            {
              "lineno": 181,
              "line": "                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16 | UInt64(data[4]) << 24 |"
            },
            {
              "lineno": 182,
              "line": "                    UInt64(data[5]) << 32 | UInt64(data[6]) << 40 | UInt64(data[7]) << 48 | UInt64(data[8]) << 56,"
            },
            {
              "lineno": 183,
              "line": "                    false, 9"
            },
            {
              "lineno": 184,
              "line": "                )"
            },
            {
              "lineno": 185,
              "line": "            case _ => return (UInt64(data[0]), false , 1)"
            },
            {
              "lineno": 186,
              "line": "        }"
            },
            {
              "lineno": 187,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func readLengthEncodedInteger(data: Array<Byte>): (UInt64, Bool, Int64) {\n        match(data[0]) {",
              "successors": [
                {
                  "id": 2,
                  "label": "            case 251 => \n                return (0, true, 1)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "            case 252 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8, false, 3\n                )",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "            case 253 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16, false, 4\n                )",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "            case 254 => \n                return (\n                    UInt64(data[1]) | UInt64(data[2])<<8 | UInt64(data[3])<<16 | UInt64(data[4]) << 24 |\n                    UInt64(data[5]) << 32 | UInt64(data[6]) << 40 | UInt64(data[7]) << 48 | UInt64(data[8]) << 56,\n                    false, 9\n                )",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "            case _ => return (UInt64(data[0]), false , 1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public class ByteArrayUtils {"
        },
        {
          "lineno": 7,
          "line": "    private static var CACHING_SHA2_DIGEST_LENGTH = 32"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 112,
          "line": ""
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 134,
          "line": ""
        },
        {
          "lineno": 161,
          "line": ""
        },
        {
          "lineno": 162,
          "line": "    /*"
        },
        {
          "lineno": 163,
          "line": "        第一个参数，the number"
        },
        {
          "lineno": 164,
          "line": "        第二个参数，数值是否为NULL"
        },
        {
          "lineno": 165,
          "line": "        第三个参数，所占字节数"
        },
        {
          "lineno": 166,
          "line": "    */"
        },
        {
          "lineno": 188,
          "line": ""
        },
        {
          "lineno": 189,
          "line": ""
        },
        {
          "lineno": 190,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class ByteArrayUtils {\n    private static var CACHING_SHA2_DIGEST_LENGTH = 32\n    /*\n        第一个参数，the number\n        第二个参数，数值是否为NULL\n        第三个参数，所占字节数\n    */",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package cangjieWeb.utils"
    },
    {
      "lineno": 2,
      "line": "import std.collection.{ArrayList}"
    },
    {
      "lineno": 3,
      "line": "import crypto.digest.{SHA256, SHA1}"
    },
    {
      "lineno": 4,
      "line": "import crypto.keys.{RSAPublicKey, PadOption, OAEPOption}"
    },
    {
      "lineno": 5,
      "line": "import std.io.ByteArrayStream"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package cangjieWeb.utils\nimport std.collection.{ArrayList}\nimport crypto.digest.{SHA256, SHA1}\nimport crypto.keys.{RSAPublicKey, PadOption, OAEPOption}\nimport std.io.ByteArrayStream",
      "successors": []
    }
  ]
}