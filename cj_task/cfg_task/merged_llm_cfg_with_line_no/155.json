{
  "name": "mimetype",
  "type": "CFG",
  "start_line": 1,
  "end_line": 36,
  "functions": [
    {
      "name": "isShp",
      "type": "function",
      "start_line": 2,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "func isShp(raw: Array<UInt8>, _: UInt32): Bool {"
        },
        {
          "lineno": 3,
          "line": "    if (raw.size < 112) {"
        },
        {
          "lineno": 4,
          "line": "        false"
        },
        {
          "lineno": 5,
          "line": "    } else if (!(bigEndianUInt32(raw[0..4]) == 9994 && bigEndianUInt32(raw[4..8]) == 0 && bigEndianUInt32(raw[8..12]) =="
        },
        {
          "lineno": 6,
          "line": "        0 && bigEndianUInt32(raw[12..16]) == 0 && bigEndianUInt32(raw[16..20]) == 0 && bigEndianUInt32(raw[20..24]) == 0 &&"
        },
        {
          "lineno": 7,
          "line": "        littleEndianUInt32(raw[28..32]) == 1000)) {"
        },
        {
          "lineno": 8,
          "line": "        false"
        },
        {
          "lineno": 9,
          "line": "    } else {"
        },
        {
          "lineno": 10,
          "line": "        let shapeTypes: Array<Int32> = ["
        },
        {
          "lineno": 11,
          "line": "            0, // Null shape"
        },
        {
          "lineno": 12,
          "line": "            1, // Point"
        },
        {
          "lineno": 13,
          "line": "            3, // Polyline"
        },
        {
          "lineno": 14,
          "line": "            5, // Polygon"
        },
        {
          "lineno": 15,
          "line": "            8, // MultiPoint"
        },
        {
          "lineno": 16,
          "line": "            11, // PointZ"
        },
        {
          "lineno": 17,
          "line": "            13, // PolylineZ"
        },
        {
          "lineno": 18,
          "line": "            15, // PolygonZ"
        },
        {
          "lineno": 19,
          "line": "            18, // MultiPointZ"
        },
        {
          "lineno": 20,
          "line": "            21, // PointM"
        },
        {
          "lineno": 21,
          "line": "            23, // PolylineM"
        },
        {
          "lineno": 22,
          "line": "            25, // PolygonM"
        },
        {
          "lineno": 23,
          "line": "            28, // MultiPointM"
        },
        {
          "lineno": 24,
          "line": "            31 // MultiPatch"
        },
        {
          "lineno": 25,
          "line": "        ]"
        },
        {
          "lineno": 26,
          "line": "        for (st in shapeTypes) {"
        },
        {
          "lineno": 27,
          "line": "            if (st == Int32(littleEndianUInt32(raw[108..112]))) {"
        },
        {
          "lineno": 28,
          "line": "                return true"
        },
        {
          "lineno": 29,
          "line": "            }"
        },
        {
          "lineno": 30,
          "line": "        }"
        },
        {
          "lineno": 31,
          "line": "        false"
        },
        {
          "lineno": 32,
          "line": "    }"
        },
        {
          "lineno": 33,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func isShp(raw: Array<UInt8>, _: UInt32): Bool {\nif (raw.size < 112) {",
          "successors": [
            {
              "id": 3,
              "label": "false",
              "successors": []
            },
            {
              "id": 4,
              "label": "else if (!(bigEndianUInt32(raw[0..4]) == 9994 && bigEndianUInt32(raw[4..8]) == 0 && bigEndianUInt32(raw[8..12]) == 0 && bigEndianUInt32(raw[12..16]) == 0 && bigEndianUInt32(raw[16..20]) == 0 && bigEndianUInt32(raw[20..24]) == 0 && littleEndianUInt32(raw[28..32]) == 1000)) {",
              "successors": [
                {
                  "id": 5,
                  "label": "false",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "else {",
                  "successors": [
                    {
                      "id": 7,
                      "label": "let shapeTypes: Array<Int32> = [\n    0, // Null shape\n    1, // Point\n    3, // Polyline\n    5, // Polygon\n    8, // MultiPoint\n    11, // PointZ\n    13, // PolylineZ\n    15, // PolygonZ\n    18, // MultiPointZ\n    21, // PointM\n    23, // PolylineM\n    25, // PolygonM\n    28, // MultiPointM\n    31 // MultiPatch\n]",
                      "successors": [
                        {
                          "id": 8,
                          "label": "for (st in shapeTypes) {",
                          "successors": [
                            {
                              "id": 9,
                              "label": "if (st == Int32(littleEndianUInt32(raw[108..112]))) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "return true",
                                  "successors": []
                                },
                                {
                                  "id": 11,
                                  "label": "}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "label": "false",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "label": "}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "isShx",
      "type": "function",
      "start_line": 34,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 34,
          "line": "func isShx(raw: Array<UInt8>, _: UInt32): Bool {"
        },
        {
          "lineno": 35,
          "line": "    hasPrefix(raw, [0x00, 0x00, 0x27, 0x0A])"
        },
        {
          "lineno": 36,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func isShx(raw: Array<UInt8>, _: UInt32): Bool {\n    hasPrefix(raw, [0x00, 0x00, 0x27, 0x0A])\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package mimetype"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package mimetype",
      "successors": []
    }
  ]
}