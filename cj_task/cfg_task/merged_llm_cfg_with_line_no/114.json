{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 26,
  "functions": [
    {
      "name": "parseInt",
      "type": "function",
      "start_line": 3,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "func parseInt(text: String): Option<Int64> {"
        },
        {
          "lineno": 4,
          "line": "    if (text.isEmpty() || text == \"-\") {"
        },
        {
          "lineno": 5,
          "line": "        return None"
        },
        {
          "lineno": 6,
          "line": "    }"
        },
        {
          "lineno": 7,
          "line": "    var sign = if (text[0] == 45u8) { 1 } else { 0 }"
        },
        {
          "lineno": 8,
          "line": "    var sum = 0"
        },
        {
          "lineno": 9,
          "line": "    for (i in sign..text.size) {"
        },
        {
          "lineno": 10,
          "line": "        if (text[i] > 57u8 || text[i] < 48u8) {"
        },
        {
          "lineno": 11,
          "line": "            return None"
        },
        {
          "lineno": 12,
          "line": "        }"
        },
        {
          "lineno": 13,
          "line": "        let digit = Int64(text[i] - 48u8)"
        },
        {
          "lineno": 14,
          "line": "        sum = 10 * sum + digit"
        },
        {
          "lineno": 15,
          "line": "    }"
        },
        {
          "lineno": 16,
          "line": "    return if (sign == 1) { -sum } else { sum }"
        },
        {
          "lineno": 17,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func parseInt(text: String): Option<Int64> {\nif (text.isEmpty() || text == \"-\") {\n    return None\n}",
          "successors": [
            {
              "id": 3,
              "label": "var sign = if (text[0] == 45u8) { 1 } else { 0 }\nvar sum = 0",
              "successors": [
                {
                  "id": 4,
                  "label": "for (i in sign..text.size) {",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if (text[i] > 57u8 || text[i] < 48u8) {\n    return None\n}\nlet digit = Int64(text[i] - 48u8)\nsum = 10 * sum + digit",
                      "successors": [
                        {
                          "id": 7,
                          "label": "}\nreturn if (sign == 1) { -sum } else { sum }\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 19,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 19,
          "line": "main() {"
        },
        {
          "lineno": 20,
          "line": "    let number = parseInt(\"-123456\")"
        },
        {
          "lineno": 21,
          "line": "    println(number.getOrThrow())"
        },
        {
          "lineno": 22,
          "line": "    let result = parseInt(\"123-456\")"
        },
        {
          "lineno": 23,
          "line": "    if (result.isNone()) {"
        },
        {
          "lineno": 24,
          "line": "        println(\"parse failed\")"
        },
        {
          "lineno": 25,
          "line": "    }"
        },
        {
          "lineno": 26,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "main() {\nlet number = parseInt(\"-123456\")\n    println(number.getOrThrow())",
          "successors": [
            {
              "id": 3,
              "label": "let result = parseInt(\"123-456\")\n    if (result.isNone()) {",
              "successors": [
                {
                  "id": 4,
                  "label": "println(\"parse failed\")\n}\n}",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "}\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 从字符串解析整数，演示基于 Option 的异常处理"
    },
    {
      "lineno": 2,
      "line": "// cjc version: 0.53.13"
    },
    {
      "lineno": 18,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "// 从字符串解析整数，演示基于 Option 的异常处理",
      "successors": []
    }
  ]
}