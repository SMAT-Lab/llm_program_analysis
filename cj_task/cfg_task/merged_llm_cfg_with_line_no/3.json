{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 232,
  "functions": [
    {
      "name": "safeParseExprFragment",
      "type": "function",
      "start_line": 21,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "func safeParseExprFragment(t: Tokens, start: Int64): Option<(Expr, Int64)> {"
        },
        {
          "lineno": 22,
          "line": "    try {"
        },
        {
          "lineno": 23,
          "line": "        let (expr, next) = parseExprFragment(t, startFrom: start)"
        },
        {
          "lineno": 24,
          "line": "        return Some((expr, next))"
        },
        {
          "lineno": 25,
          "line": "    } catch (e: ParseASTException) {"
        },
        {
          "lineno": 26,
          "line": "        return None"
        },
        {
          "lineno": 27,
          "line": "    }"
        },
        {
          "lineno": 28,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func safeParseExprFragment(t: Tokens, start: Int64): Option<(Expr, Int64)> {",
          "successors": [
            {
              "id": 2,
              "label": "try {\n    let (expr, next) = parseExprFragment(t, startFrom: start)\n    return Some((expr, next))",
              "successors": []
            },
            {
              "id": 3,
              "label": "catch (e: ParseASTException) {\n    return None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "wrap",
      "type": "function",
      "start_line": 30,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 30,
          "line": "func wrap(tt: Tokens): Tokens {"
        },
        {
          "lineno": 31,
          "line": "    return quote({=> $(tt) }())"
        },
        {
          "lineno": 32,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func wrap(tt: Tokens): Tokens {\n    return quote({=> $(tt) }())\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "getIdent",
      "type": "function",
      "start_line": 34,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 34,
          "line": "func getIdent(s: String): Token {"
        },
        {
          "lineno": 35,
          "line": "    return Token(TokenKind.IDENTIFIER, s)"
        },
        {
          "lineno": 36,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func getIdent(s: String): Token {\n    return Token(TokenKind.IDENTIFIER, s)\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "parseValue",
      "type": "function",
      "start_line": 38,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 38,
          "line": "func parseValue(t: Tokens, start: Int64): (Tokens, Int64) {"
        },
        {
          "lineno": 39,
          "line": "    let tf = t[start]"
        },
        {
          "lineno": 40,
          "line": "    match (tf.kind) {"
        },
        {
          "lineno": 41,
          "line": "        case TokenKind.LCURL => return parseObject(t, start + 1)"
        },
        {
          "lineno": 42,
          "line": "        case TokenKind.LSQUARE => return parseArray(t, start + 1)"
        },
        {
          "lineno": 43,
          "line": "        case TokenKind.IDENTIFIER where (tf.value == \"null\" || tf.value == \"None\") => return (quote(JsonNull()), start +"
        },
        {
          "lineno": 44,
          "line": "                1)"
        },
        {
          "lineno": 45,
          "line": "        case _ => if (let Some((expr, next)) <- safeParseExprFragment(t, start)) {"
        },
        {
          "lineno": 46,
          "line": "            let exprTokens = expr.toTokens()"
        },
        {
          "lineno": 47,
          "line": "            if (exprTokens.size > 1) {"
        },
        {
          "lineno": 48,
          "line": "                return (quote(castJsonValue($(expr))), next)"
        },
        {
          "lineno": 49,
          "line": "            }"
        },
        {
          "lineno": 50,
          "line": "            let first = exprTokens[0]"
        },
        {
          "lineno": 51,
          "line": "            match (first.kind) {"
        },
        {
          "lineno": 52,
          "line": "                case TokenKind.STRING_LITERAL => return (quote(JsonString($(first))), next)"
        },
        {
          "lineno": 53,
          "line": "                case TokenKind.INTEGER_LITERAL => return (quote(JsonInt($(first))), next)"
        },
        {
          "lineno": 54,
          "line": "                case TokenKind.FLOAT_LITERAL => return (quote(JsonFloat($(first))), next)"
        },
        {
          "lineno": 55,
          "line": "                case TokenKind.BOOL_LITERAL => return (quote(JsonBool($(first))), next)"
        },
        {
          "lineno": 56,
          "line": "                case _ => return (quote(castJsonValue($(expr))), next)"
        },
        {
          "lineno": 57,
          "line": "            }"
        },
        {
          "lineno": 58,
          "line": "        } else {"
        },
        {
          "lineno": 59,
          "line": "            diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${tf.value} in parseValue\", \"Unexpected token\")"
        },
        {
          "lineno": 60,
          "line": "            throw Exception(\"Unexpected token ${tf.value} in parseValue\")"
        },
        {
          "lineno": 61,
          "line": "        }"
        },
        {
          "lineno": 62,
          "line": "    }"
        },
        {
          "lineno": 63,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func parseValue(t: Tokens, start: Int64): (Tokens, Int64) {\n    let tf = t[start]\nmatch (tf.kind) {",
          "successors": [
            {
              "id": 3,
              "label": "case TokenKind.LCURL => return parseObject(t, start + 1)",
              "successors": []
            },
            {
              "id": 4,
              "label": "case TokenKind.LSQUARE => return parseArray(t, start + 1)",
              "successors": []
            },
            {
              "id": 5,
              "label": "case TokenKind.IDENTIFIER where (tf.value == \"null\" || tf.value == \"None\") => return (quote(JsonNull()), start +\n                1)",
              "successors": []
            },
            {
              "id": 6,
              "label": "case _ => if (let Some((expr, next)) <- safeParseExprFragment(t, start)) {\n            let exprTokens = expr.toTokens()\n            if (exprTokens.size > 1) {\n                return (quote(castJsonValue($(expr))), next)\n            }\n            let first = exprTokens[0]\n            match (first.kind) {\n                case TokenKind.STRING_LITERAL => return (quote(JsonString($(first))), next)\n                case TokenKind.INTEGER_LITERAL => return (quote(JsonInt($(first))), next)\n                case TokenKind.FLOAT_LITERAL => return (quote(JsonFloat($(first))), next)\n                case TokenKind.BOOL_LITERAL => return (quote(JsonBool($(first))), next)\n                case _ => return (quote(castJsonValue($(expr))), next)\n            }\n        } else {\n            diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${tf.value} in parseValue\", \"Unexpected token\")\n            throw Exception(\"Unexpected token ${tf.value} in parseValue\")\n        }",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "parseObject",
      "type": "function",
      "start_line": 65,
      "end_line": 126,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 65,
          "line": "func parseObject(t: Tokens, start: Int64): (Tokens, Int64) {"
        },
        {
          "lineno": 66,
          "line": "    let ident = getIdent(\"jsonCjObject\")"
        },
        {
          "lineno": 67,
          "line": "    let tokens = quote("
        },
        {
          "lineno": 68,
          "line": "        let $(ident) = JsonObject();"
        },
        {
          "lineno": 69,
          "line": "    )"
        },
        {
          "lineno": 70,
          "line": "    var i = start"
        },
        {
          "lineno": 71,
          "line": "    var state = JsonState.ObjectStart"
        },
        {
          "lineno": 72,
          "line": "    while (i < t.size) {"
        },
        {
          "lineno": 73,
          "line": "        let cur = t[i]"
        },
        {
          "lineno": 74,
          "line": "        match (cur.kind) {"
        },
        {
          "lineno": 75,
          "line": "            case TokenKind.RCURL => match (state) {"
        },
        {
          "lineno": 76,
          "line": "                case JsonState.ObjectStart => return (quote(JsonObject()), i + 1)"
        },
        {
          "lineno": 77,
          "line": "                case JsonState.ObjectValue | JsonState.ObjectComma =>"
        },
        {
          "lineno": 78,
          "line": "                    tokens.append(quote("
        },
        {
          "lineno": 79,
          "line": "                            return $(ident);"
        },
        {
          "lineno": 80,
          "line": "                        ))"
        },
        {
          "lineno": 81,
          "line": "                    return (wrap(tokens), i + 1)"
        },
        {
          "lineno": 82,
          "line": "                case _ =>"
        },
        {
          "lineno": 83,
          "line": "                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RCURL in parseObject\", \"Unexpected state\""
        },
        {
          "lineno": 84,
          "line": "                    )"
        },
        {
          "lineno": 85,
          "line": "                    throw Exception(\"Unexpected state for RCURL in parseObject\")"
        },
        {
          "lineno": 86,
          "line": "            }"
        },
        {
          "lineno": 87,
          "line": "            case TokenKind.COMMA => match (state) {"
        },
        {
          "lineno": 88,
          "line": "                case JsonState.ObjectValue =>"
        },
        {
          "lineno": 89,
          "line": "                    i++"
        },
        {
          "lineno": 90,
          "line": "                    state = JsonState.ObjectComma"
        },
        {
          "lineno": 91,
          "line": "                    continue"
        },
        {
          "lineno": 92,
          "line": "                case _ =>"
        },
        {
          "lineno": 93,
          "line": "                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseObject\", \"Unexpected state\""
        },
        {
          "lineno": 94,
          "line": "                    )"
        },
        {
          "lineno": 95,
          "line": "                    throw Exception(\"Unexpected state for COMMA in parseObject\")"
        },
        {
          "lineno": 96,
          "line": "            }"
        },
        {
          "lineno": 97,
          "line": "            case TokenKind.STRING_LITERAL => match (state) {"
        },
        {
          "lineno": 98,
          "line": "                case JsonState.ObjectStart | JsonState.ObjectComma =>"
        },
        {
          "lineno": 99,
          "line": "                    let key = cur.value"
        },
        {
          "lineno": 100,
          "line": "                    i++"
        },
        {
          "lineno": 101,
          "line": "                    if (t[i].kind != TokenKind.COLON) {"
        },
        {
          "lineno": 102,
          "line": "                        diagReport(DiagReportLevel.ERROR, t, \"No colon in object\", \"No colon\")"
        },
        {
          "lineno": 103,
          "line": "                        throw Exception(\"No colon in object\")"
        },
        {
          "lineno": 104,
          "line": "                    }"
        },
        {
          "lineno": 105,
          "line": "                    i++"
        },
        {
          "lineno": 106,
          "line": "                    let (value, next) = parseValue(t, i)"
        },
        {
          "lineno": 107,
          "line": "                    i = next"
        },
        {
          "lineno": 108,
          "line": "                    state = JsonState.ObjectValue"
        },
        {
          "lineno": 109,
          "line": "                    tokens.append(quote("
        },
        {
          "lineno": 110,
          "line": "                        $(ident).put($(key), $(value));"
        },
        {
          "lineno": 111,
          "line": "                    ))"
        },
        {
          "lineno": 112,
          "line": "                    continue"
        },
        {
          "lineno": 113,
          "line": "                case _ =>"
        },
        {
          "lineno": 114,
          "line": "                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for STRING_LITERAL in parseObject\","
        },
        {
          "lineno": 115,
          "line": "                        \"Unexpected state\")"
        },
        {
          "lineno": 116,
          "line": "                    throw Exception(\"Unexpected state for STRING_LITERAL in parseObject\")"
        },
        {
          "lineno": 117,
          "line": "            }"
        },
        {
          "lineno": 118,
          "line": "            case _ =>"
        },
        {
          "lineno": 119,
          "line": "                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseObject\", \"Unexpected token\")"
        },
        {
          "lineno": 120,
          "line": "                throw Exception(\"Unexpected token ${cur.value} in parseObject\")"
        },
        {
          "lineno": 121,
          "line": "        }"
        },
        {
          "lineno": 122,
          "line": "    }"
        },
        {
          "lineno": 123,
          "line": ""
        },
        {
          "lineno": 124,
          "line": "    diagReport(DiagReportLevel.ERROR, t, \"No closing curly bracket\", \"No closing curly bracket\")"
        },
        {
          "lineno": 125,
          "line": "    throw Exception(\"No closing curly bracket\")"
        },
        {
          "lineno": 126,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func parseObject(t: Tokens, start: Int64): (Tokens, Int64) {\nlet ident = getIdent(\"jsonCjObject\")\n    let tokens = quote(\n        let $(ident) = JsonObject();\n    )\n    var i = start\n    var state = JsonState.ObjectStart",
          "successors": [
            {
              "id": 3,
              "label": "while (i < t.size) {",
              "successors": [
                {
                  "id": 4,
                  "label": "let cur = t[i]\nmatch (cur.kind) {",
                  "successors": [
                    {
                      "id": 6,
                      "label": "case TokenKind.RCURL => match (state) {\n                case JsonState.ObjectStart => return (quote(JsonObject()), i + 1)",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "case JsonState.ObjectValue | JsonState.ObjectComma =>\n                    tokens.append(quote(\n                            return $(ident);\n                        ))\n                    return (wrap(tokens), i + 1)",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RCURL in parseObject\", \"Unexpected state\"\n                    )\n                    throw Exception(\"Unexpected state for RCURL in parseObject\")",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "case TokenKind.COMMA => match (state) {\n                case JsonState.ObjectValue =>\n                    i++\n                    state = JsonState.ObjectComma\n                    continue",
                      "successors": [
                        {
                          "id": 13,
                          "label": "while (i < t.size) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "label": "case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseObject\", \"Unexpected state\"\n                    )\n                    throw Exception(\"Unexpected state for COMMA in parseObject\")",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "case TokenKind.STRING_LITERAL => match (state) {\n                case JsonState.ObjectStart | JsonState.ObjectComma =>\n                    let key = cur.value\n                    i++\n                    if (t[i].kind != TokenKind.COLON) {\n                        diagReport(DiagReportLevel.ERROR, t, \"No colon in object\", \"No colon\")\n                        throw Exception(\"No colon in object\")\n                    }\n                    i++\n                    let (value, next) = parseValue(t, i)\n                    i = next\n                    state = JsonState.ObjectValue\n                    tokens.append(quote(\n                        $(ident).put($(key), $(value));\n                    ))\n                    continue",
                      "successors": [
                        {
                          "id": 13,
                          "label": "while (i < t.size) {",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "case _ =>\n                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for STRING_LITERAL in parseObject\",\n                        \"Unexpected state\")\n                    throw Exception(\"Unexpected state for STRING_LITERAL in parseObject\")",
                      "successors": []
                    },
                    {
                      "id": 14,
                      "label": "case _ =>\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseObject\", \"Unexpected token\")\n                throw Exception(\"Unexpected token ${cur.value} in parseObject\")",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 15,
              "label": "diagReport(DiagReportLevel.ERROR, t, \"No closing curly bracket\", \"No closing curly bracket\")\n    throw Exception(\"No closing curly bracket\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "parseArray",
      "type": "function",
      "start_line": 128,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 128,
          "line": "func parseArray(t: Tokens, start: Int64): (Tokens, Int64) {"
        },
        {
          "lineno": 129,
          "line": "    let ident = getIdent(\"jsonCjArray\")"
        },
        {
          "lineno": 130,
          "line": "    let tokens = quote("
        },
        {
          "lineno": 131,
          "line": "        let $(ident) = JsonArray();"
        },
        {
          "lineno": 132,
          "line": "    )"
        },
        {
          "lineno": 133,
          "line": "    var i = start"
        },
        {
          "lineno": 134,
          "line": "    var state = JsonState.ArrayStart"
        },
        {
          "lineno": 135,
          "line": ""
        },
        {
          "lineno": 136,
          "line": "    while (i < t.size) {"
        },
        {
          "lineno": 137,
          "line": "        let cur = t[i]"
        },
        {
          "lineno": 138,
          "line": "        match (cur.kind) {"
        },
        {
          "lineno": 139,
          "line": "            case TokenKind.RSQUARE => match (state) {"
        },
        {
          "lineno": 140,
          "line": "                case JsonState.ArrayStart => return (quote(JsonArray()), i + 1)"
        },
        {
          "lineno": 141,
          "line": "                case JsonState.ArrayValue | JsonState.ArrayComma =>"
        },
        {
          "lineno": 142,
          "line": "                    tokens.append(quote("
        },
        {
          "lineno": 143,
          "line": "                            return $(ident);"
        },
        {
          "lineno": 144,
          "line": "                        ))"
        },
        {
          "lineno": 145,
          "line": "                    return (wrap(tokens), i + 1)"
        },
        {
          "lineno": 146,
          "line": "                case _ =>"
        },
        {
          "lineno": 147,
          "line": "                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RSQUARE in parseArray\","
        },
        {
          "lineno": 148,
          "line": "                        \"Unexpected state\")"
        },
        {
          "lineno": 149,
          "line": "                    throw Exception(\"Unexpected state for RSQUARE in parseArray\")"
        },
        {
          "lineno": 150,
          "line": "            }"
        },
        {
          "lineno": 151,
          "line": "            case TokenKind.COMMA => match (state) {"
        },
        {
          "lineno": 152,
          "line": "                case JsonState.ArrayValue =>"
        },
        {
          "lineno": 153,
          "line": "                    i++"
        },
        {
          "lineno": 154,
          "line": "                    state = JsonState.ArrayComma"
        },
        {
          "lineno": 155,
          "line": "                    continue"
        },
        {
          "lineno": 156,
          "line": "                case _ =>"
        },
        {
          "lineno": 157,
          "line": "                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseArray\", \"Unexpected state\")"
        },
        {
          "lineno": 158,
          "line": "                    throw Exception(\"Unexpected state for COMMA in parseArray\")"
        },
        {
          "lineno": 159,
          "line": "            }"
        },
        {
          "lineno": 160,
          "line": "            case _ => match (state) {"
        },
        {
          "lineno": 161,
          "line": "                case JsonState.ArrayStart | JsonState.ArrayComma =>"
        },
        {
          "lineno": 162,
          "line": "                    let (value, next) = parseValue(t, i)"
        },
        {
          "lineno": 163,
          "line": "                    i = next"
        },
        {
          "lineno": 164,
          "line": "                    state = JsonState.ArrayValue"
        },
        {
          "lineno": 165,
          "line": "                    tokens.append(quote("
        },
        {
          "lineno": 166,
          "line": "                        $(ident).add($(value));"
        },
        {
          "lineno": 167,
          "line": "                    ))"
        },
        {
          "lineno": 168,
          "line": "                    continue"
        },
        {
          "lineno": 169,
          "line": "                case _ =>"
        },
        {
          "lineno": 170,
          "line": "                    diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseArray\","
        },
        {
          "lineno": 171,
          "line": "                        \"Unexpected token\")"
        },
        {
          "lineno": 172,
          "line": "                    throw Exception(\"Unexpected token ${cur.value} in parseArray\")"
        },
        {
          "lineno": 173,
          "line": "            }"
        },
        {
          "lineno": 174,
          "line": "        }"
        },
        {
          "lineno": 175,
          "line": "    }"
        },
        {
          "lineno": 176,
          "line": ""
        },
        {
          "lineno": 177,
          "line": "    diagReport(DiagReportLevel.ERROR, t, \"No closing bracket\", \"No closing bracket\")"
        },
        {
          "lineno": 178,
          "line": "    throw Exception(\"No closing bracket\")"
        },
        {
          "lineno": 179,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func parseArray(t: Tokens, start: Int64): (Tokens, Int64) {\n    let ident = getIdent(\"jsonCjArray\")\n    let tokens = quote(\n        let $(ident) = JsonArray();\n    )\n    var i = start\n    var state = JsonState.ArrayStart\n\n    while (i < t.size) {\nlet cur = t[i]",
          "successors": [
            {
              "id": 3,
              "label": "match (cur.kind) {\n    case TokenKind.RSQUARE => match (state) {\n        case JsonState.ArrayStart => return (quote(JsonArray()), i + 1)\n        case JsonState.ArrayValue | JsonState.ArrayComma =>\n            tokens.append(quote(\n                return $(ident);\n            ))\n            return (wrap(tokens), i + 1)\n        case _ =>\n            diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RSQUARE in parseArray\",\n                \"Unexpected state\")\n            throw Exception(\"Unexpected state for RSQUARE in parseArray\")\n    }\ncase TokenKind.COMMA => match (state) {\n    case JsonState.ArrayValue =>\n        i++\n        state = JsonState.ArrayComma\n        continue\n    case _ =>\n        diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseArray\", \"Unexpected state\")\n        throw Exception(\"Unexpected state for COMMA in parseArray\")\n}",
              "successors": [
                {
                  "id": 5,
                  "label": "case _ => match (state) {\n    case JsonState.ArrayStart | JsonState.ArrayComma =>\n        let (value, next) = parseValue(t, i)\n        i = next\n        state = JsonState.ArrayValue\n        tokens.append(quote(\n            $(ident).add($(value));\n        ))\n        continue\n    case _ =>\n        diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseArray\",\n            \"Unexpected token\")\n        throw Exception(\"Unexpected token ${cur.value} in parseArray\")\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "jsonTransform",
      "type": "function",
      "start_line": 181,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 181,
          "line": "protected func jsonTransform(input: Tokens): Tokens {"
        },
        {
          "lineno": 182,
          "line": "    let t = Tokens()"
        },
        {
          "lineno": 183,
          "line": ""
        },
        {
          "lineno": 184,
          "line": "    for (ti in input) {"
        },
        {
          "lineno": 185,
          "line": "        if (let TokenKind.NL <- ti.kind) {"
        },
        {
          "lineno": 186,
          "line": "            continue"
        },
        {
          "lineno": 187,
          "line": "        }"
        },
        {
          "lineno": 188,
          "line": "        t.append(ti)"
        },
        {
          "lineno": 189,
          "line": "    }"
        },
        {
          "lineno": 190,
          "line": ""
        },
        {
          "lineno": 191,
          "line": "    let ret = Tokens()"
        },
        {
          "lineno": 192,
          "line": ""
        },
        {
          "lineno": 193,
          "line": "    if (t.size == 0) {"
        },
        {
          "lineno": 194,
          "line": "        return quote(())"
        },
        {
          "lineno": 195,
          "line": "    }"
        },
        {
          "lineno": 196,
          "line": ""
        },
        {
          "lineno": 197,
          "line": "    let cur = t[0]"
        },
        {
          "lineno": 198,
          "line": "    let cv = cur.value"
        },
        {
          "lineno": 199,
          "line": "    match (cur.kind) {"
        },
        {
          "lineno": 200,
          "line": "        case TokenKind.LCURL =>"
        },
        {
          "lineno": 201,
          "line": "            let (ts, next) = parseObject(t, 1)"
        },
        {
          "lineno": 202,
          "line": "            ret.append(quote("
        },
        {
          "lineno": 203,
          "line": "                    return $(ts);"
        },
        {
          "lineno": 204,
          "line": "                ))"
        },
        {
          "lineno": 205,
          "line": "            if (next != t.size) {"
        },
        {
          "lineno": 206,
          "line": "                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial object\","
        },
        {
          "lineno": 207,
          "line": "                    \"Unexpected token after initial object\")"
        },
        {
          "lineno": 208,
          "line": "                throw Exception(\"Unexpected token after initial object\")"
        },
        {
          "lineno": 209,
          "line": "            }"
        },
        {
          "lineno": 210,
          "line": "            return wrap(ret)"
        },
        {
          "lineno": 211,
          "line": "        case TokenKind.LSQUARE =>"
        },
        {
          "lineno": 212,
          "line": "            let (ts, next) = parseArray(t, 1)"
        },
        {
          "lineno": 213,
          "line": "            ret.append(quote("
        },
        {
          "lineno": 214,
          "line": "                        return $(ts);"
        },
        {
          "lineno": 215,
          "line": "                    ))"
        },
        {
          "lineno": 216,
          "line": "            if (next != t.size) {"
        },
        {
          "lineno": 217,
          "line": "                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial array\","
        },
        {
          "lineno": 218,
          "line": "                    \"Unexpected token after initial array\")"
        },
        {
          "lineno": 219,
          "line": "                throw Exception(\"Unexpected token after initial array\")"
        },
        {
          "lineno": 220,
          "line": "            }"
        },
        {
          "lineno": 221,
          "line": "            return wrap(ret)"
        },
        {
          "lineno": 222,
          "line": "        case TokenKind.IDENTIFIER where (cv == \"null\" || cv == \"None\") => return quote(JsonNull())"
        },
        {
          "lineno": 223,
          "line": "        case _ =>"
        },
        {
          "lineno": 224,
          "line": "            let (ts, next) = parseValue(t, 0)"
        },
        {
          "lineno": 225,
          "line": "            if (next != t.size) {"
        },
        {
          "lineno": 226,
          "line": "                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial value\","
        },
        {
          "lineno": 227,
          "line": "                    \"Unexpected token after initial value\")"
        },
        {
          "lineno": 228,
          "line": "                throw Exception(\"Unexpected token after initial value\")"
        },
        {
          "lineno": 229,
          "line": "            }"
        },
        {
          "lineno": 230,
          "line": "            return ts"
        },
        {
          "lineno": 231,
          "line": "    }"
        },
        {
          "lineno": 232,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "protected func jsonTransform(input: Tokens): Tokens {\n    let t = Tokens()\n    \n    for (ti in input) {\nif (let TokenKind.NL <- ti.kind) {\n            continue",
          "successors": [
            {
              "id": 3,
              "label": "}\n        t.append(ti)\n    }",
              "successors": [
                {
                  "id": 5,
                  "label": "let ret = Tokens()\nif (t.size == 0) {\n        return quote(())",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    }\n\n    let cur = t[0]\n    let cv = cur.value\n    match (cur.kind) {",
                      "successors": [
                        {
                          "id": 8,
                          "label": "case TokenKind.LCURL =>\n            let (ts, next) = parseObject(t, 1)\n            ret.append(quote(\n                    return $(ts);\n                ))\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial object\",\n                    \"Unexpected token after initial object\")\n                throw Exception(\"Unexpected token after initial object\")\n            }\n            return wrap(ret)",
                          "successors": []
                        },
                        {
                          "id": 9,
                          "label": "case TokenKind.LSQUARE =>\n            let (ts, next) = parseArray(t, 1)\n            ret.append(quote(\n                        return $(ts);\n                    ))\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial array\",\n                    \"Unexpected token after initial array\")\n                throw Exception(\"Unexpected token after initial array\")\n            }\n            return wrap(ret)",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "case TokenKind.IDENTIFIER where (cv == \"null\" || cv == \"None\") => return quote(JsonNull())",
                          "successors": []
                        },
                        {
                          "id": 11,
                          "label": "case _ =>\n            let (ts, next) = parseValue(t, 0)\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial value\",\n                    \"Unexpected token after initial value\")\n                throw Exception(\"Unexpected token after initial value\")\n            }\n            return ts",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package json_cj.impl"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.ArrayList"
    },
    {
      "lineno": 5,
      "line": "import json_cj.helper.*"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "enum JsonState {"
    },
    {
      "lineno": 8,
      "line": "    | Initial"
    },
    {
      "lineno": 9,
      "line": "    | ObjectStart"
    },
    {
      "lineno": 10,
      "line": "    | ObjectKey"
    },
    {
      "lineno": 11,
      "line": "    | ObjectColon"
    },
    {
      "lineno": 12,
      "line": "    | ObjectValue"
    },
    {
      "lineno": 13,
      "line": "    | ObjectComma"
    },
    {
      "lineno": 14,
      "line": "    | ArrayStart"
    },
    {
      "lineno": 15,
      "line": "    | ArrayValue"
    },
    {
      "lineno": 16,
      "line": "    | ArrayComma"
    },
    {
      "lineno": 17,
      "line": "    | PartEnd"
    },
    {
      "lineno": 18,
      "line": "    | End"
    },
    {
      "lineno": 19,
      "line": "}"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 127,
      "line": ""
    },
    {
      "lineno": 180,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package json_cj.impl\nimport std.ast.*\nimport std.collection.ArrayList\nimport json_cj.helper.*",
      "successors": [
        {
          "id": 3,
          "label": "enum JsonState {\n    | Initial\n    | ObjectStart\n    | ObjectKey\n    | ObjectColon\n    | ObjectValue\n    | ObjectComma\n    | ArrayStart\n    | ArrayValue\n    | ArrayComma\n    | PartEnd\n    | End\n}",
          "successors": []
        }
      ]
    }
  ]
}