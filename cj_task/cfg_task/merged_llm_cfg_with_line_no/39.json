{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 62,
  "functions": [],
  "classes": [
    {
      "name": "MySqlDriver",
      "type": "class",
      "start_line": 3,
      "end_line": 62,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 4,
          "end_line": 7,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 4,
              "line": "    static init() {"
            },
            {
              "lineno": 5,
              "line": "        println(\"mysql register MySqlDriver\")"
            },
            {
              "lineno": 6,
              "line": "        DriverManager.register(\"mysql\", MySqlDriver())"
            },
            {
              "lineno": 7,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    static init() {\n        println(\"mysql register MySqlDriver\")\n        DriverManager.register(\"mysql\", MySqlDriver())\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "name",
          "type": "function",
          "start_line": 9,
          "end_line": 13,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public prop name: String {"
            },
            {
              "lineno": 10,
              "line": "        get() {"
            },
            {
              "lineno": 11,
              "line": "            return \"mysql\""
            },
            {
              "lineno": 12,
              "line": "        }"
            },
            {
              "lineno": 13,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public prop name: String {\n        get() {\n            return \"mysql\"\n        }\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "version",
          "type": "function",
          "start_line": 14,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    public prop version: String {"
            },
            {
              "lineno": 15,
              "line": "        get() {"
            },
            {
              "lineno": 16,
              "line": "            return \"0.0.1\""
            },
            {
              "lineno": 17,
              "line": "        }"
            },
            {
              "lineno": 18,
              "line": "    }"
            }
          ],
          "blocks": []
        },
        {
          "name": "preferredPooling",
          "type": "function",
          "start_line": 19,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    public prop preferredPooling: Bool {"
            },
            {
              "lineno": 20,
              "line": "        get() {"
            },
            {
              "lineno": 21,
              "line": "            return true"
            },
            {
              "lineno": 22,
              "line": "        }"
            },
            {
              "lineno": 23,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public prop preferredPooling: Bool {\n        get() {\n            return true",
              "successors": [
                {
                  "id": 3,
                  "label": "        }\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "open",
          "type": "function",
          "start_line": 28,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    public func open(connectionString: String, opts: Array<(String, String)>): Datasource {"
            },
            {
              "lineno": 29,
              "line": "        // let connectionString = \"username:password@protocol(192.168.4.44:3307)/dbname\""
            },
            {
              "lineno": 30,
              "line": "        let config = parseConnectStringAndParams(connectionString, opts)"
            },
            {
              "lineno": 31,
              "line": "        return MySqlDatasource(config)"
            },
            {
              "lineno": 32,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func open(connectionString: String, opts: Array<(String, String)>): Datasource {\n        // let connectionString = \"username:password@protocol(192.168.4.44:3307)/dbname\"\n        let config = parseConnectStringAndParams(connectionString, opts)\n        return MySqlDatasource(config)",
              "successors": [
                {
                  "id": 3,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "parseConnectStringAndParams",
          "type": "function",
          "start_line": 34,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    private func parseConnectStringAndParams(connectionString: String, opts: Array<(String, String)>): Config {"
            },
            {
              "lineno": 35,
              "line": "        let usernameEnd = connectionString.indexOf(\":\", 0).getOrDefault({ => -1})"
            },
            {
              "lineno": 36,
              "line": "        let passwordEnd = connectionString.indexOf(\"@\").getOrDefault({ => -1})"
            },
            {
              "lineno": 37,
              "line": "        let protocolEnd = connectionString.indexOf(\"(\").getOrDefault({ => -1})"
            },
            {
              "lineno": 38,
              "line": "        let addressEnd = connectionString.indexOf(\")\").getOrDefault({ => -1})"
            },
            {
              "lineno": 39,
              "line": "        let dbnameStart = addressEnd + 2"
            },
            {
              "lineno": 40,
              "line": "        let username = connectionString[0..usernameEnd]"
            },
            {
              "lineno": 41,
              "line": "        let password = connectionString[usernameEnd + 1 .. passwordEnd]"
            },
            {
              "lineno": 42,
              "line": "        let protocol = connectionString[passwordEnd + 1 .. protocolEnd]"
            },
            {
              "lineno": 43,
              "line": "        let address  = connectionString[protocolEnd + 1 .. addressEnd]"
            },
            {
              "lineno": 44,
              "line": "        let dbname = connectionString[dbnameStart .. ]"
            },
            {
              "lineno": 45,
              "line": ""
            },
            {
              "lineno": 46,
              "line": "        println(\"username = ${username}, password = ${password}, protocol = ${protocol}, address = ${address}, \" "
            },
            {
              "lineno": 47,
              "line": "        + \"dbname = ${dbname}\")"
            },
            {
              "lineno": 48,
              "line": ""
            },
            {
              "lineno": 49,
              "line": "        let config = Config()"
            },
            {
              "lineno": 50,
              "line": "        config.address = address"
            },
            {
              "lineno": 51,
              "line": "        config.username = username"
            },
            {
              "lineno": 52,
              "line": "        config.password = password"
            },
            {
              "lineno": 53,
              "line": "        config.protocol = protocol"
            },
            {
              "lineno": 54,
              "line": "        config.dbname = dbname"
            },
            {
              "lineno": 55,
              "line": ""
            },
            {
              "lineno": 56,
              "line": "        for((key, value) in opts) {"
            },
            {
              "lineno": 57,
              "line": "            config.params.put(key, value)"
            },
            {
              "lineno": 58,
              "line": "        }"
            },
            {
              "lineno": 59,
              "line": ""
            },
            {
              "lineno": 60,
              "line": "        return config"
            },
            {
              "lineno": 61,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func parseConnectStringAndParams(connectionString: String, opts: Array<(String, String)>): Config {\n        let usernameEnd = connectionString.indexOf(\":\", 0).getOrDefault({ => -1})\n        let passwordEnd = connectionString.indexOf(\"@\").getOrDefault({ => -1})\n        let protocolEnd = connectionString.indexOf(\"(\").getOrDefault({ => -1})\n        let addressEnd = connectionString.indexOf(\")\").getOrDefault({ => -1})\n        let dbnameStart = addressEnd + 2\n        let username = connectionString[0..usernameEnd]\n        let password = connectionString[usernameEnd + 1 .. passwordEnd]\n        let protocol = connectionString[passwordEnd + 1 .. protocolEnd]\n        let address  = connectionString[protocolEnd + 1 .. addressEnd]\n        let dbname = connectionString[dbnameStart .. ]\n        println(\"username = ${username}, password = ${password}, protocol = ${protocol}, address = ${address}, \" \n        + \"dbname = ${dbname}\")",
              "successors": [
                {
                  "id": 3,
                  "label": "        let config = Config()\n        config.address = address\n        config.username = username\n        config.password = password\n        config.protocol = protocol\n        config.dbname = dbname\n        for((key, value) in opts) {\n            config.params.put(key, value)\n        }",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        return config",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "public class MySqlDriver <: Driver {"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    // 要实现的第一个方法"
        },
        {
          "lineno": 26,
          "line": "    // connectionString 格式  username:password@protocol(address)/dbname"
        },
        {
          "lineno": 27,
          "line": "    // opts 目前仅支持 charset"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class MySqlDriver <: Driver {\n// 要实现的第一个方法\n// connectionString 格式  username:password@protocol(address)/dbname\n// opts 目前仅支持 charset",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package cangjieWeb.mysql"
    },
    {
      "lineno": 2,
      "line": "import std.database.sql.{Driver, DriverManager, Datasource}"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package cangjieWeb.mysql",
      "successors": []
    }
  ]
}