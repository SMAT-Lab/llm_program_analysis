{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 42,
  "functions": [],
  "classes": [
    {
      "name": "ToStringUtils",
      "type": "class",
      "start_line": 2,
      "end_line": 42,
      "functions": [
        {
          "name": "listToString",
          "type": "function",
          "start_line": 3,
          "end_line": 6,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 3,
              "line": "    public static func listToString<T>(values: Iterable<T>): String {"
            },
            {
              "lineno": 4,
              "line": "        let str = values |> map<T, String> {v => toString(v)} |> collectString<String>(delimiter: \", \")"
            },
            {
              "lineno": 5,
              "line": "        return \"[\" + str + \"]\""
            },
            {
              "lineno": 6,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func listToString<T>(values: Iterable<T>): String {\n        let str = values |> map<T, String> {v => toString(v)} |> collectString<String>(delimiter: \", \")\n        return \"[\" + str + \"]\"",
              "successors": []
            }
          ]
        },
        {
          "name": "mapToString",
          "type": "function",
          "start_line": 7,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 7,
              "line": "    public static func mapToString<K, V>(kvs: Iterable<(K, V)>): String {"
            },
            {
              "lineno": 8,
              "line": "        let str = kvs |> map<(K, V), String> {"
            },
            {
              "lineno": 9,
              "line": "            kv =>"
            },
            {
              "lineno": 10,
              "line": "            let k = toString(kv[0])"
            },
            {
              "lineno": 11,
              "line": "            let v = toString(kv[1])"
            },
            {
              "lineno": 12,
              "line": "            k + \":\" + v"
            },
            {
              "lineno": 13,
              "line": "        } |> collectString<(String)>(delimiter: \", \")"
            },
            {
              "lineno": 14,
              "line": "        return \"{\" + str + \"}\""
            },
            {
              "lineno": 15,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func mapToString<K, V>(kvs: Iterable<(K, V)>): String {\n        let str = kvs |> map<(K, V), String> {\n            kv =>\n            let k = toString(kv[0])\n            let v = toString(kv[1])\n            k + \":\" + v\n        } |> collectString<(String)>(delimiter: \", \")\n        return \"{\" + str + \"}\"\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "mapToString2",
          "type": "function",
          "start_line": 16,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    public static func mapToString2<K, V>(kvs: ?Map<K, V>): ?String where K <: ToString & Equatable<K>, V <: ToString {"
            },
            {
              "lineno": 17,
              "line": "        return match (kvs) {"
            },
            {
              "lineno": 18,
              "line": "            case Some(_kvs) => mapToString(_kvs)"
            },
            {
              "lineno": 19,
              "line": "            case None => None"
            },
            {
              "lineno": 20,
              "line": "        }"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public static func mapToString2<K, V>(kvs: ?Map<K, V>): ?String where K <: ToString & Equatable<K>, V <: ToString {\n        return match (kvs) {",
              "successors": [
                {
                  "id": 2,
                  "label": "            case Some(_kvs) => mapToString(_kvs)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "            case None => None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toString",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    private static func toString<T>(v: T): String {"
            },
            {
              "lineno": 23,
              "line": "        return match (v) {"
            },
            {
              "lineno": 24,
              "line": "            case v1: ToString => v1.toString()"
            },
            {
              "lineno": 25,
              "line": "            // 主要给 S3MultiValueMap 使用, 现在也都是 Collection<String>"
            },
            {
              "lineno": 26,
              "line": "            case v2: Iterable<String> => \"[\" + (v2 |> collectString<String>(delimiter: \", \")) + \"]\""
            },
            {
              "lineno": 27,
              "line": "            case _ => \"<!ToString(${TypeInfo.of(v)})>\""
            },
            {
              "lineno": 28,
              "line": "        }"
            },
            {
              "lineno": 29,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private static func toString<T>(v: T): String {\n        return match (v) {\n            case v1: ToString => v1.toString()\n            // \\\\u4e3b\\u8981\\u7ed9 S3MultiValueMap \\\\u4f7f\\u7528, \\\\u73b0\\u5728\\u4e5f\\u90fd\\u662f Collection<String>\n            case v2: Iterable<String> => \"[\" + (v2 |> collectString<String>(delimiter: \", \")) + \"]\"\n            case _ => \"<!ToString(${TypeInfo.of(v)})>\"\n        }",
              "successors": []
            }
          ]
        },
        {
          "name": "exceptionToString",
          "type": "function",
          "start_line": 30,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 30,
              "line": "    public static func exceptionToString(ex: Exception): String {"
            },
            {
              "lineno": 31,
              "line": "        var sb = StringBuilder()"
            },
            {
              "lineno": 32,
              "line": "        sb.append(ex.toString())"
            },
            {
              "lineno": 33,
              "line": "        sb.append(IOUtils.LINE_SEPARATOR)"
            },
            {
              "lineno": 34,
              "line": "        let stacks = ex.getStackTrace()"
            },
            {
              "lineno": 35,
              "line": "        for (i in 0..stacks.size) {"
            },
            {
              "lineno": 36,
              "line": "            let stack = stacks[i]"
            },
            {
              "lineno": 37,
              "line": "            sb.append(\"\\t at ${stack.declaringClass} ${stack.methodName} (${stack.fileName}:${stack.lineNumber})\")"
            },
            {
              "lineno": 38,
              "line": "            sb.append(IOUtils.LINE_SEPARATOR)"
            },
            {
              "lineno": 39,
              "line": "        }"
            },
            {
              "lineno": 40,
              "line": "        return sb.toString()"
            },
            {
              "lineno": 41,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public static func exceptionToString(ex: Exception): String {\n    var sb = StringBuilder()\n    sb.append(ex.toString())\n    sb.append(IOUtils.LINE_SEPARATOR)\n    let stacks = ex.getStackTrace()",
              "successors": [
                {
                  "id": 2,
                  "label": "for (i in 0..stacks.size) {\n    let stack = stacks[i]\n    sb.append(\"\\t at ${stack.declaringClass} ${stack.methodName} (${stack.fileName}:${stack.lineNumber})\")\n    sb.append(IOUtils.LINE_SEPARATOR)\n}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return sb.toString()\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public class ToStringUtils {"
        },
        {
          "lineno": 42,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class ToStringUtils { ... }",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package s3client.util"
    }
  ],
  "blocks": []
}