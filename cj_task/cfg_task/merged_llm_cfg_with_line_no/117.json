{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 35,
  "functions": [
    {
      "name": "main",
      "type": "function",
      "start_line": 26,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 26,
          "line": "main() {"
        },
        {
          "lineno": 27,
          "line": "    let tree = Node(1,"
        },
        {
          "lineno": 28,
          "line": "        Node(2, Node(3, Empty, Leaf(4)), Empty),"
        },
        {
          "lineno": 29,
          "line": "        Node(5, Leaf(6), Leaf(7)))"
        },
        {
          "lineno": 30,
          "line": "    tree.traverse()"
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    println()"
        },
        {
          "lineno": 33,
          "line": "    let fullTree = Tree.generate(5)"
        },
        {
          "lineno": 34,
          "line": "    fullTree.traverse()"
        },
        {
          "lineno": 35,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    let tree = Node(1,\n        Node(2, Node(3, Empty, Leaf(4)), Empty),\n        Node(5, Leaf(6), Leaf(7)))\n    tree.traverse()\n\n    println()\n    let fullTree = Tree.generate(5)\n    fullTree.traverse()\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Tree",
      "type": "class",
      "start_line": 3,
      "end_line": 24,
      "functions": [
        {
          "name": "traverse",
          "type": "function",
          "start_line": 6,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 6,
              "line": "    public func traverse(): Unit {"
            },
            {
              "lineno": 7,
              "line": "        match (this) {"
            },
            {
              "lineno": 8,
              "line": "            case Empty => ()"
            },
            {
              "lineno": 9,
              "line": "            case Leaf(value) => print(value)"
            },
            {
              "lineno": 10,
              "line": "            case Node(value, left, right) =>"
            },
            {
              "lineno": 11,
              "line": "                left.traverse()"
            },
            {
              "lineno": 12,
              "line": "                print(value)"
            },
            {
              "lineno": 13,
              "line": "                right.traverse()"
            },
            {
              "lineno": 14,
              "line": "        }"
            },
            {
              "lineno": 15,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func traverse(): Unit {\n        match (this) {",
              "successors": [
                {
                  "id": 3,
                  "label": "            case Empty => ()",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "            case Leaf(value) => print(value)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "            case Node(value, left, right) =>\n                left.traverse()\n                print(value)\n                right.traverse()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "generate",
          "type": "function",
          "start_line": 17,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    static public func generate(depth: UInt8): Tree {"
            },
            {
              "lineno": 18,
              "line": "        if (depth == 1) {"
            },
            {
              "lineno": 19,
              "line": "            return Leaf(1)"
            },
            {
              "lineno": 20,
              "line": "        }"
            },
            {
              "lineno": 21,
              "line": "        return Node(Int64(depth),"
            },
            {
              "lineno": 22,
              "line": "            generate(depth - 1), generate(depth - 1))"
            },
            {
              "lineno": 23,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    static public func generate(depth: UInt8): Tree {",
              "successors": [
                {
                  "id": 2,
                  "label": "        if (depth == 1) {\n            return Leaf(1)\n        return Node(Int64(depth),\n            generate(depth - 1), generate(depth - 1))",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        return Node(Int64(depth),\n            generate(depth - 1), generate(depth - 1))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 3,
          "line": "enum Tree {"
        },
        {
          "lineno": 4,
          "line": "    Empty | Leaf(Int64) | Node(Int64, Tree, Tree)"
        },
        {
          "lineno": 5,
          "line": ""
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "enum Tree {\n    Empty | Leaf(Int64) | Node(Int64, Tree, Tree)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 基于 enum 实现二叉树"
    },
    {
      "lineno": 2,
      "line": "// cjc version: 0.53.13"
    },
    {
      "lineno": 25,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "// \n57fa based on enum \n5b9e realizes a binary tree\n// cjc version: 0.53.13",
      "successors": []
    }
  ]
}