{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 439,
  "functions": [],
  "classes": [
    {
      "name": "TokenJson",
      "type": "class",
      "start_line": 5,
      "end_line": 72,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "  public init("
            },
            {
              "lineno": 15,
              "line": "    id: UInt32,"
            },
            {
              "lineno": 16,
              "line": "    content: String,"
            },
            {
              "lineno": 17,
              "line": "    single_word: Bool,"
            },
            {
              "lineno": 18,
              "line": "    lstrip: Bool,"
            },
            {
              "lineno": 19,
              "line": "    rstrip: Bool,"
            },
            {
              "lineno": 20,
              "line": "    normalized: Bool,"
            },
            {
              "lineno": 21,
              "line": "    special: Bool"
            },
            {
              "lineno": 22,
              "line": "  ) {"
            },
            {
              "lineno": 23,
              "line": "    this.id = id;"
            },
            {
              "lineno": 24,
              "line": "    this.content = content;"
            },
            {
              "lineno": 25,
              "line": "    this.single_word = single_word;"
            },
            {
              "lineno": 26,
              "line": "    this.lstrip = lstrip;"
            },
            {
              "lineno": 27,
              "line": "    this.rstrip = rstrip;"
            },
            {
              "lineno": 28,
              "line": "    this.normalized = normalized;"
            },
            {
              "lineno": 29,
              "line": "    this.special = special;"
            },
            {
              "lineno": 30,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": " public init( id: UInt32, content: String, single_word: Bool, lstrip: Bool, rstrip: Bool, normalized: Bool, special: Bool ) { this.id = id; this.content = content; this.single_word = single_word; this.lstrip = lstrip; this.rstrip = rstrip; this.normalized = normalized; this.special = special; } ",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 32,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "  public static func fromJson(r: JsonReader): TokenJson {"
            },
            {
              "lineno": 33,
              "line": "    var temp_id: UInt32 = 0;"
            },
            {
              "lineno": 34,
              "line": "    var temp_content: String = \"\";"
            },
            {
              "lineno": 35,
              "line": "    var temp_single_word: Bool = false;"
            },
            {
              "lineno": 36,
              "line": "    var temp_lstrip: Bool = false;"
            },
            {
              "lineno": 37,
              "line": "    var temp_rstrip: Bool = false;"
            },
            {
              "lineno": 38,
              "line": "    var temp_normalized: Bool = false;"
            },
            {
              "lineno": 39,
              "line": "    var temp_special: Bool = false;"
            },
            {
              "lineno": 40,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 41,
              "line": "      match(v) {"
            },
            {
              "lineno": 42,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 43,
              "line": "          r.startObject();"
            },
            {
              "lineno": 44,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 45,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 46,
              "line": "            match (n) {"
            },
            {
              "lineno": 47,
              "line": "              case \"id\" => temp_id = r.readValue<UInt32>();"
            },
            {
              "lineno": 48,
              "line": "              case \"content\" => temp_content = r.readValue<String>();"
            },
            {
              "lineno": 49,
              "line": "              case \"single_word\" => temp_single_word = r.readValue<Bool>();"
            },
            {
              "lineno": 50,
              "line": "              case \"lstrip\" => temp_lstrip = r.readValue<Bool>();"
            },
            {
              "lineno": 51,
              "line": "              case \"rstrip\" => temp_rstrip = r.readValue<Bool>();"
            },
            {
              "lineno": 52,
              "line": "              case \"normalized\" => temp_normalized = r.readValue<Bool>();"
            },
            {
              "lineno": 53,
              "line": "              case \"special\" => temp_special = r.readValue<Bool>();"
            },
            {
              "lineno": 54,
              "line": "              case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 55,
              "line": "            }"
            },
            {
              "lineno": 56,
              "line": "          }"
            },
            {
              "lineno": 57,
              "line": "          r.endObject();"
            },
            {
              "lineno": 58,
              "line": "          break;"
            },
            {
              "lineno": 59,
              "line": "        case _ => throw Exception(\"can't deserialize for TokenJson\");"
            },
            {
              "lineno": 60,
              "line": "      }"
            },
            {
              "lineno": 61,
              "line": "    }"
            },
            {
              "lineno": 62,
              "line": "    return TokenJson("
            },
            {
              "lineno": 63,
              "line": "      temp_id,"
            },
            {
              "lineno": 64,
              "line": "      temp_content,"
            },
            {
              "lineno": 65,
              "line": "      temp_single_word,"
            },
            {
              "lineno": 66,
              "line": "      temp_lstrip,"
            },
            {
              "lineno": 67,
              "line": "      temp_rstrip,"
            },
            {
              "lineno": 68,
              "line": "      temp_normalized,"
            },
            {
              "lineno": 69,
              "line": "      temp_special"
            },
            {
              "lineno": 70,
              "line": "    );"
            },
            {
              "lineno": 71,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): TokenJson {\n    var temp_id: UInt32 = 0;\n    var temp_content: String = \"\";\n    var temp_single_word: Bool = false;\n    var temp_lstrip: Bool = false;\n    var temp_rstrip: Bool = false;\n    var temp_normalized: Bool = false;\n    var temp_special: Bool = false;\n",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"id\" => temp_id = r.readValue<UInt32>();\n              case \"content\" => temp_content = r.readValue<String>();\n              case \"single_word\" => temp_single_word = r.readValue<Bool>();\n              case \"lstrip\" => temp_lstrip = r.readValue<Bool>();\n              case \"rstrip\" => temp_rstrip = r.readValue<Bool>();\n              case \"normalized\" => temp_normalized = r.readValue<Bool>();\n              case \"special\" => temp_special = r.readValue<Bool>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for TokenJson\");\n      }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "    return TokenJson(\n      temp_id,\n      temp_content,\n      temp_single_word,\n      temp_lstrip,\n      temp_rstrip,\n      temp_normalized,\n      temp_special\n    );",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "public struct TokenJson <: JsonDeserializable<TokenJson> {"
        },
        {
          "lineno": 6,
          "line": "  let id: UInt32;"
        },
        {
          "lineno": 7,
          "line": "  let content: String;"
        },
        {
          "lineno": 8,
          "line": "  let single_word: Bool;"
        },
        {
          "lineno": 9,
          "line": "  let lstrip: Bool;"
        },
        {
          "lineno": 10,
          "line": "  let rstrip: Bool;"
        },
        {
          "lineno": 11,
          "line": "  let normalized: Bool;"
        },
        {
          "lineno": 12,
          "line": "  let special: Bool;"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 72,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct TokenJson <: JsonDeserializable<TokenJson> {\n  let id: UInt32;\n  let content: String;\n  let single_word: Bool;\n  let lstrip: Bool;\n  let rstrip: Bool;\n  let normalized: Bool;\n  let special: Bool;\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "NormalizerJson",
      "type": "class",
      "start_line": 74,
      "end_line": 101,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 77,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 77,
              "line": "  public init(p_type: String) {"
            },
            {
              "lineno": 78,
              "line": "    this.p_type = p_type;"
            },
            {
              "lineno": 79,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(p_type: String) {\n    this.p_type = p_type;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 81,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 81,
              "line": "  public static func fromJson(r: JsonReader): NormalizerJson {"
            },
            {
              "lineno": 82,
              "line": "    var temp_p_type: String = \"\";"
            },
            {
              "lineno": 83,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 84,
              "line": "      match(v) {"
            },
            {
              "lineno": 85,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 86,
              "line": "          r.startObject();"
            },
            {
              "lineno": 87,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 88,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 89,
              "line": "            match (n) {"
            },
            {
              "lineno": 90,
              "line": "              case \"type\" => temp_p_type = r.readValue<String>();"
            },
            {
              "lineno": 91,
              "line": "              case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 92,
              "line": "            }"
            },
            {
              "lineno": 93,
              "line": "          }"
            },
            {
              "lineno": 94,
              "line": "          r.endObject();"
            },
            {
              "lineno": 95,
              "line": "          break;"
            },
            {
              "lineno": 96,
              "line": "        case _ => throw Exception(\"can't deserialize for NormalizerJson\");"
            },
            {
              "lineno": 97,
              "line": "      }"
            },
            {
              "lineno": 98,
              "line": "    }"
            },
            {
              "lineno": 99,
              "line": "    return NormalizerJson(temp_p_type);"
            },
            {
              "lineno": 100,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): NormalizerJson {\n    var temp_p_type: String = \"\";",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"type\" => temp_p_type = r.readValue<String>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for NormalizerJson\");\n      }\n    }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return NormalizerJson(temp_p_type);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 74,
          "line": "public struct NormalizerJson <: JsonDeserializable<NormalizerJson> {"
        },
        {
          "lineno": 75,
          "line": "  let p_type: String;"
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 80,
          "line": "  "
        },
        {
          "lineno": 101,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct NormalizerJson <: JsonDeserializable<NormalizerJson> {\n  let p_type: String;\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "PatternJson",
      "type": "class",
      "start_line": 103,
      "end_line": 131,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 106,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 106,
              "line": "  public init(p_regex: String) {"
            },
            {
              "lineno": 107,
              "line": "    this.p_regex = p_regex;"
            },
            {
              "lineno": 108,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(p_regex: String) {\n    this.p_regex = p_regex;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 110,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 110,
              "line": "  public static func fromJson(r: JsonReader): PatternJson {"
            },
            {
              "lineno": 111,
              "line": "    var temp_p_regex: String = \"\";"
            },
            {
              "lineno": 112,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 113,
              "line": "      match(v) {"
            },
            {
              "lineno": 114,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 115,
              "line": "          r.startObject();"
            },
            {
              "lineno": 116,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 117,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 118,
              "line": "            match (n) {"
            },
            {
              "lineno": 119,
              "line": "              case \"Regex\" => temp_p_regex = r.readValue<String>();"
            },
            {
              "lineno": 120,
              "line": "              case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 121,
              "line": "            }"
            },
            {
              "lineno": 122,
              "line": "          }"
            },
            {
              "lineno": 123,
              "line": "          r.endObject();"
            },
            {
              "lineno": 124,
              "line": "          break;"
            },
            {
              "lineno": 125,
              "line": "        case _ => throw Exception(\"can't deserialize for ProcessJson\");"
            },
            {
              "lineno": 126,
              "line": "      }"
            },
            {
              "lineno": 127,
              "line": "    }"
            },
            {
              "lineno": 128,
              "line": "    return PatternJson(temp_p_regex);"
            },
            {
              "lineno": 129,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public static func fromJson(r: JsonReader): PatternJson {\n    var temp_p_regex: String = \"\";",
              "successors": [
                {
                  "id": 2,
                  "label": "while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "match(v) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"Regex\" => temp_p_regex = r.readValue<String>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "label": "case _ => throw Exception(\"can't deserialize for ProcessJson\");",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return PatternJson(temp_p_regex);",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 103,
          "line": "public struct PatternJson <: JsonDeserializable<PatternJson> {"
        },
        {
          "lineno": 104,
          "line": "  let p_regex: String;"
        },
        {
          "lineno": 105,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "  "
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct PatternJson <: JsonDeserializable<PatternJson> {\n  let p_regex: String;\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ProcessJson",
      "type": "class",
      "start_line": 134,
      "end_line": 233,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 147,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 147,
              "line": "  public init("
            },
            {
              "lineno": 148,
              "line": "    p_type: String,"
            },
            {
              "lineno": 149,
              "line": "    add_prefix_space: Bool,"
            },
            {
              "lineno": 150,
              "line": "    trim_offsets: Bool,"
            },
            {
              "lineno": 151,
              "line": "    use_regex: Bool"
            },
            {
              "lineno": 152,
              "line": "  ) {"
            },
            {
              "lineno": 153,
              "line": "    this.p_type = p_type;"
            },
            {
              "lineno": 154,
              "line": "    if (this.p_type != \"ByteLevel\") {"
            },
            {
              "lineno": 155,
              "line": "      throw Exception(\"this construction function only suppport ByteLevel type\");"
            },
            {
              "lineno": 156,
              "line": "    }"
            },
            {
              "lineno": 157,
              "line": "    this.add_prefix_space = Some(add_prefix_space);"
            },
            {
              "lineno": 158,
              "line": "    this.trim_offsets = Some(trim_offsets);"
            },
            {
              "lineno": 159,
              "line": "    this.use_regex = Some(use_regex);"
            },
            {
              "lineno": 160,
              "line": "    this.pattern = None;"
            },
            {
              "lineno": 161,
              "line": "    this.behavior = None;"
            },
            {
              "lineno": 162,
              "line": "    this.invert = None;"
            },
            {
              "lineno": 163,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(\n    p_type: String,\n    add_prefix_space: Bool,\n    trim_offsets: Bool,\n    use_regex: Bool\n  ) {\n    this.p_type = p_type;\n    if (this.p_type != \"ByteLevel\") {",
              "successors": [
                {
                  "id": 2,
                  "label": "      throw Exception(\"this construction function only suppport ByteLevel type\");\n    }\n    this.add_prefix_space = Some(add_prefix_space);\n    this.trim_offsets = Some(trim_offsets);\n    this.use_regex = Some(use_regex);\n    this.pattern = None;\n    this.behavior = None;\n    this.invert = None;\n  }",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    this.add_prefix_space = Some(add_prefix_space);\n    this.trim_offsets = Some(trim_offsets);\n    this.use_regex = Some(use_regex);\n    this.pattern = None;\n    this.behavior = None;\n    this.invert = None;\n  }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 165,
          "end_line": 181,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 165,
              "line": "  public init("
            },
            {
              "lineno": 166,
              "line": "    p_type: String,"
            },
            {
              "lineno": 167,
              "line": "    pattern: PatternJson,"
            },
            {
              "lineno": 168,
              "line": "    behavior: String,"
            },
            {
              "lineno": 169,
              "line": "    invert: Bool"
            },
            {
              "lineno": 170,
              "line": "  ) {"
            },
            {
              "lineno": 171,
              "line": "    this.p_type = p_type;"
            },
            {
              "lineno": 172,
              "line": "    if (p_type != \"Split\") {"
            },
            {
              "lineno": 173,
              "line": "      throw Exception(\"this construction function only support Split type\")"
            },
            {
              "lineno": 174,
              "line": "    }"
            },
            {
              "lineno": 175,
              "line": "    this.add_prefix_space = None;"
            },
            {
              "lineno": 176,
              "line": "    this.trim_offsets = None;"
            },
            {
              "lineno": 177,
              "line": "    this.use_regex = None;"
            },
            {
              "lineno": 178,
              "line": "    this.pattern = Some(pattern);"
            },
            {
              "lineno": 179,
              "line": "    this.behavior = Some(behavior);"
            },
            {
              "lineno": 180,
              "line": "    this.invert = Some(invert);"
            },
            {
              "lineno": 181,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public init(\n    p_type: String,\n    pattern: PatternJson,\n    behavior: String,\n    invert: Bool\n  ) {\n    this.p_type = p_type;\nif (p_type != \"Split\") {\n      throw Exception(\"this construction function only support Split type\")\n    }",
              "successors": [
                {
                  "id": 3,
                  "label": "this.add_prefix_space = None;\n    this.trim_offsets = None;\n    this.use_regex = None;\n    this.pattern = Some(pattern);\n    this.behavior = Some(behavior);\n    this.invert = Some(invert);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 183,
          "end_line": 232,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 183,
              "line": "  public static func fromJson(r: JsonReader): ProcessJson {"
            },
            {
              "lineno": 184,
              "line": "    var temp_p_type: String = \"\";"
            },
            {
              "lineno": 185,
              "line": "    var temp_add_prefix_space: Bool = false;"
            },
            {
              "lineno": 186,
              "line": "    var temp_trim_offsets: Bool = false;"
            },
            {
              "lineno": 187,
              "line": "    var temp_use_regex: Bool = false;"
            },
            {
              "lineno": 188,
              "line": "    var temp_pattern: PatternJson = PatternJson(\"\");"
            },
            {
              "lineno": 189,
              "line": "    var temp_behavior: String = \"\";"
            },
            {
              "lineno": 190,
              "line": "    var temp_invert: Bool = false;"
            },
            {
              "lineno": 191,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 192,
              "line": "      match(v) {"
            },
            {
              "lineno": 193,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 194,
              "line": "          r.startObject();"
            },
            {
              "lineno": 195,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 196,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 197,
              "line": "            match (n) {"
            },
            {
              "lineno": 198,
              "line": "              case \"type\" => temp_p_type = r.readValue<String>();"
            },
            {
              "lineno": 199,
              "line": "              // ByteLevel"
            },
            {
              "lineno": 200,
              "line": "              case \"add_prefix_space\" => temp_add_prefix_space = r.readValue<Bool>();"
            },
            {
              "lineno": 201,
              "line": "              case \"trim_offsets\" => temp_trim_offsets = r.readValue<Bool>();"
            },
            {
              "lineno": 202,
              "line": "              case \"use_regex\" => temp_use_regex = r.readValue<Bool>();"
            },
            {
              "lineno": 203,
              "line": "              // Split"
            },
            {
              "lineno": 204,
              "line": "              case \"pattern\" => temp_pattern = r.readValue<PatternJson>();"
            },
            {
              "lineno": 205,
              "line": "              case \"behavior\" => temp_behavior = r.readValue<String>();"
            },
            {
              "lineno": 206,
              "line": "              case \"invert\" => temp_invert = r.readValue<Bool>();"
            },
            {
              "lineno": 207,
              "line": "              case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 208,
              "line": "            }"
            },
            {
              "lineno": 209,
              "line": "          }"
            },
            {
              "lineno": 210,
              "line": "          r.endObject();"
            },
            {
              "lineno": 211,
              "line": "          break;"
            },
            {
              "lineno": 212,
              "line": "        case _ => throw Exception(\"can't deserialize for ProcessJson\");"
            },
            {
              "lineno": 213,
              "line": "      }"
            },
            {
              "lineno": 214,
              "line": "    }"
            },
            {
              "lineno": 215,
              "line": "    match (temp_p_type) {"
            },
            {
              "lineno": 216,
              "line": "      case \"ByteLevel\" =>"
            },
            {
              "lineno": 217,
              "line": "        ProcessJson("
            },
            {
              "lineno": 218,
              "line": "          temp_p_type,"
            },
            {
              "lineno": 219,
              "line": "          temp_add_prefix_space,"
            },
            {
              "lineno": 220,
              "line": "          temp_trim_offsets,"
            },
            {
              "lineno": 221,
              "line": "          temp_use_regex,"
            },
            {
              "lineno": 222,
              "line": "        );"
            },
            {
              "lineno": 223,
              "line": "      case \"Split\" => "
            },
            {
              "lineno": 224,
              "line": "        ProcessJson("
            },
            {
              "lineno": 225,
              "line": "          temp_p_type,"
            },
            {
              "lineno": 226,
              "line": "          temp_pattern,"
            },
            {
              "lineno": 227,
              "line": "          temp_behavior,"
            },
            {
              "lineno": 228,
              "line": "          temp_invert"
            },
            {
              "lineno": 229,
              "line": "        )"
            },
            {
              "lineno": 230,
              "line": "      case other => throw Exception(\"unkonw process type ${other}\")"
            },
            {
              "lineno": 231,
              "line": "    }"
            },
            {
              "lineno": 232,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): ProcessJson {\n    var temp_p_type: String = \"\";\n    var temp_add_prefix_space: Bool = false;\n    var temp_trim_offsets: Bool = false;\n    var temp_use_regex: Bool = false;\n    var temp_pattern: PatternJson = PatternJson(\"\");\n    var temp_behavior: String = \"\";\n    var temp_invert: Bool = false;",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"type\" => temp_p_type = r.readValue<String>();\n              // ByteLevel\n              case \"add_prefix_space\" => temp_add_prefix_space = r.readValue<Bool>();\n              case \"trim_offsets\" => temp_trim_offsets = r.readValue<Bool>();\n              case \"use_regex\" => temp_use_regex = r.readValue<Bool>();\n              // Split\n              case \"pattern\" => temp_pattern = r.readValue<PatternJson>();\n              case \"behavior\" => temp_behavior = r.readValue<String>();\n              case \"invert\" => temp_invert = r.readValue<Bool>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    match (temp_p_type) {\n      case \"ByteLevel\" =>\n        ProcessJson(\n          temp_p_type,\n          temp_add_prefix_space,\n          temp_trim_offsets,\n          temp_use_regex,\n        );\n      case \"Split\" => \n        ProcessJson(\n          temp_p_type,\n          temp_pattern,\n          temp_behavior,\n          temp_invert\n        )\n      case other => throw Exception(\"unkonw process type ${other}\")\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 134,
          "line": "public struct ProcessJson <: JsonDeserializable<ProcessJson> {"
        },
        {
          "lineno": 135,
          "line": "  // Union ByteLevel and SplitTokenizer"
        },
        {
          "lineno": 136,
          "line": "  let p_type: String;"
        },
        {
          "lineno": 137,
          "line": "  // use for ByteLevel: decoder/post_processor"
        },
        {
          "lineno": 138,
          "line": "  let add_prefix_space: Option<Bool>;"
        },
        {
          "lineno": 139,
          "line": "  let trim_offsets: Option<Bool>;"
        },
        {
          "lineno": 140,
          "line": "  let use_regex: Option<Bool>;"
        },
        {
          "lineno": 141,
          "line": "  // actived when split tokenizer"
        },
        {
          "lineno": 142,
          "line": "  let pattern: Option<PatternJson>;"
        },
        {
          "lineno": 143,
          "line": "  let behavior: Option<String>;"
        },
        {
          "lineno": 144,
          "line": "  let invert: Option<Bool>;"
        },
        {
          "lineno": 145,
          "line": ""
        },
        {
          "lineno": 146,
          "line": "  // construct for decode/post_preprossor"
        },
        {
          "lineno": 164,
          "line": ""
        },
        {
          "lineno": 182,
          "line": ""
        },
        {
          "lineno": 233,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct ProcessJson <: JsonDeserializable<ProcessJson> {\n  // Union ByteLevel and SplitTokenizer\n  let p_type: String;\n  // use for ByteLevel: decoder/post_processor\n  let add_prefix_space: Option<Bool>;\n  let trim_offsets: Option<Bool>;\n  let use_regex: Option<Bool>;\n  // actived when split tokenizer\n  let pattern: Option<PatternJson>;\n  let behavior: Option<String>;\n  let invert: Option<Bool>;\n",
          "successors": [
            {
              "id": 2,
              "label": "  // construct for decode/post_preprossor",
              "successors": []
            },
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "PreTokenizerJson",
      "type": "class",
      "start_line": 235,
      "end_line": 272,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 238,
          "end_line": 241,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 238,
              "line": "  public init(p_type: String, pretokenizers: ArrayList<ProcessJson>) {"
            },
            {
              "lineno": 239,
              "line": "    this.p_type = p_type;"
            },
            {
              "lineno": 240,
              "line": "    this.pretokenizers = pretokenizers;"
            },
            {
              "lineno": 241,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(p_type: String, pretokenizers: ArrayList<ProcessJson>) {\n    this.p_type = p_type;\n    this.pretokenizers = pretokenizers;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 243,
          "end_line": 247,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 243,
              "line": "  public init() {"
            },
            {
              "lineno": 244,
              "line": "    // default"
            },
            {
              "lineno": 245,
              "line": "    this.p_type = \"\";"
            },
            {
              "lineno": 246,
              "line": "    this.pretokenizers = ArrayList<ProcessJson>();"
            },
            {
              "lineno": 247,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init() {\n    // default\n    this.p_type = \"\";\n    this.pretokenizers = ArrayList<ProcessJson>();\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 249,
          "end_line": 270,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 249,
              "line": "  public static func fromJson(r: JsonReader): PreTokenizerJson {"
            },
            {
              "lineno": 250,
              "line": "    var temp_p_type: String = \"\";"
            },
            {
              "lineno": 251,
              "line": "    var temp_pre_tokenizers: ArrayList<ProcessJson> = ArrayList<ProcessJson>();"
            },
            {
              "lineno": 252,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 253,
              "line": "      match(v) {"
            },
            {
              "lineno": 254,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 255,
              "line": "          r.startObject();"
            },
            {
              "lineno": 256,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 257,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 258,
              "line": "            match (n) {"
            },
            {
              "lineno": 259,
              "line": "              case \"type\" => temp_p_type = r.readValue<String>();"
            },
            {
              "lineno": 260,
              "line": "              case \"pretokenizers\" => temp_pre_tokenizers = r.readValue<ArrayList<ProcessJson>>();"
            },
            {
              "lineno": 261,
              "line": "              case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 262,
              "line": "            }"
            },
            {
              "lineno": 263,
              "line": "          }"
            },
            {
              "lineno": 264,
              "line": "          r.endObject();"
            },
            {
              "lineno": 265,
              "line": "          break;"
            },
            {
              "lineno": 266,
              "line": "        case _ => throw Exception(\"can't deserialize for ProcessJson\");"
            },
            {
              "lineno": 267,
              "line": "      }"
            },
            {
              "lineno": 268,
              "line": "    }"
            },
            {
              "lineno": 269,
              "line": "    return PreTokenizerJson(temp_p_type, temp_pre_tokenizers);"
            },
            {
              "lineno": 270,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): PreTokenizerJson {\n    var temp_p_type: String = \"\";\n    var temp_pre_tokenizers: ArrayList<ProcessJson> = ArrayList<ProcessJson>();",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "            match (n) {\n              case \"type\" => temp_p_type = r.readValue<String>();\n              case \"pretokenizers\" => temp_pre_tokenizers = r.readValue<ArrayList<ProcessJson>>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }",
                          "successors": [
                            {
                              "id": 7,
                              "label": "          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "    }\n    return PreTokenizerJson(temp_p_type, temp_pre_tokenizers);\n  }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 235,
          "line": "public struct PreTokenizerJson <: JsonDeserializable<PreTokenizerJson> {"
        },
        {
          "lineno": 236,
          "line": "  let p_type: String;"
        },
        {
          "lineno": 237,
          "line": "  let pretokenizers: ArrayList<ProcessJson>;"
        },
        {
          "lineno": 242,
          "line": ""
        },
        {
          "lineno": 248,
          "line": ""
        },
        {
          "lineno": 271,
          "line": ""
        },
        {
          "lineno": 272,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct PreTokenizerJson <: JsonDeserializable<PreTokenizerJson> {\n  let p_type: String;\n  let pretokenizers: ArrayList<ProcessJson>;\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ModelJson",
      "type": "class",
      "start_line": 274,
      "end_line": 358,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 284,
          "end_line": 310,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 284,
              "line": "  public init("
            },
            {
              "lineno": 285,
              "line": "    p_type: String,"
            },
            {
              "lineno": 286,
              "line": "    dropout: Option<Float32>,"
            },
            {
              "lineno": 287,
              "line": "    vocab: HashMap<String, UInt32>,"
            },
            {
              "lineno": 288,
              "line": "    merges: ArrayList<String>,"
            },
            {
              "lineno": 289,
              "line": "    unk_token!: Option<String> = None,"
            },
            {
              "lineno": 290,
              "line": "    continuing_subword_prefix!: String = \"\","
            },
            {
              "lineno": 291,
              "line": "    end_of_word_suffix!: String = \"\","
            },
            {
              "lineno": 292,
              "line": "    fuse_unk!: Bool = false,"
            },
            {
              "lineno": 293,
              "line": "    byte_fallback!: Bool = false"
            },
            {
              "lineno": 294,
              "line": "  ) {"
            },
            {
              "lineno": 295,
              "line": "    this.p_type = p_type;"
            },
            {
              "lineno": 296,
              "line": "    if (dropout.isSome()) {"
            },
            {
              "lineno": 297,
              "line": "      let dropout_value = dropout.getOrThrow();"
            },
            {
              "lineno": 298,
              "line": "      if (dropout_value < 0.0 || dropout_value > 1.0) {"
            },
            {
              "lineno": 299,
              "line": "        throw Exception(\"dropout can only between 0~1\")"
            },
            {
              "lineno": 300,
              "line": "      }"
            },
            {
              "lineno": 301,
              "line": "    }"
            },
            {
              "lineno": 302,
              "line": "    this.dropout = dropout;"
            },
            {
              "lineno": 303,
              "line": "    this.unk_token = unk_token;"
            },
            {
              "lineno": 304,
              "line": "    this.continuing_subword_prefix = continuing_subword_prefix;"
            },
            {
              "lineno": 305,
              "line": "    this.end_of_word_suffix = end_of_word_suffix;"
            },
            {
              "lineno": 306,
              "line": "    this.fuse_unk = fuse_unk;"
            },
            {
              "lineno": 307,
              "line": "    this.byte_fallback = byte_fallback;"
            },
            {
              "lineno": 308,
              "line": "    this.vocab = vocab;"
            },
            {
              "lineno": 309,
              "line": "    this.merges = merges;"
            },
            {
              "lineno": 310,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(\n    p_type: String,\n    dropout: Option<Float32>,\n    vocab: HashMap<String, UInt32>,\n    merges: ArrayList<String>,\n    unk_token!: Option<String> = None,\n    continuing_subword_prefix!: String = \"\",\n    end_of_word_suffix!: String = \"\",\n    fuse_unk!: Bool = false,\n    byte_fallback!: Bool = false\n  ) {\n    this.p_type = p_type;\n    if (dropout.isSome()) {\n      let dropout_value = dropout.getOrThrow();",
              "successors": [
                {
                  "id": 3,
                  "label": "      if (dropout_value < 0.0 || dropout_value > 1.0) {\n        throw Exception(\"dropout can only between 0~1\")\n      }\n    }\n    this.dropout = dropout;\n    this.unk_token = unk_token;\n    this.continuing_subword_prefix = continuing_subword_prefix;\n    this.end_of_word_suffix = end_of_word_suffix;\n    this.fuse_unk = fuse_unk;\n    this.byte_fallback = byte_fallback;\n    this.vocab = vocab;\n    this.merges = merges;\n  }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 312,
          "end_line": 357,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 312,
              "line": "  public static func fromJson(r: JsonReader): ModelJson {"
            },
            {
              "lineno": 313,
              "line": "    var temp_p_type: String = \"\";"
            },
            {
              "lineno": 314,
              "line": "    var temp_dropout: Option<Float32> = None;"
            },
            {
              "lineno": 315,
              "line": "    var temp_unk_token: Option<String> = None;"
            },
            {
              "lineno": 316,
              "line": "    var temp_continuing_subword_prefix: String = \"\";"
            },
            {
              "lineno": 317,
              "line": "    var temp_end_of_word_suffix: String = \"\";"
            },
            {
              "lineno": 318,
              "line": "    var temp_fuse_unk: Bool = false;"
            },
            {
              "lineno": 319,
              "line": "    var temp_byte_fallback: Bool = false;"
            },
            {
              "lineno": 320,
              "line": "    var temp_vocab: HashMap<String, UInt32> = HashMap<String, UInt32>();"
            },
            {
              "lineno": 321,
              "line": "    var temp_merges: ArrayList<String> = ArrayList<String>();"
            },
            {
              "lineno": 322,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 323,
              "line": "      match(v) {"
            },
            {
              "lineno": 324,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 325,
              "line": "          r.startObject();"
            },
            {
              "lineno": 326,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 327,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 328,
              "line": "            match (n) {"
            },
            {
              "lineno": 329,
              "line": "              case \"type\" => temp_p_type = r.readValue<String>();"
            },
            {
              "lineno": 330,
              "line": "              case \"dropout\" => temp_dropout = r.readValue<Option<Float32>>();"
            },
            {
              "lineno": 331,
              "line": "              case \"unk_token\" => temp_unk_token = r.readValue<Option<String>>()"
            },
            {
              "lineno": 332,
              "line": "              case \"continuing_subword_prefix\" => temp_continuing_subword_prefix = r.readValue<String>();"
            },
            {
              "lineno": 333,
              "line": "              case \"end_of_word_suffix\" => temp_end_of_word_suffix = r.readValue<String>();"
            },
            {
              "lineno": 334,
              "line": "              case \"fuse_unk\" => temp_fuse_unk = r.readValue<Bool>();"
            },
            {
              "lineno": 335,
              "line": "              case \"byte_fallback\" => temp_byte_fallback = r.readValue<Bool>();"
            },
            {
              "lineno": 336,
              "line": "              case \"vocab\" => temp_vocab = r.readValue<HashMap<String, UInt32>>();"
            },
            {
              "lineno": 337,
              "line": "              case \"merges\" => temp_merges = r.readValue<ArrayList<String>>();"
            },
            {
              "lineno": 338,
              "line": "              case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 339,
              "line": "            }"
            },
            {
              "lineno": 340,
              "line": "          }"
            },
            {
              "lineno": 341,
              "line": "          r.endObject();"
            },
            {
              "lineno": 342,
              "line": "          break;"
            },
            {
              "lineno": 343,
              "line": "        case _ => throw Exception(\"can't deserialize for ModelJson\");"
            },
            {
              "lineno": 344,
              "line": "      }"
            },
            {
              "lineno": 345,
              "line": "    }"
            },
            {
              "lineno": 346,
              "line": "    return ModelJson("
            },
            {
              "lineno": 347,
              "line": "      temp_p_type,"
            },
            {
              "lineno": 348,
              "line": "      temp_dropout,"
            },
            {
              "lineno": 349,
              "line": "      temp_vocab,"
            },
            {
              "lineno": 350,
              "line": "      temp_merges,"
            },
            {
              "lineno": 351,
              "line": "      unk_token: temp_unk_token,"
            },
            {
              "lineno": 352,
              "line": "      continuing_subword_prefix: temp_continuing_subword_prefix,"
            },
            {
              "lineno": 353,
              "line": "      end_of_word_suffix: temp_end_of_word_suffix,"
            },
            {
              "lineno": 354,
              "line": "      fuse_unk: temp_fuse_unk,"
            },
            {
              "lineno": 355,
              "line": "      byte_fallback: temp_byte_fallback"
            },
            {
              "lineno": 356,
              "line": "    );"
            },
            {
              "lineno": 357,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): ModelJson {\n    var temp_p_type: String = \"\";\n    var temp_dropout: Option<Float32> = None;\n    var temp_unk_token: Option<String> = None;\n    var temp_continuing_subword_prefix: String = \"\";\n    var temp_end_of_word_suffix: String = \"\";\n    var temp_fuse_unk: Bool = false;\n    var temp_byte_fallback: Bool = false;\n    var temp_vocab: HashMap<String, UInt32> = HashMap<String, UInt32>();\n    var temp_merges: ArrayList<String> = ArrayList<String>();",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "      match(v) {\n        case BeginObject =>",
                      "successors": [
                        {
                          "id": 5,
                          "label": "          r.startObject();\n          while(r.peek() != EndObject) {",
                          "successors": [
                            {
                              "id": 7,
                              "label": "            let n = r.readName()\n            match (n) {",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "              case \"type\" => temp_p_type = r.readValue<String>();\n              case \"dropout\" => temp_dropout = r.readValue<Option<Float32>>();\n              case \"unk_token\" => temp_unk_token = r.readValue<Option<String>>()\n              case \"continuing_subword_prefix\" => temp_continuing_subword_prefix = r.readValue<String>();\n              case \"end_of_word_suffix\" => temp_end_of_word_suffix = r.readValue<String>();\n              case \"fuse_unk\" => temp_fuse_unk = r.readValue<Bool>();\n              case \"byte_fallback\" => temp_byte_fallback = r.readValue<Bool>();\n              case \"vocab\" => temp_vocab = r.readValue<HashMap<String, UInt32>>();\n              case \"merges\" => temp_merges = r.readValue<ArrayList<String>>();\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "          r.endObject();\n          break;",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "label": "        case _ => throw Exception(\"can't deserialize for ModelJson\");\n      }\n    }",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "label": "    return ModelJson(\n      temp_p_type,\n      temp_dropout,\n      temp_vocab,\n      temp_merges,\n      unk_token: temp_unk_token,\n      continuing_subword_prefix: temp_continuing_subword_prefix,\n      end_of_word_suffix: temp_end_of_word_suffix,\n      fuse_unk: temp_fuse_unk,\n      byte_fallback: temp_byte_fallback\n    );\n  }",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 274,
          "line": "public struct ModelJson <: JsonDeserializable<ModelJson> {"
        },
        {
          "lineno": 275,
          "line": "  let p_type: String;"
        },
        {
          "lineno": 276,
          "line": "  let dropout: Option<Float32>;"
        },
        {
          "lineno": 277,
          "line": "  var unk_token: Option<String> = None;"
        },
        {
          "lineno": 278,
          "line": "  var continuing_subword_prefix: String = \"\";"
        },
        {
          "lineno": 279,
          "line": "  var end_of_word_suffix: String = \"\";"
        },
        {
          "lineno": 280,
          "line": "  var fuse_unk: Bool = false;"
        },
        {
          "lineno": 281,
          "line": "  var byte_fallback: Bool = false;"
        },
        {
          "lineno": 282,
          "line": "  let vocab: HashMap<String, UInt32>;"
        },
        {
          "lineno": 283,
          "line": "  let merges: ArrayList<String>;"
        },
        {
          "lineno": 311,
          "line": ""
        },
        {
          "lineno": 358,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct ModelJson <: JsonDeserializable<ModelJson> {\n  let p_type: String;\n  let dropout: Option<Float32>;\n  var unk_token: Option<String> = None;\n  var continuing_subword_prefix: String = \"\";\n  var end_of_word_suffix: String = \"\";\n  var fuse_unk: Bool = false;\n  var byte_fallback: Bool = false;\n  let vocab: HashMap<String, UInt32>;\n  let merges: ArrayList<String>;",
          "successors": []
        }
      ]
    },
    {
      "name": "TokenizerJson",
      "type": "class",
      "start_line": 360,
      "end_line": 439,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 371,
          "end_line": 391,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 371,
              "line": "  public init("
            },
            {
              "lineno": 372,
              "line": "    version: String,"
            },
            {
              "lineno": 373,
              "line": "    truncation: Option<String>,"
            },
            {
              "lineno": 374,
              "line": "    padding: Option<String>,"
            },
            {
              "lineno": 375,
              "line": "    added_tokens: ArrayList<TokenJson>,"
            },
            {
              "lineno": 376,
              "line": "    normalizer: NormalizerJson,"
            },
            {
              "lineno": 377,
              "line": "    pre_tokenizer: PreTokenizerJson,"
            },
            {
              "lineno": 378,
              "line": "    post_processor: ProcessJson,"
            },
            {
              "lineno": 379,
              "line": "    decoder: ProcessJson,"
            },
            {
              "lineno": 380,
              "line": "    model: ModelJson"
            },
            {
              "lineno": 381,
              "line": "  ) {"
            },
            {
              "lineno": 382,
              "line": "    this.version = version;"
            },
            {
              "lineno": 383,
              "line": "    this.truncation = truncation;"
            },
            {
              "lineno": 384,
              "line": "    this.padding = padding;"
            },
            {
              "lineno": 385,
              "line": "    this.added_tokens = added_tokens;"
            },
            {
              "lineno": 386,
              "line": "    this.normalizer = normalizer;"
            },
            {
              "lineno": 387,
              "line": "    this.pre_tokenizer = pre_tokenizer;"
            },
            {
              "lineno": 388,
              "line": "    this.post_processor = post_processor;"
            },
            {
              "lineno": 389,
              "line": "    this.decoder = decoder;"
            },
            {
              "lineno": 390,
              "line": "    this.model = model;"
            },
            {
              "lineno": 391,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(\n    version: String,\n    truncation: Option<String>,\n    padding: Option<String>,\n    added_tokens: ArrayList<TokenJson>,\n    normalizer: NormalizerJson,\n    pre_tokenizer: PreTokenizerJson,\n    post_processor: ProcessJson,\n    decoder: ProcessJson,\n    model: ModelJson\n  ) {\n    this.version = version;\n    this.truncation = truncation;\n    this.padding = padding;\n    this.added_tokens = added_tokens;\n    this.normalizer = normalizer;\n    this.pre_tokenizer = pre_tokenizer;\n    this.post_processor = post_processor;\n    this.decoder = decoder;\n    this.model = model;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 393,
          "end_line": 438,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 393,
              "line": "  public static func fromJson(r: JsonReader): TokenizerJson {"
            },
            {
              "lineno": 394,
              "line": "    var temp_version: String = \"\";"
            },
            {
              "lineno": 395,
              "line": "    var temp_truncation: Option<String> = None;"
            },
            {
              "lineno": 396,
              "line": "    var temp_padding: Option<String> = None;"
            },
            {
              "lineno": 397,
              "line": "    var temp_added_tokens: ArrayList<TokenJson> = ArrayList<TokenJson>();"
            },
            {
              "lineno": 398,
              "line": "    var temp_normalizer: NormalizerJson = NormalizerJson(\"\");"
            },
            {
              "lineno": 399,
              "line": "    var temp_pre_tokenizer: PreTokenizerJson = PreTokenizerJson();"
            },
            {
              "lineno": 400,
              "line": "    var temp_post_processor: Option<ProcessJson> = None;"
            },
            {
              "lineno": 401,
              "line": "    var temp_decoder: Option<ProcessJson> = None;"
            },
            {
              "lineno": 402,
              "line": "    var temp_model: Option<ModelJson> = None;"
            },
            {
              "lineno": 403,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 404,
              "line": "      match(v) {"
            },
            {
              "lineno": 405,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 406,
              "line": "          r.startObject();"
            },
            {
              "lineno": 407,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 408,
              "line": "            let n = r.readName()"
            },
            {
              "lineno": 409,
              "line": "            match (n) {"
            },
            {
              "lineno": 410,
              "line": "              case \"version\" => temp_version = r.readValue<String>();"
            },
            {
              "lineno": 411,
              "line": "              case \"truncation\" => temp_truncation = r.readValue<Option<String>>();"
            },
            {
              "lineno": 412,
              "line": "              case \"padding\" => temp_padding = r.readValue<Option<String>>();"
            },
            {
              "lineno": 413,
              "line": "              case \"added_tokens\" => temp_added_tokens = r.readValue<ArrayList<TokenJson>>();"
            },
            {
              "lineno": 414,
              "line": "              case \"normalizer\" => temp_normalizer = r.readValue<NormalizerJson>();"
            },
            {
              "lineno": 415,
              "line": "              case \"pre_tokenizer\" => temp_pre_tokenizer = r.readValue<PreTokenizerJson>();"
            },
            {
              "lineno": 416,
              "line": "              case \"post_processor\" => temp_post_processor = Some(r.readValue<ProcessJson>());"
            },
            {
              "lineno": 417,
              "line": "              case \"decoder\" => temp_decoder = Some(r.readValue<ProcessJson>());"
            },
            {
              "lineno": 418,
              "line": "              case \"model\" => temp_model = Some(r.readValue<ModelJson>());"
            },
            {
              "lineno": 419,
              "line": "              case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 420,
              "line": "            }"
            },
            {
              "lineno": 421,
              "line": "          }"
            },
            {
              "lineno": 422,
              "line": "          r.endObject();"
            },
            {
              "lineno": 423,
              "line": "          break;"
            },
            {
              "lineno": 424,
              "line": "        case _ => throw Exception(\"can't deserialize for ProcessJson\");"
            },
            {
              "lineno": 425,
              "line": "      }"
            },
            {
              "lineno": 426,
              "line": "    }"
            },
            {
              "lineno": 427,
              "line": "    return TokenizerJson("
            },
            {
              "lineno": 428,
              "line": "      temp_version,"
            },
            {
              "lineno": 429,
              "line": "      temp_truncation,"
            },
            {
              "lineno": 430,
              "line": "      temp_padding,"
            },
            {
              "lineno": 431,
              "line": "      temp_added_tokens,"
            },
            {
              "lineno": 432,
              "line": "      temp_normalizer,"
            },
            {
              "lineno": 433,
              "line": "      temp_pre_tokenizer,"
            },
            {
              "lineno": 434,
              "line": "      temp_post_processor.getOrThrow(),"
            },
            {
              "lineno": 435,
              "line": "      temp_decoder.getOrThrow(),"
            },
            {
              "lineno": 436,
              "line": "      temp_model.getOrThrow(),"
            },
            {
              "lineno": 437,
              "line": "    );"
            },
            {
              "lineno": 438,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): TokenizerJson {\n    var temp_version: String = \"\";\n    var temp_truncation: Option<String> = None;\n    var temp_padding: Option<String> = None;\n    var temp_added_tokens: ArrayList<TokenJson> = ArrayList<TokenJson>();\n    var temp_normalizer: NormalizerJson = NormalizerJson(\"\");\n    var temp_pre_tokenizer: PreTokenizerJson = PreTokenizerJson();\n    var temp_post_processor: Option<ProcessJson> = None;\n    var temp_decoder: Option<ProcessJson> = None;\n    var temp_model: Option<ModelJson> = None;",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {\n      match(v) {\n        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {\n              case \"version\" => temp_version = r.readValue<String>();\n              case \"truncation\" => temp_truncation = r.readValue<Option<String>>();\n              case \"padding\" => temp_padding = r.readValue<Option<String>>();\n              case \"added_tokens\" => temp_added_tokens = r.readValue<ArrayList<TokenJson>>();\n              case \"normalizer\" => temp_normalizer = r.readValue<NormalizerJson>();\n              case \"pre_tokenizer\" => temp_pre_tokenizer = r.readValue<PreTokenizerJson>();\n              case \"post_processor\" => temp_post_processor = Some(r.readValue<ProcessJson>());\n              case \"decoder\" => temp_decoder = Some(r.readValue<ProcessJson>());\n              case \"model\" => temp_model = Some(r.readValue<ModelJson>());\n              case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;\n        case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return TokenizerJson(\n      temp_version,\n      temp_truncation,\n      temp_padding,\n      temp_added_tokens,\n      temp_normalizer,\n      temp_pre_tokenizer,\n      temp_post_processor.getOrThrow(),\n      temp_decoder.getOrThrow(),\n      temp_model.getOrThrow(),\n    );",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 360,
          "line": "public struct TokenizerJson <: JsonDeserializable<TokenizerJson> {"
        },
        {
          "lineno": 361,
          "line": "  let version: String;"
        },
        {
          "lineno": 362,
          "line": "  let truncation: Option<String>;"
        },
        {
          "lineno": 363,
          "line": "  let padding: Option<String>;"
        },
        {
          "lineno": 364,
          "line": "  let added_tokens: ArrayList<TokenJson>;"
        },
        {
          "lineno": 365,
          "line": "  let normalizer: NormalizerJson;"
        },
        {
          "lineno": 366,
          "line": "  let pre_tokenizer: PreTokenizerJson;"
        },
        {
          "lineno": 367,
          "line": "  let post_processor: ProcessJson;"
        },
        {
          "lineno": 368,
          "line": "  let decoder: ProcessJson;"
        },
        {
          "lineno": 369,
          "line": "  let model: ModelJson;"
        },
        {
          "lineno": 370,
          "line": ""
        },
        {
          "lineno": 392,
          "line": ""
        },
        {
          "lineno": 439,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct TokenizerJson <: JsonDeserializable<TokenizerJson> {\n  let version: String;\n  let truncation: Option<String>;\n  let padding: Option<String>;\n  let added_tokens: ArrayList<TokenJson>;\n  let normalizer: NormalizerJson;\n  let pre_tokenizer: PreTokenizerJson;\n  let post_processor: ProcessJson;\n  let decoder: ProcessJson;\n  let model: ModelJson;\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package tokenizer"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "internal import encoding.json.stream.*"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 73,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    },
    {
      "lineno": 132,
      "line": ""
    },
    {
      "lineno": 133,
      "line": ""
    },
    {
      "lineno": 234,
      "line": ""
    },
    {
      "lineno": 273,
      "line": ""
    },
    {
      "lineno": 359,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package tokenizer\ninternal import encoding.json.stream.*",
      "successors": []
    }
  ]
}