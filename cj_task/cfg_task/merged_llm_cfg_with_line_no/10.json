{
  "name": "Example Script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 82,
  "functions": [],
  "classes": [
    {
      "name": "StructSerializableFunctionGenerator",
      "type": "class",
      "start_line": 7,
      "end_line": 82,
      "functions": [
        {
          "name": "generate",
          "type": "function",
          "start_line": 9,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public func generate(context: Context): Unit {"
            },
            {
              "lineno": 10,
              "line": "        this.generateDeserialize(context)"
            },
            {
              "lineno": 11,
              "line": "        this.generateSerialize(context)"
            },
            {
              "lineno": 12,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func generate(context: Context): Unit {\n        this.generateDeserialize(context)\n        this.generateSerialize(context)",
              "successors": []
            }
          ]
        },
        {
          "name": "generateStructNameTokens",
          "type": "function",
          "start_line": 14,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    private func generateStructNameTokens(decl: StructDecl): Tokens {"
            },
            {
              "lineno": 15,
              "line": "        try {"
            },
            {
              "lineno": 16,
              "line": "            return quote($(decl.identifier)$(decl.genericParam))"
            },
            {
              "lineno": 17,
              "line": "        } catch (_: Exception) {"
            },
            {
              "lineno": 18,
              "line": "            return quote($(decl.identifier))"
            },
            {
              "lineno": 19,
              "line": "        }"
            },
            {
              "lineno": 20,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "private func generateStructNameTokens(decl: StructDecl): Tokens {",
              "successors": [
                {
                  "id": 2,
                  "label": "try {\n    return quote($(decl.identifier)$(decl.genericParam))\n} catch (_: Exception) {\n    return quote($(decl.identifier))",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "generateDeserialize",
          "type": "function",
          "start_line": 22,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    private func generateDeserialize(context: Context): Unit {"
            },
            {
              "lineno": 23,
              "line": "        let arguments = ArrayList<Argument>()"
            },
            {
              "lineno": 24,
              "line": "        let assign = quote()"
            },
            {
              "lineno": 25,
              "line": "        for (reval in context.valDecls) {"
            },
            {
              "lineno": 26,
              "line": "            if (reval.assign.kind != TokenKind.ASSIGN) {"
            },
            {
              "lineno": 27,
              "line": "                let arg = Argument()"
            },
            {
              "lineno": 28,
              "line": "                arg.identifier = Token(TokenKind.IDENTIFIER, reval.identifier.value)"
            },
            {
              "lineno": 29,
              "line": "                arg.expr = CallExpr(quote("
            },
            {
              "lineno": 30,
              "line": "                    $(reval.declType).deserialize(dms.get($(reval.identifier.value)))"
            },
            {
              "lineno": 31,
              "line": "                ))"
            },
            {
              "lineno": 32,
              "line": "                arg.colon = Token(TokenKind.COLON, \":\")"
            },
            {
              "lineno": 33,
              "line": "                arguments.append(arg)"
            },
            {
              "lineno": 34,
              "line": "            } else if (reval.keyword.kind == TokenKind.VAR) {"
            },
            {
              "lineno": 35,
              "line": "                assign.append(quote("
            },
            {
              "lineno": 36,
              "line": "                    reval.$(reval.identifier) = $(reval.declType).deserialize(dms.get($(reval.identifier.value)))"
            },
            {
              "lineno": 37,
              "line": "                ))"
            },
            {
              "lineno": 38,
              "line": "            }"
            },
            {
              "lineno": 39,
              "line": "        }"
            },
            {
              "lineno": 40,
              "line": "        let ce = CallExpr(quote($(generateStructNameTokens(context.structDecl))()))"
            },
            {
              "lineno": 41,
              "line": "        ce.arguments = arguments"
            },
            {
              "lineno": 42,
              "line": "        let body: Tokens"
            },
            {
              "lineno": 43,
              "line": "        if (assign.size == 0) {"
            },
            {
              "lineno": 44,
              "line": "            body = quote("
            },
            {
              "lineno": 45,
              "line": "                return $(ce)"
            },
            {
              "lineno": 46,
              "line": "            )"
            },
            {
              "lineno": 47,
              "line": "        } else {"
            },
            {
              "lineno": 48,
              "line": "            body = quote("
            },
            {
              "lineno": 49,
              "line": "                var reval = $(ce)"
            },
            {
              "lineno": 50,
              "line": "                $(assign)"
            },
            {
              "lineno": 51,
              "line": "                return reval"
            },
            {
              "lineno": 52,
              "line": "            )"
            },
            {
              "lineno": 53,
              "line": "        }"
            },
            {
              "lineno": 54,
              "line": "        let deserializeFunc = FuncDecl(quote("
            },
            {
              "lineno": 55,
              "line": "            public static func deserialize(dm: DataModel): $(generateStructNameTokens(context.structDecl)) {"
            },
            {
              "lineno": 56,
              "line": "                let dms = match (dm) {"
            },
            {
              "lineno": 57,
              "line": "                    case d: DataModelStruct => d"
            },
            {
              "lineno": 58,
              "line": "                    case _ => throw Exception(\"This data is not DataModelStruct\")"
            },
            {
              "lineno": 59,
              "line": "                }"
            },
            {
              "lineno": 60,
              "line": "                $(body)"
            },
            {
              "lineno": 61,
              "line": "            }"
            },
            {
              "lineno": 62,
              "line": "        ))"
            },
            {
              "lineno": 63,
              "line": "        context.structDecl.body.decls.append(deserializeFunc)"
            },
            {
              "lineno": 64,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func generateDeserialize(context: Context): Unit {\n        let arguments = ArrayList<Argument>()\n        let assign = quote()",
              "successors": [
                {
                  "id": 2,
                  "label": "        for (reval in context.valDecls) {\n            if (reval.assign.kind != TokenKind.ASSIGN) {\n                let arg = Argument()\n                arg.identifier = Token(TokenKind.IDENTIFIER, reval.identifier.value)\n                arg.expr = CallExpr(quote(\n                    $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\n                ))\n                arg.colon = Token(TokenKind.COLON, \":\")\n                arguments.append(arg)\n            } else if (reval.keyword.kind == TokenKind.VAR) {\n                assign.append(quote(\n                    reval.$(reval.identifier) = $(reval.declType).deserialize(dms.get($(reval.identifier.value)))\n                ))\n            }\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        let ce = CallExpr(quote($(generateStructNameTokens(context.structDecl))()))\n        ce.arguments = arguments\n        let body: Tokens",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        if (assign.size == 0) {\n            body = quote(\n                return $(ce)\n            )",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "label": "        } else {\n            body = quote(\n                var reval = $(ce)\n                $(assign)\n                return reval\n            )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "        let deserializeFunc = FuncDecl(quote(\n            public static func deserialize(dm: DataModel): $(generateStructNameTokens(context.structDecl)) {\n                let dms = match (dm) {\n                    case d: DataModelStruct => d\n                    case _ => throw Exception(\"This data is not DataModelStruct\")\n                }\n                $(body)\n            }\n        ))\n        context.structDecl.body.decls.append(deserializeFunc)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "generateSerialize",
          "type": "function",
          "start_line": 66,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    private func generateSerialize(context: Context): Unit {"
            },
            {
              "lineno": 67,
              "line": "        let body = quote()"
            },
            {
              "lineno": 68,
              "line": "        for (reval in context.valDecls) {"
            },
            {
              "lineno": 69,
              "line": "            body.append(quote("
            },
            {
              "lineno": 70,
              "line": "                dms.add(field($(reval.identifier.value), this.$(reval.identifier)))"
            },
            {
              "lineno": 71,
              "line": "            ))"
            },
            {
              "lineno": 72,
              "line": "        }"
            },
            {
              "lineno": 73,
              "line": "        let serializeFunc = FuncDecl(quote("
            },
            {
              "lineno": 74,
              "line": "            public func serialize(): DataModel {"
            },
            {
              "lineno": 75,
              "line": "                let dms = DataModelStruct()"
            },
            {
              "lineno": 76,
              "line": "                $(body)"
            },
            {
              "lineno": 77,
              "line": "                return dms"
            },
            {
              "lineno": 78,
              "line": "            }"
            },
            {
              "lineno": 79,
              "line": "        ))"
            },
            {
              "lineno": 80,
              "line": "        context.structDecl.body.decls.append(serializeFunc)"
            },
            {
              "lineno": 81,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func generateSerialize(context: Context): Unit {\n        let body = quote()",
              "successors": [
                {
                  "id": 2,
                  "label": "        for (reval in context.valDecls) {\n            body.append(quote(\n                dms.add(field($(reval.identifier.value), this.$(reval.identifier)))\n            ))\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        let serializeFunc = FuncDecl(quote(\n            public func serialize(): DataModel {\n                let dms = DataModelStruct()\n                $(body)\n                return dms\n            }\n        ))\n        context.structDecl.body.decls.append(serializeFunc)\n    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "class StructSerializableFunctionGenerator <: Generator {"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 82,
          "line": "}"
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package Macro_JsonSerializable.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.*"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "// 结构体 serialize、deserialize 方法生成器"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros\nimport std.ast.*\nimport std.collection.*",
      "successors": [
        {
          "id": 3,
          "label": "// 结构体 serialize、deserialize 方法生成器",
          "successors": []
        }
      ]
    }
  ]
}