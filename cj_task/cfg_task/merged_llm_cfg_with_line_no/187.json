{
  "name": "benchmark_client",
  "type": "CFG",
  "start_line": 1,
  "end_line": 52,
  "functions": [],
  "classes": [
    {
      "name": "PerformanceTask",
      "type": "class",
      "start_line": 2,
      "end_line": 52,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 9,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public init("
            },
            {
              "lineno": 10,
              "line": "        sessions: Array<Session>,"
            },
            {
              "lineno": 11,
              "line": "        totalRequestCount: Int64,"
            },
            {
              "lineno": 12,
              "line": "        executeNum: Int64,"
            },
            {
              "lineno": 13,
              "line": "        message: String,"
            },
            {
              "lineno": 14,
              "line": "        barrier: Barrier"
            },
            {
              "lineno": 15,
              "line": "    ) {"
            },
            {
              "lineno": 16,
              "line": "        this.sessions = sessions"
            },
            {
              "lineno": 17,
              "line": "        this.totalRequestCount = totalRequestCount"
            },
            {
              "lineno": 18,
              "line": "        this.executeNum = executeNum"
            },
            {
              "lineno": 19,
              "line": "        this.message = message"
            },
            {
              "lineno": 20,
              "line": "        this.barrier = barrier"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public init(\n        sessions: Array<Session>,\n        totalRequestCount: Int64,\n        executeNum: Int64,\n        message: String,\n        barrier: Barrier\n    ) {\n        this.sessions = sessions\n        this.totalRequestCount = totalRequestCount\n        this.executeNum = executeNum\n        this.message = message\n        this.barrier = barrier\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 22,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    public func run() {"
            },
            {
              "lineno": 23,
              "line": "        // 等待所有线程一起执行"
            },
            {
              "lineno": 24,
              "line": "        barrier.wait()"
            },
            {
              "lineno": 25,
              "line": "        var i = 0"
            },
            {
              "lineno": 26,
              "line": "        while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {"
            },
            {
              "lineno": 27,
              "line": "            // 发送消息，并收取对应的响应"
            },
            {
              "lineno": 28,
              "line": "            let echoRequest = EchoRequest(TaskController.requestIdGenerator.fetchAdd(1), message)"
            },
            {
              "lineno": 29,
              "line": "            let session = sessions[nextIndex()]"
            },
            {
              "lineno": 30,
              "line": "            session.writeAndFlushMessage(echoRequest)"
            },
            {
              "lineno": 31,
              "line": "            try {"
            },
            {
              "lineno": 32,
              "line": "                let echoResponse = echoRequest.waitForResponse()"
            },
            {
              "lineno": 33,
              "line": "                if (TaskController.stopTime.load() == 0) {"
            },
            {
              "lineno": 34,
              "line": "                    let totalCount = TaskController.totalInvokeCount.fetchAdd(1)"
            },
            {
              "lineno": 35,
              "line": "                    if (totalCount + 1 >= totalRequestCount) {"
            },
            {
              "lineno": 36,
              "line": "                        // 设置停止时间"
            },
            {
              "lineno": 37,
              "line": "                        TaskController.stopTime.compareAndSwap(0, DateTime.now().toUnixTimeStamp().toMilliseconds());"
            },
            {
              "lineno": 38,
              "line": "                    }"
            },
            {
              "lineno": 39,
              "line": "                }"
            },
            {
              "lineno": 40,
              "line": "                i++"
            },
            {
              "lineno": 41,
              "line": "            } catch (ex: Exception) {"
            },
            {
              "lineno": 42,
              "line": "                ex.printStackTrace()"
            },
            {
              "lineno": 43,
              "line": "                break"
            },
            {
              "lineno": 44,
              "line": "            }"
            },
            {
              "lineno": 45,
              "line": "        }"
            },
            {
              "lineno": 46,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func run() {\n        // 等待所有线程一起执行\n        barrier.wait()\n        var i = 0",
              "successors": [
                {
                  "id": 2,
                  "label": "        while (TaskController.running.load() && (executeNum == -1 || i < executeNum)) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            // 发送消息，并获取对应的响应\n            let echoRequest = EchoRequest(TaskController.requestIdGenerator.fetchAdd(1), message)\n            let session = sessions[nextIndex()]\n            session.writeAndFlushMessage(echoRequest)\n            try {\n                let echoResponse = echoRequest.waitForResponse()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "                if (TaskController.stopTime.load() == 0) {\n                    let totalCount = TaskController.totalInvokeCount.fetchAdd(1)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "                    if (totalCount + 1 >= totalRequestCount) {\n                        // 设置停止时间\n                        TaskController.stopTime.compareAndSwap(0, DateTime.now().toUnixTimeStamp().toMilliseconds());",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "                }\n                i++\n            } catch (ex: Exception) {\n                ex.printStackTrace()\n                break",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "nextIndex",
          "type": "function",
          "start_line": 48,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    private func nextIndex(): Int64 {"
            },
            {
              "lineno": 49,
              "line": "        let index = indexGenerator.fetchAdd(1) % UInt64(sessions.size)"
            },
            {
              "lineno": 50,
              "line": "        return Int64(index)"
            },
            {
              "lineno": 51,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    private func nextIndex(): Int64 {\n        let index = indexGenerator.fetchAdd(1) % UInt64(sessions.size)\n        return Int64(index)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 2,
          "line": "public class PerformanceTask {"
        },
        {
          "lineno": 3,
          "line": "    static let indexGenerator = AtomicUInt64(0)"
        },
        {
          "lineno": 4,
          "line": "    let sessions: Array<Session>"
        },
        {
          "lineno": 5,
          "line": "    private let totalRequestCount: Int64"
        },
        {
          "lineno": 6,
          "line": "    private let executeNum: Int64"
        },
        {
          "lineno": 7,
          "line": "    private let message: String"
        },
        {
          "lineno": 8,
          "line": "    private let barrier: Barrier"
        },
        {
          "lineno": 47,
          "line": "    @OverflowWrapping"
        },
        {
          "lineno": 52,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class PerformanceTask {\n    static let indexGenerator = AtomicUInt64(0)\n    let sessions: Array<Session>\n    private let totalRequestCount: Int64\n    private let executeNum: Int64\n    private let message: String\n    private let barrier: Barrier",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package benchmark_client"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package benchmark_client",
      "successors": []
    }
  ]
}