{
  "name": "json_cj_testutil",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [],
  "classes": [
    {
      "name": "TestJsonTestUtils",
      "type": "class",
      "start_line": 8,
      "end_line": 57,
      "functions": [
        {
          "name": "bool",
          "type": "function",
          "start_line": 10,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 10,
              "line": "    func bool() {"
            },
            {
              "lineno": 11,
              "line": "        let a: JsonValue = JsonBool(true)"
            },
            {
              "lineno": 12,
              "line": "        let b: JsonValue = JsonBool(true)"
            },
            {
              "lineno": 13,
              "line": "        assertJson(a, b)"
            },
            {
              "lineno": 14,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func bool() {\n        let a: JsonValue = JsonBool(true)\n        let b: JsonValue = JsonBool(true)\n        assertJson(a, b)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "int",
          "type": "function",
          "start_line": 17,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    func int() {"
            },
            {
              "lineno": 18,
              "line": "        let a: JsonValue = JsonInt(1)"
            },
            {
              "lineno": 19,
              "line": "        let b: JsonValue = JsonInt(1)"
            },
            {
              "lineno": 20,
              "line": "        assertJson(a, b)"
            },
            {
              "lineno": 21,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func int() {\n        let a: JsonValue = JsonInt(1)\n        let b: JsonValue = JsonInt(1)\n        assertJson(a, b)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "float",
          "type": "function",
          "start_line": 24,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 24,
              "line": "    func float() {"
            },
            {
              "lineno": 25,
              "line": "        let a: JsonValue = JsonFloat(1.0)"
            },
            {
              "lineno": 26,
              "line": "        let b: JsonValue = JsonFloat(1.0)"
            },
            {
              "lineno": 27,
              "line": "        assertJson(a, b)"
            },
            {
              "lineno": 28,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func float() {\n        let a: JsonValue = JsonFloat(1.0)\n        let b: JsonValue = JsonFloat(1.0)\n        assertJson(a, b)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "string",
          "type": "function",
          "start_line": 31,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 31,
              "line": "    func string() {"
            },
            {
              "lineno": 32,
              "line": "        let a: JsonValue = JsonString(\"hello\")"
            },
            {
              "lineno": 33,
              "line": "        let b: JsonValue = JsonString(\"hello\")"
            },
            {
              "lineno": 34,
              "line": "        assertJson(a, b)"
            },
            {
              "lineno": 35,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func string() {\n        let a: JsonValue = JsonString(\"hello\")\n        let b: JsonValue = JsonString(\"hello\")\n        assertJson(a, b)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "array",
          "type": "function",
          "start_line": 38,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    func array() {"
            },
            {
              "lineno": 39,
              "line": "        let a: JsonValue = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])"
            },
            {
              "lineno": 40,
              "line": "        let b: JsonValue = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])"
            },
            {
              "lineno": 41,
              "line": "        assertJson(a, b)"
            },
            {
              "lineno": 42,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func array() {\n        let a: JsonValue = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])\n        let b: JsonValue = JsonArray([JsonInt(1), JsonInt(2), JsonInt(3)])\n        assertJson(a, b)\n    }",
              "successors": []
            }
          ]
        },
        {
          "name": "object",
          "type": "function",
          "start_line": 45,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    func object() {"
            },
            {
              "lineno": 46,
              "line": "        let a = JsonObject()"
            },
            {
              "lineno": 47,
              "line": "        a.put(\"a\", JsonInt(1))"
            },
            {
              "lineno": 48,
              "line": "        a.put(\"b\", JsonInt(2))"
            },
            {
              "lineno": 49,
              "line": "        a.put(\"c\", JsonInt(3))"
            },
            {
              "lineno": 50,
              "line": "        "
            },
            {
              "lineno": 51,
              "line": "        let b = JsonObject()"
            },
            {
              "lineno": 52,
              "line": "        b.put(\"a\", JsonInt(1))"
            },
            {
              "lineno": 53,
              "line": "        b.put(\"b\", JsonInt(2))"
            },
            {
              "lineno": 54,
              "line": "        b.put(\"c\", JsonInt(3))"
            },
            {
              "lineno": 55,
              "line": "        assertJson(a, b)"
            },
            {
              "lineno": 56,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func object() {\n        let a = JsonObject()\n        a.put(\"a\", JsonInt(1))\n        a.put(\"b\", JsonInt(2))\n        a.put(\"c\", JsonInt(3))\n        \n        let b = JsonObject()\n        b.put(\"a\", JsonInt(1))\n        b.put(\"b\", JsonInt(2))\n        b.put(\"c\", JsonInt(3))\n        assertJson(a, b)\n    }",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "class TestJsonTestUtils {"
        },
        {
          "lineno": 9,
          "line": "    @TestCase"
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 16,
          "line": "    @TestCase"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    @TestCase"
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    @TestCase"
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 37,
          "line": "    @TestCase"
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    @TestCase"
        },
        {
          "lineno": 57,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class TestJsonTestUtils {\n    @TestCase\n",
          "successors": [
            {
              "id": 3,
              "label": "    @TestCase\n\n    @TestCase\n",
              "successors": [
                {
                  "id": 5,
                  "label": "    @TestCase\n\n    @TestCase\n",
                  "successors": [
                    {
                      "id": 7,
                      "label": "    @TestCase\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package json_cj.testutil"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.unittest.*"
    },
    {
      "lineno": 4,
      "line": "import std.unittest.testmacro.{Assert, Fail, Test, TestCase}"
    },
    {
      "lineno": 5,
      "line": "import encoding.json.*"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "@Test"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package json_cj.testutil\n\nimport std.unittest.*\nimport std.unittest.testmacro.{Assert, Fail, Test, TestCase}\nimport encoding.json.*\n",
      "successors": [
        {
          "id": 3,
          "label": "@Test",
          "successors": []
        }
      ]
    }
  ]
}