{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 64,
  "functions": [
    {
      "name": "split_ascii_normal",
      "type": "function",
      "start_line": 7,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "func split_ascii_normal(text: String, sep: String): ArrayList<String> {"
        },
        {
          "lineno": 8,
          "line": "    let indices = ArrayList<Int64>()"
        },
        {
          "lineno": 9,
          "line": "    var last = true"
        },
        {
          "lineno": 10,
          "line": "    for (i in 0..text.size) {"
        },
        {
          "lineno": 11,
          "line": "        let current = sep.indexOf(text[i]).isSome()"
        },
        {
          "lineno": 12,
          "line": "        if (last != current) {"
        },
        {
          "lineno": 13,
          "line": "            indices.append(i)"
        },
        {
          "lineno": 14,
          "line": "        }"
        },
        {
          "lineno": 15,
          "line": "        last = current"
        },
        {
          "lineno": 16,
          "line": "    }"
        },
        {
          "lineno": 17,
          "line": "    if (!last) { indices.append(text.size) }"
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "    let result = ArrayList<String>()"
        },
        {
          "lineno": 20,
          "line": "    for (i in 0..indices.size:2) {"
        },
        {
          "lineno": 21,
          "line": "        result.append(text[indices[i]..indices[i + 1]])"
        },
        {
          "lineno": 22,
          "line": "    }"
        },
        {
          "lineno": 23,
          "line": "    return result"
        },
        {
          "lineno": 24,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func split_ascii_normal(text: String, sep: String): ArrayList<String> {\n    let indices = ArrayList<Int64>()\n    var last = true",
          "successors": [
            {
              "id": 2,
              "label": "for (i in 0..text.size) {",
              "successors": [
                {
                  "id": 3,
                  "label": "let current = sep.indexOf(text[i]).isSome()\nif (last != current) {\nindices.append(i)\n}",
                  "successors": [
                    {
                      "id": 5,
                      "label": "last = current",
                      "successors": [
                        {
                          "id": 6,
                          "label": "for (i in 0..text.size) {",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "if (!last) { indices.append(text.size) }\nlet result = ArrayList<String>()",
                          "successors": [
                            {
                              "id": 9,
                              "label": "for (i in 0..indices.size:2) {",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "result.append(text[indices[i]..indices[i + 1]])",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "for (i in 0..indices.size:2) {",
                                      "successors": []
                                    },
                                    {
                                      "id": 12,
                                      "label": "return result",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "split_ascii",
      "type": "function",
      "start_line": 27,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 27,
          "line": "func split_ascii(text: String, sep: String): ArrayList<String> {"
        },
        {
          "lineno": 28,
          "line": "    let indices = ArrayList<Int64>()"
        },
        {
          "lineno": 29,
          "line": "    text |> enumerate |> fold(false) { state, e =>"
        },
        {
          "lineno": 30,
          "line": "        let current = sep.indexOf(e[1]).isNone()"
        },
        {
          "lineno": 31,
          "line": "        if (state != current) { indices.append(e[0]) }"
        },
        {
          "lineno": 32,
          "line": "        current"
        },
        {
          "lineno": 33,
          "line": "    } |> { valid: Bool => if (valid) {"
        },
        {
          "lineno": 34,
          "line": "        indices.append(text.size)"
        },
        {
          "lineno": 35,
          "line": "    }}"
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 37,
          "line": "    let result = ArrayList<String>()"
        },
        {
          "lineno": 38,
          "line": "    for (i in 0..indices.size:2) {"
        },
        {
          "lineno": 39,
          "line": "        result.append(text[indices[i]..indices[i + 1]])"
        },
        {
          "lineno": 40,
          "line": "    }"
        },
        {
          "lineno": 41,
          "line": "    return result"
        },
        {
          "lineno": 42,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func split_ascii(text: String, sep: String): ArrayList<String> {\n    let indices = ArrayList<Int64>()\ntext |> enumerate |> fold(false) { state, e =>\n        let current = sep.indexOf(e[1]).isNone()",
          "successors": [
            {
              "id": 3,
              "label": "if (state != current) { indices.append(e[0]) }\n        current\n} |> { valid: Bool => if (valid) {\n        indices.append(text.size)\n    }}",
              "successors": [
                {
                  "id": 5,
                  "label": "let result = ArrayList<String>()",
                  "successors": [
                    {
                      "id": 6,
                      "label": "for (i in 0..indices.size:2) {\n        result.append(text[indices[i]..indices[i + 1]])\n    }",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return result\n}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "split_unicode",
      "type": "function",
      "start_line": 45,
      "end_line": 59,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 45,
          "line": "func split_unicode(text: String, sep: String) {"
        },
        {
          "lineno": 46,
          "line": "    let indices = ArrayList<Int64>()"
        },
        {
          "lineno": 47,
          "line": "    text.runes() |> enumerate |> fold(false) { state, e =>"
        },
        {
          "lineno": 48,
          "line": "        let current = !sep.contains(e[1].toString())"
        },
        {
          "lineno": 49,
          "line": "        if (state != current) { indices.append(e[0]) }"
        },
        {
          "lineno": 50,
          "line": "        current"
        },
        {
          "lineno": 51,
          "line": "    } |> { valid: Bool => if (valid) { indices.append(text.size) } }"
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 53,
          "line": "    let runes = text.toRuneArray()"
        },
        {
          "lineno": 54,
          "line": "    let result = ArrayList<String>()"
        },
        {
          "lineno": 55,
          "line": "    for (i in 0..indices.size:2) {"
        },
        {
          "lineno": 56,
          "line": "        result.append(String(runes[indices[i]..indices[i + 1]]))"
        },
        {
          "lineno": 57,
          "line": "    }"
        },
        {
          "lineno": 58,
          "line": "    return result"
        },
        {
          "lineno": 59,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "func split_unicode(text: String, sep: String) {\n    let indices = ArrayList<Int64>()\ntext.runes() |> enumerate |> fold(false) { state, e =>\n    let current = !sep.contains(e[1].toString())\n    if (state != current) { indices.append(e[0]) }\n    current\n}",
          "successors": [
            {
              "id": 3,
              "label": "|> { valid: Bool => if (valid) { indices.append(text.size) } }\nlet runes = text.toRuneArray()\nlet result = ArrayList<String>()",
              "successors": [
                {
                  "id": 5,
                  "label": "for (i in 0..indices.size:2) {\n    result.append(String(runes[indices[i]..indices[i + 1]]))\n}",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return result\n}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 61,
      "end_line": 64,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 61,
          "line": "main() {"
        },
        {
          "lineno": 62,
          "line": "    let text = \"123, 456 7&89, , 96^3, 567\""
        },
        {
          "lineno": 63,
          "line": "    println(split_ascii(text, \"&^, \"))"
        },
        {
          "lineno": 64,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "main() {\n    let text = \"123, 456 7&89, , 96^3, 567\"\n    println(split_ascii(text, \"&^, \"))\n}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "// 用分隔符拆分字符串，支持多分隔符"
    },
    {
      "lineno": 2,
      "line": "// 仓颉语言团队 刘俊杰 2024.10.24"
    },
    {
      "lineno": 3,
      "line": "import std.collection.*"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "// 处理 ASCII 字符串"
    },
    {
      "lineno": 6,
      "line": "// 常规实现"
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": "// 函数式编程实现"
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 44,
      "line": "// 处理 Unicode 字符串"
    },
    {
      "lineno": 60,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "// 用分隔符拆分字符串，支持多分隔符\n// 仓颉语言团队 刘俊杰 2024.10.24\nimport std.collection.*",
      "successors": []
    }
  ]
}