{
  "name": "unknown",
  "type": "CFG",
  "start_line": 1,
  "end_line": 49,
  "functions": [],
  "classes": [
    {
      "name": "StructInitFunctionGenerator",
      "type": "class",
      "start_line": 7,
      "end_line": 49,
      "functions": [
        {
          "name": "generate",
          "type": "function",
          "start_line": 9,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    public func generate(context: Context): Unit {"
            },
            {
              "lineno": 10,
              "line": "        var tokens = context.attrs"
            },
            {
              "lineno": 11,
              "line": "        if (tokens.size == 0) {"
            },
            {
              "lineno": 12,
              "line": "            tokens = Token(TokenKind.PRIVATE, \"private\").toTokens()"
            },
            {
              "lineno": 13,
              "line": "        } else if (tokens.size > 1) {"
            },
            {
              "lineno": 14,
              "line": "            diagReport(DiagReportLevel.ERROR, context.attrs, \"构造函数可见性设置错误\", \"不支持多个关键字\")"
            },
            {
              "lineno": 15,
              "line": "            throw Exception(\"构造函数可见性设置错误\")"
            },
            {
              "lineno": 16,
              "line": "        }"
            },
            {
              "lineno": 17,
              "line": "        let illegal = match (tokens[0].kind) {"
            },
            {
              "lineno": 18,
              "line": "            case TokenKind.PUBLIC => false"
            },
            {
              "lineno": 19,
              "line": "            case TokenKind.PRIVATE => false"
            },
            {
              "lineno": 20,
              "line": "            case TokenKind.PROTECTED => false"
            },
            {
              "lineno": 21,
              "line": "            case TokenKind.INTERNAL => false"
            },
            {
              "lineno": 22,
              "line": "            case _ => true"
            },
            {
              "lineno": 23,
              "line": "        }"
            },
            {
              "lineno": 24,
              "line": "        if (illegal) {"
            },
            {
              "lineno": 25,
              "line": "            diagReport(DiagReportLevel.ERROR, context.attrs, \"构造函数可见性设置错误\", \"不支持的关键字: ${tokens[0].value}\")"
            },
            {
              "lineno": 26,
              "line": "            return"
            },
            {
              "lineno": 27,
              "line": "        }"
            },
            {
              "lineno": 28,
              "line": "        let params = ArrayList<FuncParam>()"
            },
            {
              "lineno": 29,
              "line": "        let body = quote()"
            },
            {
              "lineno": 30,
              "line": "        for (reval in context.valDecls) {"
            },
            {
              "lineno": 31,
              "line": "            if (reval.assign.kind == TokenKind.ASSIGN) {"
            },
            {
              "lineno": 32,
              "line": "                continue"
            },
            {
              "lineno": 33,
              "line": "            }"
            },
            {
              "lineno": 34,
              "line": "            params.append(FuncParam(quote("
            },
            {
              "lineno": 35,
              "line": "                $(reval.identifier)!: $(reval.declType)"
            },
            {
              "lineno": 36,
              "line": "            )))"
            },
            {
              "lineno": 37,
              "line": "            body.append(quote("
            },
            {
              "lineno": 38,
              "line": "                this.$(reval.identifier) = $(reval.identifier)"
            },
            {
              "lineno": 39,
              "line": "            ))"
            },
            {
              "lineno": 40,
              "line": "        }"
            },
            {
              "lineno": 41,
              "line": "        let funcDecl = FuncDecl(quote("
            },
            {
              "lineno": 42,
              "line": "            $(tokens) init() {"
            },
            {
              "lineno": 43,
              "line": "                $(body)"
            },
            {
              "lineno": 44,
              "line": "            }"
            },
            {
              "lineno": 45,
              "line": "        ))"
            },
            {
              "lineno": 46,
              "line": "        funcDecl.funcParams = params"
            },
            {
              "lineno": 47,
              "line": "        context.structDecl.body.decls.append(funcDecl)"
            },
            {
              "lineno": 48,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func generate(context: Context): Unit {\n        var tokens = context.attrs\n        if (tokens.size == 0) {",
              "successors": [
                {
                  "id": 2,
                  "label": "            tokens = Token(TokenKind.PRIVATE, \"private\").toTokens()\n        let illegal = match (tokens[0].kind) {\n            case TokenKind.PUBLIC => false\n            case TokenKind.PRIVATE => false\n            case TokenKind.PROTECTED => false\n            case TokenKind.INTERNAL => false\n            case _ => true\n        }",
                  "successors": [
                    {
                      "id": 9,
                      "label": "        if (illegal) {\n            diagReport(DiagReportLevel.ERROR, context.attrs, \"\\u6784\\u9020\\u51fd\\u6570\\u53ef\\u89c1\\u6027\\u8bbe\\u7f6e\\u9519\\u8bef\", \"\\u4e0d\\u652f\\u6301\\u7684\\u5173\\u952e\\u5b57: ${tokens[0].value}\")\n            return\n        }",
                      "successors": [
                        {
                          "id": 13,
                          "label": "        let params = ArrayList<FuncParam>()\n        let body = quote()\n        for (reval in context.valDecls) {\n            if (reval.assign.kind == TokenKind.ASSIGN) {\n                continue\n            }\n            params.append(FuncParam(quote(\n                $(reval.identifier)!: $(reval.declType)\n            )))\n            body.append(quote(\n                this.$(reval.identifier) = $(reval.identifier)\n            ))\n        }\n        let funcDecl = FuncDecl(quote(\n            $(tokens) init() {\n                $(body)\n            }\n        ))\n        funcDecl.funcParams = params\n        context.structDecl.body.decls.append(funcDecl)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 3,
                  "label": "        } else if (tokens.size > 1) {\n            diagReport(DiagReportLevel.ERROR, context.attrs, \"\\u6784\\u9020\\u51fd\\u6570\\u53ef\\u89c1\\u6027\\u8bbe\\u7f6e\\u9519\\u8bef\", \"\\u4e0d\\u652f\\u6301\\u591a\\u4e2a\\u5173\\u952e\\u5b57\")\n            throw Exception(\"\\u6784\\u9020\\u51fd\\u6570\\u53ef\\u89c1\\u6027\\u8bbe\\u7f6e\\u9519\\u8bef\")\n        }\n        let illegal = match (tokens[0].kind) {\n            case TokenKind.PUBLIC => false\n            case TokenKind.PRIVATE => false\n            case TokenKind.PROTECTED => false\n            case TokenKind.INTERNAL => false\n            case _ => true\n        }",
                  "successors": [
                    {
                      "id": 9,
                      "label": "        if (illegal) {\n            diagReport(DiagReportLevel.ERROR, context.attrs, \"\\u6784\\u9020\\u51fd\\u6570\\u53ef\\u89c1\\u6027\\u8bbe\\u7f6e\\u9519\\u8bef\", \"\\u4e0d\\u652f\\u6301\\u7684\\u5173\\u952e\\u5b57: ${tokens[0].value}\")\n            return\n        }",
                      "successors": [
                        {
                          "id": 13,
                          "label": "        let params = ArrayList<FuncParam>()\n        let body = quote()\n        for (reval in context.valDecls) {\n            if (reval.assign.kind == TokenKind.ASSIGN) {\n                continue\n            }\n            params.append(FuncParam(quote(\n                $(reval.identifier)!: $(reval.declType)\n            )))\n            body.append(quote(\n                this.$(reval.identifier) = $(reval.identifier)\n            ))\n        }\n        let funcDecl = FuncDecl(quote(\n            $(tokens) init() {\n                $(body)\n            }\n        ))\n        funcDecl.funcParams = params\n        context.structDecl.body.decls.append(funcDecl)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "class StructInitFunctionGenerator <: Generator {"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 49,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class StructInitFunctionGenerator <: Generator {\n",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "macro package Macro_JsonSerializable.macros"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import std.ast.*"
    },
    {
      "lineno": 4,
      "line": "import std.collection.*"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "// 结构体命名构造函数生成器"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "macro package Macro_JsonSerializable.macros\n",
      "successors": [
        {
          "id": 3,
          "label": "import std.ast.*\nimport std.collection.*\n\n// 结构体命名构造函数生成器",
          "successors": []
        }
      ]
    }
  ]
}