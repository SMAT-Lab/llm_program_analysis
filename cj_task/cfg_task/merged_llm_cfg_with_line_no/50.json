{
  "name": "simple_math_interpreter.ext",
  "type": "CFG",
  "start_line": 1,
  "end_line": 19,
  "functions": [],
  "classes": [
    {
      "name": "Option",
      "type": "class",
      "start_line": 5,
      "end_line": 19,
      "functions": [
        {
          "name": "map",
          "type": "function",
          "start_line": 6,
          "end_line": 11,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 6,
              "line": "    public func map<U>(f: (T) -> U): Option<U> {"
            },
            {
              "lineno": 7,
              "line": "        match (this) {"
            },
            {
              "lineno": 8,
              "line": "            case Some(v) => Some(f(v))"
            },
            {
              "lineno": 9,
              "line": "            case None => None"
            },
            {
              "lineno": 10,
              "line": "        }"
            },
            {
              "lineno": 11,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func map<U>(f: (T) -> U): Option<U> {\n        match (this) {",
              "successors": [
                {
                  "id": 2,
                  "label": "            case Some(v) => Some(f(v))",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "            case None => None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "okOr",
          "type": "function",
          "start_line": 13,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    public func okOr<E>(e: E): Result<T, E> {"
            },
            {
              "lineno": 14,
              "line": "        match (this) {"
            },
            {
              "lineno": 15,
              "line": "            case Some(v) => Ok(v)"
            },
            {
              "lineno": 16,
              "line": "            case None => Err(e)"
            },
            {
              "lineno": 17,
              "line": "        }"
            },
            {
              "lineno": 18,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func okOr<E>(e: E): Result<T, E> {\n        match (this) {\n            case Some(v) => Ok(v)\n            case None => Err(e)\n        }",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "extend<T> Option<T> <: OptionExt {"
        },
        {
          "lineno": 12,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "extend<T> Option<T> <: OptionExt {\n",
          "successors": [
            {
              "id": 3,
              "label": "}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package simple_math_interpreter.ext"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "public interface OptionExt {}"
    },
    {
      "lineno": 4,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package simple_math_interpreter.ext\n\npublic interface OptionExt {}",
      "successors": []
    }
  ]
}