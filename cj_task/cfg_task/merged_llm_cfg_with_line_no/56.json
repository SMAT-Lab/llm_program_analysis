{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 145,
  "functions": [
    {
      "name": "role_type_to_str",
      "type": "function",
      "start_line": 70,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 70,
          "line": "public func role_type_to_str(role: RoleType): Option<String> {"
        },
        {
          "lineno": 71,
          "line": "  return match(role) {"
        },
        {
          "lineno": 72,
          "line": "    case RoleType.User => Some(\"user\")"
        },
        {
          "lineno": 73,
          "line": "    case RoleType.Assistant => Some(\"assistant\")"
        },
        {
          "lineno": 74,
          "line": "    case RoleType.System => Some(\"system\")"
        },
        {
          "lineno": 75,
          "line": "    case RoleType.Function => Some(\"function\")"
        },
        {
          "lineno": 76,
          "line": "    case RoleType.NULL => None"
        },
        {
          "lineno": 77,
          "line": "  }"
        },
        {
          "lineno": 78,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func role_type_to_str(role: RoleType): Option<String> {\n  return match(role) {",
          "successors": [
            {
              "id": 2,
              "label": "    case RoleType.User => Some(\"user\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "    case RoleType.Assistant => Some(\"assistant\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "    case RoleType.System => Some(\"system\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "    case RoleType.Function => Some(\"function\")",
              "successors": []
            },
            {
              "id": 6,
              "label": "    case RoleType.NULL => None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "str_to_role_type",
      "type": "function",
      "start_line": 80,
      "end_line": 92,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 80,
          "line": "public func str_to_role_type(role_option_str: Option<String>): RoleType {"
        },
        {
          "lineno": 81,
          "line": "  return match(role_option_str) {"
        },
        {
          "lineno": 82,
          "line": "    case Some(role_option) => "
        },
        {
          "lineno": 83,
          "line": "      match (role_option) {"
        },
        {
          "lineno": 84,
          "line": "        case \"user\" => RoleType.User"
        },
        {
          "lineno": 85,
          "line": "        case \"assistant\" => RoleType.Assistant"
        },
        {
          "lineno": 86,
          "line": "        case \"system\" => RoleType.System"
        },
        {
          "lineno": 87,
          "line": "        case \"function\" => RoleType.Function"
        },
        {
          "lineno": 88,
          "line": "        case x => throw Exception(\"unknow enum ${x} for RoleType\");"
        },
        {
          "lineno": 89,
          "line": "      }"
        },
        {
          "lineno": 90,
          "line": "    case None => RoleType.NULL"
        },
        {
          "lineno": 91,
          "line": "  }"
        },
        {
          "lineno": 92,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public func str_to_role_type(role_option_str: Option<String>): RoleType {\n  return match(role_option_str) {\ncase Some(role_option) => \n  match (role_option) {\n    case \"user\" => RoleType.User\n    case \"assistant\" => RoleType.Assistant\n    case \"system\" => RoleType.System\n    case \"function\" => RoleType.Function\n    case x => throw Exception(\"unknow enum ${x} for RoleType\");\n  }\ncase None => RoleType.NULL",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "SamplingMethod",
      "type": "class",
      "start_line": 6,
      "end_line": 8,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "public enum SamplingMethod {"
        },
        {
          "lineno": 7,
          "line": "  Greedy | Top_p | Top_k"
        },
        {
          "lineno": 8,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public enum SamplingMethod {\n  Greedy | Top_p | Top_k\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "ModelState",
      "type": "class",
      "start_line": 10,
      "end_line": 23,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 14,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "  public init("
            },
            {
              "lineno": 15,
              "line": "    code!: Int64 = 200,"
            },
            {
              "lineno": 16,
              "line": "    is_end!: Bool = false,"
            },
            {
              "lineno": 17,
              "line": "    message!: String = \"\""
            },
            {
              "lineno": 18,
              "line": "  ) {"
            },
            {
              "lineno": 19,
              "line": "    this.code = code;"
            },
            {
              "lineno": 20,
              "line": "    this.is_end = is_end;"
            },
            {
              "lineno": 21,
              "line": "    this.message = message;"
            },
            {
              "lineno": 22,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(\n    code!: Int64 = 200,\n    is_end!: Bool = false,\n    message!: String = \"\"\n  ) {\n    this.code = code;\n    this.is_end = is_end;\n    this.message = message;\n  }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "public struct ModelState {"
        },
        {
          "lineno": 11,
          "line": "  public var code: Int64;"
        },
        {
          "lineno": 12,
          "line": "  public var is_end: Bool;"
        },
        {
          "lineno": 13,
          "line": "  public var message: String = \"\";"
        },
        {
          "lineno": 23,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct ModelState {\n  public var code: Int64;\n  public var is_end: Bool;\n  public var message: String = \"\";\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "FunctionCall",
      "type": "class",
      "start_line": 25,
      "end_line": 64,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 29,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "  public init(name: String, arguments: String) {"
            },
            {
              "lineno": 30,
              "line": "    this.name = name;"
            },
            {
              "lineno": 31,
              "line": "    this.arguments = arguments;"
            },
            {
              "lineno": 32,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(name: String, arguments: String) {\n    this.name = name;\n    this.arguments = arguments;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 34,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "  public static func fromJson(r: JsonReader): FunctionCall {"
            },
            {
              "lineno": 35,
              "line": "    var temp_name: String = \"\";"
            },
            {
              "lineno": 36,
              "line": "    var temp_arguments: String = \"\";"
            },
            {
              "lineno": 37,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 38,
              "line": "      match(v) {"
            },
            {
              "lineno": 39,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 40,
              "line": "          r.startObject();"
            },
            {
              "lineno": 41,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 42,
              "line": "              let n = r.readName()"
            },
            {
              "lineno": 43,
              "line": "              match (n) {"
            },
            {
              "lineno": 44,
              "line": "                  case \"name\" => temp_name = r.readValue<String>();"
            },
            {
              "lineno": 45,
              "line": "                  case \"arguments\" => temp_arguments = r.readValue<String>();"
            },
            {
              "lineno": 46,
              "line": "                  case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 47,
              "line": "              }"
            },
            {
              "lineno": 48,
              "line": "          }"
            },
            {
              "lineno": 49,
              "line": "          r.endObject();"
            },
            {
              "lineno": 50,
              "line": "          break;"
            },
            {
              "lineno": 51,
              "line": "        case _ => throw Exception(\"can't deserialize for FunctionCall\");"
            },
            {
              "lineno": 52,
              "line": "      }"
            },
            {
              "lineno": 53,
              "line": "    }"
            },
            {
              "lineno": 54,
              "line": "    return FunctionCall(temp_name, temp_arguments);"
            },
            {
              "lineno": 55,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): FunctionCall {\n    var temp_name: String = \"\";\n    var temp_arguments: String = \"\";",
              "successors": [
                {
                  "id": 3,
                  "label": "    while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 4,
                      "label": "      match(v) {",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        case BeginObject =>\n          r.startObject();",
                          "successors": [
                            {
                              "id": 7,
                              "label": "          while(r.peek() != EndObject) {\n              let n = r.readName()",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "              match (n) {",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "                  case \"name\" => temp_name = r.readValue<String>();",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "label": "                  case \"arguments\" => temp_arguments = r.readValue<String>();",
                                      "successors": []
                                    },
                                    {
                                      "id": 12,
                                      "label": "                  case unkow => println(\"unkow key ${unkow}\");",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 13,
                              "label": "          }\n          r.endObject();\n          break;",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 15,
                          "label": "        case _ => throw Exception(\"can't deserialize for FunctionCall\");",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 16,
                      "label": "    }\n    return FunctionCall(temp_name, temp_arguments);",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 57,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "  public func toJson(w: JsonWriter) {"
            },
            {
              "lineno": 58,
              "line": "    w.startObject();"
            },
            {
              "lineno": 59,
              "line": "    w.writeName(\"name\").writeValue<String>(this.name);"
            },
            {
              "lineno": 60,
              "line": "    w.writeName(\"arguments\").writeValue<String>(this.arguments);"
            },
            {
              "lineno": 61,
              "line": "    w.endObject();"
            },
            {
              "lineno": 62,
              "line": "    w.flush();"
            },
            {
              "lineno": 63,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"name\").writeValue<String>(this.name);\n    w.writeName(\"arguments\").writeValue<String>(this.arguments);\n    w.endObject();\n    w.flush();\n  }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 25,
          "line": "public struct FunctionCall <: JsonDeserializable<FunctionCall> & JsonSerializable {"
        },
        {
          "lineno": 26,
          "line": "  public let name: String;"
        },
        {
          "lineno": 27,
          "line": "  public let arguments: String;"
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct FunctionCall <: JsonDeserializable<FunctionCall> & JsonSerializable {\n  public let name: String;\n  public let arguments: String;\n\n\n\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "RoleType",
      "type": "class",
      "start_line": 66,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 66,
          "line": "public enum RoleType {"
        },
        {
          "lineno": 67,
          "line": "  User | Assistant | System | Function | NULL"
        },
        {
          "lineno": 68,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public enum RoleType {\n  User | Assistant | System | Function | NULL\n}",
          "successors": []
        }
      ]
    },
    {
      "name": "Message",
      "type": "class",
      "start_line": 95,
      "end_line": 145,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 100,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 100,
              "line": "  public init(role: RoleType, content: String) {"
            },
            {
              "lineno": 101,
              "line": "    this.role = role;"
            },
            {
              "lineno": 102,
              "line": "    this.content = content;"
            },
            {
              "lineno": 103,
              "line": "    this.function_call = None;"
            },
            {
              "lineno": 104,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(role: RoleType, content: String) {\n    this.role = role;\n    this.content = content;\n    this.function_call = None;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "init",
          "type": "function",
          "start_line": 106,
          "end_line": 110,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 106,
              "line": "  public init(role: RoleType, content: String, function_call: Option<FunctionCall>) {"
            },
            {
              "lineno": 107,
              "line": "    this.role = role;"
            },
            {
              "lineno": 108,
              "line": "    this.content = content;"
            },
            {
              "lineno": 109,
              "line": "    this.function_call = function_call;"
            },
            {
              "lineno": 110,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public init(role: RoleType, content: String, function_call: Option<FunctionCall>) {\n    this.role = role;\n    this.content = content;\n    this.function_call = function_call;\n  }",
              "successors": []
            }
          ]
        },
        {
          "name": "fromJson",
          "type": "function",
          "start_line": 112,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 112,
              "line": "  public static func fromJson(r: JsonReader): Message {"
            },
            {
              "lineno": 113,
              "line": "    var temp_role: Option<String> = None; // role may null in stream chat"
            },
            {
              "lineno": 114,
              "line": "    var temp_content: String = \"\";"
            },
            {
              "lineno": 115,
              "line": "    var temp_functional_call: Option<FunctionCall> = None;"
            },
            {
              "lineno": 116,
              "line": "    while (let Some(v) <- r.peek()) {"
            },
            {
              "lineno": 117,
              "line": "      match(v) {"
            },
            {
              "lineno": 118,
              "line": "        case BeginObject =>"
            },
            {
              "lineno": 119,
              "line": "          r.startObject();"
            },
            {
              "lineno": 120,
              "line": "          while(r.peek() != EndObject) {"
            },
            {
              "lineno": 121,
              "line": "              let n = r.readName()"
            },
            {
              "lineno": 122,
              "line": "              match (n) {"
            },
            {
              "lineno": 123,
              "line": "                  case \"role\" => temp_role = r.readValue<Option<String>>();"
            },
            {
              "lineno": 124,
              "line": "                  case \"content\" => temp_content = r.readValue<String>();"
            },
            {
              "lineno": 125,
              "line": "                  case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();"
            },
            {
              "lineno": 126,
              "line": "                  case unkow => println(\"unkow key ${unkow}\");"
            },
            {
              "lineno": 127,
              "line": "              }"
            },
            {
              "lineno": 128,
              "line": "          }"
            },
            {
              "lineno": 129,
              "line": "          r.endObject();"
            },
            {
              "lineno": 130,
              "line": "          break;"
            },
            {
              "lineno": 131,
              "line": "        case _ => throw Exception(\"can't deserialize for Message\");"
            },
            {
              "lineno": 132,
              "line": "      }"
            },
            {
              "lineno": 133,
              "line": "    }"
            },
            {
              "lineno": 134,
              "line": "    let role_type: RoleType = str_to_role_type(temp_role);"
            },
            {
              "lineno": 135,
              "line": "    return Message(role_type, temp_content);"
            },
            {
              "lineno": 136,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public static func fromJson(r: JsonReader): Message {\n    var temp_role: Option<String> = None; // role may null in stream chat\n    var temp_content: String = \"\";\n    var temp_functional_call: Option<FunctionCall> = None;",
              "successors": [
                {
                  "id": 2,
                  "label": "    while (let Some(v) <- r.peek()) {",
                  "successors": [
                    {
                      "id": 3,
                      "label": "      match(v) {",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        case BeginObject =>\n          r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {\n                  case \"role\" => temp_role = r.readValue<Option<String>>();\n                  case \"content\" => temp_content = r.readValue<String>();\n                  case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();\n                  case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "label": "        case _ => throw Exception(\"can't deserialize for Message\");",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "    let role_type: RoleType = str_to_role_type(temp_role);\n    return Message(role_type, temp_content);",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "toJson",
          "type": "function",
          "start_line": 138,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 138,
              "line": "  public func toJson(w: JsonWriter) {"
            },
            {
              "lineno": 139,
              "line": "    w.startObject();"
            },
            {
              "lineno": 140,
              "line": "    w.writeName(\"role\").writeValue<Option<String>>(role_type_to_str(this.role));"
            },
            {
              "lineno": 141,
              "line": "    w.writeName(\"content\").writeValue<String>(this.content);"
            },
            {
              "lineno": 142,
              "line": "    w.endObject();"
            },
            {
              "lineno": 143,
              "line": "    w.flush();"
            },
            {
              "lineno": 144,
              "line": "  }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "  public func toJson(w: JsonWriter) {\n    w.startObject();\n    w.writeName(\"role\").writeValue<Option<String>>(role_type_to_str(this.role));\n    w.writeName(\"content\").writeValue<String>(this.content);\n    w.endObject();\n    w.flush();\n  }",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 95,
          "line": "public struct Message<: JsonDeserializable<Message> & JsonSerializable {"
        },
        {
          "lineno": 96,
          "line": "  public let role: RoleType;"
        },
        {
          "lineno": 97,
          "line": "  public var content: String;"
        },
        {
          "lineno": 98,
          "line": "  public let function_call: Option<FunctionCall>;"
        },
        {
          "lineno": 99,
          "line": ""
        },
        {
          "lineno": 105,
          "line": ""
        },
        {
          "lineno": 111,
          "line": ""
        },
        {
          "lineno": 137,
          "line": ""
        },
        {
          "lineno": 145,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public struct Message<: JsonDeserializable<Message> & JsonSerializable {\n  public let role: RoleType;\n  public var content: String;\n  public let function_call: Option<FunctionCall>;\n}",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package tokenizer"
    },
    {
      "lineno": 2,
      "line": "import encoding.json.stream.*"
    },
    {
      "lineno": 3,
      "line": "import std.collection.ArrayList"
    },
    {
      "lineno": 4,
      "line": "import std.io.ByteArrayStream"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 65,
      "line": ""
    },
    {
      "lineno": 69,
      "line": ""
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 93,
      "line": ""
    },
    {
      "lineno": 94,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package tokenizer\nimport encoding.json.stream.*\nimport std.collection.ArrayList\nimport std.io.ByteArrayStream",
      "successors": []
    }
  ]
}