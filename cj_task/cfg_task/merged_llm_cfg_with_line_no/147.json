{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 201,
  "functions": [],
  "classes": [
    {
      "name": "Maker",
      "type": "class",
      "start_line": 46,
      "end_line": 201,
      "functions": [
        {
          "name": "init",
          "type": "function",
          "start_line": 54,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    public init(indexPolicy: IndexPolicy, srcFile: String, dstFile: String) {"
            },
            {
              "lineno": 55,
              "line": "        this.srcHandle = try {"
            },
            {
              "lineno": 56,
              "line": "            let f = File(srcFile, OpenOption.Open(true, false))"
            },
            {
              "lineno": 57,
              "line": "            if (!f.canRead()) {"
            },
            {
              "lineno": 58,
              "line": "                throw Exception(\"file can not read\")"
            },
            {
              "lineno": 59,
              "line": "            }"
            },
            {
              "lineno": 60,
              "line": "            f"
            },
            {
              "lineno": 61,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 62,
              "line": "            throw Exception(\"open source file `${srcFile}`: ${e.toString()}\")"
            },
            {
              "lineno": 63,
              "line": "        }"
            },
            {
              "lineno": 64,
              "line": "        this.dstHandle = try {"
            },
            {
              "lineno": 65,
              "line": "            let f = File(dstFile, OpenOption.CreateOrTruncate(true))"
            },
            {
              "lineno": 66,
              "line": "            if (!f.canWrite()) {"
            },
            {
              "lineno": 67,
              "line": "                throw Exception(\"file can not write\")"
            },
            {
              "lineno": 68,
              "line": "            }"
            },
            {
              "lineno": 69,
              "line": "            f"
            },
            {
              "lineno": 70,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 71,
              "line": "            throw Exception(\"open target file `${dstFile}`: ${e.toString()}\")"
            },
            {
              "lineno": 72,
              "line": "        }"
            },
            {
              "lineno": 73,
              "line": "        this.indexPolicy = indexPolicy"
            },
            {
              "lineno": 74,
              "line": "        this.header = Header(UInt16(VersionNo), this.indexPolicy, UInt32(DateTime.now().toUnixTimeStamp().toSeconds()),"
            },
            {
              "lineno": 75,
              "line": "            0, 0)"
            },
            {
              "lineno": 76,
              "line": "        this.initDbHeader()"
            },
            {
              "lineno": 77,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public init(indexPolicy: IndexPolicy, srcFile: String, dstFile: String) {\n        this.srcHandle = try {\n            let f = File(srcFile, OpenOption.Open(true, false))\n            if (!f.canRead()) {\n                throw Exception(\"file can not read\")\n            }\n            f\n        } catch (e: Exception) {\n            throw Exception(\"open source file `${srcFile}`: ${e.toString()}\")\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        this.dstHandle = try {\n            let f = File(dstFile, OpenOption.CreateOrTruncate(true))\n            if (!f.canWrite()) {\n                throw Exception(\"file can not write\")\n            }\n            f\n        } catch (e: Exception) {\n            throw Exception(\"open target file `${dstFile}`: ${e.toString()}\")\n        }\n        this.indexPolicy = indexPolicy\n        this.header = Header(UInt16(VersionNo), this.indexPolicy, UInt32(DateTime.now().toUnixTimeStamp().toSeconds()),\n            0, 0)\n        this.initDbHeader()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "initDbHeader",
          "type": "function",
          "start_line": 78,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 78,
              "line": "    func initDbHeader() {"
            },
            {
              "lineno": 79,
              "line": "        this.dstHandle.seek(Begin(0))"
            },
            {
              "lineno": 80,
              "line": "        this.header.writeTo(this.dstHandle)"
            },
            {
              "lineno": 81,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func initDbHeader() {\n        this.dstHandle.seek(Begin(0))\n        this.header.writeTo(this.dstHandle)",
              "successors": []
            }
          ]
        },
        {
          "name": "loadSegments",
          "type": "function",
          "start_line": 82,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 82,
              "line": "    func loadSegments() {"
            },
            {
              "lineno": 83,
              "line": "        let segments = ArrayList<Segment>()"
            },
            {
              "lineno": 84,
              "line": "        let last: Box<?Segment> = Box<?Segment>(None)"
            },
            {
              "lineno": 85,
              "line": "        iterateSegments("
            },
            {
              "lineno": 86,
              "line": "            this.srcHandle,"
            },
            {
              "lineno": 87,
              "line": "            None,"
            },
            {
              "lineno": 88,
              "line": "            {"
            },
            {
              "lineno": 89,
              "line": "                seg =>"
            },
            {
              "lineno": 90,
              "line": "                seg.afterCheck(last.value)"
            },
            {
              "lineno": 91,
              "line": "                segments.append(seg)"
            },
            {
              "lineno": 92,
              "line": "                last.value = seg"
            },
            {
              "lineno": 93,
              "line": "            }"
            },
            {
              "lineno": 94,
              "line": "        )"
            },
            {
              "lineno": 95,
              "line": "        this.segments = segments.toArray()"
            },
            {
              "lineno": 96,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func loadSegments() {\n        let segments = ArrayList<Segment>()\n        let last: Box<?Segment> = Box<?Segment>(None)\n        iterateSegments(\n            this.srcHandle,\n            None,\n            {\n                seg =>\n                seg.afterCheck(last.value)\n                segments.append(seg)\n                last.value = seg\n            }\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        this.segments = segments.toArray()\n    }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "setVectorIndex",
          "type": "function",
          "start_line": 97,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "    func setVectorIndex(ip: UInt32, ptr: UInt32) {"
            },
            {
              "lineno": 98,
              "line": "        let il0 = (ip >> 24) & 0xFF"
            },
            {
              "lineno": 99,
              "line": "        let il1 = (ip >> 16) & 0xFF"
            },
            {
              "lineno": 100,
              "line": "        let idx = Int64(il0 * UInt32(VectorIndexCols) * UInt32(VectorIndexSize) + il1 * UInt32(VectorIndexSize))"
            },
            {
              "lineno": 101,
              "line": "        let sPtr = littleEndianUInt32(this.vectorIndex[idx..(idx + 4)])"
            },
            {
              "lineno": 102,
              "line": "        if (sPtr == 0) {"
            },
            {
              "lineno": 103,
              "line": "            littleEndianPutUInt32(this.vectorIndex[idx..(idx + 4)], ptr)"
            },
            {
              "lineno": 104,
              "line": "            littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))"
            },
            {
              "lineno": 105,
              "line": "        } else {"
            },
            {
              "lineno": 106,
              "line": "            littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))"
            },
            {
              "lineno": 107,
              "line": "        }"
            },
            {
              "lineno": 108,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    func setVectorIndex(ip: UInt32, ptr: UInt32) {\n        let il0 = (ip >> 24) & 0xFF\n        let il1 = (ip >> 16) & 0xFF\n        let idx = Int64(il0 * UInt32(VectorIndexCols) * UInt32(VectorIndexSize) + il1 * UInt32(VectorIndexSize))\n        let sPtr = littleEndianUInt32(this.vectorIndex[idx..(idx + 4)])\n        if (sPtr == 0) {\n            littleEndianPutUInt32(this.vectorIndex[idx..(idx + 4)], ptr)\n            littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))",
              "successors": [
                {
                  "id": 3,
                  "label": "        }",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        } else {\n            littleEndianPutUInt32(this.vectorIndex[(idx + 4)..(idx + 8)], ptr + UInt32(SegmentIndexBlockSize))\n        }",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "start",
          "type": "function",
          "start_line": 109,
          "end_line": 196,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 109,
              "line": "    public func start() {"
            },
            {
              "lineno": 110,
              "line": "        this.loadSegments()"
            },
            {
              "lineno": 111,
              "line": "        if (this.segments.size == 0) {"
            },
            {
              "lineno": 112,
              "line": "            throw Exception(\"empty segment list\")"
            },
            {
              "lineno": 113,
              "line": "        }"
            },
            {
              "lineno": 114,
              "line": "        try {"
            },
            {
              "lineno": 115,
              "line": "            this.dstHandle.seek(Begin(HeaderInfoLength + VectorIndexLength))"
            },
            {
              "lineno": 116,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 117,
              "line": "            throw Exception(\"seek to data first ptr: ${e.toString()}\")"
            },
            {
              "lineno": 118,
              "line": "        }"
            },
            {
              "lineno": 119,
              "line": "        for (seg in this.segments) {"
            },
            {
              "lineno": 120,
              "line": "            if (this.regionPool.contains(seg.region)) {"
            },
            {
              "lineno": 121,
              "line": "                continue"
            },
            {
              "lineno": 122,
              "line": "            }"
            },
            {
              "lineno": 123,
              "line": "            let region = seg.region.toArray()"
            },
            {
              "lineno": 124,
              "line": "            if (region.size > 0xFFFF) {"
            },
            {
              "lineno": 125,
              "line": "                throw Exception(\"too long region info `${seg.region}`: should be less than ${0xFFFF} bytes\")"
            },
            {
              "lineno": 126,
              "line": "            }"
            },
            {
              "lineno": 127,
              "line": "            let pos = try {"
            },
            {
              "lineno": 128,
              "line": "                this.dstHandle.seek(Current(0))"
            },
            {
              "lineno": 129,
              "line": "            } catch (e: Exception) {"
            },
            {
              "lineno": 130,
              "line": "                throw Exception(\"seek to current ptr: ${e.toString()}\")"
            },
            {
              "lineno": 131,
              "line": "            }"
            },
            {
              "lineno": 132,
              "line": "            try {"
            },
            {
              "lineno": 133,
              "line": "                this.dstHandle.write(region)"
            },
            {
              "lineno": 134,
              "line": "            } catch (e: Exception) {"
            },
            {
              "lineno": 135,
              "line": "                throw Exception(\"write region '${seg.region}': ${e.toString()}\")"
            },
            {
              "lineno": 136,
              "line": "            }"
            },
            {
              "lineno": 137,
              "line": "            this.regionPool[seg.region] = UInt32(pos)"
            },
            {
              "lineno": 138,
              "line": "        }"
            },
            {
              "lineno": 139,
              "line": "        let indexBuff = Array<UInt8>(SegmentIndexBlockSize, item: 0)"
            },
            {
              "lineno": 140,
              "line": "        var (counter, startIndexPtr, endIndexPtr) = (0, -1, -1)"
            },
            {
              "lineno": 141,
              "line": "        for (seg in this.segments) {"
            },
            {
              "lineno": 142,
              "line": "            if (!this.regionPool.contains(seg.region)) {"
            },
            {
              "lineno": 143,
              "line": "                throw Exception(\"missing ptr cache for region `${seg.region}`\")"
            },
            {
              "lineno": 144,
              "line": "            }"
            },
            {
              "lineno": 145,
              "line": "            let dataLen = seg.region.size"
            },
            {
              "lineno": 146,
              "line": "            if (dataLen == 0) {"
            },
            {
              "lineno": 147,
              "line": "                throw Exception(\"empty region info for segment '${seg}'\")"
            },
            {
              "lineno": 148,
              "line": "            }"
            },
            {
              "lineno": 149,
              "line": "            let dataPtr = this.regionPool[seg.region]"
            },
            {
              "lineno": 150,
              "line": "            let segList = seg.split()"
            },
            {
              "lineno": 151,
              "line": "            for (s in segList) {"
            },
            {
              "lineno": 152,
              "line": "                let pos = try {"
            },
            {
              "lineno": 153,
              "line": "                    this.dstHandle.seek(Current(0))"
            },
            {
              "lineno": 154,
              "line": "                } catch (e: Exception) {"
            },
            {
              "lineno": 155,
              "line": "                    throw Exception(\"seek to segment index block: ${e.toString()}\")"
            },
            {
              "lineno": 156,
              "line": "                }"
            },
            {
              "lineno": 157,
              "line": "                littleEndianPutUInt32(indexBuff[0..4], s.startIP)"
            },
            {
              "lineno": 158,
              "line": "                littleEndianPutUInt32(indexBuff[4..8], s.endIP)"
            },
            {
              "lineno": 159,
              "line": "                littleEndianPutUInt16(indexBuff[8..10], UInt16(dataLen))"
            },
            {
              "lineno": 160,
              "line": "                littleEndianPutUInt32(indexBuff[10..14], dataPtr)"
            },
            {
              "lineno": 161,
              "line": "                try {"
            },
            {
              "lineno": 162,
              "line": "                    this.dstHandle.write(indexBuff)"
            },
            {
              "lineno": 163,
              "line": "                } catch (e: Exception) {"
            },
            {
              "lineno": 164,
              "line": "                    throw Exception(\"write segment index for '${s}': ${e.toString()}\")"
            },
            {
              "lineno": 165,
              "line": "                }"
            },
            {
              "lineno": 166,
              "line": "                this.setVectorIndex(s.startIP, UInt32(pos))"
            },
            {
              "lineno": 167,
              "line": "                counter++"
            },
            {
              "lineno": 168,
              "line": "                if (startIndexPtr == -1) {"
            },
            {
              "lineno": 169,
              "line": "                    startIndexPtr = pos"
            },
            {
              "lineno": 170,
              "line": "                }"
            },
            {
              "lineno": 171,
              "line": "                endIndexPtr = pos"
            },
            {
              "lineno": 172,
              "line": "            }"
            },
            {
              "lineno": 173,
              "line": "        }"
            },
            {
              "lineno": 174,
              "line": "        try {"
            },
            {
              "lineno": 175,
              "line": "            this.dstHandle.seek(Begin(HeaderInfoLength))"
            },
            {
              "lineno": 176,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 177,
              "line": "            throw Exception(\"seek vector index first ptr: ${e.toString()}\")"
            },
            {
              "lineno": 178,
              "line": "        }"
            },
            {
              "lineno": 179,
              "line": "        try {"
            },
            {
              "lineno": 180,
              "line": "            this.dstHandle.write(this.vectorIndex)"
            },
            {
              "lineno": 181,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 182,
              "line": "            throw Exception(\"write vector index: ${e.toString()}\")"
            },
            {
              "lineno": 183,
              "line": "        }"
            },
            {
              "lineno": 184,
              "line": "        try {"
            },
            {
              "lineno": 185,
              "line": "            this.dstHandle.seek(Begin(8))"
            },
            {
              "lineno": 186,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 187,
              "line": "            throw Exception(\"seek segment index ptr: ${e.toString()}\")"
            },
            {
              "lineno": 188,
              "line": "        }"
            },
            {
              "lineno": 189,
              "line": "        littleEndianPutUInt32(indexBuff[0..4], UInt32(startIndexPtr))"
            },
            {
              "lineno": 190,
              "line": "        littleEndianPutUInt32(indexBuff[4..8], UInt32(endIndexPtr))"
            },
            {
              "lineno": 191,
              "line": "        try {"
            },
            {
              "lineno": 192,
              "line": "            this.dstHandle.write(indexBuff[0..8])"
            },
            {
              "lineno": 193,
              "line": "        } catch (e: Exception) {"
            },
            {
              "lineno": 194,
              "line": "            throw Exception(\"write segment index ptr: ${e.toString()}\")"
            },
            {
              "lineno": 195,
              "line": "        }"
            },
            {
              "lineno": 196,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "public func start() {\n    this.loadSegments()\nif (this.segments.size == 0) {\n    throw Exception(\"empty segment list\")\n}",
              "successors": [
                {
                  "id": 3,
                  "label": "try {\n    this.dstHandle.seek(Begin(HeaderInfoLength + VectorIndexLength))",
                  "successors": [
                    {
                      "id": 4,
                      "label": "catch (e: Exception) {\n    throw Exception(\"seek to data first ptr: ${e.toString()}\")",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "for (seg in this.segments) {\n    if (this.regionPool.contains(seg.region)) {\n        continue",
                      "successors": [
                        {
                          "id": 6,
                          "label": "let region = seg.region.toArray()\nif (region.size > 0xFFFF) {\n    throw Exception(\"too long region info `${seg.region}`: should be less than ${0xFFFF} bytes\")\nlet pos = try {\n    this.dstHandle.seek(Current(0))",
                          "successors": [
                            {
                              "id": 8,
                              "label": "catch (e: Exception) {\n    throw Exception(\"seek to current ptr: ${e.toString()}\")",
                              "successors": []
                            },
                            {
                              "id": 9,
                              "label": "try {\n    this.dstHandle.write(region)",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "catch (e: Exception) {\n    throw Exception(\"write region '${seg.region}': ${e.toString()}\")",
                                  "successors": []
                                },
                                {
                                  "id": 11,
                                  "label": "this.regionPool[seg.region] = UInt32(pos)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "end",
          "type": "function",
          "start_line": 197,
          "end_line": 200,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 197,
              "line": "    public func end() {"
            },
            {
              "lineno": 198,
              "line": "        this.dstHandle.close()"
            },
            {
              "lineno": 199,
              "line": "        this.srcHandle.close()"
            },
            {
              "lineno": 200,
              "line": "    }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    public func end() {\n        this.dstHandle.close()\n        this.srcHandle.close()",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 46,
          "line": "public class Maker {"
        },
        {
          "lineno": 47,
          "line": "    let srcHandle: File"
        },
        {
          "lineno": 48,
          "line": "    let dstHandle: File"
        },
        {
          "lineno": 49,
          "line": "    let indexPolicy: IndexPolicy"
        },
        {
          "lineno": 50,
          "line": "    var segments: Array<Segment> = []"
        },
        {
          "lineno": 51,
          "line": "    let regionPool: HashMap<String, UInt32> = HashMap<String, UInt32>()"
        },
        {
          "lineno": 52,
          "line": "    let vectorIndex: Array<UInt8> = Array<UInt8>(VectorIndexLength, item: 0)"
        },
        {
          "lineno": 53,
          "line": "    let header: Header"
        },
        {
          "lineno": 201,
          "line": "}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "public class Maker {\n    let srcHandle: File\n    let dstHandle: File\n    let indexPolicy: IndexPolicy\n    var segments: Array<Segment> = []\n    let regionPool: HashMap<String, UInt32> = HashMap<String, UInt32>()\n    let vectorIndex: Array<UInt8> = Array<UInt8>(VectorIndexLength, item: 0)\n    let header: Header",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "package maker"
    },
    {
      "lineno": 2,
      "line": "// ----"
    },
    {
      "lineno": 3,
      "line": "// ip2region database v2.0 structure"
    },
    {
      "lineno": 4,
      "line": "//"
    },
    {
      "lineno": 5,
      "line": "// +----------------+-------------------+---------------+--------------+"
    },
    {
      "lineno": 6,
      "line": "// | header space   | speed up index    |  data payload | block index  |"
    },
    {
      "lineno": 7,
      "line": "// +----------------+-------------------+---------------+--------------+"
    },
    {
      "lineno": 8,
      "line": "// | 256 bytes      | 512 KiB (fixed)   | dynamic size  | dynamic size |"
    },
    {
      "lineno": 9,
      "line": "// +----------------+-------------------+---------------+--------------+"
    },
    {
      "lineno": 10,
      "line": "//"
    },
    {
      "lineno": 11,
      "line": "// 1. padding space : for header info like block index ptr, version, release date eg ... or any other temporary needs."
    },
    {
      "lineno": 12,
      "line": "// -- 2bytes: version number, different version means structure update, it fixed to 2 for now"
    },
    {
      "lineno": 13,
      "line": "// -- 2bytes: index algorithm code."
    },
    {
      "lineno": 14,
      "line": "// -- 4bytes: generate unix timestamp (version)"
    },
    {
      "lineno": 15,
      "line": "// -- 4bytes: index block start ptr"
    },
    {
      "lineno": 16,
      "line": "// -- 4bytes: index block end ptr"
    },
    {
      "lineno": 17,
      "line": "//"
    },
    {
      "lineno": 18,
      "line": "//"
    },
    {
      "lineno": 19,
      "line": "// 2. data block : region or whatever data info."
    },
    {
      "lineno": 20,
      "line": "// 3. segment index block : binary index block."
    },
    {
      "lineno": 21,
      "line": "// 4. vector index block  : fixed index info for block index search speed up."
    },
    {
      "lineno": 22,
      "line": "// space structure table:"
    },
    {
      "lineno": 23,
      "line": "// -- 0   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block"
    },
    {
      "lineno": 24,
      "line": "// -- 1   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block"
    },
    {
      "lineno": 25,
      "line": "// -- 2   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block"
    },
    {
      "lineno": 26,
      "line": "// -- ..."
    },
    {
      "lineno": 27,
      "line": "// -- 255 -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block"
    },
    {
      "lineno": 28,
      "line": "//"
    },
    {
      "lineno": 29,
      "line": "//"
    },
    {
      "lineno": 30,
      "line": "// super block structure:"
    },
    {
      "lineno": 31,
      "line": "// +-----------------------+----------------------+"
    },
    {
      "lineno": 32,
      "line": "// | first index block ptr | last index block ptr |"
    },
    {
      "lineno": 33,
      "line": "// +-----------------------+----------------------+"
    },
    {
      "lineno": 34,
      "line": "//"
    },
    {
      "lineno": 35,
      "line": "// data entry structure:"
    },
    {
      "lineno": 36,
      "line": "// +--------------------+-----------------------+"
    },
    {
      "lineno": 37,
      "line": "// | 2bytes (for desc)\t| dynamic length        |"
    },
    {
      "lineno": 38,
      "line": "// +--------------------+-----------------------+"
    },
    {
      "lineno": 39,
      "line": "//  data length   whatever in bytes"
    },
    {
      "lineno": 40,
      "line": "//"
    },
    {
      "lineno": 41,
      "line": "// index entry structure"
    },
    {
      "lineno": 42,
      "line": "// +------------+-----------+---------------+------------+"
    },
    {
      "lineno": 43,
      "line": "// | 4bytes     | 4bytes    | 2bytes        | 4 bytes    |"
    },
    {
      "lineno": 44,
      "line": "// +------------+-----------+---------------+------------+"
    },
    {
      "lineno": 45,
      "line": "//  start ip \t  end ip\t  data length     data ptr"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "package maker\n// ----\n// ip2region database v2.0 structure\n//\n// +----------------+-------------------+---------------+--------------+\n// | header space   | speed up index    |  data payload | block index  |\n// +----------------+-------------------+---------------+--------------+\n// | 256 bytes      | 512 KiB (fixed)   | dynamic size  | dynamic size |\n// +----------------+-------------------+---------------+--------------+\n//\n// 1. padding space : for header info like block index ptr, version, release date eg ... or any other temporary needs.\n// -- 2bytes: version number, different version means structure update, it fixed to 2 for now\n// -- 2bytes: index algorithm code.\n// -- 4bytes: generate unix timestamp (version)\n// -- 4bytes: index block start ptr\n// -- 4bytes: index block end ptr\n//\n//\n// 2. data block : region or whatever data info.\n// 3. segment index block : binary index block.\n// 4. vector index block  : fixed index info for block index search speed up.\n// space structure table:\n// -- 0   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n// -- 1   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n// -- 2   -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n// -- ...\n// -- 255 -> | 1rt super block | 2nd super block | 3rd super block | ... | 255th super block\n//\n//\n// super block structure:\n// +-----------------------+----------------------+\n// | first index block ptr | last index block ptr |\n// +-----------------------+----------------------+\n//\n// data entry structure:\n// +--------------------+-----------------------+\n// | 2bytes (for desc)\t| dynamic length        |\n// +--------------------+-----------------------+\n//  data length   whatever in bytes\n//\n// index entry structure\n// +------------+-----------+---------------+------------+\n// | 4bytes     | 4bytes    | 2bytes        | 4 bytes    |\n// +------------+-----------+---------------+------------+\n//  start ip \t  end ip\t  data length     data ptr",
      "successors": []
    }
  ]
}