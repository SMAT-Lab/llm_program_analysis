{
  "name": "File",
  "nodes": [
    {
      "id": 1,
      "type": "BasicBlock",
      "statements": [
        "from enum import Enum",
        "from typing import Any, Dict, Literal, Optional"
      ],
      "children": [
        {
          "name": "IdeogramModelName",
          "type": "Class",
          "nodes": [
            {
              "id": 7,
              "type": "BasicBlock",
              "statements": [
                "class IdeogramModelName(str, Enum):",
                "V2 = \"V_2\"",
                "V1 = \"V_1\"",
                "V1_TURBO = \"V_1_TURBO\"",
                "V2_TURBO = \"V_2_TURBO\""
              ],
              "children": []
            }
          ],
          "edges": [],
          "children": []
        },
        {
          "name": "MagicPromptOption",
          "type": "Class",
          "nodes": [
            {
              "id": 8,
              "type": "BasicBlock",
              "statements": [
                "class MagicPromptOption(str, Enum):",
                "AUTO = \"AUTO\"",
                "ON = \"ON\"",
                "OFF = \"OFF\""
              ],
              "children": []
            }
          ],
          "edges": [],
          "children": []
        },
        {
          "name": "StyleType",
          "type": "Class",
          "nodes": [
            {
              "id": 9,
              "type": "BasicBlock",
              "statements": [
                "class StyleType(str, Enum):",
                "AUTO = \"AUTO\"",
                "GENERAL = \"GENERAL\"",
                "REALISTIC = \"REALISTIC\"",
                "DESIGN = \"DESIGN\"",
                "RENDER_3D = \"RENDER_3D\"",
                "ANIME = \"ANIME\""
              ],
              "children": []
            }
          ],
          "edges": [],
          "children": []
        },
        {
          "name": "ColorPalettePreset",
          "type": "Class",
          "nodes": [
            {
              "id": 10,
              "type": "BasicBlock",
              "statements": [
                "class ColorPalettePreset(str, Enum):",
                "NONE = \"NONE\"",
                "EMBER = \"EMBER\"",
                "FRESH = \"FRESH\"",
                "JUNGLE = \"JUNGLE\"",
                "MAGIC = \"MAGIC\"",
                "MELON = \"MELON\"",
                "MOSAIC = \"MOSAIC\"",
                "PASTEL = \"PASTEL\"",
                "ULTRAMARINE = \"ULTRAMARINE\""
              ],
              "children": []
            }
          ],
          "edges": [],
          "children": []
        },
        {
          "name": "AspectRatio",
          "type": "Class",
          "nodes": [
            {
              "id": 11,
              "type": "BasicBlock",
              "statements": [
                "class AspectRatio(str, Enum):",
                "ASPECT_10_16 = \"ASPECT_10_16\"",
                "ASPECT_16_10 = \"ASPECT_16_10\"",
                "ASPECT_9_16 = \"ASPECT_9_16\"",
                "ASPECT_16_9 = \"ASPECT_16_9\"",
                "ASPECT_3_2 = \"ASPECT_3_2\"",
                "ASPECT_2_3 = \"ASPECT_2_3\"",
                "ASPECT_4_3 = \"ASPECT_4_3\"",
                "ASPECT_3_4 = \"ASPECT_3_4\"",
                "ASPECT_1_1 = \"ASPECT_1_1\"",
                "ASPECT_1_3 = \"ASPECT_1_3\"",
                "ASPECT_3_1 = \"ASPECT_3_1\""
              ],
              "children": []
            }
          ],
          "edges": [],
          "children": []
        },
        {
          "name": "UpscaleOption",
          "type": "Class",
          "nodes": [
            {
              "id": 12,
              "type": "BasicBlock",
              "statements": [
                "class UpscaleOption(str, Enum):",
                "AI_UPSCALE = \"AI Upscale\"",
                "NO_UPSCALE = \"No Upscale\""
              ],
              "children": []
            }
          ],
          "edges": [],
          "children": []
        },
        {
          "name": "IdeogramModelBlock",
          "type": "Class",
          "nodes": [
            {
              "id": 13,
              "type": "BasicBlock",
              "statements": [
                "class IdeogramModelBlock(Block):"
              ],
              "children": []
            }
          ],
          "edges": [],
          "children": [
            {
              "name": "IdeogramModelBlock.Input",
              "type": "Class",
              "nodes": [
                {
                  "id": 14,
                  "type": "BasicBlock",
                  "statements": [
                    "class Input(BlockSchema):"
                  ],
                  "children": []
                },
                {
                  "id": 15,
                  "type": "BasicBlock",
                  "statements": [
                    "credentials: CredentialsMetaInput[",
                    "Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]",
                    "] = CredentialsField(",
                    "description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 16,
                  "type": "BasicBlock",
                  "statements": [
                    "prompt: str = SchemaField(",
                    "description=\"Text prompt for image generation\",",
                    "placeholder=\"e.g., 'A futuristic cityscape at sunset'\",",
                    "title=\"Prompt\",",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 17,
                  "type": "BasicBlock",
                  "statements": [
                    "ideogram_model_name: IdeogramModelName = SchemaField(",
                    "description=\"The name of the Image Generation Model, e.g., V_2\",",
                    "default=IdeogramModelName.V2,",
                    "title=\"Image Generation Model\",",
                    "advanced=False,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 18,
                  "type": "BasicBlock",
                  "statements": [
                    "aspect_ratio: AspectRatio = SchemaField(",
                    "description=\"Aspect ratio for the generated image\",",
                    "default=AspectRatio.ASPECT_1_1,",
                    "title=\"Aspect Ratio\",",
                    "advanced=False,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 19,
                  "type": "BasicBlock",
                  "statements": [
                    "upscale: UpscaleOption = SchemaField(",
                    "description=\"Upscale the generated image\",",
                    "default=UpscaleOption.NO_UPSCALE,",
                    "title=\"Upscale Image\",",
                    "advanced=False,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 20,
                  "type": "BasicBlock",
                  "statements": [
                    "magic_prompt_option: MagicPromptOption = SchemaField(",
                    "description=\"Whether to use MagicPrompt for enhancing the request\",",
                    "default=MagicPromptOption.AUTO,",
                    "title=\"Magic Prompt Option\",",
                    "advanced=True,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 21,
                  "type": "BasicBlock",
                  "statements": [
                    "seed: Optional[int] = SchemaField(",
                    "description=\"Random seed. Set for reproducible generation\",",
                    "default=None,",
                    "title=\"Seed\",",
                    "advanced=True,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 22,
                  "type": "BasicBlock",
                  "statements": [
                    "style_type: StyleType = SchemaField(",
                    "description=\"Style type to apply, applicable for V_2 and above\",",
                    "default=StyleType.AUTO,",
                    "title=\"Style Type\",",
                    "advanced=True,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 23,
                  "type": "BasicBlock",
                  "statements": [
                    "negative_prompt: Optional[str] = SchemaField(",
                    "description=\"Description of what to exclude from the image\",",
                    "default=None,",
                    "title=\"Negative Prompt\",",
                    "advanced=True,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 24,
                  "type": "BasicBlock",
                  "statements": [
                    "color_palette_name: ColorPalettePreset = SchemaField(",
                    "description=\"Color palette preset name, choose 'None' to skip\",",
                    "default=ColorPalettePreset.NONE,",
                    "title=\"Color Palette Preset\",",
                    "advanced=True,",
                    ")"
                  ],
                  "children": []
                }
              ],
              "edges": [
                {
                  "from": 14,
                  "to": 15
                },
                {
                  "from": 15,
                  "to": 16
                },
                {
                  "from": 16,
                  "to": 17
                },
                {
                  "from": 17,
                  "to": 18
                },
                {
                  "from": 18,
                  "to": 19
                },
                {
                  "from": 19,
                  "to": 20
                },
                {
                  "from": 20,
                  "to": 21
                },
                {
                  "from": 21,
                  "to": 22
                },
                {
                  "from": 22,
                  "to": 23
                },
                {
                  "from": 23,
                  "to": 24
                }
              ],
              "children": []
            },
            {
              "name": "IdeogramModelBlock.Output",
              "type": "Class",
              "nodes": [
                {
                  "id": 25,
                  "type": "BasicBlock",
                  "statements": [
                    "class Output(BlockSchema):",
                    "result: str = SchemaField(description=\"Generated image URL\")",
                    "error: str = SchemaField(description=\"Error message if the model run failed\")"
                  ],
                  "children": []
                }
              ],
              "edges": [],
              "children": []
            },
            {
              "name": [
                13,
                "__init__"
              ],
              "type": "Function",
              "nodes": [
                {
                  "id": 26,
                  "type": "BasicBlock",
                  "statements": [
                    "def __init__(self):",
                    "super().__init__(",
                    "id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",",
                    "description=\"This block runs Ideogram models with both simple and advanced settings.\",",
                    "categories={BlockCategory.AI},",
                    "input_schema=IdeogramModelBlock.Input,",
                    "output_schema=IdeogramModelBlock.Output,",
                    "test_input={",
                    "\"ideogram_model_name\": IdeogramModelName.V2,",
                    "\"prompt\": \"A futuristic cityscape at sunset\",",
                    "\"aspect_ratio\": AspectRatio.ASPECT_1_1,",
                    "\"upscale\": UpscaleOption.NO_UPSCALE,",
                    "\"magic_prompt_option\": MagicPromptOption.AUTO,",
                    "\"seed\": None,",
                    "\"style_type\": StyleType.AUTO,",
                    "\"negative_prompt\": None,",
                    "\"color_palette_name\": ColorPalettePreset.NONE,",
                    "\"credentials\": TEST_CREDENTIALS_INPUT,",
                    "},",
                    "test_output=[",
                    "(",
                    "\"result\",",
                    "\"https://ideogram.ai/api/images/test-generated-image-url.png\",",
                    "),",
                    "],",
                    "test_mock={",
                    "\"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",",
                    "\"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",",
                    "},",
                    "test_credentials=TEST_CREDENTIALS,",
                    ")"
                  ],
                  "children": []
                }
              ],
              "edges": [],
              "children": []
            },
            {
              "name": [
                13,
                "run"
              ],
              "type": "Function",
              "nodes": [
                {
                  "id": 27,
                  "type": "BasicBlock",
                  "statements": [
                    "def run(",
                    "self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs",
                    ") -> BlockOutput:"
                  ],
                  "children": []
                },
                {
                  "id": 28,
                  "type": "BasicBlock",
                  "statements": [
                    "seed = input_data.seed"
                  ],
                  "children": []
                },
                {
                  "id": 29,
                  "type": "BasicBlock",
                  "statements": [
                    "# Step 1: Generate the image",
                    "result = self.run_model(",
                    "api_key=credentials.api_key,",
                    "model_name=input_data.ideogram_model_name.value,",
                    "prompt=input_data.prompt,",
                    "seed=seed,",
                    "aspect_ratio=input_data.aspect_ratio.value,",
                    "magic_prompt_option=input_data.magic_prompt_option.value,",
                    "style_type=input_data.style_type.value,",
                    "negative_prompt=input_data.negative_prompt,",
                    "color_palette_name=input_data.color_palette_name.value,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 30,
                  "type": "BasicBlock",
                  "statements": [
                    "# Step 2: Upscale the image if requested",
                    "if input_data.upscale == UpscaleOption.AI_UPSCALE:"
                  ],
                  "children": []
                },
                {
                  "id": 31,
                  "type": "BasicBlock",
                  "statements": [
                    "result = self.upscale_image(",
                    "api_key=credentials.api_key,",
                    "image_url=result,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 32,
                  "type": "BasicBlock",
                  "statements": [
                    "yield \"result\", result"
                  ],
                  "children": []
                }
              ],
              "edges": [
                {
                  "from": 27,
                  "to": 28
                },
                {
                  "from": 28,
                  "to": 29
                },
                {
                  "from": 29,
                  "to": 30
                },
                {
                  "from": 30,
                  "to": 31
                },
                {
                  "from": 30,
                  "to": 32
                },
                {
                  "from": 31,
                  "to": 32
                }
              ],
              "children": []
            },
            {
              "name": [
                13,
                "run_model"
              ],
              "type": "Function",
              "nodes": [
                {
                  "id": 33,
                  "type": "BasicBlock",
                  "statements": [
                    "def run_model(",
                    "self,",
                    "api_key: SecretStr,",
                    "model_name: str,",
                    "prompt: str,",
                    "seed: Optional[int],",
                    "aspect_ratio: str,",
                    "magic_prompt_option: str,",
                    "style_type: str,",
                    "negative_prompt: Optional[str],",
                    "color_palette_name: str,",
                    "):"
                  ],
                  "children": []
                },
                {
                  "id": 34,
                  "type": "BasicBlock",
                  "statements": [
                    "url = \"https://api.ideogram.ai/generate\"",
                    "headers = {",
                    "\"Api-Key\": api_key.get_secret_value(),",
                    "\"Content-Type\": \"application/json\",",
                    "}"
                  ],
                  "children": []
                },
                {
                  "id": 35,
                  "type": "BasicBlock",
                  "statements": [
                    "data: Dict[str, Any] = {",
                    "\"image_request\": {",
                    "\"prompt\": prompt,",
                    "\"model\": model_name,",
                    "\"aspect_ratio\": aspect_ratio,",
                    "\"magic_prompt_option\": magic_prompt_option,",
                    "\"style_type\": style_type,",
                    "}",
                    "}"
                  ],
                  "children": []
                },
                {
                  "id": 36,
                  "type": "BasicBlock",
                  "statements": [
                    "if seed is not None:",
                    "data[\"image_request\"][\"seed\"] = seed"
                  ],
                  "children": []
                },
                {
                  "id": 37,
                  "type": "BasicBlock",
                  "statements": [
                    "if negative_prompt:",
                    "data[\"image_request\"][\"negative_prompt\"] = negative_prompt"
                  ],
                  "children": []
                },
                {
                  "id": 38,
                  "type": "BasicBlock",
                  "statements": [
                    "if color_palette_name != \"NONE\":",
                    "data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}"
                  ],
                  "children": []
                },
                {
                  "id": 39,
                  "type": "BasicBlock",
                  "statements": [
                    "try:",
                    "response = requests.post(url, json=data, headers=headers)",
                    "return response.json()[\"data\"][0][\"url\"]"
                  ],
                  "children": []
                },
                {
                  "id": 40,
                  "type": "BasicBlock",
                  "statements": [
                    "except RequestException as e:",
                    "raise Exception(f\"Failed to fetch image: {str(e)}\")"
                  ],
                  "children": []
                }
              ],
              "edges": [
                {
                  "from": 33,
                  "to": 34
                },
                {
                  "from": 34,
                  "to": 35
                },
                {
                  "from": 35,
                  "to": 36
                },
                {
                  "from": 35,
                  "to": 37
                },
                {
                  "from": 35,
                  "to": 38
                },
                {
                  "from": 35,
                  "to": 39
                },
                {
                  "from": 36,
                  "to": 37
                },
                {
                  "from": 36,
                  "to": 38
                },
                {
                  "from": 36,
                  "to": 39
                },
                {
                  "from": 37,
                  "to": 38
                },
                {
                  "from": 37,
                  "to": 39
                },
                {
                  "from": 38,
                  "to": 39
                },
                {
                  "from": 39,
                  "to": 40
                }
              ],
              "children": []
            },
            {
              "name": [
                13,
                "upscale_image"
              ],
              "type": "Function",
              "nodes": [
                {
                  "id": 41,
                  "type": "BasicBlock",
                  "statements": [
                    "def upscale_image(self, api_key: SecretStr, image_url: str):",
                    "url = \"https://api.ideogram.ai/upscale\"",
                    "headers = {",
                    "\"Api-Key\": api_key.get_secret_value(),",
                    "}"
                  ],
                  "children": []
                },
                {
                  "id": 42,
                  "type": "BasicBlock",
                  "statements": [
                    "try:",
                    "# Step 1: Download the image from the provided URL",
                    "image_response = requests.get(image_url)"
                  ],
                  "children": []
                },
                {
                  "id": 43,
                  "type": "BasicBlock",
                  "statements": [
                    "# Step 2: Send the downloaded image to the upscale API",
                    "files = {",
                    "\"image_file\": (\"image.png\", image_response.content, \"image/png\"),",
                    "}"
                  ],
                  "children": []
                },
                {
                  "id": 44,
                  "type": "BasicBlock",
                  "statements": [
                    "response = requests.post(",
                    "url,",
                    "headers=headers,",
                    "data={",
                    "\"image_request\": \"{}\",  # Empty JSON object",
                    "},",
                    "files=files,",
                    ")"
                  ],
                  "children": []
                },
                {
                  "id": 45,
                  "type": "BasicBlock",
                  "statements": [
                    "return response.json()[\"data\"][0][\"url\"]"
                  ],
                  "children": []
                },
                {
                  "id": 46,
                  "type": "BasicBlock",
                  "statements": [
                    "except RequestException as e:",
                    "raise Exception(f\"Failed to upscale image: {str(e)}\")"
                  ],
                  "children": []
                }
              ],
              "edges": [
                {
                  "from": 41,
                  "to": 42
                },
                {
                  "from": 42,
                  "to": 43
                },
                {
                  "from": 43,
                  "to": 44
                },
                {
                  "from": 44,
                  "to": 45
                }
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "id": 2,
      "type": "BasicBlock",
      "statements": [
        "from pydantic import SecretStr",
        "from requests.exceptions import RequestException"
      ],
      "children": []
    },
    {
      "id": 3,
      "type": "BasicBlock",
      "statements": [
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import (",
        "APIKeyCredentials,",
        "CredentialsField,",
        "CredentialsMetaInput,",
        "SchemaField,",
        ")"
      ],
      "children": []
    },
    {
      "id": 4,
      "type": "BasicBlock",
      "statements": [
        "from backend.integrations.providers import ProviderName",
        "from backend.util.request import requests"
      ],
      "children": []
    },
    {
      "id": 5,
      "type": "BasicBlock",
      "statements": [
        "TEST_CREDENTIALS = APIKeyCredentials(",
        "id=\"01234567-89ab-cdef-0123-456789abcdef\",",
        "provider=\"ideogram\",",
        "api_key=SecretStr(\"mock-ideogram-api-key\"),",
        "title=\"Mock Ideogram API key\",",
        "expires_at=None,",
        ")"
      ],
      "children": []
    },
    {
      "id": 6,
      "type": "BasicBlock",
      "statements": [
        "TEST_CREDENTIALS_INPUT = {",
        "\"provider\": TEST_CREDENTIALS.provider,",
        "\"id\": TEST_CREDENTIALS.id,",
        "\"type\": TEST_CREDENTIALS.type,",
        "\"title\": TEST_CREDENTIALS.type,",
        "}"
      ],
      "children": []
    }
  ],
  "edges": [
    {
      "from": 1,
      "to": 2
    },
    {
      "from": 2,
      "to": 3
    },
    {
      "from": 3,
      "to": 4
    },
    {
      "from": 4,
      "to": 5
    },
    {
      "from": 5,
      "to": 6
    }
  ]
}